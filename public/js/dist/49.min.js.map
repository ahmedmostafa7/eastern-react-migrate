{"version":3,"file":"49.min.js","sources":["webpack:///./src/app/components/inputs/fields/selectedParcels/Component/style.css","webpack:///./src/app/components/inputs/fields/selectedParcels/Component/mapping.js","webpack:///./src/app/components/inputs/fields/selectedParcels/Component/plan_approval_parcels.js","webpack:///./src/app/components/inputs/fields/selectedParcels/Component/style.css?6b59"],"sourcesContent":["exports = module.exports = require(\"../../../../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".titleSelectedParcel {\\r\\n  background: #00726f;\\r\\n  color: white;\\r\\n  text-align: right;\\r\\n  margin-top: 0px !important;\\r\\n  padding: 5px;\\r\\n  text-align: center;\\r\\n  font-size: 20px !important;\\r\\n}\\r\\n\\r\\n.add-gis {\\r\\n  background: #00726f !important;\\r\\n  float: none !important;\\r\\n  margin: 0 !important;\\r\\n  color: #fff !important;\\r\\n}\", \"\"]);\n\n","import { formValueSelector } from \"redux-form\";\r\nimport { get } from \"lodash\";\r\nexport const mapStateToProps = (\r\n  {\r\n    mapReducer,\r\n    wizard: {\r\n      steps,\r\n      mainObject,\r\n      currentStep,\r\n      treeNode,\r\n      currentModule,\r\n      comments,\r\n      wizardSettings,\r\n    },\r\n    selectors = {},\r\n    ...state\r\n  },\r\n  { moduleName, path, value_key, ...props }\r\n) => {\r\n  return {\r\n    mainObject,\r\n    selectedRequestType: get(selectors[moduleName], \"selectedRequestType\", {}),\r\n    domainList: get(selectors[moduleName], \"domainList\", {}),\r\n    currentStep,\r\n    steps,\r\n    currentModule,\r\n  };\r\n};\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getValues(name = \"stepForm\") {\r\n      return formValueSelector(\"name\");\r\n    },\r\n    setSelectorEnability: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.disabled`,\r\n        data,\r\n      });\r\n    },\r\n    removeSelector: (moduleName) => {\r\n      dispatch({\r\n        type: \"removeSelectors\",\r\n        path: `${moduleName}`,\r\n      });\r\n    },\r\n    setSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}`,\r\n        data,\r\n      });\r\n    },\r\n    // setSelectedParcels: (path, data) => dispatch({type: 'setWizard', path: `mainObject.waseka_data.selectedParcels`, data})\r\n  };\r\n};\r\n","import React, { Component, useState } from \"react\";\r\n//import { mapStateToProps } from \"./mapping\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"./mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\nimport { Select, Button, Form, message } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport applyFilters from \"main_helpers/functions/filters\";\r\nimport store from \"reducers\";\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n} from \"lodash\";\r\nimport { generateUUID, localizeNumber } from \"../../identify/Component/common/common_func\";\r\nimport \"./style.css\";\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"lands\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\nclass planParcelsComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.parcelDataFields = {\r\n      north_length: {\r\n        label: \"طول الحد الشمالي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الشمالي (م)\",\r\n        field: \"inputNumber\",\r\n        name: \"north_length\",\r\n        required: true\r\n      },\r\n      north_desc: {\r\n        label: \"وصف الحد الشمالي\",\r\n        placeholder: \"من فضلك ادخل وصف الحد الشمالي\",\r\n        type: \"text\",\r\n        name: \"north_desc\",\r\n        maxLength: 200,\r\n        required: true,\r\n      },\r\n      south_length: {\r\n        label: \"طول الحد الجنوبي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الجنوبي (م)\",\r\n        field: \"inputNumber\",\r\n        name: \"south_length\",\r\n        required: true,\r\n      },\r\n      south_desc: {\r\n        label: \"وصف الحد الجنوبي\",\r\n        placeholder: \"من فضلك ادخل وصف الحد الجنوبي\",\r\n        type: \"text\",\r\n        name: \"south_desc\",\r\n        maxLength: 200,\r\n        required: true,\r\n      },\r\n      east_length: {\r\n        label: \"طول الحد الشرقي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الشرقي (م)\",\r\n        field: \"inputNumber\",\r\n        name: \"east_length\",\r\n        required: true,\r\n      },\r\n      east_desc: {\r\n        label: \"وصف الحد الشرقي\",\r\n        placeholder: \"من فضلك ادخل وصف الحد الشرقي\",\r\n        type: \"text\",\r\n        name: \"east_desc\",\r\n        maxLength: 200,\r\n        required: true,\r\n      },\r\n      west_length: {\r\n        label: \"طول الحد الغربي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الغربي (م)\",\r\n        field: \"inputNumber\",\r\n        name: \"west_length\",\r\n        required: true,\r\n      },\r\n      west_desc: {\r\n        label: \"وصف الحد الغربي\",\r\n        placeholder: \"من فضلك ادخل وصف الحد الغربي\",\r\n        type: \"text\",\r\n        name: \"west_desc\",\r\n        maxLength: 200,\r\n        required: true,\r\n      },\r\n    };\r\n\r\n    if (\r\n      props.mainObject &&\r\n      props.mainObject.landData &&\r\n      props.mainObject.landData.landData &&\r\n      props.mainObject.landData.landData.lands\r\n    ) {\r\n      const {\r\n        mainObject: {\r\n          landData: {\r\n            landData: { lands },\r\n          },\r\n        },\r\n      } = props;\r\n\r\n      lands.parcels.forEach((parcel) => {\r\n        if (\r\n          parcel.attributes.PARCEL_AREA &&\r\n          !parcel.attributes.NEW_PARCEL_AREA\r\n        ) {\r\n          parcel.attributes.NEW_PARCEL_AREA = parcel.attributes.PARCEL_AREA;\r\n        }\r\n      });\r\n\r\n      this.selectedParcels = JSON.parse(JSON.stringify(lands.parcels || []));\r\n\r\n      this.state = {\r\n        selectedParcels: JSON.parse(JSON.stringify(lands.parcels || [])),\r\n        parcelData: JSON.parse(JSON.stringify(lands.parcelData || {})),\r\n      };\r\n    } else {\r\n      this.selectedParcels = [];\r\n      this.state = {\r\n        selectedParcels: [],\r\n        parcelData: {},\r\n      };\r\n    }\r\n  }\r\n\r\n  saveEdit = (PARCEL_SPATIAL_ID, name, i, isEditing) => {\r\n    let { input, onResetParcelDesc, values, setSelector, change } = this.props;\r\n    \r\n    change(\"landData.parcel_desc\", this[\"edit_\" + name + i]);\r\n    // setSelector(\"parcelDesc\", {\r\n    //   value: this[\"edit_\" + name + i]\r\n    // })\r\n    this.selectedParcels[i].attributes[name] = this[\"edit_\" + name + i];\r\n    this.props.input.onChange({\r\n      parcels: [...this.selectedParcels],\r\n      parcelData: { ...this.state.parcelData },\r\n    });\r\n    this.setState({\r\n      [name + \"_isEdit_\" + i]: isEditing,\r\n      selectedParcels: [...this.selectedParcels],\r\n      parcelData: this.state.parcelData,\r\n    });\r\n  };\r\n\r\n  myChangeHandler = (name, i, e, event) => {\r\n    this[\"edit_\" + name + i] = event.target.value;\r\n    this.selectedParcels[i].attributes[name] = this[\"edit_\" + name + i];\r\n    this.setState({\r\n      [name + \"_isEdit_\" + i]: true,\r\n      selectedParcels: [...this.selectedParcels],\r\n      parcelData: this.state.parcelData,\r\n    });\r\n  };\r\n\r\n  showEditBtn = (name, value) => {\r\n    if (name == \"USING_SYMBOL\") {\r\n      return value == null;\r\n    } else {\r\n      return [\"PARCEL_PLAN_NO\", \"NEW_PARCEL_AREA\"].indexOf(name) > -1;\r\n    }\r\n  };\r\n\r\n  enableEdit = (name, i) => {\r\n    this[\"edit_\" + name + i] = this.selectedParcels[i].attributes[name];\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  remove = (item) => {\r\n    this.selectedParcels.pop(item);\r\n    if (this.selectedParcels.length == 0) {\r\n      this.state.parcelData = {};\r\n      //this.props.action(this.props.values, this.props, this.state);\r\n    }\r\n    this.state.selectedParcels = [...this.selectedParcels];\r\n    this.props.input.onChange({\r\n      parcels: [...this.state.selectedParcels],\r\n      parcelData: { ...this.state.parcelData },\r\n    });\r\n    this.setState({\r\n      selectedParcels: [...this.selectedParcels],\r\n      parcelData: this.state.parcelData,\r\n    });\r\n  };\r\n\r\n  addParcel = (item) => {\r\n    const { input, onResetParcelDesc, values } = this.props;\r\n    var parcel_desc = get(values, \"parcel_desc\", \"\");\r\n    if (\r\n      !_.find(this.selectedParcels, function (d) {\r\n        return d.PARCEL_PLAN_NO == parcel_desc;\r\n      }) &&\r\n      parcel_desc\r\n    ) {\r\n      this.selectedParcels.push({\r\n        attributes: {\r\n          PARCEL_PLAN_NO: parcel_desc,\r\n          NEW_PARCEL_AREA: \"\",\r\n          PARCEL_SPATIAL_ID: generateUUID(),\r\n          MUNICIPALITY_NAME_Code: get(values, \"municipality_id\", \"\"),\r\n          PARCEL_AREA: \"\",\r\n        },\r\n      });\r\n      this.props.input.onChange({\r\n        parcels: JSON.parse(JSON.stringify([...this.selectedParcels])),\r\n        parcelData: JSON.parse(JSON.stringify({ ...this.state.parcelData })),\r\n      });\r\n      this.setState({\r\n        selectedParcels: [...this.selectedParcels],\r\n        parcelData: this.state.parcelData,\r\n      });\r\n    }\r\n  };\r\n\r\n  openPopup = (scope) => {\r\n    var fields = this.parcelDataFields;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...scope.state.parcelData },\r\n          ok(values) {\r\n            scope.props.input.onChange({\r\n              parcels: [...scope.state.selectedParcels],\r\n              parcelData: { ...values },\r\n            });\r\n            scope.setState({\r\n              selectedParcels: [...scope.selectedParcels],\r\n              parcelData: { ...values },\r\n            });\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { selectedParcels } = this.state;\r\n\r\n    const { parcel_fields, parcel_fields_headers, values, multiple } =\r\n      this.props;\r\n\r\n    var uploadedImage = get(values, \"image_uploader\", \"\");\r\n\r\n    return (\r\n      <div style={{ gridColumn: \"1/3\" }}>\r\n        <Button\r\n          className=\"add-gis\"\r\n          disabled={\r\n            !multiple ? !uploadedImage || selectedParcels.length > 0 : false\r\n          }\r\n          onClick={this.addParcel.bind(this)}\r\n        >\r\n          إضافة الأرض\r\n        </Button>\r\n        {selectedParcels && selectedParcels.length > 0 && (\r\n          <div>\r\n            <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n\r\n            <table className=\"table table-bordered\" style={{ marginTop: \"1%\" }}>\r\n              <thead>\r\n                <tr>\r\n                  {parcel_fields_headers.map((field, k) => {\r\n                    return <th>{field}</th>;\r\n                  })}\r\n                  <th> خيارات</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {selectedParcels.map((e, i) => {\r\n                  return (\r\n                    <tr key={i}>\r\n                      {parcel_fields.map((field, k) => {\r\n                        return (\r\n                          <td key={k}>\r\n                            <div>\r\n                              {!this.state[field + \"_isEdit_\" + i] ? (\r\n                                <span>\r\n                                  <span>{localizeNumber(e.attributes[field] || \"\")}</span>\r\n                                  {this.showEditBtn(\r\n                                    field,\r\n                                    e.attributes[field]\r\n                                  ) && (\r\n                                    <span>\r\n                                      <button\r\n                                        className=\"btn\"\r\n                                        style={{\r\n                                          marginRight: e.attributes[field]\r\n                                            ? \"20px\"\r\n                                            : \"0px\",\r\n                                        }}\r\n                                        onClick={this.enableEdit.bind(\r\n                                          this,\r\n                                          field,\r\n                                          i\r\n                                        )}\r\n                                      >\r\n                                        <i className=\"fas fa-edit\"></i>\r\n                                      </button>\r\n                                    </span>\r\n                                  )}\r\n                                </span>\r\n                              ) : (\r\n                                <span\r\n                                  style={{\r\n                                    display: \"grid\",\r\n                                    gridTemplateColumns: \"1fr auto\",\r\n                                  }}\r\n                                >\r\n                                  <input\r\n                                    key={i}\r\n                                    className=\"form-control\"\r\n                                    type={\r\n                                      field != \"PARCEL_PLAN_NO\"\r\n                                        ? \"number\"\r\n                                        : \"text\"\r\n                                    }\r\n                                    step=\"any\"\r\n                                    maxLength={200}\r\n                                    value={e.attributes[field]}\r\n                                    onChange={this.myChangeHandler.bind(\r\n                                      this,\r\n                                      field,\r\n                                      i,\r\n                                      e\r\n                                    )}\r\n                                  />\r\n                                  <button\r\n                                    className=\"btn\"\r\n                                    style={{ marginRight: \"20px\" }}\r\n                                    onClick={this.saveEdit.bind(\r\n                                      this,\r\n                                      e.attributes.PARCEL_SPATIAL_ID,\r\n                                      field,\r\n                                      i,\r\n                                      false\r\n                                    )}\r\n                                  >\r\n                                    <i className=\"fa fa-floppy-o\"></i>\r\n                                  </button>\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          </td>\r\n                        );\r\n                      })}\r\n\r\n                      {i === selectedParcels.length - 1 ? (\r\n                        <td>\r\n                          {this.props.currentModule.id != 108 && (<button\r\n                            className=\"btn follow\"\r\n                            style={{ margin: \"0px 5px\" }}\r\n                            onClick={() => {\r\n                              this.openPopup(this);\r\n                            }}\r\n                          >\r\n                            حدود و أبعاد الأرض حسب وثيقة الملكية\r\n                          </button>)}\r\n                          <button\r\n                            className=\" btn btn-danger \"\r\n                            onClick={this.remove.bind(this, e)}\r\n                          >\r\n                            حذف\r\n                          </button>\r\n                        </td>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(planParcelsComponent);\r\n","\nvar content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!./style.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!./style.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!./style.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACHA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAwGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkHA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AAAA;AAMA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAMA;AACA;AAAA;AAEA;AACA;AAAA;AAWA;AACA;AACA;AAGA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AAGA;AACA;AAAA;AAAA;AACA;AAMA;AAEA;AAAA;AAOA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAAA;AAUA;AAOA;AACA;AAEA;;;;;;;;;;;ACvYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}
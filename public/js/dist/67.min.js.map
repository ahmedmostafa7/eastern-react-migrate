{"version":3,"file":"67.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/IdentifyPublicLocationComponent/Helpers.js","webpack:///./src/app/components/inputs/fields/identify/Component/IdentifyPublicLocationComponent/index.js"],"sourcesContent":["\r\nimport { loadModules } from 'esri-loader';\r\nimport{mapUrl}from\"../mapviewer/config/map\"\r\n\r\nconst options = {\r\n    url: 'https://js.arcgis.com/3.13'\r\n};\r\n\r\nexport const selectDis=(e)=>{\r\nvar a=[];\r\n\r\ne.forEach(el => {\r\n    el.features.forEach(element=>{\r\n        if(!a.find((t=>t.attributes.PARCEL_SPATIAL_ID==element.attributes.PARCEL_SPATIAL_ID))){\r\n            a.push(element)\r\n        }\r\n    })\r\n});\r\nreturn a;\r\n}\r\n\r\nexport const DataQuery=(layerNum,QueryOptions,CallBack)=>{\r\n    loadModules([\"esri/symbols/SimpleLineSymbol\",\"esri/Color\",\"esri/layers/FeatureLayer\",\"esri/tasks/RelationshipQuery\",\"esri/tasks/QueryTask\",\"esri/tasks/query\",\"esri/request\",\"esri/geometry/Polygon\",\"esri/symbols/SimpleFillSymbol\",\"esri/graphic\"], options)\r\n    .then(([SimpleLineSymbol,Color,FeatureLayer,RQuery,QueryTask,Query,request,Polygon,SimpleFillSymbol,Graphic]) => {\r\n\r\n     var query = new Query()\r\n     var qt = new QueryTask(mapUrl+`/${layerNum}`)\r\n    QueryOptions.forEach(e=>{\r\n        query[e.name]=e.value\r\n    })\r\n     qt.execute(query,CallBack,(res)=>{console.log(res)})\r\n    })\r\n}\r\nexport const queryOption=(where,geo,outfields)=>{\r\n       return [{name:\"where\",value:where},\r\n       {name:\"returnGeometry\",value:geo},\r\n       {name:\"outFields\",value:outfields}\r\n      ]\r\n}\r\nexport const querySetting=(num,where,geo,outfields, url)=>{\r\n    \r\n    \r\n    return {\r\n        url:(url || mapUrl)+\"/\"+num,\r\n        where,\r\n        returnGeometry:geo,\r\n        outFields:outfields\r\n}\r\n\r\n}\r\nexport const DataReqest=(url,callBack)=>{\r\n    loadModules([\"esri/request\"], options)\r\n    .then(([request]) => {\r\n        request({\r\n            url: url,\r\n            content: {f:\"json\"},\r\n            handleAs: \"json\",\r\n            callbackParamName:\"callback\"\r\n        }).then(callBack);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport { esriRequest } from \"../common/esri_request\";\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  project,\r\n  addParcelNo,\r\n  convertToEnglish,\r\n} from \"../common/common_func\";\r\nimport axios from \"axios\";\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport { mapUrl } from \"../mapviewer/config/map\";\r\nimport { Select, Button, Form, message } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport { connect } from \"react-redux\";\r\nimport { StickyContainer, Sticky } from \"react-sticky\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nvar uniqid = require(\"uniqid\");\r\nimport { slice, isEqual } from \"lodash\";\r\nconst { Option } = Select;\r\n\r\nclass IdentifyPublicLocationComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mapLoaded: false,\r\n    };\r\n  }\r\n\r\n  mapLoaded = (map) => {\r\n    this.map = map;\r\n\r\n    let {\r\n      input: { value, onChange },\r\n    } = this.props;\r\n\r\n    if (value?.parcels) {\r\n      highlightFeature(this.props.input.value.parcels, this.map, {\r\n        layerName: \"SelectLandsGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: true,\r\n        attr: { isParcel: true },\r\n        isHighlighPolygonBorder: true,\r\n        zoomFactor: 70,\r\n      });\r\n    }\r\n\r\n    setTimeout(() => {\r\n      if (value?.publicLocation) {\r\n        map.setExtent(value?.publicLocation);\r\n      }\r\n    }, 1000);\r\n\r\n    this.setState({ mapLoaded: true });\r\n    this.props.setCurrentMap(map);\r\n  };\r\n\r\n  captureMapExtent = (map) => {\r\n    let {\r\n      input: { value, onChange },\r\n    } = this.props;\r\n\r\n    onChange({\r\n      ...value,\r\n      publicLocation: map.extent,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <div>\r\n          <MapBtnsComponent\r\n            captureMapExtent={this.captureMapExtent}\r\n            {...this.props}\r\n          ></MapBtnsComponent>\r\n        </div> */}\r\n        <StickyContainer style={{ direction: \"ltr\" }}>\r\n          <Sticky bottomOffset={80}>\r\n            {({ style }) => (\r\n              <MapBtnsComponent\r\n                captureMapExtent={this.captureMapExtent}\r\n                style={style}\r\n                {...this.props}\r\n              ></MapBtnsComponent>\r\n            )}\r\n          </Sticky>\r\n        </StickyContainer>\r\n        <div>\r\n          <MapComponent\r\n            captureMapExtent={this.captureMapExtent}\r\n            mapload={this.mapLoaded.bind(this)}\r\n            {...this.props}\r\n          ></MapComponent>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(IdentifyPublicLocationComponent);\r\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAOA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AA1CA;AACA;AACA;AACA;AAyCA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAQA;AACA;AAAA;AAMA;AACA;AAEA;;;;A","sourceRoot":""}
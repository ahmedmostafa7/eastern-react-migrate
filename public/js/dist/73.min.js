(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[73],{

/***/ "./src/app/components/inputs/fields/identify/Component/editFeaturesTable/index.js":
/*!****************************************************************************************!*\
  !*** ./src/app/components/inputs/fields/identify/Component/editFeaturesTable/index.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var antd_lib_modal_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antd/lib/modal/style */ "./node_modules/antd/lib/modal/style/index.js");
/* harmony import */ var antd_lib_modal_style__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal_style__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/modal */ "./node_modules/antd/lib/modal/index.js");
/* harmony import */ var antd_lib_modal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_modal__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_input_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/input/style */ "./node_modules/antd/lib/input/style/index.js");
/* harmony import */ var antd_lib_input_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input_style__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd/lib/input */ "./node_modules/antd/lib/input/index.js");
/* harmony import */ var antd_lib_input__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_lib_input__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_select_style__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/select/style */ "./node_modules/antd/lib/select/style/index.js");
/* harmony import */ var antd_lib_select_style__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_select_style__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/select */ "./node_modules/antd/lib/select/index.js");
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_select__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var antd_lib_pagination_style__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd/lib/pagination/style */ "./node_modules/antd/lib/pagination/style/index.js");
/* harmony import */ var antd_lib_pagination_style__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(antd_lib_pagination_style__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var antd_lib_pagination__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! antd/lib/pagination */ "./node_modules/antd/lib/pagination/index.js");
/* harmony import */ var antd_lib_pagination__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(antd_lib_pagination__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var antd_lib_checkbox_style__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! antd/lib/checkbox/style */ "./node_modules/antd/lib/checkbox/style/index.js");
/* harmony import */ var antd_lib_checkbox_style__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(antd_lib_checkbox_style__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! antd/lib/checkbox */ "./node_modules/antd/lib/checkbox/index.js");
/* harmony import */ var antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var antd_lib_button_style__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! antd/lib/button/style */ "./node_modules/antd/lib/button/style/index.js");
/* harmony import */ var antd_lib_button_style__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button_style__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var antd_lib_message_style__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! antd/lib/message/style */ "./node_modules/antd/lib/message/style/index.js");
/* harmony import */ var antd_lib_message_style__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message_style__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! antd/lib/message */ "./node_modules/antd/lib/message/index.js");
/* harmony import */ var antd_lib_message__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(antd_lib_message__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var lodash_groupBy__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash/groupBy */ "./node_modules/lodash/groupBy.js");
/* harmony import */ var lodash_groupBy__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(lodash_groupBy__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../.. */ "./src/app/components/inputs/index.js");
/* harmony import */ var _helpers_functions__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../../helpers/functions */ "./src/app/helpers/functions/index.js");
/* harmony import */ var _maping__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./maping */ "./src/app/components/inputs/fields/identify/Component/editFeaturesTable/maping.js");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/index.js");
/* harmony import */ var _common_common_func__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../common/common_func */ "./src/app/components/inputs/fields/identify/Component/common/common_func.js");
/* harmony import */ var _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../mapviewer/config */ "./src/app/components/inputs/fields/identify/Component/mapviewer/config/index.js");
/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @fortawesome/react-fontawesome */ "./node_modules/@fortawesome/react-fontawesome/index.es.js");
/* harmony import */ var _reducers__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../../../../reducers */ "./src/app/reducers/index.js");
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ "./node_modules/@fortawesome/free-solid-svg-icons/index.es.js");
/* harmony import */ var _main_helpers_functions_filters_state__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../../../../../main_helpers/functions/filters/state */ "./src/main_helpers/functions/filters/state.js");




























const pageSize = 10;
class editFeaturesTableComponent extends react__WEBPACK_IMPORTED_MODULE_16__["Component"] {
  constructor(props) {
    var _props$mainObject, _props$mainObject$map;
    super(props);
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "mapFieldsAndGetDomainCodes", (attributes, searchBy) => {
      let tempAttributes = {};
      this.state.uploadFileDetails.activeLayerDetails.outFields.forEach(outField => {
        if (outField.mappingField) {
          let domainField = this.LayerFields.find(x => x.name == outField.name);
          if (domainField !== null && domainField !== void 0 && domainField.domain) {
            let domainValues = domainField.domain.codedValues.filter(x => x[searchBy] == attributes[outField.mappingField]);
            if (domainValues.length == 1) {
              if (searchBy == "code") {
                tempAttributes[outField.name + "_Code"] = domainValues[0].code;
                tempAttributes[outField.name] = domainValues[0].name;
              } else {
                tempAttributes[outField.name + "_Code"] = domainValues[0].code;
                tempAttributes[outField.name] = attributes[outField.mappingField] != "<Null>" ? attributes[outField.mappingField] : null;
              }
            }
          } else {
            tempAttributes[outField.name] = attributes[outField.mappingField] != "<Null>" ? attributes[outField.mappingField] : null;
          }
        }
      });
      return tempAttributes;
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "getSpatialRelationsWithLayers", (features, spatialRelationLayers) => {
      return new Promise((resolve, reject) => {
        _reducers__WEBPACK_IMPORTED_MODULE_25__["default"].dispatch({
          type: "Show_Loading_new",
          loading: true
        });
        let intersectGraphic = window.geometryEngine.union(features.map(f => {
          return f.geometry;
        }));
        let promiseList = [];
        spatialRelationLayers.forEach(item => {
          let layerId = this.LayerID[item.layerName];
          promiseList.push(Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["queryTask"])({
            url: _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addedParcelMapServiceUrl"] + "/" + layerId,
            geometry: intersectGraphic,
            queryWithGemoerty: true,
            returnGeometry: true,
            bufferDistance: 1,
            outFields: item.bindFields.map(i => i.dependLayerField),
            returnExecuteObject: true
          }));
        });
        let promises = window.promiseAll(promiseList);
        promises.then(result => {
          let checkSelfIntersectIndex = spatialRelationLayers.findIndex(x => x.checkSelfIntersect);
          if (checkSelfIntersectIndex > -1) {
            if (result[checkSelfIntersectIndex].features.length) {
              antd_lib_message__WEBPACK_IMPORTED_MODULE_13___default.a.error("لا يمكن رفع " + _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addFeaturesMapLayers"][this.state.uploadFileDetails.layerName].label + " فوق " + _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addFeaturesMapLayers"][this.state.uploadFileDetails.layerName].label + " موجودة بالفعل");
              resolve([]);
            }
          }
          for (let feature of features) {
            spatialRelationLayers.forEach((item, index) => {
              let intersectedGeometry = result[index].features.find(x => {
                return window.geometryEngine.contains(x.geometry, feature.geometry);
              });
              if (intersectedGeometry) {
                item.bindFields.forEach(bindField => {
                  feature.attributes[bindField.mappingField] = intersectedGeometry.attributes[bindField.dependLayerField];
                });
              }
            });
          }
          _reducers__WEBPACK_IMPORTED_MODULE_25__["default"].dispatch({
            type: "Show_Loading_new",
            loading: false
          });
          if (!features.find(x => x.attributes.MUNICIPALITY_NAME)) {
            antd_lib_message__WEBPACK_IMPORTED_MODULE_13___default.a.error("البيانات المدرجة خارج حدود البلديات");
            resolve([]);
          } else {
            resolve([...features]);
          }
        });
      });
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "handleOk", () => {
      if (this.state.isEditMultiple) {
        this.state.features.forEach(f => {
          if (f.isSelected) {
            Object.keys(this.state.editFeature.attributes).forEach(attribute => {
              if (this.state.editFeature.attributes[attribute]) f.attributes[attribute] = this.state.editFeature.attributes[attribute];
            });
          }
        });
      } else {
        this.state.features[this.state.editFeature.index].attributes = {
          ...this.state.editFeature.attributes
        };
      }
      this.setState({
        features: [...this.state.features],
        showModal: false,
        isEditMultiple: false
      });
      this.props.setEditableFeatures([...this.state.features]);
      this.drawEditableFeatures([...this.state.features]);
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "removeDialog", () => {
      this.setState({
        showModal: false,
        isEditMultiple: false
      });
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "handleUserInput", e => {
      let editFeatureTemp = {
        ...this.state.editFeature
      };
      editFeatureTemp.attributes[e.target.name] = e.target.value;
      this.setState({
        editFeature: {
          ...editFeatureTemp
        }
      });
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "selectHandleChange", (e, value) => {
      let editFeatureTemp = {
        ...this.state.editFeature
      };
      editFeatureTemp.attributes[e.name + "_Code"] = value;
      editFeatureTemp.attributes[e.name] = e.domain.codedValues.find(x => x.code == value).name;
      this.setState({
        editFeature: {
          ...editFeatureTemp
        }
      });
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "isdisabledField", field => {
      let isFound = false;
      this.layerInfo.spatialRelationLayers.forEach(layer => {
        var _layer$bindFields;
        if (!isFound) isFound = layer === null || layer === void 0 ? void 0 : (_layer$bindFields = layer.bindFields) === null || _layer$bindFields === void 0 ? void 0 : _layer$bindFields.find(x => x.mappingField == field.name);
      });
      return isFound;
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "onChangeSelectFeature", (index, e) => {
      this.state.features[index].isSelected = !this.state.features[index].isSelected;
      let selectedFeatures = this.state.features.filter(x => x.isSelected);
      if (selectedFeatures.length > 1) {
        this.setState({
          selectedFeatures: [...selectedFeatures],
          features: [...this.state.features]
        });
      } else {
        this.setState({
          selectedFeatures: [],
          features: [...this.state.features]
        });
      }
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "zoomToSelectedFeature", () => {
      let features = [];
      this.state.features.forEach((f, index) => {
        if (f.isSelected) {
          features.push(f);
        }
      });
      if (!features.length) {
        features = this.state.features;
      }
      this.drawEditableFeatures(features);
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "editSelectedFeatures", () => {
      let editFeatureObj = {
        attributes: {}
      };
      let layerInfo = _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addFeaturesMapLayers"][this.state.uploadFileDetails.layerName];
      let editFieldsObj = [];
      layerInfo.outFields.forEach(outField => {
        if (!this.isdisabledField(outField)) editFieldsObj.push(this.LayerFields.find(x => x.name == outField.name));
      });
      this.setState({
        showModal: true,
        editFields: [...editFieldsObj],
        editFeature: {
          ...editFeatureObj
        },
        isEditMultiple: true
      });
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "deleteSelectedFeatures", () => {
      let features = [];
      this.state.features.forEach((f, index) => {
        if (!f.isSelected) {
          features.push(f);
        }
      });
      this.drawEditableFeatures(features);
      this.props.setEditableFeatures([...features]);
      this.setState({
        features: [...features],
        selectedFeatures: [],
        isSelectAll: false
      });
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "onChangeSelectAll", () => {
      this.state.features.map(f => {
        f.isSelected = !this.state.isSelectAll;
      });
      this.setState({
        features: [...this.state.features],
        isSelectAll: !this.state.isSelectAll,
        selectedFeatures: []
      });
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_14___default()(this, "handleChange", page => {
      this.setState({
        current: page,
        minIndex: (page - 1) * pageSize,
        maxIndex: page * pageSize
      });
    });
    this.props = props;
    this.isLoaded = true;
    this.state = {
      features: ((_props$mainObject = props.mainObject) === null || _props$mainObject === void 0 ? void 0 : (_props$mainObject$map = _props$mainObject.mapEditFeatures) === null || _props$mainObject$map === void 0 ? void 0 : _props$mainObject$map.editableFeatures) || null,
      editFields: [],
      editFeature: {},
      current: 1,
      totalPage: 0,
      minIndex: 0,
      uploadFileDetails: props.UploadFileDetails || props.mainObject.locationData.uploadFileDetails,
      maxIndex: pageSize,
      selectedFeatures: [],
      isEditMultiple: false
    };
  }
  formatNumber(num) {
    return (+num).toFixed(2).replace(/[.,]00$/, "");
  }
  zoomToFeature(feature) {
    var _feature$geometry;
    var opacity = 1;
    if ((feature === null || feature === void 0 ? void 0 : (_feature$geometry = feature.geometry) === null || _feature$geometry === void 0 ? void 0 : _feature$geometry.type) == "polygon") {
      opacity = 0.5;
    }
    Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["highlightFeature"])(feature, this.map, {
      layerName: "highlightGraphicLayer",
      isZoom: true,
      zoomFactor: 20,
      isHiglightSymbol: true,
      highlighColor: [0, 255, 255, opacity]
    });
  }
  removeFeature(index) {
    this.state.features.splice(index, 1);
    this.drawEditableFeatures(this.state.features);
    this.props.setEditableFeatures([...this.state.features]);
    this.setState({
      features: [...this.state.features]
    });
  }
  drawEditableFeatures(features) {
    let layerInfo = _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addFeaturesMapLayers"][this.state.uploadFileDetails.layerName];
    let annotationField = layerInfo.outFields.find(x => x.isMainAnnotaion);
    Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["clearGraphicFromLayer"])(this.map, "ParcelPlanNoGraphicLayer");
    Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["clearGraphicFromLayer"])(this.map, "ZoomGraphicLayer");
    features.forEach(f => {
      let pt;
      if (f.geometry.type == "point") {
        pt = f.geometry;
      } else {
        if (f.geometry.getExtent) {
          pt = f.geometry.getExtent().getCenter();
        } else {
          if (f.geometry.type == "polygon") {
            f.geometry = new esri.geometry.Polygon(JSON.parse(JSON.stringify(f.geometry)));
          } else {
            f.geometry = new esri.geometry.Polyline(JSON.parse(JSON.stringify(f.geometry)));
          }
          pt = f.geometry.getExtent().getCenter();
        }
      }
      Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["addParcelNo"])(pt, this.map, Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["convertToArabic"])(f.attributes[annotationField.name]), "ParcelPlanNoGraphicLayer", 40, [0, 0, 0]);
      var symbol;
      if (f.geometry.type === "point") {
        symbol = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_CIRCLE, 28, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new esri.Color([0, 0, 0]), 2), new esri.Color([0, 0, 0, 0.2]));
      } else if (f.geometry.type === "polyline") {
        symbol = new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new esri.Color([0, 0, 0]), 7);
      } else {
        symbol = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_NULL, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID, new esri.Color([0, 0, 0]), 3), new esri.Color([0, 0, 0]));
      }
      var graphic = new esri.Graphic(f.geometry, symbol, null);
      this.map.getLayer("ZoomGraphicLayer").add(graphic);
    });
    Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["zoomToFeature"])(this.map.getLayer("ZoomGraphicLayer").graphics, this.map, 2);
  }
  reProjectAndMapSpatailRelation(features) {
    _reducers__WEBPACK_IMPORTED_MODULE_25__["default"].dispatch({
      type: "Show_Loading_new",
      loading: true
    });
    Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["project"])([...features.map(x => x.geometry)], this.map.spatialReference.wkid, res => {
      features.forEach((f, index) => {
        f.geometry = res[index];
      });
      this.getSpatialRelationsWithLayers(features, this.layerInfo.spatialRelationLayers).then(spatialFeatures => {
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["getFeatureDomainName"])(spatialFeatures, this.LayerID[this.state.uploadFileDetails.layerName], null, _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addedParcelMapServiceUrl"]).then(r => {
          _reducers__WEBPACK_IMPORTED_MODULE_25__["default"].dispatch({
            type: "Show_Loading_new",
            loading: false
          });
          let spatialReferenceField = _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addFeaturesMapLayers"][this.state.uploadFileDetails.layerName].outFields.find(x => x.isSpatialId);
          if (spatialReferenceField) {
            r.forEach(feature => {
              feature.attributes[spatialReferenceField.name] = Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["GetSpatialId"])(feature);
            });
          }
          this.drawEditableFeatures([...r]);
          this.props.setEditableFeatures([...r]);
          this.setState({
            features: [...r],
            totalPage: r.length / pageSize,
            minIndex: 0,
            maxIndex: pageSize
          });
        });
      });
    }, true);
  }
  componentDidUpdate() {
    if (this.isLoaded) {
      this.map = Object(_main_helpers_functions_filters_state__WEBPACK_IMPORTED_MODULE_27__["getMap"])();
      if (Object(_main_helpers_functions_filters_state__WEBPACK_IMPORTED_MODULE_27__["getIsMapLoaded"])()) {
        this.isLoaded = false;
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["getInfo"])(_mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addedParcelMapServiceUrl"]).then(res => {
          Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["getFieldDomain"])("", res[this.state.uploadFileDetails.layerName], _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addedParcelMapServiceUrl"]).then(fields => {
            this.LayerFields = fields;
            this.LayerID = res;
            this.layerInfo = _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addFeaturesMapLayers"][this.state.uploadFileDetails.layerName];
            try {
              var _this$props$editableF;
              if ((_this$props$editableF = this.props.editableFeatures) !== null && _this$props$editableF !== void 0 && _this$props$editableF.length) {
                this.props.editableFeatures.map(f => f.isSelected = false);
                this.drawEditableFeatures(this.props.editableFeatures);
                this.setState({
                  features: [...this.props.editableFeatures],
                  totalPage: this.props.editableFeatures.length / pageSize,
                  minIndex: 0,
                  maxIndex: pageSize
                });
              } else {
                if (this.state.uploadFileDetails.fileType == "cad") {
                  //store.dispatch({ type: 'Show_Loading_new', loading: true })
                  if (this.state.uploadFileDetails.activeLayerDetails.type == "polygon") {
                    Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["DrawFeatures"])(this.map, this.state.uploadFileDetails).then(features => {
                      this.getSpatialRelationsWithLayers(features, this.layerInfo.spatialRelationLayers).then(spatialFeatures => {
                        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["getFeatureDomainName"])(spatialFeatures, res[this.state.uploadFileDetails.layerName], null, _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addedParcelMapServiceUrl"]).then(r => {
                          //store.dispatch({ type: 'Show_Loading_new', loading: false })
                          let spatialReferenceField = _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addFeaturesMapLayers"][this.state.uploadFileDetails.layerName].outFields.find(x => x.isSpatialId);
                          if (spatialReferenceField) {
                            r.forEach(feature => {
                              feature.attributes[spatialReferenceField.name] = Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["GetSpatialId"])(feature);
                            });
                          }
                          this.setState({
                            features: r,
                            totalPage: r.length / pageSize,
                            minIndex: 0,
                            maxIndex: pageSize
                          });
                          this.props.setEditableFeatures([...r]);
                        });
                      });
                    });
                  } else if (this.state.uploadFileDetails.activeLayerDetails.type == "line") {
                    let features = [];
                    let featuresMapping = this.state.uploadFileDetails.fileData.lineFeatures.map(object => ({
                      ...object
                    }));
                    let spatialReference = new esri.SpatialReference(featuresMapping[0].spatialReference.wkid);
                    featuresMapping.forEach(f => {
                      features.push({
                        geometry: esri.geometry.Polyline(f.paths, spatialReference),
                        attributes: {}
                      });
                      features[features.length - 1].geometry.spatialReference = spatialReference;
                    });
                    this.reProjectAndMapSpatailRelation(features);
                  } else if (this.state.uploadFileDetails.activeLayerDetails.type == "point") {
                    let features = [];
                    let featuresMapping = this.state.uploadFileDetails.fileData.pointFeatures.map(object => ({
                      ...object
                    }));
                    let spatialReference = new esri.SpatialReference(featuresMapping[0].spatialReference.wkid);
                    featuresMapping.forEach(f => {
                      features.push({
                        geometry: esri.geometry.Point(f.x, f.y, spatialReference),
                        attributes: {}
                      });
                      features[features.length - 1].geometry.spatialReference = spatialReference;
                    });
                    this.reProjectAndMapSpatailRelation(features);
                  }
                } else if (this.state.uploadFileDetails.fileType == "shape") {
                  let features = this.state.uploadFileDetails.fileData.features.map(object => ({
                    ...object
                  }));
                  let spatialReference = new esri.SpatialReference(this.state.uploadFileDetails.fileData.spatialReference.wkid);
                  features.forEach(f => {
                    f.attributes = this.mapFieldsAndGetDomainCodes(f.attributes, "code");
                    if (this.state.uploadFileDetails.fileData.geometryType == "esriGeometryPolygon") {
                      f.geometry = esri.geometry.Polygon(f.geometry, this.state.uploadFileDetails.fileData.spatialReference);
                    } else if (this.state.uploadFileDetails.fileData.geometryType == "esriGeometryPolyline") {
                      f.geometry = esri.geometry.Polyline(f.geometry, this.state.uploadFileDetails.fileData.spatialReference);
                    } else {
                      f.geometry = esri.geometry.Point(f.geometry, this.state.uploadFileDetails.fileData.spatialReference);
                    }
                    f.geometry.spatialReference = spatialReference;
                  });
                  this.reProjectAndMapSpatailRelation(features);
                } else if (this.state.uploadFileDetails.fileType == "kml") {
                  let features = this.state.uploadFileDetails.fileData.features.map(object => ({
                    ...object
                  }));
                  features.forEach(f => {
                    if (f.attributes.PopupInfo) {
                      f.attributes = Object(_common_common_func__WEBPACK_IMPORTED_MODULE_22__["formatKmlAttributes"])(f);
                      f.attributes = this.mapFieldsAndGetDomainCodes(f.attributes, "name");
                    }
                    if (this.state.uploadFileDetails.fileData.geometryType == "esriGeometryPolygon") {
                      f.geometry = esri.geometry.Polygon(f.geometry, this.state.uploadFileDetails.fileData.spatialReference);
                    } else if (this.state.uploadFileDetails.fileData.geometryType == "esriGeometryPolyline") {
                      f.geometry = esri.geometry.Polyline(f.geometry, this.state.uploadFileDetails.fileData.spatialReference);
                    } else {
                      f.geometry = esri.geometry.Point(f.geometry, this.state.uploadFileDetails.fileData.spatialReference);
                    }
                  });
                  this.reProjectAndMapSpatailRelation(features);
                } else if (this.state.uploadFileDetails.fileType == "excel") {
                  var _layerOutFields$find, _layerOutFields$find2, _layerOutFields$find3;
                  let notFormatedFeatures = this.state.uploadFileDetails.fileData.features.map(object => ({
                    ...object
                  }));

                  //group by serial
                  let layerOutFields = this.state.uploadFileDetails.activeLayerDetails.outFields;
                  let xMapFieldName = (_layerOutFields$find = layerOutFields.find(x => x.name == "x")) === null || _layerOutFields$find === void 0 ? void 0 : _layerOutFields$find.mappingField;
                  let yMapFieldName = (_layerOutFields$find2 = layerOutFields.find(x => x.name == "y")) === null || _layerOutFields$find2 === void 0 ? void 0 : _layerOutFields$find2.mappingField;
                  let serialMapFieldName = (_layerOutFields$find3 = layerOutFields.find(x => x.name == "serial")) === null || _layerOutFields$find3 === void 0 ? void 0 : _layerOutFields$find3.mappingField;
                  notFormatedFeatures = lodash_groupBy__WEBPACK_IMPORTED_MODULE_15___default()(notFormatedFeatures, v => v.attributes[serialMapFieldName]);
                  let features = [];
                  if (this.state.uploadFileDetails.activeLayerDetails.type == "polygon") {
                    Object.keys(notFormatedFeatures).forEach(serial => {
                      let rings = [notFormatedFeatures[serial].map(f => {
                        return [f.attributes[xMapFieldName], f.attributes[yMapFieldName]];
                      })];

                      //check if start point = end point x , y
                      if (!(rings[0][0][0] == rings[0][rings[0].length - 1][0] && rings[0][0][1] == rings[0][rings[0].length - 1][1])) {
                        rings[0].push(rings[0][0]);
                      }
                      features.push({
                        attributes: notFormatedFeatures[serial][0].attributes,
                        geometry: {
                          rings: rings
                        }
                      });
                    });
                  } else if (this.state.uploadFileDetails.activeLayerDetails.type == "line") {
                    Object.keys(notFormatedFeatures).forEach(serial => {
                      let paths = [notFormatedFeatures[serial].map(f => {
                        return [f.attributes[xMapFieldName], f.attributes[yMapFieldName]];
                      })];
                      features.push({
                        attributes: notFormatedFeatures[serial][0].attributes,
                        geometry: {
                          paths: paths
                        }
                      });
                    });
                  } else if (this.state.uploadFileDetails.activeLayerDetails.type == "point") {
                    Object.keys(notFormatedFeatures).forEach(serial => {
                      let points = notFormatedFeatures[serial].map(f => {
                        return [f.attributes[xMapFieldName], f.attributes[yMapFieldName]];
                      });
                      features.push({
                        attributes: notFormatedFeatures[serial][0].attributes,
                        geometry: {
                          x: points[0][0],
                          y: points[0][1]
                        }
                      });
                    });
                  }
                  let spatialReference = new esri.SpatialReference(this.map.spatialReference.wkid);
                  features.forEach(f => {
                    if (this.state.uploadFileDetails.activeLayerDetails.type == "polygon") {
                      f.geometry = esri.geometry.Polygon(f.geometry, this.state.uploadFileDetails.fileData.spatialReference);
                    } else if (this.state.uploadFileDetails.activeLayerDetails.type == "line") {
                      f.geometry = esri.geometry.Polyline(f.geometry, this.state.uploadFileDetails.fileData.spatialReference);
                    } else if (this.state.uploadFileDetails.activeLayerDetails.type == "point") {
                      f.geometry = esri.geometry.Point(f.geometry, this.state.uploadFileDetails.fileData.spatialReference);
                    }
                    f.geometry.spatialReference = spatialReference;
                    f.attributes = this.mapFieldsAndGetDomainCodes(f.attributes, "name");
                  });
                  this.reProjectAndMapSpatailRelation(features);
                } else if (this.state.uploadFileDetails.fileType == "google") {
                  let features = [];
                  let points = this.state.uploadFileDetails.googlePoints.map(f => {
                    return [+f.long, +f.lat];
                  });
                  let spatialReference = new esri.SpatialReference(4326);
                  points.forEach(f => {
                    f.geometry = esri.geometry.Point(f[0], f[1], spatialReference);
                    f.geometry.spatialReference = spatialReference;
                    features.push({
                      attributes: {},
                      geometry: f.geometry
                    });
                  });
                  this.reProjectAndMapSpatailRelation(features);
                }
              }
            } catch (error) {
              window.notifySystem("error", "حدث خطأ أثناء إضافة البيانات");
            }
          });
        });
      }
    }
  }
  editFeature(feature, index) {
    let editFeatureObj = {
      index: index
    };
    editFeatureObj.attributes = {
      ...feature.attributes
    };
    let layerInfo = _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addFeaturesMapLayers"][this.state.uploadFileDetails.layerName];
    let editFieldsObj = [];
    let mandatoryFields = layerInfo.outFields.filter(x => x.isMandatory).map(f => f.name);
    layerInfo.outFields.forEach(outField => {
      editFieldsObj.push(this.LayerFields.find(x => x.name == outField.name));
    });
    editFieldsObj.forEach(item => {
      if (item && mandatoryFields.indexOf(item.name) > -1) {
        item.isMandatory = true;
      }
      if (item && item.domain && item.type == "esriFieldTypeInteger") {
        editFeatureObj.attributes[item.name + "_Code"] = +editFeatureObj.attributes[item.name + "_Code"];
      }
    });
    this.setState({
      showModal: true,
      editFields: [...editFieldsObj],
      editFeature: {
        ...editFeatureObj
      },
      isEditMultiple: false
    });
  }
  render() {
    var _layerInfo$outFields, _layerInfo$outFields$;
    const {
      uploadFileDetails
    } = this.state;
    const {
      features,
      editFields,
      editFeature,
      isSelectAll,
      selectedFeatures,
      current,
      minIndex,
      maxIndex
    } = this.state;
    const layerInfo = _mapviewer_config__WEBPACK_IMPORTED_MODULE_23__["addFeaturesMapLayers"][uploadFileDetails === null || uploadFileDetails === void 0 ? void 0 : uploadFileDetails.layerName];
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div", null, features !== null && features !== void 0 && features.length ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div", {
      style: {
        background: "#57779d",
        textAlign: "center",
        padding: "5px"
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("h3", {
      style: {
        color: "white",
        float: isSelectAll || (selectedFeatures === null || selectedFeatures === void 0 ? void 0 : selectedFeatures.length) > 1 ? "right" : "none",
        marginRight: "20px"
      }
    }, "\u0639\u062F\u062F \u0627\u0644\u0646\u062A\u0627\u0626\u062C : ", features.length), (isSelectAll || (selectedFeatures === null || selectedFeatures === void 0 ? void 0 : selectedFeatures.length) > 1) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div", {
      style: {
        textAlign: "left"
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_button__WEBPACK_IMPORTED_MODULE_11___default.a, {
      size: "large",
      onClick: this.editSelectedFeatures.bind(this),
      style: {
        marginLeft: "10px"
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_24__["FontAwesomeIcon"], {
      icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_26__["faEdit"]
    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("span", {
      style: {
        marginRight: "5px"
      }
    }, "\u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0645\u062D\u062F\u062F")), (selectedFeatures === null || selectedFeatures === void 0 ? void 0 : selectedFeatures.length) > 1 && (selectedFeatures === null || selectedFeatures === void 0 ? void 0 : selectedFeatures.length) != (features === null || features === void 0 ? void 0 : features.length) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_button__WEBPACK_IMPORTED_MODULE_11___default.a, {
      size: "large",
      onClick: this.deleteSelectedFeatures.bind(this),
      style: {
        marginLeft: "10px"
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_24__["FontAwesomeIcon"], {
      icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_26__["faTrash"]
    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("span", {
      style: {
        marginRight: "5px"
      }
    }, "\u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062F")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_button__WEBPACK_IMPORTED_MODULE_11___default.a, {
      size: "large",
      onClick: this.zoomToSelectedFeature.bind(this)
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_24__["FontAwesomeIcon"], {
      icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_26__["faSearchPlus"],
      className: ""
    })))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("table", {
      className: "table table-bordered centeredTable",
      style: {
        width: "100%"
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("thead", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("tr", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("th", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_9___default.a, {
      style: {
        marginTop: "20px"
      },
      checked: isSelectAll,
      onChange: this.onChangeSelectAll.bind(this)
    }))), layerInfo === null || layerInfo === void 0 ? void 0 : (_layerInfo$outFields = layerInfo.outFields) === null || _layerInfo$outFields === void 0 ? void 0 : (_layerInfo$outFields$ = _layerInfo$outFields.filter(x => !x.notInclude)) === null || _layerInfo$outFields$ === void 0 ? void 0 : _layerInfo$outFields$.map(field => {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("th", null, field.arName);
    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("th", null, "\u0627\u0644\u0625\u062C\u0631\u0627\u0621\u0627\u062A"))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("tbody", null, features.map((feature, index) => {
      var _layerInfo$outFields2, _layerInfo$outFields3;
      return index >= minIndex && index < maxIndex && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("tr", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("td", {
        style: {
          textAlign: "center"
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_checkbox__WEBPACK_IMPORTED_MODULE_9___default.a, {
        style: {
          marginTop: "20px"
        },
        checked: feature.isSelected,
        onChange: this.onChangeSelectFeature.bind(this, index)
      })), layerInfo === null || layerInfo === void 0 ? void 0 : (_layerInfo$outFields2 = layerInfo.outFields) === null || _layerInfo$outFields2 === void 0 ? void 0 : (_layerInfo$outFields3 = _layerInfo$outFields2.filter(x => !x.notInclude)) === null || _layerInfo$outFields3 === void 0 ? void 0 : _layerInfo$outFields3.map(field => {
        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("td", null, isNaN(feature.attributes[field.name]) || !feature.attributes[field.name] ? feature.attributes[field.name] || "غير متوفر" : this.formatNumber(feature.attributes[field.name]));
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("td", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_button__WEBPACK_IMPORTED_MODULE_11___default.a, {
        className: "toolsBtnStyle",
        style: {
          margin: "auto 1px"
        },
        disabled: isSelectAll || (selectedFeatures === null || selectedFeatures === void 0 ? void 0 : selectedFeatures.length) > 1,
        size: "large",
        onClick: this.editFeature.bind(this, feature, index)
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_24__["FontAwesomeIcon"], {
        icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_26__["faEdit"],
        className: ""
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_button__WEBPACK_IMPORTED_MODULE_11___default.a, {
        className: "toolsBtnStyle",
        style: {
          margin: "auto 1px"
        },
        disabled: isSelectAll || (selectedFeatures === null || selectedFeatures === void 0 ? void 0 : selectedFeatures.length) > 1,
        size: "large",
        onClick: this.removeFeature.bind(this, index)
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_24__["FontAwesomeIcon"], {
        icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_26__["faTrash"],
        className: ""
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_button__WEBPACK_IMPORTED_MODULE_11___default.a, {
        className: "toolsBtnStyle",
        style: {
          margin: "auto 1px"
        },
        size: "large",
        onClick: this.zoomToFeature.bind(this, feature)
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_24__["FontAwesomeIcon"], {
        icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_26__["faSearchPlus"],
        className: ""
      }))));
    }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div", {
      className: "updateMap",
      style: {
        marginTop: "20px"
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_pagination__WEBPACK_IMPORTED_MODULE_7___default.a, {
      pageSize: pageSize,
      current: current,
      total: features.length,
      onChange: this.handleChange,
      style: {
        bottom: "0px"
      }
    }))) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_16___default.a.Fragment, null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_modal__WEBPACK_IMPORTED_MODULE_1___default.a, {
      width: 800,
      title: "\u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A",
      onOk: this.handleOk,
      visible: this.state.showModal,
      onCancel: this.removeDialog,
      okText: "\u0646\u0639\u0645",
      cancelText: "\u0625\u0644\u063A\u0627\u0621"
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("table", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("tbody", null, editFields.length > 0 && editFields.filter(x => x).map(field => {
      var _field$domain, _field$domain$codedVa;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("tr", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("td", null, field.alias, field.isMandatory && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("label", {
        style: {
          marginRight: "10px",
          color: "red"
        }
      }, "*")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("td", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement("div", null, (_field$domain = field.domain) !== null && _field$domain !== void 0 && (_field$domain$codedVa = _field$domain.codedValues) !== null && _field$domain$codedVa !== void 0 && _field$domain$codedVa.length ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a, {
        disabled: this.isdisabledField(field),
        style: {
          width: "80%"
        },
        virtual: false,
        onChange: this.selectHandleChange.bind(this, field),
        className: "dont-show",
        value: editFeature.attributes[field.name + "_Code"] || editFeature.attributes[field.name],
        placeholder: "من فضلك أدخل " + field.alias,
        getPopupContainer: trigger => trigger.parentNode
      }, field.domain.codedValues.map((domain, index) => {
        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a.Option, {
          value: domain.code,
          id: domain.code
        }, domain.name);
      })) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_16___default.a.createElement(antd_lib_input__WEBPACK_IMPORTED_MODULE_3___default.a, {
        disabled: this.isdisabledField(field),
        name: field.name,
        type: field.type == "esriFieldTypeString" ? "text" : "number",
        onChange: this.handleUserInput,
        value: editFeature.attributes[field.name],
        placeholder: "من فضلك أدخل " + field.alias
      }))));
    }))))));
  }
}
/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_20__["connect"])(_maping__WEBPACK_IMPORTED_MODULE_19__["mapStateToProps"], _maping__WEBPACK_IMPORTED_MODULE_19__["mapDispatchToProps"])(Object(react_i18next__WEBPACK_IMPORTED_MODULE_21__["translate"])("labels")(editFeaturesTableComponent)));

/***/ }),

/***/ "./src/app/components/inputs/fields/identify/Component/editFeaturesTable/maping.js":
/*!*****************************************************************************************!*\
  !*** ./src/app/components/inputs/fields/identify/Component/editFeaturesTable/maping.js ***!
  \*****************************************************************************************/
/*! exports provided: mapStateToProps, mapDispatchToProps */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapStateToProps", function() { return mapStateToProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapDispatchToProps", function() { return mapDispatchToProps; });
const mapStateToProps = state => {
  return {
    mainObject: state.wizard.mainObject,
    UploadFileDetails: state.mainApp.uploadFileDetails,
    editableFeatures: state.mainApp.editableFeatures
  };
};
const mapDispatchToProps = dispatch => {
  return {
    setLoading: data => {
      dispatch({
        type: 'setMainApp',
        path: 'loading',
        data
      });
    },
    setCurrentMap: data => {
      mainMap = data;
      setMap(data);
    },
    setmap: e => dispatch({
      type: 'setMap',
      value: e
    }),
    setEditableFeatures: e => {
      dispatch({
        type: 'setMainApp',
        path: 'editableFeatures',
        data: e
      });
    }
  };
};

/***/ })

}]);
//# sourceMappingURL=73.min.js.map
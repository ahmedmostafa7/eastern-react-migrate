{"version":3,"file":"62.min.js","sources":["webpack:///./src/app/components/inputs/fields/customRadio/mapping.js","webpack:///./src/app/components/inputs/fields/customRadio/radio.js"],"sourcesContent":["import { get } from 'lodash';\r\nimport {formValueSelector} from 'redux-form'\r\nexport const mapStateToProps = ({ wizard: {mainObject}, selectors = {}, mainApp, mapViewer, ...state }, { moduleName, path, value_key, ...props }) => {\r\n    return ({\r\n        data: props.data || get(state, path),\r\n        lang: mainApp.language,\r\n        selectors,\r\n        apps: mainApp.apps,\r\n        info: get(mapViewer, 'info.info', {}),\r\n        ...selectors[moduleName] || {},\r\n        value_key: get(selectors[moduleName], 'value_key', value_key),\r\n        mainObject: {...mainObject},\r\n        //popupFields: props.popupFields || {}\r\n    })\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n    return {\r\n        getValues(name='stepForm'){return formValueSelector('name')},\r\n        setSelector: (moduleName, data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}`,\r\n                data\r\n            });\r\n        },\r\n        setValueLabelKeys: (label_key, value_key) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.label_key`,\r\n                data: label_key\r\n            });\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.value_key`,\r\n                data: value_key\r\n            });\r\n        },\r\n        setData: (data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.data`,\r\n                data\r\n            })\r\n        },\r\n        setOptions: (data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.options`,\r\n                data\r\n            })\r\n        },\r\n        addToData: (data, index, operation) => {\r\n            dispatch({\r\n                type: 'insertInArraySelectors',\r\n                path: `${moduleName}.data`,\r\n                operation,\r\n                index,\r\n                data\r\n            })\r\n        },\r\n        setNextUrl: (nextUrl) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.nextLink`,\r\n                data: nextUrl\r\n            })\r\n        },\r\n        addNewSelector: (moduleName, data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: moduleName,\r\n                data\r\n            })\r\n        },\r\n        removeSelector: (moduleName) => {\r\n            dispatch({\r\n                type: 'removeSelectors',\r\n                path: moduleName\r\n            })\r\n        },\r\n        setCurrentModule: (data) => {\r\n            dispatch({\r\n                type: 'setWizard',\r\n                path: \"currentModule\",\r\n                data\r\n            })\r\n        },\r\n        removeMainObject: () => {\r\n            dispatch({\r\n                type: 'removeWizard',\r\n                path: 'mainObject'\r\n            });\r\n            dispatch({\r\n                type: 'removeWizard',\r\n                path: 'currentStep'\r\n            });\r\n            dispatch({\r\n                type: 'removeWizard',\r\n                path: 'comments'\r\n            });\r\n            dispatch({\r\n                type: 'removeWizard',\r\n                path: 'allNotes'\r\n            });\r\n        },\r\n        \r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Radio } from \"antd\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { get, isEqual, omit, map, isFunction, lte, isBoolean } from \"lodash\";\r\nimport { Input } from \"antd\";\r\nimport { mapStateToProps } from \"./mapping\";\r\nimport mapDispatchToProps from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\nimport { convertListToString } from \"../identify/Component/common/common_func\";\r\nconst RadioGroup = Radio.Group;\r\nconst cellStyle = {\r\n  padding: \"0px 2.5px\",\r\n};\r\nexport class customRadioComp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    if (props?.mainObject?.bda2l?.bands_approval?.band_number) {\r\n      const {\r\n        mainObject: {\r\n          bda2l: {\r\n            bands_approval: {\r\n              band_number: {\r\n                selectedValues,\r\n                owner_selectedValues,\r\n                oldOptions,\r\n                boundary_code,\r\n                mun_class_id,\r\n                plan_class_id,\r\n                label,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      } = props;\r\n      this.state = {\r\n        selectedValues: selectedValues || [],\r\n        owner_selectedValues:\r\n          owner_selectedValues || selectedValues || undefined,\r\n        oldOptions: oldOptions || [],\r\n        boundary_code: boundary_code || 0,\r\n        mun_class_id: mun_class_id || 0,\r\n        plan_class_id: plan_class_id || 0,\r\n        label: label || \"\",\r\n      };\r\n    } else {\r\n      this.state = {\r\n        selectedValues: [],\r\n        owner_selectedValues: undefined,\r\n        oldOptions: [],\r\n        boundary_code: 0,\r\n        mun_class_id: 0,\r\n        plan_class_id: 0,\r\n        label: \"\",\r\n      };\r\n    }\r\n    this.isloaded = true;\r\n  }\r\n\r\n  handleChange(val, options, evt) {\r\n    if (val) {\r\n      val.checked =\r\n        (evt && evt.target.checked) || (!val.checked && true) || false;\r\n      const {\r\n        input: { name, onChange, value },\r\n        radios,\r\n        checkboxes,\r\n        change,\r\n        isMotabkh,\r\n        mainObject: { bda2l },\r\n      } = this.props;\r\n      let newVal = {};\r\n      if (!isMotabkh) {\r\n        //const [value, setValue] = React.useState(1);\r\n        let arrSelectedValues = [];\r\n\r\n        if (checkboxes) {\r\n          arrSelectedValues = (value &&\r\n            value?.selectedValues?.length &&\r\n            ((!Array.isArray(value?.selectedValues) && [\r\n              value?.selectedValues,\r\n            ]) || [...value?.selectedValues])) || [val];\r\n          if (evt?.target?.checked == true) {\r\n            arrSelectedValues = [\r\n              ...arrSelectedValues,\r\n              JSON.parse(JSON.stringify(val)),\r\n            ];\r\n          } else if (evt?.target?.checked == false) {\r\n            arrSelectedValues = arrSelectedValues.filter(\r\n              (selectValue) => selectValue.key != val.key\r\n            );\r\n          }\r\n        }\r\n\r\n        newVal = {\r\n          selectedValues:\r\n            (checkboxes && arrSelectedValues) ||\r\n            JSON.parse(\r\n              JSON.stringify(radios && ((Array.isArray(val) && val[0]) || val))\r\n            ),\r\n          oldOptions: JSON.parse(JSON.stringify(options)),\r\n          boundary_code: value.boundary_code || this.state.boundary_code || 0,\r\n          mun_class_id: value.mun_class_id || this.state.mun_class_id || 0,\r\n          plan_class_id: value.plan_class_id || this.state.plan_class_id || 0,\r\n          label: value.label || this.state.label || \"\",\r\n        };\r\n      } else {\r\n        newVal = {\r\n          ...bda2l?.bands_approval?.band_number,\r\n          owner_selectedValues: JSON.parse(JSON.stringify(val)),\r\n        };\r\n      }\r\n      //setValue(newVal);\r\n      onChange(newVal);\r\n      this.setState(newVal);\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (\r\n      !isEqual(nextProps.input.value, this.props.input.value) ||\r\n      !isEqual(nextProps.lang, this.props.lang) ||\r\n      !isEqual(nextProps.forceUpdate, this.props.forceUpdate)\r\n    );\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  componentDidUpdate(oldProps, newProps) {\r\n    const { input, isMotabkh } = this.props;\r\n    if (input.value && input.value != \"\" && input.value.justInvoked) {\r\n      input.value.justInvoked = false;\r\n      var value = get(input.value.options[0], \"value\");\r\n      if (value) {\r\n        this.handleChange(value[0], input.value.options);\r\n      }\r\n    } else if (this.isloaded) {\r\n      this.isloaded = false;\r\n      this.handleChange(\r\n        (!isMotabkh && this.state.selectedValues) ||\r\n          this.state.owner_selectedValues,\r\n        this.state.oldOptions\r\n      );\r\n    }\r\n  }\r\n\r\n  openPopup = (scope, fieldValues) => {\r\n    const {\r\n      options,\r\n      input: { value },\r\n    } = scope.props;\r\n\r\n    this.handleChange(fieldValues, value.oldOptions);\r\n    var fields = this.props.popupFields;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...fieldValues },\r\n          ok(values) {\r\n            if (values) {\r\n              const {\r\n                options,\r\n                input: { onChange, value },\r\n              } = scope.props;\r\n              map(value.oldOptions, (option) => {\r\n                if (option.value[0].key == values.key) {\r\n                  option.label = convertListToString(\r\n                    values.values,\r\n                    \"condition.item_description\"\r\n                  );\r\n                  let max;\r\n                  values.values.forEach((value) => {\r\n                    if (!value.item_code) {\r\n                      max = values.values\r\n                        .filter((val) => val.item_code)\r\n                        .reduce(function (a, b) {\r\n                          return Math.max(a, b.item_code);\r\n                        }, 0);\r\n                      value.item_code = ++max;\r\n                      value.condition.item_code = value.item_code;\r\n                      value.boundary_code = scope.state[\"boundary_code\"];\r\n                      value.mun_class_id = scope.state[\"mun_class_id\"];\r\n                      value.plan_class_id = scope.state[\"plan_class_id\"];\r\n                    }\r\n                  });\r\n                  option.value[0].values = values.values.sort((a, b) =>\r\n                    a.item_code > b.item_code ? 1 : -1\r\n                  );\r\n                }\r\n              });\r\n\r\n              scope.handleChange(values, value.oldOptions);\r\n              return Promise.resolve(true);\r\n            }\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // console.log(this.props);\r\n    const {\r\n      input: { value },\r\n      type,\r\n      options,\r\n      className,\r\n      placeholder,\r\n      labelText,\r\n      t,\r\n      defaultValue,\r\n      anotherField,\r\n      inputText,\r\n      typeText,\r\n      editButton,\r\n      radios,\r\n      checkboxes,\r\n      isMotabkh,\r\n    } = this.props;\r\n    const {\r\n      mainObject: { bda2l },\r\n    } = this.props;\r\n    const { oldOptions, label } = this.state;\r\n    return (\r\n      <div>\r\n        <label>{label}</label>\r\n        {!isMotabkh &&\r\n          map(value.oldOptions, (option) => {\r\n            return (\r\n              <div className=\"form-group col-xs-12\">\r\n                <table className=\"\">\r\n                  <tr>\r\n                    {(radios && (\r\n                      <td style={cellStyle}>\r\n                        <label>\r\n                          <input\r\n                            style={{ display: \"inline\", margin: \"0px 10px\" }}\r\n                            type=\"radio\"\r\n                            value={option.value && option.value[0].key}\r\n                            className=\"form-control\"\r\n                            onChange={this.handleChange.bind(\r\n                              this,\r\n                              option.value && option.value[0],\r\n                              value.oldOptions\r\n                            )}\r\n                            checked={\r\n                              isBoolean(option.value[0].checked)\r\n                                ? option.value[0].checked\r\n                                : value.selectedValues.key ==\r\n                                    (option.value && option.value[0].key) &&\r\n                                  value?.selectedValues?.values.length ==\r\n                                    option.value[0].values.length\r\n                            }\r\n                          />\r\n                          <span>{option.label}</span>\r\n                        </label>\r\n                      </td>\r\n                    )) ||\r\n                      (checkboxes && (\r\n                        <td style={cellStyle}>\r\n                          <label>\r\n                            <input\r\n                              style={{ display: \"inline\", margin: \"0px 10px\" }}\r\n                              type=\"checkbox\"\r\n                              value={option.value && option.value[0].key}\r\n                              className=\"form-control\"\r\n                              onChange={this.handleChange.bind(\r\n                                this,\r\n                                option.value && option.value[0],\r\n                                value.oldOptions\r\n                              )}\r\n                              checked={\r\n                                isBoolean(option.value[0].checked)\r\n                                  ? option.value[0].checked\r\n                                  : (value?.selectedValues &&\r\n                                      (\r\n                                        (!Array.isArray(\r\n                                          value?.selectedValues\r\n                                        ) && [value?.selectedValues]) || [\r\n                                          ...value?.selectedValues,\r\n                                        ]\r\n                                      )?.find((selectedValue) => {\r\n                                        return (\r\n                                          selectedValue?.key ==\r\n                                            option?.value?.[0]?.key &&\r\n                                          value?.selectedValues?.values\r\n                                            .length ==\r\n                                            option.value[0].values.length\r\n                                        );\r\n                                      }) != undefined) ||\r\n                                    false\r\n                              }\r\n                            />\r\n                            <span>{option.label}</span>\r\n                          </label>\r\n                        </td>\r\n                      ))}\r\n                    {editButton && (\r\n                      <td style={cellStyle}>\r\n                        <button\r\n                          onClick={() => {\r\n                            this.openPopup(\r\n                              this,\r\n                              option.value && option.value[0]\r\n                            );\r\n                          }}\r\n                          className=\"ant-btn ediT ant-btn-primary\"\r\n                        >\r\n                          {t(\"tabs:Edit\")}\r\n                        </button>\r\n                      </td>\r\n                    )}\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            );\r\n          })}\r\n        {isMotabkh &&\r\n          map(\r\n            value.oldOptions.filter(\r\n              (option) =>\r\n                (!Array.isArray(\r\n                  bda2l?.bands_approval?.band_number?.selectedValues\r\n                ) &&\r\n                  bda2l?.bands_approval?.band_number?.selectedValues.key ==\r\n                    option.value[0].key) ||\r\n                (Array.isArray(\r\n                  bda2l?.bands_approval?.band_number?.selectedValues\r\n                ) &&\r\n                  bda2l?.bands_approval?.band_number?.selectedValues?.find(\r\n                    (selectedValue) => selectedValue.key == option.value[0].key\r\n                  ) != undefined)\r\n            ),\r\n            (option) => {\r\n              return (\r\n                <div className=\"form-group col-xs-12\">\r\n                  <table className=\"\">\r\n                    <tr>\r\n                      <td style={cellStyle}>\r\n                        <label>\r\n                          <input\r\n                            style={{ display: \"inline\", margin: \"0px 10px\" }}\r\n                            type=\"radio\"\r\n                            value={option.value && option.value[0].key}\r\n                            className=\"form-control\"\r\n                            onChange={this.handleChange.bind(\r\n                              this,\r\n                              option.value && option.value[0],\r\n                              value.oldOptions\r\n                            )}\r\n                            checked={\r\n                              isBoolean(option.value[0].checked)\r\n                                ? option.value[0].checked\r\n                                : value?.owner_selectedValues?.key ==\r\n                                    (option.value && option.value[0].key) &&\r\n                                  value?.owner_selectedValues?.modal ==\r\n                                    (option.value && option.value[0].modal) &&\r\n                                  value?.owner_selectedValues?.values.length ==\r\n                                    option.value[0].values.length\r\n                            }\r\n                          />\r\n                          <span>{option.label}</span>\r\n                        </label>\r\n                      </td>\r\n                      {editButton && (\r\n                        <td style={cellStyle}>\r\n                          <button\r\n                            onClick={() => {\r\n                              this.openPopup(\r\n                                this,\r\n                                option.value && option.value[0]\r\n                              );\r\n                            }}\r\n                            className=\"ant-btn ediT ant-btn-primary\"\r\n                          >\r\n                            {t(\"tabs:Edit\")}\r\n                          </button>\r\n                        </td>\r\n                      )}\r\n                    </tr>\r\n                  </table>\r\n                </div>\r\n              );\r\n            }\r\n          )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//export default withTranslation(\"labels\")(radioComp);\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation(\"labels\")(customRadioComp));\r\n"],"mappings":";;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5GA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAuIA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAKA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AA0DA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAOA;AAOA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAUA;AACA;AAOA;AAEA;AAOA;AAAA;AAEA;AACA;AAIA;AACA;AAAA;AAUA;AAIA;AAAA;AAWA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AASA;AAMA;AAAA;AAEA;AACA;AAIA;AACA;AAAA;AAUA;AAIA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}
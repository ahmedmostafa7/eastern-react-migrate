{"version":3,"file":"5.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/propertyRemovalIdentifyComponnent/Helpers.js","webpack:///./src/app/components/inputs/fields/identify/Component/propertyRemovalIdentifyComponnent/index.js"],"sourcesContent":["\r\nimport { loadModules } from 'esri-loader';\r\nimport{mapUrl}from\"../mapviewer/config/map\"\r\n\r\nconst options = {\r\n    url: 'https://js.arcgis.com/3.13'\r\n};\r\n\r\nexport const selectDis=(e)=>{\r\nvar a=[];\r\n\r\ne.forEach(el => {\r\n    el.features.forEach(element=>{\r\n        if(!a.find((t=>t.attributes.PARCEL_SPATIAL_ID==element.attributes.PARCEL_SPATIAL_ID))){\r\n            a.push(element)\r\n        }\r\n    })\r\n});\r\nreturn a;\r\n}\r\n\r\nexport const DataQuery=(layerNum,QueryOptions,CallBack)=>{\r\n    loadModules([\"esri/symbols/SimpleLineSymbol\",\"esri/Color\",\"esri/layers/FeatureLayer\",\"esri/tasks/RelationshipQuery\",\"esri/tasks/QueryTask\",\"esri/tasks/query\",\"esri/request\",\"esri/geometry/Polygon\",\"esri/symbols/SimpleFillSymbol\",\"esri/graphic\"], options)\r\n    .then(([SimpleLineSymbol,Color,FeatureLayer,RQuery,QueryTask,Query,request,Polygon,SimpleFillSymbol,Graphic]) => {\r\n\r\n     var query = new Query()\r\n     var qt = new QueryTask(mapUrl+`/${layerNum}`)\r\n    QueryOptions.forEach(e=>{\r\n        query[e.name]=e.value\r\n    })\r\n     qt.execute(query,CallBack,(res)=>{console.log(res)})\r\n    })\r\n}\r\nexport const queryOption=(where,geo,outfields)=>{\r\n       return [{name:\"where\",value:where},\r\n       {name:\"returnGeometry\",value:geo},\r\n       {name:\"outFields\",value:outfields}\r\n      ]\r\n}\r\nexport const querySetting=(num,where,geo,outfields, url)=>{\r\n    \r\n    \r\n    return {\r\n        url:(url || mapUrl)+\"/\"+num,\r\n        where,\r\n        returnGeometry:geo,\r\n        outFields:outfields\r\n}\r\n\r\n}\r\nexport const DataReqest=(url,callBack)=>{\r\n    loadModules([\"esri/request\"], options)\r\n    .then(([request]) => {\r\n        request({\r\n            url: url,\r\n            content: {f:\"json\"},\r\n            handleAs: \"json\",\r\n            callbackParamName:\"callback\"\r\n        }).then(callBack);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport { esriRequest } from \"../common/esri_request\";\r\nimport { workFlowUrl } from \"config\";\r\nimport { serverFieldMapper } from \"app/helpers/functions\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport renderField from \"app/components/inputs\";\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  addParcelNo,\r\n  convertToArabic,\r\n  getPacrelNoAngle,\r\n  drawLength,\r\n  convertToEnglish,\r\n  map_object,\r\n  delete_null_object,\r\n  checkParcelAdjacents,\r\n  localizeNumber,\r\n  uploadGISFile,\r\n} from \"../common/common_func\";\r\nimport store from \"reducers\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { geometryServiceUrl, mapUrl } from \"../mapviewer/config/map\";\r\nimport { Select, Button, Form, message, Tooltip, Divider } from \"antd\";\r\n// import \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nimport { StickyContainer, Sticky } from \"react-sticky\";\r\nimport {\r\n  faMapPin,\r\n  faSearchPlus,\r\n  faTrash,\r\n  faArrowsAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Collapse } from \"antd\";\r\nconst { Panel } = Collapse;\r\n\r\nvar uniqid = require(\"uniqid\");\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n  reject,\r\n} from \"lodash\";\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport axios from \"axios\";\r\nimport { host } from \"config\";\r\nimport {\r\n  getParcels,\r\n  onBlockChange,\r\n  onLandParcelChange,\r\n  onMunChange,\r\n  onPlaneChange,\r\n  onSearch,\r\n  onSubNameChange,\r\n  onSubTypeChange,\r\n} from \"../common\";\r\nimport updateContractIdentifyComponnent from \"../updateContractIdentifyComponnent\";\r\nconst { Option } = Select;\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"lands\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\n\r\nclass propertyRemovalComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let lands =\r\n      (props.input && props?.input?.value) ||\r\n      props?.mainObject?.landData?.landData?.lands;\r\n    this.PlanNum = [];\r\n    this.planId = null;\r\n    this.parcelTs = [];\r\n    //this.parcelFilterWhere = \"\";\r\n    this.selectedLandsT =\r\n      (lands?.temp?.parcelDis && [{ features: lands?.temp?.parcelDis }]) || [];\r\n    this.selectedLands = [];\r\n    this.selectionMode = false;\r\n    this.lists = [\r\n      [\r\n        {\r\n          name: \"PARCEL_METER_PRICE\",\r\n          hideLabel: true,\r\n          visible: true,\r\n          editable: true,\r\n          field: \"inputNumber\",\r\n          placeholder: \"سعر المتر (ريال)\",\r\n          colSpan: null,\r\n        },\r\n        {\r\n          name: \"PARCEL_AREA\",\r\n          hideLabel: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          visible: true,\r\n          placeholder: \"مساحة قطعة الأرض (م۲)\",\r\n          colSpan: null,\r\n        },\r\n        {\r\n          name: \"PARCEL_CUT_AREA\",\r\n          hideLabel: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          visible: true,\r\n          placeholder: \"مساحة الجزء المنزوع (م۲)\",\r\n          colSpan: null,\r\n        },\r\n      ],\r\n      [\r\n        {\r\n          name: \"PARCEL_Remain_AREA\",\r\n          hideLabel: true,\r\n          visible: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          placeholder: \"مساحة الجزء المتبقي (م۲)\",\r\n        },\r\n        {\r\n          name: \"BUILDING_METER_PRICE\",\r\n          hideLabel: true,\r\n          visible: true,\r\n          editable: true,\r\n          field: \"inputNumber\",\r\n          placeholder: \"سعر المتر للبناء (ريال)\",\r\n        },\r\n        {\r\n          name: \"BUILDING_AREA\",\r\n          hideLabel: true,\r\n          visible: true,\r\n          editable: true,\r\n          field: \"inputNumber\",\r\n          placeholder: \"مساحة البناء (م۲)\",\r\n        },\r\n      ],\r\n      [\r\n        {\r\n          name: \"total_of_totals_of_prices\",\r\n          hideLabel: true,\r\n          visible: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          placeholder: \"المبلغ الاجمالي لكامل الأرض (ريال)\",\r\n        },\r\n        {\r\n          name: \"total_of_totals_of_cut_prices\",\r\n          hideLabel: true,\r\n          visible: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          placeholder: \"المبلغ الاجمالي للجزء المنزوع (ريال)\",\r\n        },\r\n        {\r\n          name: \"TOTAL_BUILDING_METER_PRICE\",\r\n          hideLabel: true,\r\n          visible: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          placeholder: \"المبلغ الاجمالي للمبنى (ريال)\",\r\n        },\r\n      ],\r\n      [\r\n        {\r\n          name: \"FULL_BUILDING_PRICE\",\r\n          hideLabel: true,\r\n          visible: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          placeholder: \"قيمة التعويض للعقار شامل المبني (ريال)\",\r\n          defaultValue: (attributes) => {\r\n            return (\r\n              (+attributes[\"total_of_totals_of_cut_prices\"] || 0) +\r\n              (+attributes[\"TOTAL_BUILDING_METER_PRICE\"] || 0)\r\n            ).toFixed(2);\r\n          },\r\n        },\r\n        {\r\n          name: \"FULL_BUILDING_PRICE_20\",\r\n          hideLabel: true,\r\n          visible: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          placeholder: \"اجمالي قيمة التعويض بعد اضافة 20% (ريال)\",\r\n          colSpan: \"3\",\r\n          defaultValue: (attributes) => {\r\n            let total = (\r\n              (+attributes[\"total_of_totals_of_cut_prices\"] || 0) +\r\n              (+attributes[\"TOTAL_BUILDING_METER_PRICE\"] || 0)\r\n            ).toFixed(2);\r\n            return (+total + +total * 0.2).toFixed(2);\r\n          },\r\n        },\r\n      ],\r\n    ];\r\n\r\n    this.lists.forEach((list) => {\r\n      list = map(list, (value, key) => ({\r\n        name: key,\r\n        ...serverFieldMapper(value),\r\n      }));\r\n    });\r\n\r\n    this.parcel_fields_headers_shatfa = [\r\n      \"الإتجاه\",\r\n      \"شمال / شرق\",\r\n      \"شمال / غرب\",\r\n      \"جنوب / شرق\",\r\n      \"جنوب / غرب\",\r\n    ];\r\n    this.parcel_fields_shatfa = [\r\n      { name: \"direction\", editable: false },\r\n      { name: \"SHATFA_NORTH_EAST_DIRECTION\", editable: true },\r\n      { name: \"SHATFA_NORTH_WEST_DIRECTION\", editable: true },\r\n      { name: \"SHATFA_SOUTH_EAST_DIRECTION\", editable: true },\r\n      { name: \"SHATFA_SOUTH_WEST_DIRECTION\", editable: true },\r\n    ];\r\n\r\n    this.parcel_fields_headers = this.props.parcel_fields_headers || [\r\n      \"البلدية\",\r\n      \"رقم المخطط\",\r\n      \"رقم الأرض\",\r\n      \"المساحة من الطبيعة (م۲)\",\r\n      \"رقم البلك\",\r\n      \"الحي\",\r\n      \"نوع التقسيم\",\r\n      \"اسم التقسيم\",\r\n      \"رمز الإستخدام\",\r\n      \"مساحة البناء (م٢)\",\r\n    ];\r\n\r\n    this.parcel_cut_fields = [\r\n      {\r\n        name: \"PARCEL_CUT_AREA\",\r\n        editable: true,\r\n        type: \"number\",\r\n        label: \"المساحة المنزوعة (م٢)\",\r\n      },\r\n      {\r\n        name: \"PARCEL_CUT_North_Lenght\",\r\n        editable: true,\r\n        type: \"number\",\r\n        label: \"طول الحد الشمالي (م)\",\r\n      },\r\n      {\r\n        name: \"PARCEL_CUT_North_Desc\",\r\n        editable: true,\r\n        type: \"text\",\r\n        label: \"وصف الحد الشمالي\",\r\n      },\r\n      {\r\n        name: \"PARCEL_CUT_East_Lenght\",\r\n        editable: true,\r\n        type: \"number\",\r\n        label: \"طول الحد الشرقي (م)\",\r\n      },\r\n      {\r\n        name: \"PARCEL_CUT_East_Desc\",\r\n        editable: true,\r\n        type: \"text\",\r\n        label: \"وصف الحد الشرقي\",\r\n      },\r\n      {\r\n        name: \"PARCEL_CUT_South_Lenght\",\r\n        editable: true,\r\n        type: \"number\",\r\n        label: \"طول الحد الجنوبي (م)\",\r\n      },\r\n      {\r\n        name: \"PARCEL_CUT_South_Desc\",\r\n        editable: true,\r\n        type: \"text\",\r\n        label: \"وصف الحد الجنوبي\",\r\n      },\r\n      {\r\n        name: \"PARCEL_CUT_West_Lenght\",\r\n        editable: true,\r\n        type: \"number\",\r\n        label: \"طول الحد الغربي (م)\",\r\n      },\r\n      {\r\n        name: \"PARCEL_CUT_West_Desc\",\r\n        editable: true,\r\n        type: \"text\",\r\n        label: \"وصف الحد الغربي\",\r\n      },\r\n    ];\r\n\r\n    this.parcel_uncut_fields = [\r\n      {\r\n        name: \"PARCEL_Remain_AREA\",\r\n        editable: true,\r\n        type: \"number\",\r\n        label: \"المساحة المتبقية من الأرض (م٢)\",\r\n      },\r\n      {\r\n        name: \"PARCEL_Remain_North_Lenght\",\r\n        editable: true,\r\n        type: \"number\",\r\n        label: \"طول الحد الشمالي (م)\",\r\n      },\r\n      {\r\n        name: \"PARCEL_Remain_North_Desc\",\r\n        editable: true,\r\n        type: \"text\",\r\n        label: \"وصف الحد الشمالي\",\r\n      },\r\n      {\r\n        name: \"PARCEL_Remain_East_Lenght\",\r\n        editable: true,\r\n        type: \"number\",\r\n        label: \"طول الحد الشرقي (م)\",\r\n      },\r\n      {\r\n        name: \"PARCEL_Remain_East_Desc\",\r\n        editable: true,\r\n        type: \"text\",\r\n        label: \"وصف الحد الشرقي\",\r\n      },\r\n      {\r\n        name: \"PARCEL_Remain_South_Lenght\",\r\n        editable: true,\r\n        type: \"number\",\r\n        label: \"طول الحد الجنوبي (م)\",\r\n      },\r\n      {\r\n        name: \"PARCEL_Remain_South_Desc\",\r\n        editable: true,\r\n        type: \"text\",\r\n        label: \"وصف الحد الجنوبي\",\r\n      },\r\n      {\r\n        name: \"PARCEL_Remain_West_Lenght\",\r\n        editable: true,\r\n        type: \"number\",\r\n        label: \"طول الحد الغربي (م)\",\r\n      },\r\n      {\r\n        name: \"PARCEL_Remain_West_Desc\",\r\n        editable: true,\r\n        type: \"text\",\r\n        label: \"وصف الحد الغربي\",\r\n      },\r\n    ];\r\n    let isView = this.props.isView || this.props.field.isView;\r\n    this.parcel_fields = this.props.parcel_fields || [\r\n      { name: \"MUNICIPALITY_NAME\", editable: false, type: \"text\" },\r\n      { name: \"PLAN_NO\", editable: false, type: \"text\" },\r\n      { name: \"PARCEL_PLAN_NO\", editable: false, type: \"text\" },\r\n      {\r\n        name: \"PARCEL_AREA\",\r\n        editable: (!isView && true) || false,\r\n        type: \"number\",\r\n      },\r\n      {\r\n        name: \"PARCEL_BLOCK_NO\",\r\n        editable: (!isView && true) || false,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        name: \"DISTRICT_NAME\",\r\n        editable: (!isView && true) || false,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        name: \"SUBDIVISION_TYPE\",\r\n        editable: true,\r\n        type: \"select\",\r\n      },\r\n      {\r\n        name: \"SUBDIVISION_DESCRIPTION\",\r\n        editable: true,\r\n        type: \"text\",\r\n      },\r\n      { name: \"USING_SYMBOL\", editable: false },\r\n      { name: \"BUILD_AREA\", editable: true, type: \"number\" },\r\n    ];\r\n\r\n    if (lands?.selectedMoamlaType == 1) {\r\n      this.parcel_fields_headers.push(\"عدد الوحدات\");\r\n      this.parcel_fields.push({ name: \"UNITS_NUMBER\", editable: false });\r\n    }\r\n\r\n    this.checkUnitNumberAvailability(\r\n      [...(lands?.parcels || [])],\r\n      lands?.temp?.mun\r\n    );\r\n\r\n    this.parcelDataFields = {};\r\n    this.parcelShatfaFields = {};\r\n    this.parcelElectricFields = {};\r\n\r\n    ///////////////////////////////////////////////\r\n\r\n    this.parcelElectricFields[\"electric_room_area\"] = {\r\n      label: \"مساحة غرفة الكهرباء\",\r\n      placeholder: \"من فضلك ادخل مساحة غرفة الكهرباء\",\r\n      field: \"inputNumber\",\r\n      name: \"electric_room_area\",\r\n      required: false,\r\n    };\r\n    this.parcelElectricFields[\"electric_room_place\"] = {\r\n      label: \"مكان غرفة الكهرباء\",\r\n      placeholder: \"من فضلك ادخل مكان غرفة الكهرباء\",\r\n      type: \"input\",\r\n      field: \"select\",\r\n      data: [\r\n        { label: \"(شمال / شرق)\", value: \"(شمال / شرق)\" },\r\n        { label: \"(شمال / غرب)\", value: \"(شمال / غرب)\" },\r\n        { label: \"(جنوب / شرق)\", value: \"(جنوب / شرق)\" },\r\n        { label: \"(جنوب / غرب)\", value: \"(جنوب / غرب)\" },\r\n      ],\r\n      name: \"electric_room_place\",\r\n      required: false,\r\n    };\r\n\r\n    ///////////////////////////////////////////////\r\n\r\n    this.parcelShatfaFields[\"SHATFA_NORTH_EAST_DIRECTION\"] = {\r\n      label: \"مساحة الشطفة في إتجاة (شمال / شرق) \",\r\n      placeholder: \" من فضلك ادخل مساحة الشطفة في إتجاة (شمال / شرق) \",\r\n      field: \"inputNumber\",\r\n      name: \"SHATFA_NORTH_EAST_DIRECTION\",\r\n      required: false,\r\n    };\r\n    this.parcelShatfaFields[\"SHATFA_NORTH_WEST_DIRECTION\"] = {\r\n      label: \"مساحة الشطفة في إتجاة (شمال / غرب) \",\r\n      placeholder: \"من فضلك ادخل مساحة الشطفة في إتجاة (شمال / غرب)\",\r\n      field: \"inputNumber\",\r\n      name: \"SHATFA_NORTH_WEST_DIRECTION\",\r\n      required: false,\r\n    };\r\n    this.parcelShatfaFields[\"SHATFA_SOUTH_EAST_DIRECTION\"] = {\r\n      label: \"مساحة الشطفة في إتجاة (جنوب / شرق) \",\r\n      placeholder: \"من فضلك ادخل مساحة الشطفة في إتجاة (جنوب / شرق)\",\r\n      field: \"inputNumber\",\r\n      name: \"SHATFA_SOUTH_EAST_DIRECTION\",\r\n      required: false,\r\n    };\r\n    this.parcelShatfaFields[\"SHATFA_SOUTH_WEST_DIRECTION\"] = {\r\n      label: \"مساحة الشطفة في إتجاة (جنوب / غرب) \",\r\n      placeholder: \"من فضلك ادخل مساحة الشطفة في إتجاة (جنوب / غرب)\",\r\n      field: \"inputNumber\",\r\n      name: \"SHATFA_SOUTH_WEST_DIRECTION\",\r\n      required: false,\r\n    };\r\n\r\n    //////////////////////////////////////////////\r\n\r\n    if (\r\n      ([22, 23].indexOf(props.currentModule.id) != -1 ||\r\n        [1928].indexOf(props.currentModule.record.workflow_id) != -1) &&\r\n      props.is_parcel_type\r\n    ) {\r\n      this.parcelDataFields[\"parcel_type\"] = {\r\n        label: \"عبارة عن\",\r\n        placeholder: \"من فضلك اخل نوع الأرض\",\r\n        type: \"text\",\r\n        name: \"parcel_type\",\r\n        required: true,\r\n      };\r\n    }\r\n    this.parcelDataFields[\"north_length\"] = {\r\n      label: \"طول الحد الشمالي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الشمالي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"north_length\",\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"north_desc\"] = {\r\n      label: \"وصف الحد الشمالي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشمالي\",\r\n      type: \"text\",\r\n      name: \"north_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"south_length\"] = {\r\n      label: \"طول الحد الجنوبي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الجنوبي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"south_length\",\r\n      required: true,\r\n    };\r\n    (this.parcelDataFields[\"south_desc\"] = {\r\n      label: \"وصف الحد الجنوبي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الجنوبي\",\r\n      type: \"text\",\r\n      name: \"south_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    }),\r\n      (this.parcelDataFields[\"east_length\"] = {\r\n        label: \"طول الحد الشرقي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الشرقي (م)\",\r\n        field: \"inputNumber\",\r\n        name: \"east_length\",\r\n        required: true,\r\n      });\r\n    this.parcelDataFields[\"east_desc\"] = {\r\n      label: \"وصف الحد الشرقي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشرقي\",\r\n      type: \"text\",\r\n      name: \"east_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"west_length\"] = {\r\n      label: \"طول الحد الغربي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الغربي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"west_length\",\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"west_desc\"] = {\r\n      label: \"وصف الحد الغربي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الغربي\",\r\n      type: \"text\",\r\n      name: \"west_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n\r\n    map_object(lands?.parcels || []);\r\n\r\n    this.state = {\r\n      boundariesBtnIsVisible:\r\n        this.props.boundariesBtnIsVisible != undefined\r\n          ? this.props.boundariesBtnIsVisible\r\n          : true,\r\n      mapLoaded: false,\r\n      munval: lands?.temp?.mun || undefined,\r\n      planeval:\r\n        this.props.mainObject?.landData?.landData?.PLAN_NO ||\r\n        lands?.temp?.plan ||\r\n        undefined,\r\n      subTypeval: lands?.temp?.subTypeval || undefined,\r\n      subNameval: lands?.temp?.subNameval || undefined,\r\n      blockval: lands?.temp?.blockval || undefined,\r\n      selectedLands:\r\n        lands?.parcels?.map((land) => {\r\n          land.attributes.PARCEL_Remain_AREA = (\r\n            land.attributes.PARCEL_AREA - land.attributes.PARCEL_CUT_AREA\r\n          ).toFixed(2);\r\n          return land;\r\n        }) || [],\r\n      parcelval: lands?.temp?.parcelval || undefined,\r\n      conditions: lands?.conditions || undefined,\r\n      planSersh: null,\r\n      parcelNum: lands?.temp?.parcelDis || [],\r\n      parcelNumS: [],\r\n      requestTypes: [\r\n        { code: 1, name: \"فرز ودمج الأراضي\", key: \"\" },\r\n        { code: 2, name: \"تحديث وفرز الصكوك\", key: \"\" },\r\n        //{ code: 3, name: \"تقسيم\", key: \"\" },\r\n      ],\r\n      Req_types: [\r\n        { code: \"\", name: \"فرز ودمج أرض فضاء\", key: \"\" },\r\n        { code: \"duplix\", name: \"فرز دوبلكسات\", key: \"\" },\r\n      ],\r\n      // PlanNum:\r\n      //   (lands?.lists && lands?.lists.PlanNum) || [],\r\n      blockNum: [],\r\n      subDivNames: [],\r\n      subDivType: [],\r\n      MunicipalityNames: [],\r\n      PlanNum: [],\r\n      parcelId: null,\r\n      mapExtend: null,\r\n      parcelSearch: null,\r\n      poly: null,\r\n      selectedMoamlaType: lands?.selectedMoamlaType,\r\n      selected_Req_type: lands?.selected_Req_type,\r\n      selectedRequestType:\r\n        lands?.selectedRequestType ||\r\n        ([2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n          -1 &&\r\n          1) ||\r\n        props?.mainObject?.landData?.requestType ||\r\n        \"\",\r\n      parcelData: lands?.parcelData || {},\r\n      landsData: {},\r\n      domainLists: lands?.domainLists || {},\r\n      city_name: lands?.temp?.city_name,\r\n\r\n      survayParcelCutter: lands?.survayParcelCutter || [\r\n        {\r\n          direction: \"الشطفة\",\r\n          SHATFA_NORTH_EAST_DIRECTION: \"\",\r\n          SHATFA_NORTH_WEST_DIRECTION: \"\",\r\n          SHATFA_SOUTH_EAST_DIRECTION: \"\",\r\n          SHATFA_SOUTH_WEST_DIRECTION: \"\",\r\n        },\r\n      ],\r\n      electric_room_area: lands?.electric_room_area,\r\n      have_electric_room: lands?.have_electric_room,\r\n      electric_room_place: lands?.electric_room_place,\r\n    };\r\n\r\n    if (this.state.selectedMoamlaType == 2) {\r\n      /*this.parcelShatfaFields[\"isSubtractArea\"] = {\r\n        label: \"خصم مساحة الشطفة\",\r\n        field: \"boolean\",\r\n        type: \"boolean\",\r\n        name: \"isSubtractArea\",\r\n        required: false,\r\n      };\r\n\r\n      this.parcelElectricFields[\"isSubtractArea\"] = {\r\n        label: \"خصم مساحة غرفة الكهرباء\",\r\n        type: \"boolean\",\r\n        field: \"boolean\",\r\n        name: \"isSubtractArea\",\r\n        required: false,\r\n      };*/\r\n    }\r\n\r\n    this.isloaded = true;\r\n  }\r\n  LayerID = [];\r\n\r\n  UpdateSubmissionDataObject = () => {\r\n    const { parcelData } = this.state;\r\n    var fields = { ...parcelData.fields };\r\n    Object.keys(fields).map((key, index) => {\r\n      parcelData[key] = fields[key].value;\r\n    });\r\n    let lands =\r\n      (this.props.input && this.props?.input?.value) ||\r\n      this.props?.mainObject?.landData?.landData?.lands;\r\n    this.state.landsData = {\r\n      ...lands,\r\n      parcels: [...this.state.selectedLands],\r\n      parcelData: { ...parcelData },\r\n      domainLists: { ...this.state.domainLists },\r\n      // lists: {\r\n      //   firstParcels: [...this.state.parcelNum],\r\n      //   subDivNames: [...this.state.subDivNames],\r\n      //   MunicipalityNames: [...this.state.MunicipalityNames],\r\n      //   subDivType: [...this.state.subDivType],\r\n      //   PlanNum: [...this.state.PlanNum],\r\n      //   blockNum: [...this.state.blockNum],\r\n      // },\r\n      survayParcelCutter: this.state.survayParcelCutter,\r\n      electric_room_area: this.state.electric_room_area,\r\n      have_electric_room: this.state.have_electric_room,\r\n      electric_room_place: this.state.electric_room_place,\r\n      selected_Req_type: this.state.selected_Req_type,\r\n      selectedMoamlaType: this.state.selectedMoamlaType,\r\n      selectedRequestType:\r\n        (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n          [1928].indexOf(this.props?.currentModule?.record?.workflow_id) !=\r\n            -1) &&\r\n          [2190, 2191].indexOf(\r\n            this.props?.currentModule?.record?.workflow_id\r\n          ) == -1 &&\r\n          this.state.selectedRequestType) ||\r\n        ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n          \"فرد\") ||\r\n        ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n          \"اصدار الكروكي (المواطن)\") ||\r\n        3,\r\n    };\r\n\r\n    this.state.landsData[\"selectedRequestType\"] =\r\n      (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n        [1928].indexOf(this.props?.currentModule?.record?.workflow_id) != -1) &&\r\n        [2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n          -1 &&\r\n        this.state.selectedRequestType) ||\r\n      ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"فرد\") ||\r\n      ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"اصدار الكروكي (المواطن)\") ||\r\n      3;\r\n    //this.props.input.onChange({ ...this.state.landsData });\r\n    this.setState({ parcelData }, () => {\r\n      this.setToStore();\r\n    });\r\n  };\r\n\r\n  farzRequestType = (value) => {\r\n    this.setState(\r\n      {\r\n        selected_Req_type: value,\r\n      },\r\n      () => {\r\n        this.UpdateSubmissionDataObject();\r\n      }\r\n    );\r\n  };\r\n\r\n  moamlaTypeChange = (value) => {\r\n    if (value == 2) {\r\n      /*this.parcelShatfaFields[\"isSubtractArea\"] = {\r\n        label: \"خصم مساحة الشطفة\",\r\n        field: \"boolean\",\r\n        type: \"boolean\",\r\n        name: \"isSubtractArea\",\r\n        required: false,\r\n      };\r\n\r\n      this.parcelElectricFields[\"isSubtractArea\"] = {\r\n        label: \"خصم مساحة غرفة الكهرباء\",\r\n        type: \"boolean\",\r\n        field: \"boolean\",\r\n        name: \"isSubtractArea\",\r\n        required: false,\r\n      };*/\r\n\r\n      this.parcel_fields_headers = [\r\n        ...this.parcel_fields_headers.filter((x) => x != \"عدد الوحدات\"),\r\n      ];\r\n      this.parcel_fields = [\r\n        ...this.parcel_fields.filter((x) => x.name != \"UNITS_NUMBER\"),\r\n      ];\r\n    } else {\r\n      delete this.parcelShatfaFields[\"isSubtractArea\"];\r\n      delete this.parcelElectricFields[\"isSubtractArea\"];\r\n\r\n      this.state.selectedLands.forEach((parcel) => {\r\n        delete parcel.parcelElectric?.isSubtractArea;\r\n        delete parcel.parcelShatfa?.isSubtractArea;\r\n      });\r\n\r\n      if (!this.parcel_fields_headers.find((x) => x == \"عدد الوحدات\")) {\r\n        this.parcel_fields_headers.push(\"عدد الوحدات\");\r\n        this.parcel_fields.push({ name: \"UNITS_NUMBER\", editable: false });\r\n      }\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        selectedMoamlaType: value,\r\n      },\r\n      () => {\r\n        this.UpdateSubmissionDataObject();\r\n      }\r\n    );\r\n  };\r\n\r\n  parcelQueryTask = (value) => {\r\n    this.setState({\r\n      selectedLands: [],\r\n      selectedLandsT: [],\r\n      parcelId: null,\r\n      parcelNum: [],\r\n      parcelData: {},\r\n      selectedRequestType: value,\r\n    });\r\n    esriRequest(mapUrl + \"/\" + this.LayerID[\"Landbase_Parcel\"]).then(\r\n      (response) => {\r\n        let { domainLists } = this.state;\r\n        domainLists.usingSymbols = [];\r\n        domainLists.districtNames = [];\r\n        domainLists.SUB_MUNICIPALITY_NAME_Domains = [];\r\n        domainLists.cityNames = [];\r\n        response.fields.forEach(function (val) {\r\n          //;\r\n          if (val.name === \"USING_SYMBOL\") {\r\n            // list.push(val.domain);\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              // ////\r\n              domainLists.usingSymbols.push(domain);\r\n            });\r\n          } else if (val.name === \"DISTRICT_NAME\") {\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              // ////\r\n              domainLists.districtNames.push(domain);\r\n            });\r\n          } else if (val.name === \"SUB_MUNICIPALITY_NAME\") {\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              // ////\r\n              domainLists.SUB_MUNICIPALITY_NAME_Domains.push(domain);\r\n            });\r\n          } else if (val.name === \"CITY_NAME\") {\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              domainLists.cityNames.push(domain);\r\n            });\r\n          }\r\n        });\r\n        this.DrawGraph();\r\n        this.UpdateSubmissionDataObject();\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (\r\n      // this.props.mainObject &&\r\n      // this.props.mainObject.landData &&\r\n      this.isloaded\r\n    ) {\r\n      window.filterUrl = mapUrl;\r\n      getInfo().then((res) => {\r\n        this.LayerID = res;\r\n        getParcels(this, null, \"\", { returnDistinctValues: true }, [\r\n          \"MUNICIPALITY_NAME\",\r\n        ]).then((features) => {\r\n          getFeatureDomainName(features, this.LayerID.Landbase_Parcel).then(\r\n            (features) => {\r\n              this.setState(\r\n                {\r\n                  MunicipalityNames: features\r\n                    .filter((r) => r.attributes.MUNICIPALITY_NAME)\r\n                    .map((r) => {\r\n                      return {\r\n                        code: r.attributes.MUNICIPALITY_NAME_Code,\r\n                        name: r.attributes.MUNICIPALITY_NAME,\r\n                      };\r\n                    }),\r\n                  allParcels: features,\r\n                },\r\n                () => {\r\n                  this.loadLists = true;\r\n                  if (this.state.munval) {\r\n                    onMunChange(this, this.state.munval, () => {\r\n                      onPlaneChange(this, this.state.planeval, () => {\r\n                        onSubTypeChange(this, this.state.subTypeval, () => {\r\n                          onSubNameChange(this, this.state.subNameval, () => {\r\n                            onBlockChange(this, this.state.blockval, () => {\r\n                              onLandParcelChange(\r\n                                this,\r\n                                this.state.parcelval,\r\n                                () => {}\r\n                              );\r\n                            });\r\n                          });\r\n                        });\r\n                      });\r\n                    });\r\n                  }\r\n                  this.loadLists = false;\r\n                }\r\n              );\r\n            }\r\n          );\r\n        });\r\n        esriRequest(mapUrl + \"/\" + this.LayerID.Subdivision).then(\r\n          (response) => {\r\n            if (this.parcel_fields[6]) {\r\n              this.parcel_fields[6].options =\r\n                response.fields[7].domain.codedValues;\r\n            }\r\n            this.setState({\r\n              subDivType: response.fields[7].domain.codedValues,\r\n            });\r\n            //this.forceUpdate();\r\n          }\r\n        );\r\n      });\r\n\r\n      this.isloaded = false;\r\n      //this.DrawGraph();\r\n\r\n      //this.UpdateSubmissionDataObject();\r\n    }\r\n  }\r\n\r\n  // onMunChange = (e, callback) => {\r\n  //   if (\r\n  //     (!callback || (callback && typeof callback == \"object\")) &&\r\n  //     !this.loadLists\r\n  //   ) {\r\n  //     clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //     this.setState({\r\n  //       munval: e,\r\n  //       planeval: undefined,\r\n  //       subTypeval: undefined,\r\n  //       subNameval: undefined,\r\n  //       blockval: undefined,\r\n  //       parcelval: undefined,\r\n  //       // selectedLands: [],\r\n  //       // selectedLandsT: [],\r\n  //       PlanNum: [],\r\n  //       blockNum: [],\r\n  //       subDivNames: [],\r\n  //       //subDivType: [],\r\n  //       parcelId: null,\r\n  //       parcelNum: [],\r\n  //       parcelData: {},\r\n  //     });\r\n\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Municipality_Boundary,\r\n  //         `MUNICIPALITY_NAME='${e}'`,\r\n  //         true,\r\n  //         [\"*\"]\r\n  //       ),\r\n  //       callbackResult: (res) => {\r\n  //         this.pol = res.features[0];\r\n  //         highlightFeature(this.pol, this.map, {\r\n  //           layerName: \"SelectGraphicLayer\",\r\n  //           isZoom: true,\r\n  //           isHiglightSymbol: true,\r\n  //           highlighColor: [0, 0, 0, 0.25],\r\n  //         });\r\n  //         this.setState({ city_name: this.pol?.attributes?.CITY_NAME_A || \"\" });\r\n  //       },\r\n  //     });\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Plan_Data,\r\n  //         `MUNICIPALITY_NAME='${e}'`,\r\n  //         false,\r\n  //         [\"PLAN_SPATIAL_ID\", \"PLAN_NO\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         this.setState({\r\n  //           PlanNum: res.features.map((e, i) => {\r\n  //             return {\r\n  //               ...e,\r\n  //               i: uniqid(),\r\n  //             };\r\n  //           }),\r\n  //         });\r\n  //       },\r\n  //     });\r\n  //     this.resetGraphics();\r\n  //   } else {\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Municipality_Boundary,\r\n  //         `MUNICIPALITY_NAME='${e}'`,\r\n  //         true,\r\n  //         [\"*\"]\r\n  //       ),\r\n  //       callbackResult: (res) => {\r\n  //         this.pol = res.features[0];\r\n  //         this.planId = null;\r\n  //         if (e) {\r\n  //           queryTask({\r\n  //             ...querySetting(\r\n  //               this.LayerID.Plan_Data,\r\n  //               `MUNICIPALITY_NAME='${e}'`,\r\n  //               false,\r\n  //               [\"PLAN_SPATIAL_ID\", \"PLAN_NO\"]\r\n  //             ),\r\n  //             returnGeometry: true,\r\n  //             callbackResult: (res) => {\r\n  //               this.setState(\r\n  //                 {\r\n  //                   PlanNum: res.features.map((e, i) => {\r\n  //                     return {\r\n  //                       ...e,\r\n  //                       i: uniqid(),\r\n  //                     };\r\n  //                   }),\r\n  //                 },\r\n  //                 callback\r\n  //               );\r\n  //             },\r\n  //           });\r\n  //         } else {\r\n  //           if (callback && typeof callback == \"function\") {\r\n  //             callback();\r\n  //           }\r\n  //         }\r\n  //       },\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  resetFields = () => {\r\n    this.props.onChange([]);\r\n    this.setState({ selectedLands: [], selectedLandsT: [] });\r\n  };\r\n\r\n  // onPlaneChange = (f, callback) => {\r\n  //   var planSpatialId = this.state.PlanNum.filter(\r\n  //     (m) => m.i == f || m.attributes.PLAN_NO == f\r\n  //   )?.[0]?.attributes?.PLAN_SPATIAL_ID;\r\n  //   this.planId = planSpatialId;\r\n  //   if (\r\n  //     (!callback || (callback && typeof callback == \"object\")) &&\r\n  //     !this.loadLists\r\n  //   ) {\r\n  //     clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //     clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n  //     this.setState({\r\n  //       plan_no: this.state.PlanNum.filter((m) => m.i == f)?.[0]?.attributes\r\n  //         ?.PLAN_NO,\r\n  //       planeval: f,\r\n  //       subTypeval: undefined,\r\n  //       subNameval: undefined,\r\n  //       blockval: undefined,\r\n  //       parcelval: undefined,\r\n  //       blockNum: [],\r\n  //       subDivNames: [],\r\n  //       // subDivType: [],\r\n  //       parcelId: null,\r\n  //       parcelNum: [],\r\n  //       parcelData: {},\r\n  //       // selectedLands: [],\r\n  //       // selectedLandsT: [],\r\n  //     });\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Plan_Data,\r\n  //         `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //         true,\r\n  //         [\"MUNICIPALITY_NAME\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         this.pol = res.features[0];\r\n  //         highlightFeature(res.features[0], this.map, {\r\n  //           layerName: \"SelectGraphicLayer\",\r\n  //           isZoom: true,\r\n  //           isHiglightSymbol: true,\r\n  //           highlighColor: [0, 0, 0, 0.25],\r\n  //         });\r\n  //       },\r\n  //     });\r\n  //     this.getParcelsWithinBufferedArea(\r\n  //       this.state.PlanNum.filter((m) => m.i == f)?.[0],\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`\r\n  //     ).then((resps) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: resps.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     });\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Survey_Block,\r\n  //         `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //         false,\r\n  //         [\"BLOCK_NO\", \"BLOCK_SPATIAL_ID\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         this.setState({ blockNum: res.features });\r\n  //       },\r\n  //     });\r\n  //     this.resetGraphics();\r\n  //   } else {\r\n  //     this.pol = this.state.PlanNum.filter(\r\n  //       (m) => m.i == f || m.attributes.PLAN_NO == f\r\n  //     )?.[0];\r\n\r\n  //     if (f) {\r\n  //       queryTask({\r\n  //         ...querySetting(\r\n  //           this.LayerID.Survey_Block,\r\n  //           `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //           false,\r\n  //           [\"BLOCK_NO\", \"BLOCK_SPATIAL_ID\"]\r\n  //         ),\r\n  //         returnGeometry: true,\r\n  //         callbackResult: (res) => {\r\n  //           this.setState({ blockNum: res.features }, callback);\r\n  //         },\r\n  //       });\r\n  //     } else {\r\n  //       if (callback && typeof callback == \"function\") {\r\n  //         callback();\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // };\r\n  // onSubTypeChange = (e, callback) => {\r\n  //   //this.onPlaneChange(this.state.planeval);\r\n  //   if (\r\n  //     (!callback || (callback && typeof callback == \"object\")) &&\r\n  //     !this.loadLists\r\n  //   ) {\r\n  //     this.setState({\r\n  //       subType_name: this.state.subDivType.filter((m) => m.code == e)?.[0]\r\n  //         ?.name,\r\n  //       subTypeval: e,\r\n  //     });\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Subdivision,\r\n  //         `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${this.planId}`,\r\n  //         false,\r\n  //         [\"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_SPATIAL_ID\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         this.setState({ subDivNames: res.features });\r\n  //       },\r\n  //     });\r\n  //   } else {\r\n  //     if (e) {\r\n  //       queryTask({\r\n  //         ...querySetting(\r\n  //           this.LayerID.Subdivision,\r\n  //           `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${this.planId}`,\r\n  //           false,\r\n  //           [\"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_SPATIAL_ID\"]\r\n  //         ),\r\n  //         returnGeometry: true,\r\n  //         callbackResult: (res) => {\r\n  //           this.setState({ subDivNames: res.features }, callback);\r\n  //         },\r\n  //       });\r\n  //     } else {\r\n  //       if (callback && typeof callback == \"function\") {\r\n  //         callback();\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   // if (callback && typeof callback == \"function\") {\r\n  //   //   callback();\r\n  //   // }\r\n  //   // this.onSubNameChange(this.state.subNameval);\r\n  //   // this.DrawGraph();\r\n  // };\r\n\r\n  resetGraphics = () => {\r\n    /*this.state[\"selectedLands\"] = [];\r\n    this.state[\"selectedLandsT\"] = [];\r\n    this.parcelData = {};\r\n    this.DrawGraph();*/\r\n  };\r\n  // onSubNameChange = (value, callback) => {\r\n  //   var selectedSubDivName = this.state.subDivNames.filter(\r\n  //     (m) =>\r\n  //       m.attributes.SUBDIVISION_SPATIAL_ID == value ||\r\n  //       m.attributes.SUBDIVISION_DESCRIPTION == value\r\n  //   )?.[0];\r\n  //   //if (selectedSubDivName) {\r\n  //   var e = selectedSubDivName?.attributes?.SUBDIVISION_SPATIAL_ID;\r\n  //   if (\r\n  //     (!callback || (callback && typeof callback == \"object\")) &&\r\n  //     !this.loadLists\r\n  //   ) {\r\n  //     clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //     this.setState({\r\n  //       subName_name: selectedSubDivName?.attributes?.SUBDIVISION_DESCRIPTION,\r\n  //       subNameval: e,\r\n  //       blockval: undefined,\r\n  //       parcelval: undefined,\r\n  //       parcelNum: [],\r\n  //       parcelId: null,\r\n  //     });\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Subdivision,\r\n  //         `SUBDIVISION_SPATIAL_ID=${e}`,\r\n  //         true,\r\n  //         [\"SUBDIVISION_SPATIAL_ID\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         if (res) {\r\n  //           this.pol = res.features[0];\r\n  //           highlightFeature(res.features[0], this.map, {\r\n  //             layerName: \"SelectGraphicLayer\",\r\n  //             isZoom: true,\r\n  //             isHiglightSymbol: true,\r\n  //             highlighColor: [0, 0, 0, 0.25],\r\n  //           });\r\n  //         }\r\n  //       },\r\n  //     });\r\n  //     this.getParcelsWithinBufferedArea(\r\n  //       selectedSubDivName,\r\n  //       `SUBDIVISION_SPATIAL_ID=${e}`\r\n  //     ).then((res) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     });\r\n  //     this.resetGraphics();\r\n  //   } else {\r\n  //     this.pol = selectedSubDivName;\r\n  //     if (callback && typeof callback == \"function\") {\r\n  //       callback();\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  // onBlockChange = (e, callback) => {\r\n  //   if (\r\n  //     (!callback || (callback && typeof callback == \"object\")) &&\r\n  //     !this.loadLists\r\n  //   ) {\r\n  //     clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //     this.setState({\r\n  //       block_no: this.state.blockNum.filter(\r\n  //         (m) => m.attributes.BLOCK_SPATIAL_ID == e\r\n  //       )?.[0]?.attributes?.BLOCK_NO,\r\n  //       blockval: e,\r\n  //       parcelval: undefined,\r\n  //       parcelId: null,\r\n  //       parcelNum: [],\r\n  //       // selectedLands: [],\r\n  //       // selectedLandsT: [],\r\n  //     });\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Survey_Block,\r\n  //         `BLOCK_SPATIAL_ID=${e}`,\r\n  //         true,\r\n  //         [\"BLOCK_SPATIAL_ID\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         this.pol = res.features[0];\r\n  //         highlightFeature(res.features[0], this.map, {\r\n  //           layerName: \"SelectGraphicLayer\",\r\n  //           isZoom: true,\r\n  //           isHiglightSymbol: true,\r\n  //           highlighColor: [0, 0, 0, 0.25],\r\n  //         });\r\n  //       },\r\n  //     });\r\n  //     this.getParcelsWithinBufferedArea(\r\n  //       this.state.blockNum.filter(\r\n  //         (m) => m.attributes.BLOCK_SPATIAL_ID == e\r\n  //       )?.[0],\r\n  //       `BLOCK_SPATIAL_ID=${e}`\r\n  //     ).then((res) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     });\r\n  //     this.resetGraphics();\r\n  //   } else {\r\n  //     this.pol = this.state.blockNum.filter(\r\n  //       (m) => m.attributes.BLOCK_SPATIAL_ID == e\r\n  //     )?.[0];\r\n  //     if (callback && typeof callback == \"function\") {\r\n  //       callback();\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  // onLandParcelChange = (f, callback) => {\r\n  //\r\n  //   this.RolBackPol = this.pol;\r\n  //   this.RolBackParcelNum = this.state.parcelNum;\r\n  //   if (!this.state.selectedLands.length) {\r\n  //     var e = this.state.parcelNum.filter((m) => m.i === f)?.[0]?.attributes\r\n  //       ?.PARCEL_SPATIAL_ID;\r\n  //     if (\r\n  //       (!callback || (callback && typeof callback == \"object\")) &&\r\n  //       !this.loadLists\r\n  //     ) {\r\n  //       this.setState({ parcelId: e, parcelval: f });\r\n  //       this.getParcelsWithinBufferedArea(\r\n  //         this.RolBackPol,\r\n  //         `PARCEL_SPATIAL_ID='${e}'`\r\n  //       ).then((res) => {\r\n  //         this.selectedLandsT = [];\r\n  //         highlightFeature(res.features[0], this.map, {\r\n  //           layerName: \"SelectGraphicLayer\",\r\n  //           strokeColor: [0, 0, 0],\r\n  //           highlightWidth: 3,\r\n  //           isHighlighPolygonBorder: true,\r\n  //           isZoom: true,\r\n  //           zoomFactor: 10,\r\n  //         });\r\n  //       });\r\n  //     }\r\n  //   } else {\r\n  //     // clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n  //     if (f) {\r\n  //       var prevParcelId = this.state.parcelId;\r\n  //       var g = this.state.parcelNum.filter((m) => m.i == f)?.[0];\r\n  //       this.state[\"parcelId\"] = g?.attributes?.PARCEL_SPATIAL_ID;\r\n  //       //this.setState({ parcelId: g.attributes.PARCEL_SPATIAL_ID });\r\n\r\n  //       this.LandHoverOff(\r\n  //         this.map\r\n  //           .getLayer(\"SelectGraphicLayer\")\r\n  //           .graphics.find(\r\n  //             (prevGraphic) =>\r\n  //               prevGraphic.attributes.PARCEL_SPATIAL_ID == prevParcelId\r\n  //           )\r\n  //       );\r\n\r\n  //       this.setState({ parcelval: f });\r\n  //     }\r\n  //   }\r\n\r\n  //   if (callback && typeof callback == \"function\") {\r\n  //     callback();\r\n  //   }\r\n  // };\r\n\r\n  validation = (item) => {\r\n    const { t } = this.props;\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .post(\r\n          host +\r\n            \"/IsHasSubmission/\" +\r\n            item.attributes.PARCEL_SPATIAL_ID +\r\n            \"/\" +\r\n            (this.props.currentModule.record.id || 0),\r\n          {\r\n            PARCEL_PLAN_NO: item.attributes.PARCEL_PLAN_NO,\r\n            PARCEL_BLOCK_NO: item.attributes.PARCEL_BLOCK_NO,\r\n            PLAN_NO: item.attributes.PLAN_NO,\r\n            municipilty_code:\r\n              item.attributes.MUNICIPALITY_NAME_Code ||\r\n              item.attributes.MUNICIPALITY_NAME?.code ||\r\n              item.attributes.MUNICIPALITY_NAME,\r\n          }\r\n        )\r\n        .then(\r\n          (data) => {\r\n            if (data.status == 204 || item.attributes.IS_EDITED_Code != 1) {\r\n              return resolve();\r\n            } else {\r\n              window.notifySystem(\r\n                \"warning\",\r\n                t(\"messages:global.PARCELSWARNING\")\r\n              );\r\n              return reject();\r\n            }\r\n          },\r\n          (err) => {\r\n            window.notifySystem(\r\n              \"warning\",\r\n              t(\r\n                `messages:${\r\n                  err.msg ||\r\n                  (err &&\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.msg)\r\n                }`\r\n              )\r\n            );\r\n            return reject();\r\n          }\r\n        );\r\n      // if (item.attributes.IS_EDITED_Code != 1) {\r\n      //   return resolve();\r\n      // } else {\r\n      //   window.notifySystem(\"warning\", t(\"messages:PARCELSWARNING\"));\r\n      //   return reject();\r\n      // }\r\n    });\r\n  };\r\n\r\n  addParcelToSelect = (feature) => {\r\n    return new Promise((resolve, reject) => {\r\n      //if (this.state.selectedLands && this.state.selectedLands.length > 0) {\r\n      this.getParcelsWithinBufferedArea(\r\n        feature,\r\n        \"PARCEL_PLAN_NO is not null\",\r\n        true\r\n      ).then((res) => {\r\n        getFeatureDomainName(res.features, this.LayerID.Landbase_Parcel).then(\r\n          (r) => {\r\n            res.features = r.map((e, i) => {\r\n              return {\r\n                ...e,\r\n                i: uniqid(),\r\n              };\r\n            });\r\n\r\n            if (\r\n              [20, 21].indexOf(this.props?.currentModule?.record.app_id) ==\r\n                -1 &&\r\n              [2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n                -1\r\n            ) {\r\n              return resolve(res);\r\n              /*this.validation(feature, this.props).then(\r\n                () => {\r\n                  return resolve(res);\r\n                },\r\n                () => {\r\n                  return reject();\r\n                }\r\n              );*/\r\n            } else {\r\n              return resolve(res);\r\n            }\r\n          }\r\n        );\r\n      });\r\n      // intersectQueryTask({\r\n      //   outFields: [\r\n      //     \"OBJECTID\",\r\n      //     \"MUNICIPALITY_NAME\",\r\n      //     \"PARCEL_AREA\",\r\n      //     \"PARCEL_LAT_COORD\",\r\n      //     \"PARCEL_LONG_COORD\",\r\n      //     \"PARCEL_MAIN_LUSE\",\r\n      //     \"PLAN_NO\",\r\n      //     \"PARCEL_PLAN_NO\",\r\n      //     \"USING_SYMBOL\",\r\n      //     \"PARCEL_SPATIAL_ID\",\r\n      //   ],\r\n      //   distance: 20,\r\n      //   geometry: feature.geometry,\r\n      //   url: mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n      //   where: \"PARCEL_PLAN_NO is not null\",\r\n      //   callbackResult: (res) => {\r\n      //     getFeatureDomainName(res.features, this.LayerID.Landbase_Parcel).then(\r\n      //       (r) => {\r\n      //         res.features = res.features.map((e, i) => {\r\n      //           return {\r\n      //             ...e,\r\n      //             i: uniqid(),\r\n      //           };\r\n      //         });\r\n\r\n      //         if (\r\n      //           [20, 21].indexOf(this.props?.currentModule?.record.app_id) ==\r\n      //             -1 &&\r\n      //           [2191].indexOf(\r\n      //             this.props?.currentModule?.record?.workflow_id\r\n      //           ) == -1\r\n      //         ) {\r\n      //           this.validation(feature, this.props).then(\r\n      //             () => {\r\n      //               return resolve(res);\r\n      //             },\r\n      //             () => {\r\n      //               return reject();\r\n      //             }\r\n      //           );\r\n      //         } else {\r\n      //           return resolve(res);\r\n      //         }\r\n      //       }\r\n      //     );\r\n      //   },\r\n      // });\r\n      //}\r\n    });\r\n  };\r\n\r\n  getParcelsWithinBufferedArea = (\r\n    feature,\r\n    where,\r\n    isToIntersect = false,\r\n    outFields,\r\n    moreSettings = {}\r\n  ) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (isToIntersect) {\r\n        intersectQueryTask({\r\n          outFields: [\"*\"],\r\n          distance:\r\n            ([20, 21].indexOf(this.props?.currentModule?.record.app_id) == -1 &&\r\n              20) ||\r\n            50,\r\n          geometry: new esri.geometry.Polygon(feature.geometry),\r\n          url: mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n          where: where,\r\n          callbackResult: (res) => {\r\n            getFeatureDomainName(\r\n              res.features,\r\n              this.LayerID.Landbase_Parcel\r\n            ).then((r) => {\r\n              res.features = r;\r\n              return resolve(res);\r\n            });\r\n          },\r\n        });\r\n      } else {\r\n        if (where.indexOf(\"PARCEL_SPATIAL_ID\") < 0)\r\n          this.parcelFilterWhere = where;\r\n\r\n        queryTask({\r\n          ...querySetting(\r\n            this.LayerID.Landbase_Parcel,\r\n            where,\r\n            false,\r\n            (!outFields && [\r\n              \"PARCEL_SPATIAL_ID\",\r\n              \"PARCEL_PLAN_NO\",\r\n              \"OBJECTID\",\r\n            ]) || [...outFields]\r\n          ),\r\n          returnGeometry: false,\r\n          callbackResult: (res) => {\r\n            return resolve(res);\r\n          },\r\n          ...moreSettings,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  // onSearch = async ( filterValue) => {\r\n\r\n  //   if (!this.state.selectedLands.length && filterValue != \"\") {\r\n\r\n  //     if (this.searchTimeOut) clearTimeout(this.searchTimeOut);\r\n\r\n  //     this.searchTimeOut = setTimeout(async () => {\r\n\r\n  //       let filterQuery = [];\r\n  //       filterQuery.push(this.parcelFilterWhere);\r\n  //       filterQuery.push(\"PARCEL_PLAN_NO like '\" + filterValue + \"%'\");\r\n\r\n  //       let filterWhere = filterQuery.join(\" and \");\r\n  //       queryTask({\r\n  //         ...querySetting(this.LayerID.Landbase_Parcel, filterWhere, false,\r\n  //           [\r\n  //             \"PARCEL_SPATIAL_ID\",\r\n  //             \"PARCEL_PLAN_NO\",\r\n  //             \"OBJECTID\"\r\n  //           ]),\r\n  //         returnGeometry: false,\r\n  //         callbackResult: (res) => {\r\n  //           res.features = res.features.map((e, i) => {\r\n  //             return {\r\n  //               ...e,\r\n  //               i: uniqid(),\r\n  //             };\r\n  //           });\r\n  //           this.setState({\r\n  //             parcelId: null,\r\n  //             parcelNum: res.features,\r\n  //           });\r\n  //         }\r\n  //       });\r\n\r\n  //     }, 500);\r\n  //   }\r\n  // }\r\n\r\n  DrawInfo = () => {\r\n    drawLength(this.map, this.state.selectedLands);\r\n\r\n    clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n    highlightFeature(this.state.selectedLands, this.map, {\r\n      layerName: \"SelectLandsGraphicLayer\",\r\n      noclear: true,\r\n      attr: { isParcel: true },\r\n      isZoom: true,\r\n      isHighlighPolygonBorder: true,\r\n      zoomFactor: 10,\r\n    });\r\n  };\r\n\r\n  DrawGraph = () => {\r\n    if (!this.state.selectedLands.length) {\r\n      this.map.graphics.clear();\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"ZoomGraphicLayer\");\r\n      //this.onSubNameChange(this.state.subNameval);\r\n      this.setToStore(null);\r\n    } else {\r\n      this.parcelDis = selectDis(this.selectedLandsT);\r\n      console.log(this.parcelDis);\r\n      this.setAdjacentToStore(this.parcelDis);\r\n      this.setState({ parcelNum: this.parcelDis });\r\n\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"ZoomGraphicLayer\");\r\n      //clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\")\r\n      drawLength(this.map, this.state.selectedLands);\r\n      // highlightFeature(\r\n      //   this.parcelDis.filter(\r\n      //     (element) =>\r\n      //       !this.state.selectedLands.find(\r\n      //         (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n      //       )\r\n      //   ),\r\n      //   this.map,\r\n      //   {\r\n      //     layerName: \"SelectLandsGraphicLayer\",\r\n      //     noclear: false,\r\n      //     isZoom: false,\r\n      //     isHiglightSymbol: true,\r\n      //     highlighColor: [0, 255, 0, 0.5],\r\n      //     zoomFactor: 10,\r\n      //   }\r\n      // );\r\n\r\n      this.parcelDis\r\n        .filter(\r\n          (element) =>\r\n            !this.state.selectedLands.find(\r\n              (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n            )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"PacrelNoGraphicLayer\",\r\n            20,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n\r\n      highlightFeature(\r\n        this.parcelDis.filter((element) =>\r\n          this.state.selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectGraphicLayer\",\r\n          noclear: true,\r\n          attr: { isParcel: true },\r\n          isZoom: true,\r\n          isHighlighPolygonBorder: true,\r\n          zoomFactor: 10,\r\n        }\r\n      );\r\n\r\n      this.parcelDis\r\n        .filter((element) =>\r\n          this.state.selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"PacrelNoGraphicLayer\",\r\n            20,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  replaceAll(str, find, replace) {\r\n    return str.replace(new RegExp(find, \"g\"), replace);\r\n  }\r\n\r\n  mapLoaded = (map) => {\r\n    this.map = map;\r\n    this.props.setMap(map);\r\n    let lands =\r\n      (this.props.input && this.props.input?.value) ||\r\n      this.props?.mainObject?.landData?.landData?.lands;\r\n\r\n    if (lands?.parcels && lands?.temp) {\r\n      highlightFeature(lands?.parcels, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: true,\r\n        attr: { isParcel: true },\r\n        isHighlighPolygonBorder: true,\r\n        zoomFactor: 10,\r\n      });\r\n\r\n      if (!lands?.mapGraphics?.length) {\r\n        setTimeout(() => {\r\n          lands?.parcels.forEach((f) => {\r\n            f.geometry = new esri.geometry.Polygon(f.geometry);\r\n            addParcelNo(\r\n              f.geometry.getExtent().getCenter(),\r\n              this.map,\r\n              f.attributes.PARCEL_PLAN_NO + \"\",\r\n              \"PacrelNoGraphicLayer\",\r\n              20,\r\n              [0, 0, 0]\r\n            );\r\n          });\r\n\r\n          drawLength(this.map, lands?.parcels);\r\n          if (lands?.temp?.parcelDis?.length) {\r\n            lands?.temp.parcelDis\r\n              .filter(\r\n                (element) =>\r\n                  !lands?.parcels.find(\r\n                    (i) =>\r\n                      i.attributes.PARCEL_SPATIAL_ID ===\r\n                      element.attributes.PARCEL_SPATIAL_ID\r\n                  )\r\n              )\r\n              .forEach((f) => {\r\n                if (!f.geometry.getExtent) {\r\n                  f.geometry = new esri.geometry.Polygon(f.geometry);\r\n                }\r\n                addParcelNo(\r\n                  f.geometry.getExtent().getCenter(),\r\n                  this.map,\r\n                  f.attributes.PARCEL_PLAN_NO + \"\",\r\n                  \"PacrelNoGraphicLayer\",\r\n                  20,\r\n                  [0, 0, 0]\r\n                );\r\n              });\r\n\r\n            console.log(lands?.temp.parcelDis);\r\n            this.setState({\r\n              parcelSearch: null,\r\n              parcelNum: lands?.temp.parcelDis,\r\n            });\r\n          } else if (lands?.parcels?.length) {\r\n            checkParcelAdjacents(lands?.parcels, false);\r\n          }\r\n        }, 500);\r\n      }\r\n\r\n      this.state.landsData = {\r\n        ...lands,\r\n        conditions: this.state.conditions,\r\n        temp: {\r\n          //map: this.map,\r\n          mun: lands?.temp.mun,\r\n          plan:\r\n            this.props.mainObject?.landData?.landData?.PLAN_NO ||\r\n            lands?.temp.plan,\r\n          subTypeval: lands?.temp.subTypeval,\r\n          subNameval: lands?.temp.subNameval,\r\n          parcelDis: lands?.temp.parcelDis,\r\n          blockval: lands?.temp.blockval,\r\n          parcelval: lands?.temp.parcelval,\r\n          subname: lands?.temp.subname,\r\n          block_no: lands?.temp.block_no,\r\n          city_name: lands?.temp.city_name,\r\n        },\r\n        parcels: [...lands?.parcels],\r\n        parcelData: { ...lands?.parcelData },\r\n        domainLists: { ...this.state.domainLists },\r\n        // lists: {\r\n        //   firstParcels: [...this.state.parcelNum],\r\n        //   subDivNames: [...this.state.subDivNames],\r\n        //   MunicipalityNames: [...this.state.MunicipalityNames],\r\n        //   subDivType: [...this.state.subDivType],\r\n        //   PlanNum: [...this.state.PlanNum],\r\n        //   blockNum: [...this.state.blockNum],\r\n        // },\r\n      };\r\n\r\n      this.state.landsData[\"selectedRequestType\"] =\r\n        (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n          [1928].indexOf(this.props?.currentModule?.record?.workflow_id) !=\r\n            -1) &&\r\n          [2190, 2191].indexOf(\r\n            this.props?.currentModule?.record?.workflow_id\r\n          ) == -1 &&\r\n          this.state.selectedRequestType) ||\r\n        ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n          \"فرد\") ||\r\n        ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n          \"اصدار الكروكي (المواطن)\") ||\r\n        3;\r\n\r\n      this.props.input.onChange({ ...this.state.landsData });\r\n    }\r\n    this.setState({ mapLoaded: true });\r\n\r\n    this.props.setCurrentMap(map);\r\n    //this.props.setMapLayers(mapLayers);\r\n    store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n  };\r\n\r\n  setValue = (item, event) => {\r\n    item.value = event.target.value;\r\n\r\n    this.UpdateSubmissionDataObject();\r\n  };\r\n\r\n  OnParcelSelect = () => {\r\n    this.setState({ parcelval: undefined });\r\n    clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n\r\n    if (\r\n      !this.state.selectedLands.filter((e) => e.id === this.state.parcelId)\r\n        .length\r\n    ) {\r\n      // [\"PARCEL_AREA\", \"PARCEL_MAIN_LUSE\", \"PARCEL_LAT_COORD\", \"PARCEL_LONG_COORD\", \"PLAN_NO\", \"PARCEL_PLAN_NO\", \"USING_SYMBOL\", \"PARCEL_BLOCK_NO\", \"DISTRICT_NAME\", \"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_TYPE\", \"PARCEL_SPATIAL_ID\", \"MUNICIPALITY_NAME\"]\r\n\r\n      this.addParcelToWorkflow(false);\r\n\r\n      /*axios.get(`${workFlowUrl}/Land/HasSurveyCheckRequest?spatialId=${this.state.parcelId}`).then(({ data }) => {\r\n        \r\n        if (data.hasSurveyCheckRequest) {\r\n\r\n          if (data.status == 1) {\r\n            window.notifySystem(\r\n              \"warning\",\r\n              \"يوجد معاملة تدقيق مكاني جارية على قطعة الأرض  برقم \" + convertToArabic(data.request_no)\r\n            );\r\n          }\r\n          else if (data.status == 2) {\r\n\r\n            axios.get(`${workFlowUrl}/Land/HasRIdRequest?spatialId=${this.state.parcelId}`).then((res) => {\r\n              \r\n              if (!res.data.hasRIdRequest) {\r\n                window.notifySystem(\r\n                  \"warning\",\r\n                  \"يوجد معاملة تدقيق مكاني منتهية على قطعة الأرض  برقم \" + convertToArabic(data.request_no)\r\n                );\r\n              }\r\n              else {\r\n                if (res.data.isRIdIssued) {\r\n                  if (res.data.status == 2)\r\n                    this.addParcelToWorkflow(true);\r\n                  else {\r\n                    window.notifySystem(\r\n                      \"warning\",\r\n                      \"برجاء مراجعة الدعم الفني يوجد معاملة نشطة بتطبيق \" + res.data.app_name + \" برقم \" + convertToArabic(res.data.request_no)\r\n                    );\r\n                  }\r\n                }\r\n                else {\r\n                  window.notifySystem(\r\n                    \"warning\",\r\n                    \"برجاء مراجعة الدعم الفني يوجد طلب هوية عقارية نشط بتطبيق \" + res.data.app_name + \" برقم \" + convertToArabic(res.data.request_no)\r\n                  );\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n        else {\r\n          this.addParcelToWorkflow(false);\r\n        }\r\n\r\n      })*/\r\n    }\r\n  };\r\n\r\n  addParcelToWorkflow = (isTadkeekBefore) => {\r\n    queryTask({\r\n      ...querySetting(\r\n        this.LayerID.Landbase_Parcel,\r\n        `PARCEL_SPATIAL_ID =${this.state.parcelId}`,\r\n        true,\r\n        [\"*\"]\r\n      ),\r\n      callbackResult: (res) => {\r\n        //set it for test\r\n        if (isTadkeekBefore) {\r\n          res.features[0].attributes.isTadkeekBefore = true;\r\n        } else {\r\n          delete res.features[0].attributes.isTadkeekBefore;\r\n        }\r\n        ////////////////////\r\n\r\n        /*if (res.features[0].attributes.REALESTATEID) {\r\n          window.notifySystem(\r\n            \"warning\",\r\n            \"عذرًا ، تم تدقيق الرفع المساحي من قبل على هذة الأرض\"\r\n          );\r\n        } else*/\r\n        /*if (res.features[0].attributes.SUBDIVISION_TYPE\r\n          &&\r\n          !(surveyCheck_Exceptions.indexOf(res.features[0].attributes.PARCEL_SPATIAL_ID) > -1)) {\r\n\r\n          window.notifySystem(\r\n            \"warning\",\r\n            \"عذرًا ، لا يمكن تقديم طلب تدقيق مكانى على هذة الأرض حاليًا\"\r\n          );\r\n\r\n        } else {*/\r\n        if (this.state.selectedLands && this.state.selectedLands.length == 0) {\r\n          queryTask({\r\n            ...querySetting(\r\n              this.LayerID.Tbl_Parcel_Conditions,\r\n              `USING_SYMBOL_CODE ='${res.features[0].attributes.USING_SYMBOL}'`,\r\n              false,\r\n              [\r\n                \"SLIDE_AREA\",\r\n                \"MIN_FROT_OFFSET\",\r\n                \"BUILDING_RATIO\",\r\n                \"FRONT_OFFSET\",\r\n                \"SIDE_OFFSET\",\r\n                \"BACK_OFFSET\",\r\n                \"FLOORS\",\r\n                \"FLOOR_HEIGHT\",\r\n                \"FAR\",\r\n                \"ADD_FLOOR\",\r\n              ]\r\n            ),\r\n            callbackResult: (condition) => {\r\n              this.setState({\r\n                conditions: condition.features,\r\n              });\r\n              getFeatureDomainName(\r\n                res.features,\r\n                this.LayerID.Landbase_Parcel\r\n              ).then((r) => {\r\n                this.setToStore(r);\r\n                this.DrawInfo();\r\n                //neighbor\r\n                /*this.addParcelToSelect(r[0]).then(\r\n                  (res) => {\r\n                    this.setToStore(r);\r\n                    this.setState({\r\n                      parcelId: null,\r\n                      parcelNum: res.features,\r\n                    });\r\n                    this.selectedLandsT.push(res);\r\n                    this.DrawGraph();\r\n                  },\r\n                  () => {\r\n                    this.state.selectedLands.pop();\r\n                    this.setToStore();\r\n                  }\r\n                );*/\r\n              });\r\n            },\r\n          });\r\n        } else {\r\n          getFeatureDomainName(res.features, this.LayerID.Landbase_Parcel).then(\r\n            (r) => {\r\n              this.setToStore(r);\r\n              this.DrawInfo();\r\n              //neighbor\r\n              /*this.addParcelToSelect(r[0]).then(\r\n              (res) => {\r\n                this.setState({\r\n                  parcelId: null,\r\n                  parcelNum: res.features,\r\n                });\r\n                this.selectedLandsT.push(res);\r\n                this.DrawGraph();\r\n              },\r\n              () => {\r\n                this.state.selectedLands.pop();\r\n                this.setToStore();\r\n              }\r\n            );*/\r\n            }\r\n          );\r\n        }\r\n        //}\r\n      },\r\n    });\r\n  };\r\n\r\n  setToStore = (r) => {\r\n    const {\r\n      input: { value },\r\n    } = this.props;\r\n    let lands =\r\n      (this.props.input && this.props.input.value) ||\r\n      this.props?.mainObject?.landData?.landData?.lands;\r\n    this.state.landsData = {\r\n      ...lands,\r\n      mapGraphics: [],\r\n      conditions: this.state.conditions,\r\n      parcelData: { ...this.state.parcelData },\r\n      selectedMoamlaType: this.state.selectedMoamlaType,\r\n      selected_Req_type: this.state.selected_Req_type,\r\n      temp: {\r\n        mun: this.state.munval,\r\n        plan: this.state.planeval,\r\n        subTypeval: this.state.subTypeval,\r\n        subNameval: this.state.subNameval,\r\n        subname: this.state.subName_name,\r\n        parcelDis: this.parcelDis || this.RolBackParcelNum,\r\n        block_no: this.state.block_no,\r\n        blockval: this.state.blockval,\r\n        parcelval: this.state.parcelval,\r\n        city_name: this.state.city_name,\r\n      },\r\n      domainLists: { ...this.state.domainLists },\r\n      // lists: {\r\n      //   firstParcels: [...this.state.parcelNum],\r\n      //   subDivNames: [...this.state.subDivNames],\r\n      //   MunicipalityNames: [...this.state.MunicipalityNames],\r\n      //   subDivType: [...this.state.subDivType],\r\n      //   PlanNum: [...this.state.PlanNum],\r\n      //   blockNum: [...this.state.blockNum],\r\n      // },\r\n      electric_room_area: this.state.electric_room_area,\r\n      have_electric_room: this.state.have_electric_room,\r\n      electric_room_place: this.state.electric_room_place,\r\n    };\r\n\r\n    if (r) {\r\n      r[0].attributes.PARCEL_AREA = (+r[0].attributes.PARCEL_AREA).toFixed(2);\r\n\r\n      this.state.selectedLands.push({\r\n        geometry: r[0].geometry,\r\n        attributes: r[0].attributes,\r\n        id: this.state.parcelId,\r\n      });\r\n\r\n      map_object(this.state.selectedLands);\r\n\r\n      this[\"edit_PARCEL_AREA\" + (this.state.selectedLands.length - 1)] =\r\n        r[0].attributes.PARCEL_AREA;\r\n      this[\"edit_PARCEL_BLOCK_NO\" + (this.state.selectedLands.length - 1)] =\r\n        r[0].attributes.PARCEL_BLOCK_NO;\r\n      this[\"edit_DISTRICT_NAME\" + (this.state.selectedLands.length - 1)] =\r\n        r[0].attributes.DISTRICT_NAME;\r\n      this[\"edit_SUBDIVISION_TYPE\" + (this.state.selectedLands.length - 1)] =\r\n        r[0].attributes.SUBDIVISION_TYPE;\r\n      this[\r\n        \"edit_SUBDIVISION_DESCRIPTION\" + (this.state.selectedLands.length - 1)\r\n      ] = r[0].attributes.SUBDIVISION_DESCRIPTION;\r\n    }\r\n\r\n    this.checkUnitNumberAvailability(\r\n      [...this.state.selectedLands],\r\n      this.state.munval\r\n    );\r\n    this.state.landsData[\"parcels\"] = [...this.state.selectedLands];\r\n\r\n    this.state.landsData[\"selectedRequestType\"] =\r\n      (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n        [1928].indexOf(this.props?.currentModule?.record?.workflow_id) != -1) &&\r\n        [2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n          -1 &&\r\n        this.state.selectedRequestType) ||\r\n      ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"فرد\") ||\r\n      ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"اصدار الكروكي (المواطن)\") ||\r\n      3;\r\n\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n  };\r\n\r\n  setAdjacentToStore = (r) => {\r\n    let lands =\r\n      (this.props.input && this.props.input.value) ||\r\n      this.props?.mainObject?.landData?.landData?.lands;\r\n    let store_value = lands;\r\n    store_value.temp.parcelDis = r;\r\n    this.props.input.onChange(store_value);\r\n  };\r\n\r\n  checkUnitNumberAvailability = (selectedLands, munval) => {\r\n    if (\r\n      [10501, 10506, 10513].indexOf(munval) != -1 &&\r\n      selectedLands.find(\r\n        (parcel) => parcel.attributes.USING_SYMBOL_Code == \"س1-أ\"\r\n      ) != undefined &&\r\n      [1].indexOf(this.props?.currentModule?.record.app_id) != -1\r\n    ) {\r\n      this.parcel_fields_headers = (!this.parcel_fields_headers.find(\r\n        (f) => f == \"عدد الوحدات\"\r\n      ) && [...this.parcel_fields_headers, \"عدد الوحدات\"]) || [\r\n        ...this.parcel_fields_headers,\r\n      ];\r\n      this.parcel_fields = (!this.parcel_fields.find(\r\n        (f) => f.name == \"UNITS_NUMBER\"\r\n      ) && [\r\n        ...this.parcel_fields,\r\n        {\r\n          name: \"UNITS_NUMBER\",\r\n          editable: false,\r\n          dependsOn: \"USING_SYMBOL_Code\",\r\n          value: \"س1-أ\",\r\n        },\r\n      ]) || [...this.parcel_fields];\r\n    }\r\n  };\r\n\r\n  LandHoverOn = (f) => {\r\n    if (\r\n      !this.state.selectedLands.length &&\r\n      [1].indexOf(this.props?.currentModule?.record.app_id) != -1\r\n    ) {\r\n      return;\r\n    }\r\n    var fitleredGraphics = this.map\r\n      .getLayer(\"ZoomGraphicLayer\")\r\n      .graphics.filter((graphic) => {\r\n        return graphic?.attributes?.OBJECTID != f?.attributes?.OBJECTID;\r\n      });\r\n\r\n    fitleredGraphics = [\r\n      ...new Map(\r\n        fitleredGraphics.map((item) => [\r\n          item?.[\"attributes\"]?.[\"OBJECTID\"],\r\n          item,\r\n        ])\r\n      ).values(),\r\n    ];\r\n\r\n    clearGraphicFromLayer(this.map, \"ZoomGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    /*fitleredGraphics.forEach((graphic) => {\r\n      this.map.getLayer(\"SelectGraphicLayer\").add(graphic);\r\n    });*/\r\n\r\n    queryTask({\r\n      ...querySetting(\r\n        this.LayerID.Landbase_Parcel,\r\n        \"PARCEL_SPATIAL_ID = \" + f.attributes.PARCEL_SPATIAL_ID,\r\n        false,\r\n        [\"OBJECTID\"]\r\n      ),\r\n      returnGeometry: true,\r\n      callbackResult: (res) => {\r\n        f.geometry = res?.features?.[0]?.geometry;\r\n        highlightFeature(res.features, this.map, {\r\n          layerName: \"ZoomGraphicLayer\",\r\n          noclear: false,\r\n          isZoom: true,\r\n          isHighlighPolygonBorder: true,\r\n          zoomFactor: 10,\r\n          attr: true,\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  zoom = (e) => {\r\n    highlightFeature([e], this.map, {\r\n      layerName: \"ZoomGraphicLayer\",\r\n      noclear: false,\r\n      isZoom: true,\r\n      isHiglightSymbol: true,\r\n      highlighColor: [0, 255, 0, 0.5],\r\n      zoomFactor: 10,\r\n      attr: true,\r\n    });\r\n  };\r\n\r\n  LandHoverOff = (f) => {\r\n    if (\r\n      !this.state.selectedLands?.length &&\r\n      [1].indexOf(this.props?.currentModule?.record.app_id) != -1\r\n    ) {\r\n      return;\r\n    }\r\n    if (f && f?.attributes?.PARCEL_SPATIAL_ID != this.state?.parcelId) {\r\n      highlightFeature([f], this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: false,\r\n        isHiglightSymbol: true,\r\n        highlighColor: [0, 255, 0, 0.5],\r\n        attr: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  remove = (item) => {\r\n    let { mainObject } = this.props;\r\n    if (mainObject && mainObject.waseka) {\r\n      delete mainObject.waseka;\r\n    }\r\n    this.state.parcelData = {};\r\n    this.state.selectedLands.pop(item);\r\n    //lands?.parcels = slice(lands?.parcels, 0, -1)\r\n    // this.props.input.onChange([...values])\r\n    if (this.state.selectedLandsT) {\r\n      this.state.selectedLandsT.pop(item);\r\n    }\r\n    this.DrawGraph();\r\n    this.UpdateSubmissionDataObject();\r\n  };\r\n\r\n  saveEdit(id, name, i) {\r\n    let lands =\r\n      (this.props.input && this.props?.input?.value) ||\r\n      this.props?.mainObject?.landData?.landData?.lands;\r\n    if (name.indexOf(\"SHATFA_\") > -1) {\r\n      this.state.survayParcelCutter[0][name] = this[\"edit_\" + name + i];\r\n      this.setState({\r\n        [name + \"_isEdit_\" + i]: false,\r\n        survayParcelCutter: this.state.survayParcelCutter,\r\n      });\r\n\r\n      // this.state.landsData.survayParcelCutter = [\r\n      //   ...this.state.survayParcelCutter,\r\n      // ];\r\n      // this.props.input.onChange({ ...this.state.landsData });\r\n      this.UpdateSubmissionDataObject();\r\n\r\n      //console.log(this.props.input);\r\n    } else {\r\n      let findParcel = lands?.parcels.find((p) => {\r\n        return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n      });\r\n      findParcel.attributes[name] =\r\n        this[\"edit_\" + name + i] || findParcel.attributes[name];\r\n      let selectLand = this.state.selectedLands.find((p) => {\r\n        return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n      });\r\n      selectLand.attributes[name] =\r\n        this[\"edit_\" + name + i] || selectLand.attributes[name];\r\n\r\n      if (name == \"PARCEL_CUT_AREA\" || name == \"PARCEL_AREA\") {\r\n        selectLand.attributes[name] = (\r\n          +selectLand.attributes[name] || 0\r\n        ).toFixed(2);\r\n        selectLand.attributes[\"PARCEL_Remain_AREA\"] = (\r\n          (+selectLand.attributes[\"PARCEL_AREA\"] || 0).toFixed(2) -\r\n          (+selectLand.attributes[\"PARCEL_CUT_AREA\"] || 0).toFixed(2)\r\n        ).toFixed(2);\r\n      }\r\n\r\n      if (name == \"PARCEL_METER_PRICE\") {\r\n        selectLand.attributes[\"total_of_totals_of_prices\"] = (\r\n          (+selectLand.attributes[\"PARCEL_AREA\"] || 0) *\r\n          (+selectLand.attributes[\"PARCEL_METER_PRICE\"] || 0)\r\n        ).toFixed(2);\r\n\r\n        selectLand.attributes[\"total_of_totals_of_cut_prices\"] = (\r\n          (+selectLand.attributes[\"PARCEL_CUT_AREA\"] || 0) *\r\n          (+selectLand.attributes[\"PARCEL_METER_PRICE\"] || 0)\r\n        ).toFixed(2);\r\n      }\r\n\r\n      if (name == \"BUILDING_METER_PRICE\" || name == \"BUILDING_AREA\") {\r\n        selectLand.attributes[\"TOTAL_BUILDING_METER_PRICE\"] = (\r\n          (+selectLand.attributes[\"BUILDING_AREA\"] || 0) *\r\n          (+selectLand.attributes[\"BUILDING_METER_PRICE\"] || 0)\r\n        ).toFixed(2);\r\n      }\r\n\r\n      this.setState(\r\n        {\r\n          [name + \"_isEdit_\" + i]: false,\r\n          selectedLands: [...this.state.selectedLands],\r\n        },\r\n        () => {\r\n          this.UpdateSubmissionDataObject();\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  openPopup = (scope) => {\r\n    var fields = this.parcelDataFields;\r\n    scope.attributes[\"parcelData\"] = scope.attributes[\"parcelData\"] || {};\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...scope.attributes[\"parcelData\"] },\r\n          ok(values) {\r\n            scope.attributes[\"parcelData\"] = values;\r\n            //this.UpdateSubmissionDataObject();\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  openParcelElectricInfoPopup = (scope, index) => {\r\n    var fields = this.parcelElectricFields;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...scope.state.selectedLands[index].parcelElectric },\r\n          ok(values) {\r\n            scope.state.selectedLands[index].parcelElectric = values;\r\n            scope.UpdateSubmissionDataObject();\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  openParcelShatfaInfoPopup = (scope, index) => {\r\n    var fields = this.parcelShatfaFields;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...scope.state.selectedLands[index].parcelShatfa },\r\n          ok(values) {\r\n            scope.state.selectedLands[index].parcelShatfa = values;\r\n            scope.UpdateSubmissionDataObject();\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  openParcelDirectionInfoPopup = (scope, index) => {\r\n    var fields = this.parcelDataFields;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...scope.state.selectedLands[index].parcelData },\r\n          ok(values) {\r\n            scope.state.selectedLands[index].parcelData = values;\r\n            scope.UpdateSubmissionDataObject();\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  myChangeHandler = (name, i, e, event) => {\r\n    this[\"edit_\" + name + i] =\r\n      (typeof event != \"object\" && event) || event?.target?.value;\r\n    if (e.attributes) {\r\n      e.attributes[name] =\r\n        (typeof event != \"object\" && event) || event?.target?.value;\r\n    } else {\r\n      e[name] = (typeof event != \"object\" && event) || event?.target?.value;\r\n    }\r\n    //e.attributes['PARCEL_AREA'] = event.target.value;\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  selectOnchange = (name, i, e, value) => {\r\n    this[\"edit_\" + name + i] = value;\r\n    e.attributes[name] = value;\r\n    //e.attributes['PARCEL_AREA'] = event.target.value;\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  showEditBtn = (name, value, attributes, isEdit) => {\r\n    let showMap = this.props.showMap || this.props.field.showMap;\r\n    let isView = this.props.isView || this.props.field.isView;\r\n    if (isView) return;\r\n\r\n    if (isEdit && name != \"PARCEL_Remain_AREA\") {\r\n      return ((showMap == undefined || showMap) && true) || false;\r\n    }\r\n\r\n    if (name == \"USING_SYMBOL\") {\r\n      return ((showMap == undefined || showMap) && value == null) || false;\r\n    } else {\r\n      return (\r\n        ((showMap == undefined || showMap) &&\r\n          [\r\n            \"PARCEL_AREA\",\r\n            \"BUILD_AREA\",\r\n            \"PARCEL_BLOCK_NO\",\r\n            \"DISTRICT_NAME\",\r\n            \"SUBDIVISION_TYPE\",\r\n            \"SUBDIVISION_DESCRIPTION\",\r\n          ].indexOf(name) > -1) ||\r\n        [\"PARCEL_METER_PRICE\", \"BUILDING_METER_PRICE\", \"BUILDING_AREA\"].indexOf(\r\n          name\r\n        ) > -1\r\n      );\r\n    }\r\n  };\r\n\r\n  onElectricInputChange = (stateName, evt) => {\r\n    this.setState({\r\n      [stateName]:\r\n        evt.target.type == \"checkbox\" ? evt.target.checked : evt.target.value,\r\n    });\r\n\r\n    this.state.landsData[stateName] =\r\n      evt.target.type == \"checkbox\" ? evt.target.checked : evt.target.value;\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n  };\r\n\r\n  enableEdit = (name, i) => {\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  exportCad = () => {\r\n    console.log(this.state.selectedLands);\r\n\r\n    var polygons = this.state.selectedLands;\r\n    var cadPolygons = [];\r\n\r\n    polygons.forEach((polygon) => {\r\n      delete polygon.geometry.cache;\r\n      var jsonParcel = {\r\n        geometry: polygon.geometry,\r\n        attributes: {\r\n          Layer: \"floor\",\r\n          Color: 1,\r\n          LyrColor: 1,\r\n        },\r\n      };\r\n      cadPolygons.push(jsonParcel);\r\n    });\r\n\r\n    var jsonParcel = {\r\n      attributes: {\r\n        Layer: \"plus\",\r\n        Color: 2,\r\n        LyrColor: 2,\r\n      },\r\n    };\r\n    uploadGISFile(\r\n      `${window.restServicesPath}/ExportGeoDataToCAD/GPServer/ExportGeoDataToCAD`,\r\n      {\r\n        ParcelsToExport: JSON.stringify(cadPolygons), //`[${featuresList.join(\", \")}]` ,\r\n      },\r\n      (data) => {\r\n        //store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n        data.value.split(\",\").forEach((item) => {\r\n          //setTimeout(() => {\r\n\r\n          var file_path =\r\n            window.filesHost +\r\n            \"/\" +\r\n            item.replaceAll(/\\s/g, \"\").replaceAll(\"\\\\\", \"/\");\r\n          var a = document.createElement(\"A\");\r\n          a.href = file_path;\r\n          a.download = file_path.substr(file_path.lastIndexOf(\"/\") + 1);\r\n          document.body.appendChild(a);\r\n          a.click();\r\n          document.body.removeChild(a);\r\n          //}, 1000);\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      parcelData,\r\n      selectedLands,\r\n      MunicipalityNames,\r\n      subDivType,\r\n      subDivNames,\r\n      subNameval,\r\n      blockNum,\r\n      blockval,\r\n      PlanNum,\r\n      mapLoaded,\r\n      planeval,\r\n      parcelSearch,\r\n      parcelNum,\r\n      parcelval,\r\n      conditions,\r\n      requestTypes,\r\n      Req_types,\r\n      selectedRequestType,\r\n      boundariesBtnIsVisible,\r\n      selectedMoamlaType,\r\n      survayParcelCutter,\r\n    } = this.state;\r\n\r\n    const { t, fullMapWidth } = this.props;\r\n\r\n    var parcelBtnDisabled = false; // this.props?.currentModule?.record?.workflow_id\r\n    if (\r\n      ([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n        [1928].indexOf(this.props?.currentModule?.record?.workflow_id) != -1) &&\r\n      [2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n        -1 &&\r\n      selectedRequestType == 1 &&\r\n      selectedLands.length > 0\r\n    ) {\r\n      parcelBtnDisabled = true;\r\n    }\r\n    let showMap = this.props.showMap || this.props.field.showMap;\r\n    let isView = this.props.isView || this.props.field.isView;\r\n    return (\r\n      <div>\r\n        {(showMap == undefined || showMap) && (\r\n          <div\r\n            className={!fullMapWidth ? \"content-section implementation\" : \"\"}\r\n          >\r\n            <div\r\n              style={\r\n                (!isView && {\r\n                  display: \"flex\",\r\n                  marginTop: \"35px\",\r\n                }) || {\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                }\r\n              }\r\n            >\r\n              {(mapLoaded && !isView && (\r\n                <div\r\n                  style={{\r\n                    direction: \"ltr\",\r\n                    width: \"95%\",\r\n                  }}\r\n                >\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onChange={(val) => {\r\n                      onMunChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    value={this.state.munval}\r\n                    placeholder=\"اختر اسم البلديه\"\r\n                    disabled={!this.state.MunicipalityNames?.length}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) => {\r\n                      if (option.props.children) {\r\n                        return (\r\n                          option.props.children.find((i) => {\r\n                            return (\r\n                              i && i.indexOf(input.trim().toLowerCase()) >= 0\r\n                            );\r\n                          }) != null\r\n                        );\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    }}\r\n                  >\r\n                    {MunicipalityNames?.map((e) => (\r\n                      <Option key={e.code} value={e.code}>\r\n                        {e.name}{\" \"}\r\n                      </Option>\r\n                    ))}\r\n                  </Select>\r\n\r\n                  <Select\r\n                    onChange={(val) => {\r\n                      onPlaneChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    disabled={!PlanNum.length}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) => {\r\n                      if (option.props.children) {\r\n                        return (\r\n                          option.props.children?.indexOf(\r\n                            convertToArabic(input)\r\n                          ) != -1\r\n                        );\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    }}\r\n                    value={planeval}\r\n                    placeholder=\"رقم المخطط\"\r\n                    notFoundContent=\"not found\"\r\n                  >\r\n                    {PlanNum\r\n                      //.slice(0, 100)\r\n                      .map((d, i) => {\r\n                        return (\r\n                          <Option key={i} value={d.i}>\r\n                            {convertToArabic(d.attributes.PLAN_NO)}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                  {true && (\r\n                    <Select\r\n                      getPopupContainer={(trigger) => trigger.parentNode}\r\n                      autoFocus\r\n                      onChange={(val) => {\r\n                        onSubTypeChange(this, val);\r\n                      }}\r\n                      showSearch\r\n                      disabled={!subDivType.length || !this.state.munval}\r\n                      value={this.state.subTypeval}\r\n                      placeholder={\"نوع التقسيم\"}\r\n                      optionFilterProp=\"children\"\r\n                      filterOption={(input, option) => {\r\n                        if (option.props.children) {\r\n                          return (\r\n                            option.props.children?.indexOf(\r\n                              convertToArabic(input)\r\n                            ) != -1\r\n                          );\r\n                        } else {\r\n                          return false;\r\n                        }\r\n                      }}\r\n                    >\r\n                      {subDivType\r\n                        //.slice(0, 100)\r\n                        .map((e, i) => (\r\n                          <Option key={i} value={e.code}>\r\n                            {\" \"}\r\n                            {e.name}{\" \"}\r\n                          </Option>\r\n                        ))}\r\n                    </Select>\r\n                  )}\r\n                  {true && (\r\n                    <Select\r\n                      getPopupContainer={(trigger) => trigger.parentNode}\r\n                      autoFocus\r\n                      onChange={(val) => {\r\n                        onSubNameChange(this, val);\r\n                      }}\r\n                      showSearch\r\n                      disabled={!subDivNames.length}\r\n                      placeholder=\"اسم التقسيم\"\r\n                      value={subNameval}\r\n                      optionFilterProp=\"children\"\r\n                      filterOption={(input, option) => {\r\n                        if (option.props.children) {\r\n                          return (\r\n                            option.props.children?.indexOf(\r\n                              convertToArabic(input)\r\n                            ) != -1\r\n                          );\r\n                        } else {\r\n                          return false;\r\n                        }\r\n                      }}\r\n                    >\r\n                      {subDivNames\r\n                        //.slice(0, 100)\r\n                        .map((e, i) => (\r\n                          <Option\r\n                            key={i}\r\n                            value={e.attributes.SUBDIVISION_SPATIAL_ID}\r\n                          >\r\n                            {\" \"}\r\n                            {e.attributes.SUBDIVISION_DESCRIPTION}\r\n                          </Option>\r\n                        ))}\r\n                    </Select>\r\n                  )}\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onChange={(val) => {\r\n                      onBlockChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    disabled={!blockNum.length}\r\n                    value={blockval}\r\n                    placeholder=\"رقم البلك\"\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) => {\r\n                      if (option.props.children) {\r\n                        return (\r\n                          option.props.children?.indexOf(\r\n                            convertToArabic(input)\r\n                          ) != -1\r\n                        );\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    }}\r\n                  >\r\n                    {blockNum\r\n                      //.slice(0, 100)\r\n                      .map((e, i) => (\r\n                        <Option key={i} value={e.attributes.BLOCK_SPATIAL_ID}>\r\n                          {convertToArabic(e.attributes.BLOCK_NO)}\r\n                        </Option>\r\n                      ))}\r\n                  </Select>\r\n                  <Select\r\n                    // onBlur={() => {\r\n                    //   clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n                    // }}\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onFocus={() => {\r\n                      //clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n                      if (!this.state[\"parcelId\"]) {\r\n                        highlightFeature(\r\n                          parcelNum.filter((e, i) => {\r\n                            if (parcelSearch) {\r\n                              if (this.state.selectedLands.length) {\r\n                                return !this.state.selectedLands.find(\r\n                                  (tt) =>\r\n                                    tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                    e.attributes.PARCEL_SPATIAL_ID\r\n                                );\r\n                              } else {\r\n                                return (\r\n                                  e.attributes.PARCEL_PLAN_NO &&\r\n                                  e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                                    parcelSearch.toLowerCase()\r\n                                  ) >= 0\r\n                                );\r\n                              }\r\n                            } else {\r\n                              if (selectedLands.length) {\r\n                                return (\r\n                                  !selectedLands.find(\r\n                                    (tt) =>\r\n                                      tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                      e.attributes.PARCEL_SPATIAL_ID\r\n                                  ) && e.attributes.PARCEL_PLAN_NO\r\n                                );\r\n                              } else {\r\n                                return e.attributes.PARCEL_PLAN_NO;\r\n                              }\r\n                            }\r\n                          }),\r\n                          // .slice(0, 100),\r\n                          this.map,\r\n                          {\r\n                            layerName: \"SelectGraphicLayer\",\r\n                            noclear: true,\r\n                            isZoom: false,\r\n                            isHiglightSymbol: true,\r\n                            highlighColor: [0, 255, 0, 0.5],\r\n                            attr: true,\r\n                          }\r\n                        );\r\n                      }\r\n                    }}\r\n                    onChange={(val) => {\r\n                      onLandParcelChange(this, val);\r\n                    }}\r\n                    disabled={!planeval}\r\n                    showSearch\r\n                    onSearch={(e) => {\r\n                      this.setState({ parcelSearch: e });\r\n                      onSearch(this, e, true);\r\n                    }}\r\n                    filterOption={(input, option) => {\r\n                      if (option.props.children) {\r\n                        return (\r\n                          option.props.children?.indexOf(\r\n                            convertToArabic(input)\r\n                          ) != -1\r\n                        );\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    }}\r\n                    value={parcelval}\r\n                    placeholder=\"رقم قطعة الارض\"\r\n                  >\r\n                    {parcelNum &&\r\n                      parcelNum\r\n                        .filter((e, i) => {\r\n                          if (parcelSearch) {\r\n                            if (this.state.selectedLands.length) {\r\n                              return !this.state.selectedLands.find(\r\n                                (tt) =>\r\n                                  tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                  e.attributes.PARCEL_SPATIAL_ID\r\n                              );\r\n                            } else {\r\n                              return (\r\n                                e.attributes.PARCEL_PLAN_NO &&\r\n                                e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                                  parcelSearch.toLowerCase()\r\n                                ) >= 0\r\n                              );\r\n                            }\r\n                          } else {\r\n                            if (selectedLands.length) {\r\n                              return (\r\n                                !selectedLands.find(\r\n                                  (tt) =>\r\n                                    tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                    e.attributes.PARCEL_SPATIAL_ID\r\n                                ) && e.attributes.PARCEL_PLAN_NO\r\n                              );\r\n                            } else {\r\n                              return e.attributes.PARCEL_PLAN_NO;\r\n                            }\r\n                          }\r\n                        })\r\n                        .slice(0, 100)\r\n                        .map((e, i) => {\r\n                          return (\r\n                            <Option\r\n                              onMouseEnter={this.LandHoverOn.bind(this, e)}\r\n                              //onMouseLeave={this.LandHoverOff.bind(this, e)}\r\n                              key={e.attributes.PARCEL_SPATIAL_ID}\r\n                              value={e.i}\r\n                            >\r\n                              {localizeNumber(e.attributes.PARCEL_PLAN_NO)}\r\n                            </Option>\r\n                          );\r\n                        })}\r\n                  </Select>\r\n                  <Button\r\n                    className=\"add-gis\"\r\n                    disabled={!this.state.parcelId || parcelBtnDisabled}\r\n                    onClick={this.OnParcelSelect}\r\n                  >\r\n                    إضافة الأرض\r\n                  </Button>\r\n                </div>\r\n              )) || (\r\n                <div\r\n                  style={{\r\n                    direction: \"ltr\",\r\n                  }}\r\n                >\r\n                  <Button className=\"add-gis\" onClick={this.exportCad}>\r\n                    استخراج ملف كاد\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div>\r\n              {/* <div className=\"btn-fixed\">\r\n              <MapBtnsComponent {...this.props}></MapBtnsComponent>\r\n            </div> */}\r\n              <StickyContainer style={{ direction: \"ltr\" }}>\r\n                <Sticky bottomOffset={80}>\r\n                  {({ style }) => (\r\n                    <MapBtnsComponent\r\n                      style={style}\r\n                      {...this.props}\r\n                    ></MapBtnsComponent>\r\n                  )}\r\n                </Sticky>\r\n              </StickyContainer>\r\n              <div>\r\n                <MapComponent\r\n                  mapload={this.mapLoaded.bind(this)}\r\n                  {...this.props}\r\n                ></MapComponent>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {/* {mapLoaded && ( */}\r\n        <div style={{ gridColumn: \"1/3\" }}>\r\n          {selectedLands && selectedLands.length > 0 && (\r\n            <div>\r\n              <div>\r\n                <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n                <></>\r\n                {selectedLands.map((e, i) => {\r\n                  return (\r\n                    <Collapse\r\n                      className=\"Collapse\"\r\n                      defaultActiveKey={[]}\r\n                      key={i}\r\n                      style={{ marginTop: \"10px\" }}\r\n                    >\r\n                      <Panel\r\n                        header={convertToArabic(\r\n                          `قطعة أرض رقم ${e?.attributes?.PARCEL_PLAN_NO}`\r\n                        )}\r\n                        forceRender={true}\r\n                        style={{ margin: \"5px\" }}\r\n                      >\r\n                        <h1 className=\"titleSelectedParcel\">\r\n                          {convertToArabic(\r\n                            `بيانات قطعة الأرض رقم ${e?.attributes?.PARCEL_PLAN_NO}`\r\n                          )}\r\n                        </h1>\r\n                        <table\r\n                          className=\"table table-bordered\"\r\n                          style={{ marginTop: \"1%\" }}\r\n                        >\r\n                          <tbody>\r\n                            <tr key=\"r2\">\r\n                              <td colSpan={\"100%\"}>\r\n                                <table\r\n                                  className=\"table table-bordered\"\r\n                                  style={{ marginTop: \"1%\" }}\r\n                                >\r\n                                  <thead>\r\n                                    <tr>\r\n                                      {this.parcel_fields_headers.map(\r\n                                        (field_header, k) => {\r\n                                          return <th>{field_header}</th>;\r\n                                        }\r\n                                      )}\r\n                                      <th>خيارات الأرض</th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <tr key={i}>\r\n                                      {this.parcel_fields.map((field, k) => {\r\n                                        return (\r\n                                          ((!field.dependsOn ||\r\n                                            (field.dependsOn &&\r\n                                              e.attributes[field.dependsOn] ==\r\n                                                field.value)) && (\r\n                                            <td key={k}>\r\n                                              <div>\r\n                                                {field.editable ? (\r\n                                                  !this.state[\r\n                                                    field.name + \"_isEdit_\" + i\r\n                                                  ] ? (\r\n                                                    <span>\r\n                                                      <span>\r\n                                                        {localizeNumber(\r\n                                                          e.attributes[\r\n                                                            field.name\r\n                                                          ] || \"غير متوفر\"\r\n                                                        )}\r\n                                                      </span>\r\n                                                      {this.showEditBtn(\r\n                                                        field.name,\r\n                                                        e.attributes[\r\n                                                          field.name\r\n                                                        ],\r\n                                                        e.attributes\r\n                                                      ) && (\r\n                                                        <span>\r\n                                                          <button\r\n                                                            className=\"btn\"\r\n                                                            style={{\r\n                                                              marginRight: e\r\n                                                                .attributes[\r\n                                                                field.name\r\n                                                              ]\r\n                                                                ? \"20px\"\r\n                                                                : \"0px\",\r\n                                                            }}\r\n                                                            onClick={this.enableEdit.bind(\r\n                                                              this,\r\n                                                              field.name,\r\n                                                              i\r\n                                                            )}\r\n                                                          >\r\n                                                            <i className=\"fas fa-edit\"></i>\r\n                                                          </button>\r\n                                                        </span>\r\n                                                      )}\r\n                                                    </span>\r\n                                                  ) : (\r\n                                                    <span\r\n                                                      style={{\r\n                                                        display: \"grid\",\r\n                                                        gridTemplateColumns:\r\n                                                          \"1fr auto\",\r\n                                                      }}\r\n                                                    >\r\n                                                      {field.type !=\r\n                                                        \"select\" && (\r\n                                                        <input\r\n                                                          key={i}\r\n                                                          className=\"form-control\"\r\n                                                          type={field.type}\r\n                                                          step=\"any\"\r\n                                                          value={\r\n                                                            e.attributes[\r\n                                                              field.name\r\n                                                            ]\r\n                                                          }\r\n                                                          onChange={this.myChangeHandler.bind(\r\n                                                            this,\r\n                                                            field.name,\r\n                                                            i,\r\n                                                            e\r\n                                                          )}\r\n                                                        />\r\n                                                      )}\r\n                                                      {field.type ==\r\n                                                        \"select\" && (\r\n                                                        <Select\r\n                                                          value={\r\n                                                            e.attributes[\r\n                                                              field.name\r\n                                                            ]\r\n                                                          }\r\n                                                          onChange={this.selectOnchange.bind(\r\n                                                            this,\r\n                                                            field.name,\r\n                                                            i,\r\n                                                            e\r\n                                                          )}\r\n                                                          placeholder=\"نوع التقسيم\"\r\n                                                          optionFilterProp=\"children\"\r\n                                                          filterOption={(\r\n                                                            input,\r\n                                                            option\r\n                                                          ) =>\r\n                                                            convertToEnglish(\r\n                                                              option.props\r\n                                                                .children\r\n                                                            )\r\n                                                              ?.toLowerCase()\r\n                                                              ?.indexOf(\r\n                                                                input.toLowerCase()\r\n                                                              ) >= 0\r\n                                                          }\r\n                                                        >\r\n                                                          {field?.options?.map(\r\n                                                            (e, i) => (\r\n                                                              <Option\r\n                                                                key={i}\r\n                                                                value={e.name}\r\n                                                              >\r\n                                                                {convertToArabic(\r\n                                                                  e.name\r\n                                                                )}\r\n                                                              </Option>\r\n                                                            )\r\n                                                          )}\r\n                                                        </Select>\r\n                                                      )}\r\n                                                      <button\r\n                                                        className=\"btn\"\r\n                                                        style={{\r\n                                                          marginRight: \"20px\",\r\n                                                        }}\r\n                                                        onClick={this.saveEdit.bind(\r\n                                                          this,\r\n                                                          e.attributes\r\n                                                            .PARCEL_SPATIAL_ID,\r\n                                                          field.name,\r\n                                                          i\r\n                                                        )}\r\n                                                      >\r\n                                                        <i className=\"fa fa-floppy-o\"></i>\r\n                                                      </button>\r\n                                                    </span>\r\n                                                  )\r\n                                                ) : (\r\n                                                  <span>\r\n                                                    <span>\r\n                                                      {localizeNumber(\r\n                                                        e.attributes[\r\n                                                          field.name\r\n                                                        ] || \"غير متوفر\"\r\n                                                      )}\r\n                                                    </span>\r\n                                                  </span>\r\n                                                )}\r\n                                              </div>\r\n                                            </td>\r\n                                          )) || <td></td>\r\n                                        );\r\n                                      })}\r\n\r\n                                      <td>\r\n                                        {(showMap == undefined || showMap) && (\r\n                                          <>\r\n                                            <button\r\n                                              className=\"btn follow\"\r\n                                              onClick={this.openPopup.bind(\r\n                                                this,\r\n                                                e\r\n                                              )}\r\n                                            >\r\n                                              حدود و أبعاد الأرض من الطبيعة\r\n                                            </button>\r\n\r\n                                            <Divider type=\"vertical\" />\r\n\r\n                                            <Tooltip\r\n                                              placement=\"bottom\"\r\n                                              title={t(`actions:Zoom`)}\r\n                                            >\r\n                                              <span\r\n                                                style={{\r\n                                                  cursor: \"pointer\",\r\n                                                }}\r\n                                                onClick={this.zoom.bind(\r\n                                                  this,\r\n                                                  e\r\n                                                )}\r\n                                              >\r\n                                                <FontAwesomeIcon\r\n                                                  icon={faSearchPlus}\r\n                                                  size={\"1x\"}\r\n                                                />\r\n                                              </span>\r\n                                              {/* </a> */}\r\n                                            </Tooltip>\r\n                                            <Divider type=\"vertical\" />\r\n                                            <Tooltip\r\n                                              placement=\"bottom\"\r\n                                              title={t(`actions:Delete`)}\r\n                                            >\r\n                                              <span\r\n                                                style={{\r\n                                                  cursor: \"pointer\",\r\n                                                }}\r\n                                                onClick={this.remove.bind(\r\n                                                  this,\r\n                                                  e\r\n                                                )}\r\n                                              >\r\n                                                <FontAwesomeIcon\r\n                                                  icon={faTrash}\r\n                                                  size={\"1x\"}\r\n                                                />\r\n                                              </span>\r\n                                            </Tooltip>\r\n                                          </>\r\n                                        )}\r\n                                      </td>\r\n                                    </tr>\r\n                                  </tbody>\r\n                                </table>\r\n                              </td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n\r\n                        <h1 className=\"titleSelectedParcel\">\r\n                          {convertToArabic(\r\n                            `بيانات الجزء المنزوع من الأرض رقم ${e?.attributes?.PARCEL_PLAN_NO}`\r\n                          )}\r\n                        </h1>\r\n\r\n                        <table\r\n                          className=\"table table-bordered\"\r\n                          style={{ marginTop: \"1%\" }}\r\n                        >\r\n                          <tbody>\r\n                            <tr key=\"r2\">\r\n                              <td colSpan={\"100%\"}>\r\n                                <table\r\n                                  className=\"table table-bordered\"\r\n                                  style={{ marginTop: \"1%\" }}\r\n                                >\r\n                                  <thead>\r\n                                    <tr>\r\n                                      {this.parcel_cut_fields.map(\r\n                                        (field, k) => {\r\n                                          return <th>{field.label}</th>;\r\n                                        }\r\n                                      )}\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <tr key={i}>\r\n                                      {this.parcel_cut_fields.map(\r\n                                        (field, k) => {\r\n                                          return (\r\n                                            ((!field.dependsOn ||\r\n                                              (field.dependsOn &&\r\n                                                e.attributes[field.dependsOn] ==\r\n                                                  field.value)) && (\r\n                                              <td key={k}>\r\n                                                <div>\r\n                                                  {field.editable ? (\r\n                                                    !this.state[\r\n                                                      field.name +\r\n                                                        \"_isEdit_\" +\r\n                                                        i\r\n                                                    ] ? (\r\n                                                      <span>\r\n                                                        <span>\r\n                                                          {localizeNumber(\r\n                                                            e.attributes[\r\n                                                              field.name\r\n                                                            ] || \"غير متوفر\"\r\n                                                          )}\r\n                                                        </span>\r\n                                                        {this.showEditBtn(\r\n                                                          field.name,\r\n                                                          e.attributes[\r\n                                                            field.name\r\n                                                          ],\r\n                                                          e.attributes,\r\n                                                          true\r\n                                                        ) && (\r\n                                                          <span>\r\n                                                            <button\r\n                                                              className=\"btn\"\r\n                                                              style={{\r\n                                                                marginRight: e\r\n                                                                  .attributes[\r\n                                                                  field.name\r\n                                                                ]\r\n                                                                  ? \"20px\"\r\n                                                                  : \"0px\",\r\n                                                              }}\r\n                                                              onClick={this.enableEdit.bind(\r\n                                                                this,\r\n                                                                field.name,\r\n                                                                i\r\n                                                              )}\r\n                                                            >\r\n                                                              <i className=\"fas fa-edit\"></i>\r\n                                                            </button>\r\n                                                          </span>\r\n                                                        )}\r\n                                                      </span>\r\n                                                    ) : (\r\n                                                      <span\r\n                                                        style={{\r\n                                                          display: \"grid\",\r\n                                                          gridTemplateColumns:\r\n                                                            \"1fr auto\",\r\n                                                        }}\r\n                                                      >\r\n                                                        {field.type !=\r\n                                                          \"select\" && (\r\n                                                          <input\r\n                                                            key={i}\r\n                                                            className=\"form-control\"\r\n                                                            type={field.type}\r\n                                                            step=\"any\"\r\n                                                            value={\r\n                                                              e.attributes[\r\n                                                                field.name\r\n                                                              ]\r\n                                                            }\r\n                                                            onChange={this.myChangeHandler.bind(\r\n                                                              this,\r\n                                                              field.name,\r\n                                                              i,\r\n                                                              e\r\n                                                            )}\r\n                                                          />\r\n                                                        )}\r\n                                                        {field.type ==\r\n                                                          \"select\" && (\r\n                                                          <Select\r\n                                                            value={\r\n                                                              e.attributes[\r\n                                                                field.name\r\n                                                              ]\r\n                                                            }\r\n                                                            onChange={this.selectOnchange.bind(\r\n                                                              this,\r\n                                                              field.name,\r\n                                                              i,\r\n                                                              e\r\n                                                            )}\r\n                                                            placeholder=\"نوع التقسيم\"\r\n                                                            optionFilterProp=\"children\"\r\n                                                            filterOption={(\r\n                                                              input,\r\n                                                              option\r\n                                                            ) =>\r\n                                                              convertToEnglish(\r\n                                                                option.props\r\n                                                                  .children\r\n                                                              )\r\n                                                                ?.toLowerCase()\r\n                                                                ?.indexOf(\r\n                                                                  input.toLowerCase()\r\n                                                                ) >= 0\r\n                                                            }\r\n                                                          >\r\n                                                            {field?.options?.map(\r\n                                                              (e, i) => (\r\n                                                                <Option\r\n                                                                  key={i}\r\n                                                                  value={e.name}\r\n                                                                >\r\n                                                                  {convertToArabic(\r\n                                                                    e.name\r\n                                                                  )}\r\n                                                                </Option>\r\n                                                              )\r\n                                                            )}\r\n                                                          </Select>\r\n                                                        )}\r\n                                                        <button\r\n                                                          className=\"btn\"\r\n                                                          style={{\r\n                                                            marginRight: \"20px\",\r\n                                                          }}\r\n                                                          onClick={this.saveEdit.bind(\r\n                                                            this,\r\n                                                            e.attributes\r\n                                                              .PARCEL_SPATIAL_ID,\r\n                                                            field.name,\r\n                                                            i\r\n                                                          )}\r\n                                                        >\r\n                                                          <i className=\"fa fa-floppy-o\"></i>\r\n                                                        </button>\r\n                                                      </span>\r\n                                                    )\r\n                                                  ) : (\r\n                                                    <span>\r\n                                                      <span>\r\n                                                        {localizeNumber(\r\n                                                          e.attributes[\r\n                                                            field.name\r\n                                                          ] || \"غير متوفر\"\r\n                                                        )}\r\n                                                      </span>\r\n                                                    </span>\r\n                                                  )}\r\n                                                </div>\r\n                                              </td>\r\n                                            )) || <td></td>\r\n                                          );\r\n                                        }\r\n                                      )}\r\n                                    </tr>\r\n                                  </tbody>\r\n                                </table>\r\n                              </td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n\r\n                        <h1 className=\"titleSelectedParcel\">\r\n                          {convertToArabic(\r\n                            `بيانات الجزء المتبقى من الأرض رقم ${e?.attributes?.PARCEL_PLAN_NO}`\r\n                          )}\r\n                        </h1>\r\n\r\n                        <table\r\n                          className=\"table table-bordered\"\r\n                          style={{ marginTop: \"1%\" }}\r\n                        >\r\n                          <tbody>\r\n                            <tr key=\"r2\">\r\n                              <td colSpan={\"100%\"}>\r\n                                <table\r\n                                  className=\"table table-bordered\"\r\n                                  style={{ marginTop: \"1%\" }}\r\n                                >\r\n                                  <thead>\r\n                                    <tr>\r\n                                      {this.parcel_uncut_fields.map(\r\n                                        (field, k) => {\r\n                                          return <th>{field.label}</th>;\r\n                                        }\r\n                                      )}\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <tr key={i}>\r\n                                      {this.parcel_uncut_fields.map(\r\n                                        (field, k) => {\r\n                                          return (\r\n                                            ((!field.dependsOn ||\r\n                                              (field.dependsOn &&\r\n                                                e.attributes[field.dependsOn] ==\r\n                                                  field.value)) && (\r\n                                              <td key={k}>\r\n                                                <div>\r\n                                                  {field.editable ? (\r\n                                                    !this.state[\r\n                                                      field.name +\r\n                                                        \"_isEdit_\" +\r\n                                                        i\r\n                                                    ] ? (\r\n                                                      <span>\r\n                                                        <span>\r\n                                                          {localizeNumber(\r\n                                                            e.attributes[\r\n                                                              field.name\r\n                                                            ] || \"غير متوفر\"\r\n                                                          )}\r\n                                                        </span>\r\n                                                        {this.showEditBtn(\r\n                                                          field.name,\r\n                                                          e.attributes[\r\n                                                            field.name\r\n                                                          ],\r\n                                                          e.attributes,\r\n                                                          true\r\n                                                        ) && (\r\n                                                          <span>\r\n                                                            <button\r\n                                                              className=\"btn\"\r\n                                                              style={{\r\n                                                                marginRight: e\r\n                                                                  .attributes[\r\n                                                                  field.name\r\n                                                                ]\r\n                                                                  ? \"20px\"\r\n                                                                  : \"0px\",\r\n                                                              }}\r\n                                                              onClick={this.enableEdit.bind(\r\n                                                                this,\r\n                                                                field.name,\r\n                                                                i\r\n                                                              )}\r\n                                                            >\r\n                                                              <i className=\"fas fa-edit\"></i>\r\n                                                            </button>\r\n                                                          </span>\r\n                                                        )}\r\n                                                      </span>\r\n                                                    ) : (\r\n                                                      <span\r\n                                                        style={{\r\n                                                          display: \"grid\",\r\n                                                          gridTemplateColumns:\r\n                                                            \"1fr auto\",\r\n                                                        }}\r\n                                                      >\r\n                                                        {field.type !=\r\n                                                          \"select\" && (\r\n                                                          <input\r\n                                                            key={i}\r\n                                                            className=\"form-control\"\r\n                                                            type={field.type}\r\n                                                            step=\"any\"\r\n                                                            value={\r\n                                                              e.attributes[\r\n                                                                field.name\r\n                                                              ]\r\n                                                            }\r\n                                                            onChange={this.myChangeHandler.bind(\r\n                                                              this,\r\n                                                              field.name,\r\n                                                              i,\r\n                                                              e\r\n                                                            )}\r\n                                                          />\r\n                                                        )}\r\n                                                        {field.type ==\r\n                                                          \"select\" && (\r\n                                                          <Select\r\n                                                            value={\r\n                                                              e.attributes[\r\n                                                                field.name\r\n                                                              ]\r\n                                                            }\r\n                                                            onChange={this.selectOnchange.bind(\r\n                                                              this,\r\n                                                              field.name,\r\n                                                              i,\r\n                                                              e\r\n                                                            )}\r\n                                                            placeholder=\"نوع التقسيم\"\r\n                                                            optionFilterProp=\"children\"\r\n                                                            filterOption={(\r\n                                                              input,\r\n                                                              option\r\n                                                            ) =>\r\n                                                              convertToEnglish(\r\n                                                                option.props\r\n                                                                  .children\r\n                                                              )\r\n                                                                ?.toLowerCase()\r\n                                                                ?.indexOf(\r\n                                                                  input.toLowerCase()\r\n                                                                ) >= 0\r\n                                                            }\r\n                                                          >\r\n                                                            {field?.options?.map(\r\n                                                              (e, i) => (\r\n                                                                <Option\r\n                                                                  key={i}\r\n                                                                  value={e.name}\r\n                                                                >\r\n                                                                  {convertToArabic(\r\n                                                                    e.name\r\n                                                                  )}\r\n                                                                </Option>\r\n                                                              )\r\n                                                            )}\r\n                                                          </Select>\r\n                                                        )}\r\n                                                        <button\r\n                                                          className=\"btn\"\r\n                                                          style={{\r\n                                                            marginRight: \"20px\",\r\n                                                          }}\r\n                                                          onClick={this.saveEdit.bind(\r\n                                                            this,\r\n                                                            e.attributes\r\n                                                              .PARCEL_SPATIAL_ID,\r\n                                                            field.name,\r\n                                                            i\r\n                                                          )}\r\n                                                        >\r\n                                                          <i className=\"fa fa-floppy-o\"></i>\r\n                                                        </button>\r\n                                                      </span>\r\n                                                    )\r\n                                                  ) : (\r\n                                                    <span>\r\n                                                      <span>\r\n                                                        {localizeNumber(\r\n                                                          e.attributes[\r\n                                                            field.name\r\n                                                          ] || \"غير متوفر\"\r\n                                                        )}\r\n                                                      </span>\r\n                                                    </span>\r\n                                                  )}\r\n                                                </div>\r\n                                              </td>\r\n                                            )) || <td></td>\r\n                                          );\r\n                                        }\r\n                                      )}\r\n                                    </tr>\r\n                                  </tbody>\r\n                                </table>\r\n                              </td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                        {([146].indexOf(this.props.currentModule.id) != -1 || [146].indexOf(this.props.stepModuleId) != -1) && (\r\n                          <>\r\n                            <h1 className=\"titleSelectedParcel\">\r\n                              {convertToArabic(\r\n                                `التقدير المالي للأرض رقم ${e?.attributes?.PARCEL_PLAN_NO}`\r\n                              )}\r\n                            </h1>\r\n                            <table\r\n                              className=\"table table-bordered\"\r\n                              style={{ marginTop: \"1%\" }}\r\n                            >\r\n                              <tbody>\r\n                                {this.lists.map((list, listIndex) => (\r\n                                  <tr key={i}>\r\n                                    {list.map((field, k) => {\r\n                                      return (\r\n                                        field.visible &&\r\n                                        ((\r\n                                          <>\r\n                                            <th\r\n                                              style={{\r\n                                                width:\r\n                                                  (listIndex == 0 && \"10%\") ||\r\n                                                  \"\",\r\n                                              }}\r\n                                            >\r\n                                              {field.placeholder}\r\n                                            </th>\r\n                                            <td\r\n                                              key={k}\r\n                                              colSpan={field.colSpan}\r\n                                              style={{\r\n                                                width:\r\n                                                  (listIndex == 0 && \"10%\") ||\r\n                                                  \"\",\r\n                                              }}\r\n                                            >\r\n                                              <div>\r\n                                                {field.editable ? (\r\n                                                  !this.state[\r\n                                                    field.name + \"_isEdit_\" + i\r\n                                                  ] ? (\r\n                                                    <span>\r\n                                                      <span>\r\n                                                        {convertToArabic(\r\n                                                          e.attributes[\r\n                                                            field.name\r\n                                                          ] || \"غير متوفر\"\r\n                                                        )}\r\n                                                      </span>\r\n                                                      {!this.props?.field\r\n                                                        ?.isReadOnly &&\r\n                                                        this.showEditBtn(\r\n                                                          field.name,\r\n                                                          e.attributes[\r\n                                                            field.name\r\n                                                          ],\r\n                                                          e.attributes\r\n                                                        ) && (\r\n                                                          <span>\r\n                                                            <button\r\n                                                              className=\"btn\"\r\n                                                              style={{\r\n                                                                marginRight: e\r\n                                                                  .attributes[\r\n                                                                  field.name\r\n                                                                ]\r\n                                                                  ? \"20px\"\r\n                                                                  : \"0px\",\r\n                                                              }}\r\n                                                              onClick={this.enableEdit.bind(\r\n                                                                this,\r\n                                                                field.name,\r\n                                                                i\r\n                                                              )}\r\n                                                            >\r\n                                                              <i className=\"fas fa-edit\"></i>\r\n                                                            </button>\r\n                                                          </span>\r\n                                                        )}\r\n                                                    </span>\r\n                                                  ) : (\r\n                                                    <span\r\n                                                      style={{\r\n                                                        display: \"grid\",\r\n                                                        gridTemplateColumns:\r\n                                                          \"1fr auto\",\r\n                                                      }}\r\n                                                    >\r\n                                                      {field.field !=\r\n                                                        \"select\" && (\r\n                                                        <Field\r\n                                                          init_data={(\r\n                                                            props\r\n                                                          ) => {\r\n                                                            props.input.onChange(\r\n                                                              e.attributes[\r\n                                                                field.name\r\n                                                              ]\r\n                                                            );\r\n                                                          }}\r\n                                                          name={`${field.name}${i}`}\r\n                                                          component={\r\n                                                            renderField\r\n                                                          }\r\n                                                          className=\"form-control\"\r\n                                                          {...{ field }}\r\n                                                          field={\r\n                                                            field.type ||\r\n                                                            field.field\r\n                                                          }\r\n                                                          label={\r\n                                                            field.placeholder\r\n                                                          }\r\n                                                          hideLabel={true}\r\n                                                          placeholder={\r\n                                                            field.placeholder\r\n                                                          }\r\n                                                          step=\"any\"\r\n                                                          value={\r\n                                                            e.attributes[\r\n                                                              field.name\r\n                                                            ]\r\n                                                          }\r\n                                                          onChange={this.myChangeHandler.bind(\r\n                                                            this,\r\n                                                            field.name,\r\n                                                            i,\r\n                                                            e\r\n                                                          )}\r\n                                                        />\r\n                                                      )}\r\n                                                      {field.field ==\r\n                                                        \"select\" && (\r\n                                                        <Select\r\n                                                          value={\r\n                                                            e.attributes[\r\n                                                              field.name\r\n                                                            ]\r\n                                                          }\r\n                                                          onChange={this.selectOnchange.bind(\r\n                                                            this,\r\n                                                            field.name,\r\n                                                            i,\r\n                                                            e\r\n                                                          )}\r\n                                                          optionFilterProp=\"children\"\r\n                                                          filterOption={(\r\n                                                            input,\r\n                                                            option\r\n                                                          ) =>\r\n                                                            convertToEnglish(\r\n                                                              option.props\r\n                                                                .children\r\n                                                            )\r\n                                                              ?.toLowerCase()\r\n                                                              ?.indexOf(\r\n                                                                input.toLowerCase()\r\n                                                              ) >= 0\r\n                                                          }\r\n                                                        >\r\n                                                          {field?.options?.map(\r\n                                                            (e, i) => (\r\n                                                              <Option\r\n                                                                key={i}\r\n                                                                value={e.name}\r\n                                                              >\r\n                                                                {convertToArabic(\r\n                                                                  e.name\r\n                                                                )}\r\n                                                              </Option>\r\n                                                            )\r\n                                                          )}\r\n                                                        </Select>\r\n                                                      )}\r\n                                                      <button\r\n                                                        className=\"btn\"\r\n                                                        style={{\r\n                                                          marginRight: \"20px\",\r\n                                                        }}\r\n                                                        onClick={this.saveEdit.bind(\r\n                                                          this,\r\n                                                          e.attributes\r\n                                                            .PARCEL_SPATIAL_ID,\r\n                                                          field.name,\r\n                                                          i\r\n                                                        )}\r\n                                                      >\r\n                                                        <i className=\"fa fa-floppy-o\"></i>\r\n                                                      </button>\r\n                                                    </span>\r\n                                                  )\r\n                                                ) : (\r\n                                                  <span>\r\n                                                    <span>\r\n                                                      {convertToArabic(\r\n                                                        e.attributes[\r\n                                                          field.name\r\n                                                        ] ||\r\n                                                          (field.defaultValue &&\r\n                                                            field.defaultValue(\r\n                                                              e.attributes\r\n                                                            )) ||\r\n                                                          \"غير متوفر\"\r\n                                                      )}\r\n                                                    </span>\r\n                                                  </span>\r\n                                                )}\r\n                                              </div>\r\n                                            </td>\r\n                                          </>\r\n                                        ) || <td></td>)\r\n                                      );\r\n                                    })}\r\n                                  </tr>\r\n                                ))}\r\n                              </tbody>\r\n                            </table>\r\n                          </>\r\n                        )}\r\n                      </Panel>\r\n                    </Collapse>\r\n                  );\r\n                })}\r\n              </div>\r\n\r\n              {/*<>\r\n                  <div>\r\n                    <div style={{ marginTop: \"20px\" }}>\r\n                      <h1 className=\"titleSelectedParcel\">الشطفات</h1>\r\n\r\n                      <table\r\n                        className=\"table table-bordered\"\r\n                        style={{ marginTop: \"1%\" }}\r\n                      >\r\n                        <thead>\r\n                          <tr>\r\n                            {this.parcel_fields_headers_shatfa.map(\r\n                              (field_header, k) => {\r\n                                return <th>{field_header}</th>;\r\n                              }\r\n                            )}\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {survayParcelCutter &&\r\n                            survayParcelCutter.map((e, i) => {\r\n                              return (\r\n                                <tr key={i}>\r\n                                  {this.parcel_fields_shatfa.map((field, k) => {\r\n                                    return (\r\n                                      <td key={k}>\r\n                                        <div>\r\n                                          {field.editable ? (\r\n                                            !this.state[\r\n                                              field.name + \"_isEdit_\" + i\r\n                                            ] ? (\r\n                                              <span>\r\n                                                <span>{e[field.name] || \"\"}</span>\r\n                                                {this.showEditBtn(\r\n                                                  field.name,\r\n                                                  e[field.name]\r\n                                                ) && (\r\n                                                  <span>\r\n                                                    <button\r\n                                                      className=\"btn\"\r\n                                                      style={{\r\n                                                        marginRight: e[field.name]\r\n                                                          ? \"20px\"\r\n                                                          : \"0px\",\r\n                                                      }}\r\n                                                      onClick={(event) => {\r\n                                                        this.enableEdit(\r\n                                                          field.name,\r\n                                                          i\r\n                                                        );\r\n                                                      }}\r\n                                                    >\r\n                                                      <i className=\"fas fa-edit\"></i>\r\n                                                    </button>\r\n                                                  </span>\r\n                                                )}\r\n                                              </span>\r\n                                            ) : (\r\n                                              <span\r\n                                                style={{\r\n                                                  display: \"grid\",\r\n                                                  gridTemplateColumns: \"1fr auto\",\r\n                                                }}\r\n                                              >\r\n                                                <input\r\n                                                  key={i}\r\n                                                  className=\"form-control\"\r\n                                                  type=\"number\"\r\n                                                  step=\"any\"\r\n                                                  name={`${field.name + i}`}\r\n                                                  value={e[field.name]}\r\n                                                  onChange={(event) => {\r\n                                                    this.myChangeHandler(\r\n                                                      field.name,\r\n                                                      i,\r\n                                                      e,\r\n                                                      event\r\n                                                    );\r\n                                                  }}\r\n                                                />\r\n                                                <button\r\n                                                  className=\"btn\"\r\n                                                  style={{\r\n                                                    marginRight: \"20px\",\r\n                                                  }}\r\n                                                  onClick={(event) => {\r\n                                                    this.saveEdit(\r\n                                                      0,\r\n                                                      field.name,\r\n                                                      i\r\n                                                    );\r\n                                                  }}\r\n                                                >\r\n                                                  <i className=\"fa fa-floppy-o\"></i>\r\n                                                </button>\r\n                                              </span>\r\n                                            )\r\n                                          ) : (\r\n                                            <span>\r\n                                              <span>{e[field.name] || \"\"}</span>\r\n                                            </span>\r\n                                          )}\r\n                                        </div>\r\n                                      </td>\r\n                                    );\r\n                                  })}\r\n                                </tr>\r\n                              );\r\n                            })}\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <div>\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        style={{\r\n                          width: \"20px\",\r\n                          height: \"20px\",\r\n                          margin: \"3px\",\r\n                        }}\r\n                        checked={this.state[\"have_electric_room\"]}\r\n                        onChange={(evt) => {\r\n                          this.state[\"electric_room_area\"] = \"\";\r\n                          this.onElectricInputChange(\"have_electric_room\", evt);\r\n                        }}\r\n                      />\r\n                      تشمل غرفة الكهرباء\r\n                    </div>\r\n                    {this.state[\"have_electric_room\"] && (\r\n                      <div>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"number\"\r\n                          step=\"any\"\r\n                          name=\"electric_room_area\"\r\n                          value={this.state[\"electric_room_area\"]}\r\n                          placeholder=\"مساحة غرفة الكهرباء\"\r\n                          onChange={this.onElectricInputChange.bind(\r\n                            this,\r\n                            \"electric_room_area\"\r\n                          )}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    {this.state[\"have_electric_room\"] && (\r\n                      <div>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"text\"\r\n                          name=\"electric_room_place\"\r\n                          value={this.state[\"electric_room_place\"]}\r\n                          placeholder=\"مكان غرفة الكهرباء\"\r\n                          onChange={this.onElectricInputChange.bind(\r\n                            this,\r\n                            \"electric_room_place\"\r\n                          )}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                          </>*/}\r\n            </div>\r\n          )}\r\n        </div>\r\n        {/* )} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(withTranslation(\"labels\")(propertyRemovalComponent));\r\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAEA;AAeA;AACA;AACA;AACA;AAUA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAuiBA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAacA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAGA;AAEA;AAIA;AAEA;AAYA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAOA;AAKA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAcA;AACA;AAAA;AAGA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA1zabA;AAiBA;AACA;AAyKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AA4xBA;AACA;AACA;AAsgBA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAIA;AAEA;AACA;AAKA;AAIA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AA+LA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAGA;AACA;AACA;AAAA;AAOA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAQA;AAAA;AAQA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AAMA;AAAA;AACA;AACA;AAKA;AAAA;AAuBA;AACA;AACA;AAMA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAMA;AAKA;AAMA;AACA;AACA;AAEA;AAAA;AASA;AACA;AAKA;AACA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAAA;AAmBA;AAMA;AACA;AAGA;AAKA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAKA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAeA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AAKA;AAAA;AAEA;AACA;AAKA;AAAA;AA0BA;AACA;AACA;AAMA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAMA;AAKA;AAMA;AACA;AACA;AAEA;AAAA;AASA;AACA;AAKA;AACA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAAA;AAmBA;AAUA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AAKA;AAAA;AAEA;AACA;AAKA;AAAA;AA0BA;AACA;AACA;AAMA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAMA;AAKA;AAMA;AACA;AACA;AAEA;AAAA;AASA;AACA;AAKA;AACA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAAA;AAmBA;AAWA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AAKA;AACA;AAGA;AAAA;AAKA;AACA;AACA;AACA;AAGA;AAAA;AA0BA;AACA;AACA;AAMA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AAEA;AAAA;AAKA;AAGA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAIA;AAGA;AACA;AAGA;AACA;AAKA;AAKA;AAMA;AAKA;AAMA;AACA;AAEA;AAAA;AASA;AACA;AAKA;AACA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAAA;AAyBA;AAUA;AA6KA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"2.min.js","sources":["webpack:///./src/app/components/inputs/fields/list/index.js","webpack:///./src/app/components/inputs/fields/list/loadData.js","webpack:///./src/app/components/inputs/fields/list/mapping.js","webpack:///./src/app/helpers/components/show/checkbox/index.js","webpack:///./src/app/helpers/components/show/select/index.js","webpack:///./src/app/helpers/components/show/types.js"],"sourcesContent":["import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport renderField from \"app/components/inputs\";\r\nimport { isEqual, pick, get, sortBy, isEmpty, last, map } from \"lodash\";\r\nimport { connect } from \"react-redux\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"./mapping\";\r\nimport { postItem, updateItem, deleteItem } from \"app/helpers/apiMethods\";\r\nimport mainInput from \"app/helpers/main/input\";\r\nimport * as fieldValues from \"app/helpers/fieldValues\";\r\nimport {\r\n  apply_permissions,\r\n  serverFieldMapper,\r\n  applySubmissionsFuncs,\r\n} from \"app/helpers/functions\";\r\nimport { Button } from \"antd\";\r\nimport { getPaginatedData, getScrollingData, getAllData } from \"./loadData\";\r\nimport * as Fields from \"app/helpers/components/show/types\";\r\nexport class list extends mainInput {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      fields = [],\r\n      t,\r\n      setCurrentPage,\r\n      setPageSize,\r\n      permissions = {},\r\n      pagination = {},\r\n      pageSize: propsPageSize,\r\n    } = props;\r\n    const { currentPage = 1, pageSize = propsPageSize } = pagination;\r\n    setCurrentPage(currentPage);\r\n    setPageSize(pageSize);\r\n    this.fields = fields.map((f) => {\r\n      f.hideLabel = [\"boolean\", \"multiChecks\"].includes(f.field)\r\n        ? true\r\n        : f.hideLabel;\r\n      f.label = t(`labels:${f.label}`);\r\n      return serverFieldMapper(f);\r\n    });\r\n    this.state = {};\r\n    this.state.columns = this.buildColumns();\r\n    this.extraActions = [\r\n      {\r\n        action: this.add_row.bind(this),\r\n        name: \"Add\",\r\n        permissions: get(permissions, \"actions.create\", null),\r\n      },\r\n    ];\r\n    this.onScroll = this.onScroll.bind(this);\r\n    this.loading = false;\r\n    if (!props.input.value) {\r\n      this.handleChange([]);\r\n    }\r\n  }\r\n\r\n  setSumFooter() {\r\n    const {\r\n      t,\r\n      input: { value = [] },\r\n      moduleName = \"\",\r\n      sum = \"\",\r\n      sum_to = \"\",\r\n      change,\r\n      sumFields = [],\r\n    } = this.props;\r\n\r\n    let sums = {};\r\n\r\n    if (!isEmpty(value)) {\r\n      sumFields.map((sumField) => {\r\n        sums[`${sumField}Sum`] = 0;\r\n        value.map((val) => {\r\n          sums[`${sumField}Sum`] =\r\n            parseFloat(sums[`${sumField}Sum`]) + parseFloat(val[sumField]);\r\n        });\r\n      });\r\n\r\n      change && sums[`${sum}Sum`]\r\n        ? change(`${sum_to}.Sum.${moduleName}`, sums[`${sum}Sum`])\r\n        : null;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          marginLeft: 500,\r\n        }}\r\n      >\r\n        <label> {t(\"Sum\")} </label>\r\n        {sums ? (\r\n          map(sums, (value, key) => (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                justifyContent: \"space-evenly\",\r\n              }}\r\n            >\r\n              <label> {value ? `${value.toFixed(2)}` : \"\"}</label>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  buildColumns() {\r\n    const { t, actions: pActions = [], permissions = {} } = this.props;\r\n    this.columns = [\r\n      ...this.fields.map((d) => ({\r\n        title: t(`labels:${d.label}`),\r\n        key: d.show || d.name,\r\n        dataIndex: d.show || d.name,\r\n        render: (value, record, index) =>\r\n          this.cellRender(d, value, record, index),\r\n      })),\r\n      {\r\n        title: t(\"actions:Actions\"),\r\n        key: \"actions\",\r\n        dataIndex: \"actions\",\r\n        render: (value, record, index) => this.actionRender(record, index),\r\n      },\r\n    ];\r\n    this.actions = [\r\n      //   {\r\n      //     action: this.add_action,\r\n      //     name: \"Add\",\r\n      //     icon: \"fa fa-home\",\r\n      //     color: \"#fff\",\r\n      //     // permissions: get(permissions, \"actions.add\", null),\r\n      //   },\r\n      {\r\n        action: this.edit_action,\r\n        name: \"Edit\",\r\n        icon: \"fas fa-edit\",\r\n        color: \"#fff\",\r\n        permissions: get(permissions, \"actions.edit\", null),\r\n      },\r\n      {\r\n        action: this.delete_action,\r\n        name: \"Delete\",\r\n        msg: \"Are you sure you want to delete this item?\",\r\n        show: \"confirmAction\",\r\n        icon: \"fas fa-trash\",\r\n        permissions: get(permissions, \"actions.delete\", null),\r\n      },\r\n      ...pActions,\r\n    ];\r\n    this.state = {\r\n      index: -1,\r\n      old_data: \"\",\r\n    };\r\n  }\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    const { index } = this.state;\r\n    const {\r\n      data,\r\n      pagination = {},\r\n      input: { value },\r\n    } = this.props;\r\n    const { currentPage, pageSize, failed, count } = pagination;\r\n    const {\r\n      data: nextData,\r\n      pagination: nextPagination = {},\r\n      ux_pattern,\r\n      input: { value: nextValue },\r\n    } = nextProps;\r\n    const {\r\n      currentPage: nextCurrentPage,\r\n      count: nextCount,\r\n      pageSize: nextPageSize,\r\n      failed: nextFailed,\r\n    } = nextPagination;\r\n    return (\r\n      !isEqual(nextData, data) ||\r\n      !isEqual(nextValue, value) ||\r\n      nextState.index != this.state.index ||\r\n      (this.props.footer && nextProps.selectors != this.props.selectors) ||\r\n      (index > -1 &&\r\n        !isEqual(\r\n          nextProps.input.value[index],\r\n          this.props.input.value[index]\r\n        )) ||\r\n      (ux_pattern === \"pagination\" &&\r\n        (!isEqual(pageSize, nextPageSize) ||\r\n          !isEqual(count, nextCount) ||\r\n          !isEqual(currentPage, nextCurrentPage) ||\r\n          !isEqual(failed, nextFailed)))\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      data = [],\r\n      inline,\r\n      crud = {},\r\n      input: { value },\r\n      setValueLabelKeys,\r\n      value_key,\r\n      label_key,\r\n      ux_pattern,\r\n      inconsistant,\r\n      links,\r\n    } = this.props;\r\n    const { fetch } = crud;\r\n    data ? this.handleChange(data) : null;\r\n    if (ux_pattern == \"infiniteScrolling\") {\r\n      this.setScrollEvents();\r\n    }\r\n    if (\r\n      !data.length ||\r\n      (ux_pattern != \"infiniteScrolling\" &&\r\n        (get(links, \"nextLink\") || !inconsistant))\r\n    ) {\r\n      setValueLabelKeys(label_key, value_key);\r\n      fetch ? this.loadData(this.props, true) : this.handleChange([]);\r\n    }\r\n    if (inline) {\r\n      this.handleChange(value.length ? value : []);\r\n    }\r\n  }\r\n\r\n  setPaginationConfig(currentPage, total, pageSize) {\r\n    const { setCurrentPage } = this.props;\r\n    this.paginationConfig = {\r\n      current: currentPage,\r\n      total,\r\n      pageSize,\r\n      onChange: (page) => setCurrentPage(page),\r\n    };\r\n  }\r\n\r\n  loadData(props, onMount) {\r\n    const { ux_pattern } = props;\r\n    if (this.loading) {\r\n      return;\r\n    }\r\n    this.loading = true;\r\n    switch (ux_pattern) {\r\n      case \"pagination\": {\r\n        getPaginatedData.call(this, props, onMount);\r\n        break;\r\n      }\r\n      case \"infiniteScrolling\": {\r\n        getScrollingData.call(this, props, onMount);\r\n        break;\r\n      }\r\n      default: {\r\n        getAllData.call(this, props);\r\n      }\r\n    }\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    const { data, pagination = {} } = this.props;\r\n    const { currentPage, pageSize, failed, count } = pagination;\r\n    const {\r\n      data: nextData,\r\n      pagination: nextPagination = {},\r\n      ux_pattern,\r\n      crud = {},\r\n    } = nextProps;\r\n    const {\r\n      currentPage: nextCurrentPage,\r\n      count: nextCount,\r\n      pageSize: nextPageSize,\r\n      failed: nextFailed,\r\n    } = nextPagination;\r\n    const { fetch } = crud;\r\n    if (!isEqual(data, nextData)) {\r\n      this.handleChange(nextData);\r\n      ux_pattern === \"pagination\"\r\n        ? this.setPaginationConfig(nextCurrentPage, nextCount, nextPageSize)\r\n        : null;\r\n    }\r\n    if (nextFailed != failed && nextFailed) {\r\n      this.loadData(nextProps);\r\n    }\r\n    if (\r\n      ux_pattern === \"pagination\" &&\r\n      (!isEqual(pageSize, nextPageSize) ||\r\n        !isEqual(count, nextCount) ||\r\n        !isEqual(currentPage, nextCurrentPage))\r\n    ) {\r\n      this.setPaginationConfig(nextCurrentPage, nextCount, nextPageSize);\r\n    }\r\n    if (!isEqual(data, nextData) && nextData.length == 0) {\r\n      const { label_key, value_key, setValueLabelKeys } = nextProps;\r\n      setValueLabelKeys(label_key, value_key);\r\n      fetch ? this.loadData(this.props, true) : null;\r\n    }\r\n  }\r\n\r\n  handleChange(value) {\r\n    const { onChange } = this.props.input;\r\n    const { setData, sortby, ux_pattern } = this.props;\r\n    const data = sortBy(value, sortby);\r\n    if (ux_pattern != \"pagination\") {\r\n      setData(data);\r\n    }\r\n    onChange(value);\r\n  }\r\n\r\n  calculateIndex(index) {\r\n    const { pagination = {}, ux_pattern } = this.props;\r\n    const { currentPage = 1, pageSize = 20 } = pagination;\r\n    return ux_pattern != \"pagination\"\r\n      ? index\r\n      : (currentPage - 1) * pageSize + index;\r\n  }\r\n  save_data(index, ev) {\r\n    const {\r\n      params = [],\r\n      values = {},\r\n      crud = {},\r\n      value_key,\r\n      addToData,\r\n      editData,\r\n      untouch,\r\n      touch = () => {},\r\n      meta: { error = [{}] },\r\n      api_config,\r\n      preSubmit,\r\n    } = this.props;\r\n    const { createUrl, updateUrl } = crud;\r\n    const { old_data = {} } = this.state;\r\n    const { value, name } = this.props.input;\r\n    const fieldsName = this.fields.map((d) => d.name);\r\n    const errors = Array.isArray(error)\r\n      ? pick(\r\n          error.reduce((d, o) => ({ ...o, ...d }), 0),\r\n          fieldsName\r\n        )\r\n      : error;\r\n    const calculatedIndex = this.calculateIndex(index);\r\n    if (isEmpty(errors)) {\r\n      applySubmissionsFuncs(value[index], preSubmit, values, this.props).then(\r\n        (newItem) => {\r\n          if (!isEmpty(old_data)) {\r\n            if (updateUrl) {\r\n              const id = value[index][value_key];\r\n              updateItem(updateUrl, newItem, id, {\r\n                ...api_config,\r\n                params: { ...get(api_config, params), ...pick(values, params) },\r\n              }).then((response) => {\r\n                if (window.cadsId && newItem.floorfilepath) {\r\n                  window.cadsId = window.cadsId.filter((d) => d != id);\r\n                }\r\n\r\n                editData(this.calculateIndex(index), response);\r\n                this.edit_index(-1);\r\n                this.setState({ old_data: null });\r\n              });\r\n            } else {\r\n              editData(this.calculateIndex(index), newItem);\r\n              this.edit_index(-1);\r\n              this.setState({ old_data: null });\r\n            }\r\n          } else {\r\n            if (createUrl) {\r\n              postItem(createUrl, newItem, {\r\n                ...api_config,\r\n                params: {\r\n                  ...get(api_config, \"params\"),\r\n                  ...pick(values, params),\r\n                },\r\n              }).then((response) => {\r\n                addToData(response, calculatedIndex, \"rewrite\");\r\n                this.setState({ old_data: null });\r\n                this.edit_index(-1);\r\n                untouch(...fieldsName.map((d) => `${name}[${index}].${d}`));\r\n              });\r\n            } else {\r\n              addToData(newItem, calculatedIndex, \"rewrite\");\r\n              this.setState({ old_data: null });\r\n              this.edit_index(-1);\r\n              untouch(...fieldsName.map((d) => `${name}[${index}].${d}`));\r\n            }\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      touch(...fieldsName.map((d) => `${name}[${index}].${d}`));\r\n    }\r\n  }\r\n\r\n  delete_action = (index, item) => {\r\n    const {\r\n      params = [],\r\n      values = {},\r\n      crud = {},\r\n      value_key,\r\n      removeFromData,\r\n      api_config,\r\n      setItemsCount,\r\n      pagination = {},\r\n      postDelete = () => {},\r\n    } = this.props;\r\n    const { count } = pagination;\r\n    if (crud.deleteUrl) {\r\n      deleteItem(crud.deleteUrl, get(item, value_key), {\r\n        ...api_config,\r\n        params: { ...get(api_config, params), ...pick(values, params) },\r\n      }).then((response) => {\r\n        removeFromData(this.calculateIndex(index));\r\n        setItemsCount(count - 1);\r\n        postDelete(index, item, this.props);\r\n      });\r\n    } else {\r\n      removeFromData(this.calculateIndex(index));\r\n      setItemsCount(count - 1);\r\n      postDelete(index, item, this.props);\r\n    }\r\n  };\r\n\r\n  cancel_action = (key) => {\r\n    let { name, value } = this.props.input;\r\n    const {\r\n      untouch,\r\n      removeFromData,\r\n      setItemsCount,\r\n      pagination = {},\r\n    } = this.props;\r\n    const { count } = pagination;\r\n    const fieldsName = this.fields.map((d) => d.name);\r\n    value = [...value];\r\n    const { old_data } = this.state;\r\n    if (old_data) {\r\n      value[key] = old_data;\r\n    } else {\r\n      removeFromData(this.calculateIndex(key));\r\n      setItemsCount(count - 1);\r\n    }\r\n    this.setState({\r\n      index: -1,\r\n      old_data: null,\r\n    });\r\n    untouch(...fieldsName.map((d) => `${name}[${key}].${d}`));\r\n  };\r\n\r\n  edit_index = (index) => {\r\n    this.setState({\r\n      index,\r\n    });\r\n  };\r\n\r\n  edit_action = (index, data) => {\r\n    this.setState({\r\n      old_data: data,\r\n    });\r\n\r\n    this.edit_index(index);\r\n  };\r\n\r\n  add_row = () => {\r\n    const {\r\n      pagination = {},\r\n      addToData,\r\n      addFrom = \"top\",\r\n      data,\r\n      setItemsCount,\r\n      ux_pattern,\r\n    } = this.props;\r\n    const { pageSize = 20, count, currentPage = 1 } = pagination;\r\n    const shift =\r\n      addFrom == \"top\"\r\n        ? 0\r\n        : ux_pattern == \"pagination\" && data.length == pageSize\r\n        ? data.length - 1\r\n        : data.length;\r\n    addToData({}, (currentPage - 1) * pageSize + shift);\r\n    setItemsCount(count + 1);\r\n    this.edit_index(shift);\r\n    this.listDiv.scrollTop =\r\n      addFrom == \"top\"\r\n        ? 0\r\n        : this.listDiv.scrollHeight - this.listDiv.clientHeight;\r\n  };\r\n\r\n  actionRender = (record, index) => {\r\n    const { t } = this.props;\r\n    if (this.state.index == -1) {\r\n      const {\r\n        t,\r\n        input: { value },\r\n      } = this.props;\r\n      const actions = this.actions\r\n        .filter((d) =>\r\n          apply_permissions(record, d, \"permissions\", {\r\n            list: value,\r\n            itemIndex: index,\r\n          })\r\n        )\r\n        .map((d) => {\r\n          const ActionComponent = get(\r\n            this.ActionsComponents,\r\n            d.show,\r\n            this.ActionsComponents.mainStyle\r\n          );\r\n          return (\r\n            <ActionComponent\r\n              key={d.name}\r\n              {...{\r\n                ...d,\r\n                t,\r\n                clickAction: () => d.action(index, record, this.props),\r\n              }}\r\n            />\r\n          );\r\n        });\r\n      return actions;\r\n    } else if (this.state.index == index) {\r\n      const actions = [\r\n        <Button\r\n          className=\"save\"\r\n          key=\"save\"\r\n          onClick={() => this.save_data(index)}\r\n        >\r\n          {t(\"actions:Save\")}\r\n        </Button>,\r\n        <Button\r\n          className=\"cancel\"\r\n          key=\"cancel\"\r\n          onClick={() => this.cancel_action(index)}\r\n        >\r\n          {t(\"actions:Cancel\")}\r\n        </Button>,\r\n      ];\r\n      return actions;\r\n    }\r\n  };\r\n\r\n  setScrollEvents() {\r\n    this.listDiv.addEventListener(\"scroll\", this.onScroll);\r\n  }\r\n  componentWillUnmount() {\r\n    this.listDiv\r\n      ? this.listDiv.removeEventListener(\"scroll\", this.onScroll)\r\n      : null;\r\n  }\r\n\r\n  onScroll(event) {\r\n    let maxScroll = event.target.scrollHeight - event.target.clientHeight;\r\n    let currentScroll = event.target.scrollTop;\r\n    if (currentScroll >= maxScroll) {\r\n      if (get(this.props, \"links.nextLink\")) {\r\n        getScrollingData.call(this, this.props);\r\n      }\r\n    }\r\n  }\r\n\r\n  cellRender({ name: fname, ...field }, data, record, index) {\r\n    const { name, value } = this.props.input;\r\n    const _name = last(name.split(\".\"));\r\n    if (index == this.state.index) {\r\n      const { values: mainValues } = this.props;\r\n      return (\r\n        apply_permissions(\r\n          { ...mainValues, ...value[index] },\r\n          field,\r\n          \"permissions\",\r\n          this.props\r\n        ) && (\r\n          <Field\r\n            key={`${_name}[${index}].${fname}`}\r\n            name={`${_name}[${index}].${fname}`}\r\n            component={renderField}\r\n            {...{\r\n              ...field,\r\n              ...pick(this.props, [\"touch\", \"untouch\", \"change\"]),\r\n            }}\r\n            hideLabel={this.props.hideLabels}\r\n          />\r\n        )\r\n      );\r\n    }\r\n    const label =\r\n      !this.props.hideLabels && !field.hideLabel ? (\r\n        <label>{get(field, \"label\")} :</label>\r\n      ) : null;\r\n    const fieldValue = get(fieldValues, field.field, (text) => text)(\r\n      data,\r\n      record,\r\n      { name: fname, ...field },\r\n      { ...field },\r\n      this.calculateIndex(index),\r\n      {\r\n        inputName: get(this.props, \"input.name\", {}),\r\n        change: get(this.props, \"change\"),\r\n        props: this.props,\r\n      }\r\n    );\r\n    if (fieldValue) {\r\n      const FComponent = get(Fields, field.field, Fields.label);\r\n      return (\r\n        <div key={`${_name}[${index}].${fname}`}>\r\n          {label} <FComponent field={field} val={fieldValue} />\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport function connectList(component) {\r\n  return connect(mapStateToProps, mapDispatchToProps)(component);\r\n}\r\n","import { fetchData } from 'app/helpers/apiMethods';\r\nimport {handleErrorMessages} from \"app/helpers/errors\";\r\nimport { get } from 'lodash';\r\nimport { fetchAllData } from 'app/helpers/functions';\r\n\r\nexport function getPaginatedData(props, onMount) {\r\n    const { t, crud: { fetch }, setItemsCount, addToData, api_config, setTotalPages, pagination = {}, pageSize: propsPageSize, initialPage = 1 } = props;\r\n    const { pageSize = propsPageSize, currentPage = 1 } = pagination;\r\n    const shift = initialPage - 1\r\n    fetchData(fetch, {\r\n        ...api_config,\r\n        params: {\r\n            ...get(api_config, 'params'),\r\n            pageSize,\r\n            page: currentPage + shift\r\n        }\r\n    })\r\n        .then(({ results, totalPages, count }) => {\r\n            setTotalPages(totalPages);\r\n            addToData(results, (currentPage - 1) * pageSize, 'rewrite');\r\n            setItemsCount(count);\r\n            this.loading = false;\r\n            // if (onMount) {\r\n            //     fetchData(fetch, {\r\n            //         ...api_config,\r\n            //         params: {\r\n            //             ...get(api_config, 'params'),\r\n            //             size: pageSize,\r\n            //             page: totalPages\r\n            //         }\r\n            //     })\r\n            //         .then(({ results }) => {\r\n            //             setItemsCount((totalPages - 1) * pageSize + results.length);\r\n            //         })\r\n            // }\r\n        }, err => handleErrorMessages(err, t))\r\n}\r\n\r\nexport function getScrollingData(props, onMount) {\r\n    const {t, crud: { fetch }, addToData, setData, api_config, setNextUrl, links = {}, pageSize } = props;\r\n    const { nextLink } = links;\r\n    if (onMount) {\r\n        fetchData(fetch, {\r\n            ...api_config,\r\n            params: {\r\n                ...get(api_config, 'params'),\r\n                pageSize\r\n            }\r\n        })\r\n            .then(({ results, next }) => {\r\n                setData(results);\r\n                setNextUrl(next)\r\n                this.loading = false;\r\n            }, err => handleErrorMessages(err, t))\r\n    }\r\n    else {\r\n        fetchData(nextLink, api_config)\r\n            .then(({ results, next }) => {\r\n                addToData(results, -1);\r\n                setNextUrl(next);\r\n                this.loading = false;\r\n            }, err => handleErrorMessages(err, t))\r\n    }\r\n}\r\n\r\nexport function getAllData(props) {\r\n    const { crud: { fetch }, api_config, setData, t } = props;\r\n    fetchAllData(fetch, api_config)\r\n        .then(data => {\r\n            setData(data);\r\n            this.loading = false;\r\n        }, err => handleErrorMessages(err, t));\r\n}","import { get } from \"lodash\";\r\n\r\nexport const mapStateToProps = ({ wizard: {mainObject, currentModule}, selectors }, ownProps) => {\r\n    const { moduleName, ux_pattern, pageSize: propsPageSize = 20 } = ownProps;\r\n    const { pagination = {} } = get(selectors, moduleName, {});\r\n    let { pageSize = propsPageSize, currentPage = 1, totalPages = 0, count = propsPageSize } = pagination\r\n    let allData = get(selectors, `${moduleName}.data`, ownProps.data || []);\r\n    let data = null;\r\n    let failed = false;\r\n    if (ux_pattern === 'pagination') {\r\n        const firstIndex = (currentPage - 1) * pageSize;\r\n        data = allData.slice(firstIndex, firstIndex + pageSize).filter(d => d != undefined || d != null)\r\n        let arrayLength = currentPage == totalPages ? (count - firstIndex) : pageSize\r\n        if (data.length < arrayLength && arrayLength <= pageSize) {\r\n            failed = true;\r\n        }\r\n    }\r\n    return {\r\n        selectors,\r\n        ...get(selectors, moduleName, {}),\r\n        pagination: {\r\n            ...get(selectors, `${moduleName}.links`, {}),\r\n            failed\r\n        },\r\n        data: data || allData,\r\n        mainObject,\r\n        currentModule\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n    return {\r\n        setValueLabelKeys: (label_key, value_key) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.label_key`,\r\n                data: label_key\r\n            });\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.value_key`,\r\n                data: value_key\r\n            });\r\n        },\r\n        setSelector: (moduleName, data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}`,\r\n                data\r\n            });\r\n        },\r\n        setData: (data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.data`,\r\n                data\r\n            })\r\n        },\r\n        editData: (index, data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.data[${index}]`,\r\n                data\r\n            })\r\n        },\r\n        addToData: (data, index, operation) => {\r\n            dispatch({\r\n                type: 'insertInArraySelectors',\r\n                path: `${moduleName}.data`,\r\n                operation,\r\n                index,\r\n                data\r\n            })\r\n        },\r\n        removeFromData: (index) => {\r\n            dispatch({\r\n                type: 'removeSelectors',\r\n                path: `${moduleName}.data`,\r\n                index\r\n            })\r\n        },\r\n        setCurrentPage: (pageNum) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.currentPage`,\r\n                data: pageNum\r\n            })\r\n        },\r\n        setPageSize: (pageSize) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.pageSize`,\r\n                data: pageSize\r\n            })\r\n        },\r\n        setTotalPages: (totalPages) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.totalPages`,\r\n                data: totalPages\r\n            })\r\n        },\r\n        setItemsCount: (itemsCount) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.count`,\r\n                data: itemsCount\r\n            })\r\n        },\r\n        setNextUrl: (nextUrl) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.nextLink`,\r\n                data: nextUrl\r\n            })\r\n        },\r\n    }\r\n}","import {lazy} from 'react'\r\nexport const boolean = lazy(()=>import('./single'));\r\n// export const multiChecks = lazy(()=>import('./multi'));\r\n// export const op = lazy(()=>import('./op'));","import {lazy} from 'react';\r\nexport const multiSelect = lazy(()=>import('./multiSelect'));\r\nexport const select = lazy(()=>import('./main'));\r\n","import { lazy } from \"react\";\r\nexport const fileUploader = lazy(() => import(\"./fileUploader\"));\r\nexport const simpleUploader = lazy(() => import(\"./fileUploader/simple\"));\r\n// export const hijriDatePicker = lazy(()=>import('./hijriDatePicker'));\r\nexport const radio = lazy(() => import(\"./radio\"));\r\nexport const singleSwitch = lazy(() => import(\"./switch\"));\r\n// export const timePicker = lazy(()=>import('./timepicker'));\r\n// export const datePicker = lazy(()=>import('./datePicker'));\r\n// export const slider = lazy(()=>import('./slider'));\r\n// export const mentions = lazy(()=>import('./mention'));\r\nexport const label = lazy(() => import(\"./label\"));\r\n// export const autoValue = lazy(()=>import('./autoValue'));\r\n// export const address = lazy(()=>import('./address'));\r\n// export const tableList = lazy(()=>import('./list/tableList'));\r\nexport const list = lazy(() => import(\"./list/table\"));\r\nexport const simpleModal = lazy(() => import(\"./simpleModal\"));\r\nexport const primaryPricing = lazy(() => import(\"../../../../app/components/inputs/fields/property_removal_primarypricing\"));\r\nexport const propertyRemovalIdentify = lazy(() => import ('../../../../app/components/inputs/fields/identify/Component/propertyRemovalIdentifyComponnent'));\r\n// export const Collapse = lazy(()=>import('./list/collapse'));\r\n// export const cardList = lazy(()=>import('./list/cardList'));\r\n// export const multiTableList = lazy(()=>import('./list/multiTableList'));\r\n// export const gistTable = lazy(()=>import('./list/tableAdd/gisTableAdd'));\r\n// export const gistTable2 = lazy(()=>import('./list/hob'));\r\n// export const textArea = lazy(()=>import('./textArea'));\r\n// export const table = lazy(()=>import('./table'));\r\n export const button = lazy(()=>import('../../../../app/components/inputs/fields/button'));\r\n// export const AdvancedTable = lazy(()=>import('./advanced_table'))\r\n// export const identifyWizard = lazy(()=>import('./identifyWizard'))\r\n// export * from './identify';\r\n// export * from './identify'\r\nexport * from \"./select\";\r\nexport * from \"./checkbox\";\r\n// export * from './calculator'\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAolggBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAoJA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAKA;AAAA;AAIA;AACA;AAIA;AAGA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACnmtrHA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"76.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/showMapEditComponent/index.js","webpack:///./src/app/components/inputs/fields/identify/Component/showMapEditComponent/maping.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    Tooltip,\r\n} from \"antd\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"./maping\";\r\nimport { connect } from \"react-redux\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport {\r\n    addParcelNo,\r\n    clearGraphicFromLayer,\r\n    convertToArabic,\r\n    highlightFeature,\r\n    zoomToFeature,\r\n} from \"../common/common_func\";\r\nimport {\r\n    addedParcelMapServiceUrl,\r\n    editAndDeleteMapLayers\r\n} from \"../mapviewer/config\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faSearchPlus\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport { Sticky, StickyContainer } from \"react-sticky\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport { getMapInfo } from \"../common/esri_request\";\r\n\r\nconst pageSize = 10;\r\nclass showMapEditComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.isLoaded = true;\r\n        this.editLayerName;\r\n\r\n        this.state = {\r\n            features: null,\r\n            editFields: [],\r\n            editFeature: {},\r\n            current: 1,\r\n            allFeatures: props?.mainObject?.editUpdateCreate?.editableFeatures || {},\r\n            totalPage: 0,\r\n            minIndex: 0,\r\n            maxIndex: pageSize,\r\n            selectedFeatures: [],\r\n            isEditMultiple: false,\r\n            mapLoaded: false,\r\n            locationData: props?.mainObject?.locationData || null\r\n        };\r\n\r\n        if (this.state.locationData) {\r\n            this.state.allFeatures = {};\r\n            this.state.allFeatures[props.mainObject.locationData.uploadFileDetails.layerName] =\r\n                { features: props.mainObject.mapEditFeatures.editableFeatures };\r\n        }\r\n\r\n    }\r\n\r\n    formatNumber(num) {\r\n        return (+num).toFixed(2).replace(/[.,]00$/, \"\");\r\n    }\r\n\r\n    zoomToFeature(feature) {\r\n        highlightFeature(feature, this.map, {\r\n            layerName: \"ZoomGraphicLayer\",\r\n            isZoom: true,\r\n            isHighlighPolygonBorder: true,\r\n            zoomFactor: 20,\r\n        });\r\n    }\r\n\r\n    drawEditableFeatures(features, layer) {\r\n\r\n        let annotationField = editAndDeleteMapLayers[layer].outFields.find(\r\n            (x) => x.isShowLabelOnMap);\r\n\r\n        //clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n        clearGraphicFromLayer(this.map, \"ZoomGraphicLayer\");\r\n\r\n        features.forEach((f) => {\r\n            let pt;\r\n\r\n            if (f.geometry.type == \"point\") {\r\n                pt = f.geometry;\r\n            } else {\r\n                pt = f.geometry.getExtent().getCenter();\r\n            }\r\n            /*addParcelNo(\r\n                pt, this.map, convertToArabic(f.attributes[annotationField.name]),\r\n                \"ParcelPlanNoGraphicLayer\", 40, [0, 0, 0]\r\n            );*/\r\n\r\n            var symbol;\r\n\r\n            if (f.geometry.type === \"point\") {\r\n                symbol = new esri.symbol.SimpleMarkerSymbol(\r\n                    esri.symbol.SimpleMarkerSymbol.STYLE_CIRCLE,\r\n                    28,\r\n                    new esri.symbol.SimpleLineSymbol(\r\n                        esri.symbol.SimpleLineSymbol.STYLE_SOLID,\r\n                        new esri.Color([0, 0, 0]),\r\n                        2\r\n                    ),\r\n                    new esri.Color([0, 0, 0, 0.2])\r\n                );\r\n            } else if (f.geometry.type === \"polyline\") {\r\n                symbol = new esri.symbol.SimpleLineSymbol(\r\n                    esri.symbol.SimpleLineSymbol.STYLE_SOLID,\r\n                    new esri.Color([0, 0, 0]),\r\n                    7\r\n                );\r\n            } else {\r\n                symbol = new esri.symbol.SimpleFillSymbol(\r\n                    esri.symbol.SimpleFillSymbol.STYLE_NULL,\r\n                    new esri.symbol.SimpleLineSymbol(\r\n                        esri.symbol.SimpleFillSymbol.STYLE_SOLID,\r\n                        new esri.Color([0, 0, 0]),\r\n                        3\r\n                    ),\r\n                    new esri.Color([0, 0, 0])\r\n                );\r\n            }\r\n\r\n            var graphic = new esri.Graphic(f.geometry, symbol, null);\r\n\r\n            this.map.getLayer(\"ZoomGraphicLayer\").add(graphic);\r\n        });\r\n\r\n        zoomToFeature(this.map.getLayer(\"ZoomGraphicLayer\").graphics, this.map, 2);\r\n    }\r\n\r\n    drawInfoFeatures(allFeatures) {\r\n\r\n        clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n        Object.keys(allFeatures).forEach((info) => {\r\n            let annotationField = editAndDeleteMapLayers[info].outFields.find(\r\n                (x) => x.isShowLabelOnMap);\r\n\r\n            allFeatures[info].features.forEach((f) => {\r\n                let pt;\r\n                let tempGeometry;\r\n\r\n                if (f.geometry.type == \"polygon\") {\r\n                    tempGeometry = new esri.geometry.Polygon(\r\n                        JSON.parse(JSON.stringify(f.geometry))\r\n                    );\r\n                } else if (f.geometry.type == \"point\") {\r\n                    tempGeometry = new esri.geometry.Point(\r\n                        JSON.parse(JSON.stringify(f.geometry))\r\n                    );\r\n                } else {\r\n                    tempGeometry = new esri.geometry.Polyline(\r\n                        JSON.parse(JSON.stringify(f.geometry))\r\n                    );\r\n                }\r\n\r\n                if (f.geometry.type == \"point\") {\r\n                    pt = tempGeometry;\r\n                } else {\r\n                    pt = tempGeometry.getExtent().getCenter();\r\n                }\r\n                \r\n                addParcelNo(\r\n                    pt, this.map, convertToArabic(f.attributes[annotationField.name]),\r\n                    \"ParcelPlanNoGraphicLayer\", 40, [0, 0, 0]\r\n                );\r\n            });\r\n        })\r\n\r\n    }\r\n\r\n    componentDidUpdate() { }\r\n\r\n\r\n    onChangeSelectFeature = (index, feature, e) => {\r\n        this.state.allFeatures[feature.layerName].features[index].isSelected =\r\n            !this.state.allFeatures[feature.layerName].features[index].isSelected;\r\n\r\n        let selectedFeatures = this.state.allFeatures[\r\n            feature.layerName\r\n        ].features.filter((x) => x.isSelected);\r\n\r\n        if (selectedFeatures.length > 1) {\r\n            this.setState({\r\n                selectedFeatures: [...selectedFeatures],\r\n                allFeatures: { ...this.state.allFeatures },\r\n            });\r\n        } else {\r\n            this.setState({\r\n                selectedFeatures: [],\r\n                allFeatures: { ...this.state.allFeatures },\r\n            });\r\n        }\r\n    };\r\n\r\n    zoomToSelectedFeature = (layer) => {\r\n        let features = [];\r\n\r\n        this.state.allFeatures[layer].features.forEach((f, index) => {\r\n            if (f.isSelected) {\r\n                features.push(f);\r\n            }\r\n        });\r\n\r\n        if (!features.length) {\r\n            features = this.state.features;\r\n        }\r\n\r\n        this.drawEditableFeatures(features, layer);\r\n    };\r\n\r\n    removeSelectedFeatures = (layer) => {\r\n        this.state.allFeatures[layer].isSelectAll = false;\r\n        this.state.allFeatures[layer].selectedFeatures = [];\r\n        this.state.allFeatures[layer].features = [\r\n            ...this.state.allFeatures[layer].features.filter((x) => !x.isSelected),\r\n        ];\r\n\r\n        this.props.setEditableFeatures({ ...this.state.allFeatures });\r\n\r\n        this.setState({\r\n            allFeatures: { ...this.state.allFeatures },\r\n        });\r\n    };\r\n\r\n    onChangeSelectAll = (layerName) => {\r\n        this.state.allFeatures[layerName].isSelectAll =\r\n            !this.state.allFeatures[layerName].isSelectAll;\r\n        this.state.allFeatures[layerName].selectedFeatures = [];\r\n\r\n        this.state.allFeatures[layerName].features.map((f) => {\r\n            f.isSelected = this.state.allFeatures[layerName].isSelectAll;\r\n        });\r\n        this.setState({\r\n            allFeatures: { ...this.state.allFeatures },\r\n        });\r\n    };\r\n\r\n    handleChange = (page) => {\r\n        this.setState({\r\n            current: page,\r\n            minIndex: (page - 1) * pageSize,\r\n            maxIndex: page * pageSize,\r\n        });\r\n    };\r\n\r\n    mapLoaded = (map) => {\r\n        getMapInfo(addedParcelMapServiceUrl).then((response) => {\r\n            map.__mapInfo = response;\r\n            this.map = map;\r\n\r\n            //\r\n            this.setState({ mapLoaded: true });\r\n            this.props.setCurrentMap(map);\r\n\r\n            if (Object.keys(this.state.allFeatures).length > 0) {\r\n                if (\r\n                    this.state?.allFeatures[Object.keys(this.state.allFeatures)[0]]\r\n                        ?.features?.length > 0\r\n                ) {\r\n                    \r\n\r\n                    this.drawInfoFeatures(this.state.allFeatures);\r\n\r\n                    highlightFeature(\r\n                        this.state.allFeatures[Object.keys(this.state.allFeatures)[0]]\r\n                            .features,\r\n                        this.map,\r\n                        {\r\n                            layerName: \"ZoomGraphicLayer\",\r\n                            isZoom: true,\r\n                            isHighlighPolygonBorder: true,\r\n                            zoomFactor: 20,\r\n                        }\r\n                    );\r\n                    \r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    setSelectMapLayer = (layer) => {\r\n        this.props.setSelectMapLayer(layer);\r\n    };\r\n\r\n\r\n    render() {\r\n        const { allFeatures } = this.state;\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div className=\"\">\r\n                        <div>\r\n                            <StickyContainer style={{ direction: \"ltr\" }}>\r\n                                <Sticky bottomOffset={80}>\r\n                                    {({ style }) => (\r\n                                        <MapBtnsComponent\r\n                                            style={style}\r\n                                            {...this.props}></MapBtnsComponent>\r\n                                    )}\r\n                                </Sticky>\r\n                            </StickyContainer>\r\n                            <div>\r\n                                <MapComponent\r\n                                    mapload={this.mapLoaded.bind(this)}\r\n                                    {...this.props}></MapComponent>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {Object.keys(allFeatures).map((layer) => {\r\n                    return allFeatures[layer].features?.length ? (\r\n                        <div>\r\n                            <div\r\n                                style={{\r\n                                    background: \"#57779d\",\r\n                                    textAlign: \"center\",\r\n                                    padding: \"5px\",\r\n                                }}>\r\n                                <label\r\n                                    style={{\r\n                                        color: \"white\",\r\n                                        width: '90%',\r\n                                        float:\r\n                                            allFeatures[layer].isSelectAll ||\r\n                                                allFeatures[layer].selectedFeatures?.length > 1\r\n                                                ? \"right\"\r\n                                                : \"none\",\r\n                                        marginRight: \"20px\",\r\n                                        fontSize: \"23px !important\",\r\n                                    }}>\r\n                                    {editAndDeleteMapLayers[layer].name}\r\n                                </label>\r\n                                {(allFeatures[layer].isSelectAll ||\r\n                                    allFeatures[layer].selectedFeatures?.length > 1) && (\r\n\r\n                                        <Button\r\n                                            className=\"toolsBtnStyle\"\r\n                                            size=\"large\"\r\n                                            onClick={this.zoomToSelectedFeature.bind(this, layer)}>\r\n                                            <FontAwesomeIcon icon={faSearchPlus} className=\"\" />\r\n                                        </Button>\r\n\r\n                                    )}\r\n                            </div>\r\n                            <table\r\n                                className=\"table table-bordered centeredTable\"\r\n                                style={{ width: \"100%\" }}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            <div>\r\n                                                <Checkbox\r\n                                                    style={{ marginTop: \"20px\" }}\r\n                                                    checked={allFeatures[layer].isSelectAll}\r\n                                                    onChange={this.onChangeSelectAll.bind(\r\n                                                        this,\r\n                                                        layer\r\n                                                    )}></Checkbox>\r\n                                            </div>\r\n                                        </th>\r\n                                        {editAndDeleteMapLayers[layer]?.outFields\r\n                                            ?.filter((x) => !x.notInclude)\r\n                                            ?.map((field) => {\r\n                                                return <th>{field.arName}</th>;\r\n                                            })}\r\n                                        <th>الإجراءات</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {allFeatures[layer].features.map((feature, index) => {\r\n                                        return (\r\n                                            <tr\r\n                                                style={{\r\n                                                    background: feature.isDelete\r\n                                                        ? \"#ff000045\"\r\n                                                        : feature.isUploaded\r\n                                                            ? \"#fff6588f\"\r\n                                                            : \"\",\r\n                                                }}>\r\n                                                <td style={{ textAlign: \"center\" }}>\r\n                                                    <Checkbox\r\n                                                        style={{ marginTop: \"20px\" }}\r\n                                                        checked={feature.isSelected}\r\n                                                        onChange={this.onChangeSelectFeature.bind(\r\n                                                            this,\r\n                                                            index,\r\n                                                            feature\r\n                                                        )}></Checkbox>\r\n                                                </td>\r\n                                                {editAndDeleteMapLayers[layer]?.outFields\r\n                                                    ?.filter((x) => !x.notInclude)\r\n                                                    ?.map((field) => {\r\n                                                        return (\r\n                                                            <td>\r\n                                                                {isNaN(feature.attributes[field.name]) ||\r\n                                                                    !feature.attributes[field.name]\r\n                                                                    ? feature.attributes[field.name] ||\r\n                                                                    \"غير متوفر\"\r\n                                                                    : this.formatNumber(\r\n                                                                        feature.attributes[field.name]\r\n                                                                    )}\r\n                                                            </td>\r\n                                                        );\r\n                                                    })}\r\n                                                <td>\r\n\r\n                                                    <Tooltip title=\"تقريب\">\r\n                                                        <Button\r\n                                                            className=\"toolsBtnStyle\"\r\n                                                            style={{ margin: \"auto 3px\" }}\r\n                                                            size=\"large\"\r\n                                                            onClick={this.zoomToFeature.bind(this, feature)}>\r\n                                                            <FontAwesomeIcon\r\n                                                                icon={faSearchPlus}\r\n                                                                className=\"\"\r\n                                                            />\r\n                                                        </Button>\r\n                                                    </Tooltip>\r\n\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    ) : (\r\n                        <></>\r\n                    );\r\n                })}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(withTranslation(\"labels\")(showMapEditComponent));\r\n","let mainMap = undefined;\r\nimport { setMap } from 'main_helpers/functions/filters/state'\r\nexport const mapStateToProps = state => {\r\n\r\n    return {\r\n        mainObject: state.wizard.mainObject,\r\n        UploadFileDetails: state.mainApp.uploadFileDetails,\r\n        editableFeatures: state.mainApp.editableFeatures,\r\n        originalFeatures: state.mainApp.originalFeatures,\r\n        selectMapLayer: state.mainApp.selectMapLayer,\r\n        selectedFeaturesOnMap: state.mainApp.selectedFeaturesOnMap\r\n    };\r\n}\r\n\r\n\r\nexport const mapDispatchToProps = dispatch => {\r\n    return {\r\n        setLoading: (data) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'loading',\r\n                data\r\n            })\r\n        },\r\n        setCurrentMap: (data) => {\r\n            mainMap = data;\r\n            setMap(data);\r\n        },\r\n        setMap: (e) => dispatch({ type: 'setMap', value: e }),\r\n        setEditableFeatures: (e) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'editableFeatures',\r\n                data: e\r\n            })\r\n        },\r\n        setSelectMapLayer: (e) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'selectMapLayer',\r\n                data: e\r\n            })\r\n        },\r\n        setOriginalFeatures: (e) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'originalFeatures',\r\n                data: e\r\n            })\r\n        },\r\n        setSelectedFeaturesOnMap: (e) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'selectedFeaturesOnMap',\r\n                data: e\r\n            })\r\n        }\r\n\r\n    };\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAMA;AACA;AACA;AACA;AAOA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAkJA;AAGA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAIA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAMA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AA7PA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;AACA;AAKA;AACA;AASA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AAEA;AAmHA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAOA;AAAA;AAOA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AAGA;AAMA;AACA;AAKA;AACA;AAEA;AACA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAIA;AAKA;AAWA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAQA;AAOA;AAIA;AACA;AACA;;;;;;;;;;;;ACxbA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}
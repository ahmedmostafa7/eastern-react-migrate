{"version":3,"file":"106.min.js","sources":["webpack:///./src/app/components/inputs/fields/list/hob.js"],"sourcesContent":["import { Table, Input, Button, Popconfirm, Form } from 'antd';\r\nimport React from 'react'\r\nconst EditableContext = React.createContext();\r\n\r\nconst EditableRow = ({ form, index, ...props }) => (\r\n    <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n    </EditableContext.Provider>\r\n);\r\n\r\n// const EditableFormRow = Form.create()(EditableRow);\r\n\r\nclass EditableCell extends React.Component {\r\n    state = {\r\n        editing: false,\r\n    };\r\n\r\n    toggleEdit = () => {\r\n        const editing = !this.state.editing;\r\n        this.setState({ editing }, () => {\r\n            if (editing) {\r\n                this.input.focus();\r\n            }\r\n        });\r\n    };\r\n\r\n    save = e => {\r\n        const { record, handleSave } = this.props;\r\n        this.form.validateFields((error, values) => {\r\n            if (error && error[e.currentTarget.id]) {\r\n                return;\r\n            }\r\n            this.toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        });\r\n    };\r\n\r\n    renderCell = form => {\r\n        this.form = form;\r\n        const { children, dataIndex, record, title } = this.props;\r\n        const { editing } = this.state;\r\n        return editing ? (\r\n            <Form.Item style={{ margin: 0 }}>\r\n                {form.getFieldDecorator(dataIndex, {\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: `${title} is required.`,\r\n                        },\r\n                    ],\r\n                    initialValue: record[dataIndex],\r\n                })(<Input ref={node => (this.input = node)} onPressEnter={this.save} onBlur={this.save} />)}\r\n            </Form.Item>\r\n        ) : (\r\n                <div\r\n                    className=\"editable-cell-value-wrap\"\r\n                    style={{ paddingRight: 24 }}\r\n                    onClick={this.toggleEdit}\r\n                >\r\n                    {children}\r\n                </div>\r\n            );\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            editable,\r\n            dataIndex,\r\n            title,\r\n            record,\r\n            index,\r\n            handleSave,\r\n            children,\r\n            ...restProps\r\n        } = this.props;\r\n        return (\r\n            <td {...restProps}>\r\n                {editable ? (\r\n                    <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\r\n                ) : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n    }\r\n}\r\n\r\nexport default class EditableTable extends React.Component {\r\n    constructor(props) {\r\n        const {data}=props\r\n        super(props);\r\n        this.columns = [\r\n            {\r\n                title: 'البلدية',\r\n                dataIndex: 'name',\r\n                // width: '30%',\r\n                // editable: true,\r\n            },\r\n            {\r\n                title: 'البلدية الفرعية',\r\n                dataIndex: 'age',\r\n            },\r\n            {\r\n                title: 'الحى',\r\n                dataIndex: 'address',\r\n            },\r\n            {\r\n                title: '#',\r\n                dataIndex: 'operation',\r\n                render: (text, record) =>\r\n                    this.state.dataSource.length >= 1 ? (\r\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\r\n                            <a>Delete</a>\r\n                        </Popconfirm>\r\n                    ) : null,\r\n            },\r\n        ];\r\n\r\n        this.state = {\r\n            dataSource: [] ,\r\n            count: 0,\r\n        };\r\n    }\r\n\r\n    handleDelete = key => {\r\n        const dataSource = [...this.state.dataSource];\r\n        this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\r\n    };\r\n\r\n    handleAdd = () => {\r\n        \r\n        const { count, dataSource } = this.state;\r\n        const { data } = this.props;\r\n      \r\n        this.setState({\r\n            \r\n            dataSource: [...dataSource, data],\r\n            count: count + 1,\r\n        });\r\n    };\r\n\r\n    handleSave = row => {\r\n        const newData = [...this.state.dataSource];\r\n        const index = newData.findIndex(item => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, {\r\n            ...item,\r\n            ...row,\r\n        });\r\n        this.setState({ dataSource: newData });\r\n    };\r\n\r\n    render() {\r\n        \r\n        const { dataSource } = this.state;\r\n        const { addResultTotable } = this.props;\r\n        const components = {\r\n            body: {\r\n                // row: EditableFormRow,\r\n                cell: EditableCell,\r\n            },\r\n        };\r\n        const columns = this.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            // return {\r\n            //     ...col,\r\n            //     onCell: record => ({\r\n            //         record,\r\n            //         editable: col.editable,\r\n            //         dataIndex: col.dataIndex,\r\n            //         title: col.title,\r\n            //         handleSave: this.handleSave,\r\n            //     }),\r\n            // };\r\n        });\r\n        return (\r\n            <div>\r\n                <Button onClick={addResultTotable} type=\"primary\" style={{ marginBottom: 16 }}>\r\n                    Add a row\r\n        </Button>\r\n                <Table\r\n                    components={components}\r\n                    rowClassName={() => 'editable-row'}\r\n                    bordered\r\n                    dataSource={dataSource}\r\n                    columns={columns}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAmCA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AA3DA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AACA;AA8BA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;;;;A","sourceRoot":""}
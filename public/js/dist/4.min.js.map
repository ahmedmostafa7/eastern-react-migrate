{"version":3,"file":"4.min.js","sources":["webpack:///./src/app/components/inputs/fields/button.js","webpack:///./src/app/components/inputs/mapping.js","webpack:///./src/app/helpers/actions/actions.js","webpack:///./src/app/helpers/actions/index.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { connect } from \"react-redux\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport ButtonActions from \"app/helpers/actions\";\r\nimport { get } from \"lodash\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"../mapping\"\r\n\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"button\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\n\r\nclass buttonComp extends Component {\r\n  state = { textKalb: \"\" };\r\n  componentDidMount() {\r\n    // const { values, changeText, t, text } = this.props;\r\n    // let textChange =\r\n    //   values.owner_type == \"1\"\r\n    //     ? \"اضافة مالك\"\r\n    //     : values.owner_type == \"2\"\r\n    //     ? \"اضافة قطاع\"\r\n    //     : \"اضافة قطاع تانى\";\r\n    // if (changeText) {\r\n    //   this.setState({ textKalb: textChange });\r\n    // } else {\r\n    //   this.setState({ textKalb: t(text) });\r\n    // }\r\n    \r\n  }\r\n  // componentDidMount() {}\r\n  render() {\r\n    const {\r\n      icon,\r\n      text,\r\n      disabled,\r\n      className,\r\n      htmlType = \"button\",\r\n      input,\r\n      action,\r\n      values,\r\n      changeText,\r\n      style,\r\n      t,\r\n      field\r\n    } = this.props;\r\n    let useIcon = icon ? icon : null;\r\n    return (\r\n      <button\r\n        className={`btn add-btnT ${className}`}\r\n        onClick={() => ButtonActions(action || field?.in_summery && field?.action, this.props, values)}\r\n        type={htmlType}\r\n        icon={useIcon}\r\n        disabled={disabled}\r\n        {...{ ...input, style }}\r\n      >\r\n        {t(text || field?.text)}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\n// export default connect(\r\n//   (state) => ({\r\n//     mainObject: get(state, \"wizard.mainObject\", {}),\r\n//   }),\r\n//   mapDispatchToProps\r\n// )(withTranslation(\"labels\")(buttonComp));\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(withTranslation(\"labels\")(buttonComp));\r\n","import { get } from \"lodash\";\r\nimport { formValueSelector } from \"redux-form\";\r\nimport { copyUser } from \"./fields/identify/Component/common/common_func\";\r\nexport const mapStateToProps = (\r\n  {\r\n    wizard: {\r\n      currentStep,\r\n      wizardSettings,\r\n      steps,\r\n      mainObject,\r\n      comments,\r\n      currentModule,\r\n    },\r\n    selectors = {},\r\n    mainApp,\r\n    user,\r\n    mapViewer,\r\n    ...state\r\n  },\r\n  { moduleName, path, value_key, ...props }\r\n) => {\r\n  return {\r\n    data: props.data || get(state, path),\r\n    lang: mainApp.language,\r\n    selectors,\r\n    apps: mainApp.apps,\r\n    info: get(mapViewer, \"info.info\", {}),\r\n    ...(selectors[moduleName] || {}),\r\n    value_key: get(selectors[moduleName], \"value_key\", value_key),\r\n    currentStep,\r\n    steps,\r\n    mainObject,\r\n    currentModule,\r\n    user: get(user, \"user\", {}),\r\n    comments,\r\n    wizardSettings,\r\n    //allNotes,\r\n    mainApp,\r\n    record: get(currentModule, \"record\") || [],\r\n  };\r\n};\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n  return {\r\n    getValues(name = \"stepForm\") {\r\n      return formValueSelector(\"name\");\r\n    },\r\n    setSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}`,\r\n        data,\r\n      });\r\n    },\r\n    setValueLabelKeys: (label_key, value_key) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.label_key`,\r\n        data: label_key,\r\n      });\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.value_key`,\r\n        data: value_key,\r\n      });\r\n    },\r\n    setData: (data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.data`,\r\n        data,\r\n      });\r\n    },\r\n    addToData: (data, index, operation) => {\r\n      dispatch({\r\n        type: \"insertInArraySelectors\",\r\n        path: `${moduleName}.data`,\r\n        operation,\r\n        index,\r\n        data,\r\n      });\r\n    },\r\n    setNextUrl: (nextUrl) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.links.nextLink`,\r\n        data: nextUrl,\r\n      });\r\n    },\r\n    addNewSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: moduleName,\r\n        data,\r\n      });\r\n    },\r\n    removeSelector: (moduleName) => {\r\n      dispatch({\r\n        type: \"removeSelectors\",\r\n        path: moduleName,\r\n      });\r\n    },\r\n    setCurrentModule: (data) => {\r\n      dispatch({\r\n        type: \"setWizard\",\r\n        path: \"currentModule\",\r\n        data,\r\n      });\r\n    },\r\n    removeMainObject: () => {\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"mainObject\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"currentStep\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"comments\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"allNotes\",\r\n      });\r\n    },\r\n    setMainObject: (data, step, user) => {\r\n      dispatch({\r\n        type: \"setWizard\",\r\n        path: `mainObject.${step}`,\r\n        data,\r\n      });\r\n\r\n      if (user) {\r\n        // user = { ...user, currentDate: moment().format(\"iYYYY/iM/iD\") };\r\n\r\n        dispatch({\r\n          type: \"setWizard\",\r\n          path: `mainObject.${step}.user`,\r\n          data: copyUser({ user }),\r\n        });\r\n      }\r\n    },\r\n  };\r\n};\r\n","export const custom = (params, props, ...args)=>{\r\n    return params.action(props, ...args)\r\n}","import store from \"app/reducers\";\r\nimport { get } from \"lodash\";\r\nimport * as actions from \"./actions\";\r\nexport default (\r\n  params,\r\n  props,\r\n  data = {},\r\n  state = store.getState(),\r\n  ...args\r\n) => {\r\n  const action = get(actions, params.type, () => {});\r\n  return action(\r\n    params,\r\n    props,\r\n    (props.currentStep && data[props.currentStep]) || data,\r\n    state,\r\n    ...args\r\n  );\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACrjJA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AAOA;AACA;AAOA;;;;A","sourceRoot":""}
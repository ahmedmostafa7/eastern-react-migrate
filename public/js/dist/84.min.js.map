{"version":3,"file":"84.min.js","sources":["webpack:///./src/app/components/inputs/fields/radio.js","webpack:///./src/app/components/inputs/mapping.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport mainInput from \"app/helpers/main/input\";\r\nimport { Radio } from \"antd\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { Input } from \"antd\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"../mapping\";\r\nimport { connect } from \"react-redux\";\r\nimport { get, isEqual, omit, map, isFunction } from \"lodash\";\r\n\r\nconst RadioGroup = Radio.Group;\r\nexport class radioComp extends mainInput {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { init } = this.props;\r\n\r\n    if (init) init(this);\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return (\r\n      !isEqual(nextProps.options, this.props.options) ||\r\n      !isEqual(nextProps.input.value, this.props.input.value) ||\r\n      !isEqual(nextProps.lang, this.props.lang) ||\r\n      (!isFunction(this.props.forceUpdate) &&\r\n        !isEqual(nextProps.forceUpdate, this.props.forceUpdate))\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props);\r\n    const {\r\n      input: { ...input },\r\n      type,\r\n      options = [],\r\n      className,\r\n      placeholder,\r\n      labelText,\r\n      t,\r\n      value,\r\n      defaultValue,\r\n      anotherField,\r\n      inputText,\r\n      typeText,\r\n      disabled,\r\n      onClick,\r\n    } = this.props;\r\n\r\n    let selectedOptions = map(options, (option, index) => ({\r\n      ...option,\r\n      disabled: isFunction(option.disabled)\r\n        ? option.disabled(input.value, this.props)\r\n        : option.disabled,\r\n      label: t(option.label),\r\n    }));\r\n\r\n    return (\r\n      <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\" }}>\r\n        {(onClick && (\r\n          <RadioGroup\r\n            disabled={\r\n              isFunction(disabled)\r\n                ? disabled(input.value, this.props)\r\n                : disabled\r\n            }\r\n            {...{ defaultValue }}\r\n            {...{ className }}\r\n            {...input}\r\n            onChange={(event) => {\r\n              if (onClick) {\r\n                onClick(event, this.props);\r\n              }\r\n            }}\r\n            options={selectedOptions}\r\n            type={type}\r\n          />\r\n        )) || (\r\n          <RadioGroup\r\n            disabled={\r\n              isFunction(disabled)\r\n                ? disabled(input.value, this.props)\r\n                : disabled\r\n            }\r\n            {...{ defaultValue }}\r\n            {...{ className }}\r\n            {...input}\r\n            options={selectedOptions}\r\n            type={type}\r\n          />\r\n        )}\r\n        {/* {anotherField && (\r\n          <div\r\n            style={{\r\n              display: \"grid\",\r\n              gridTemplateColumns: \"auto 1fr\",\r\n              gridGap: \"10px\",\r\n            }}\r\n          >\r\n            <label>{labelText}</label>\r\n            <Input\r\n              // value={value}\r\n              {...inputText}\r\n              type=\"text\"\r\n              placeholder={t(placeholder ? placeholder : labelText)}\r\n              // label={labelText}\r\n            />\r\n          </div>\r\n        )} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation(\"labels\")(radioComp));\r\n","import { get } from \"lodash\";\r\nimport { formValueSelector } from \"redux-form\";\r\nimport { copyUser } from \"./fields/identify/Component/common/common_func\";\r\nexport const mapStateToProps = (\r\n  {\r\n    wizard: {\r\n      currentStep,\r\n      wizardSettings,\r\n      steps,\r\n      mainObject,\r\n      comments,\r\n      currentModule,\r\n    },\r\n    selectors = {},\r\n    mainApp,\r\n    user,\r\n    mapViewer,\r\n    ...state\r\n  },\r\n  { moduleName, path, value_key, ...props }\r\n) => {\r\n  return {\r\n    data: props.data || get(state, path),\r\n    lang: mainApp.language,\r\n    selectors,\r\n    apps: mainApp.apps,\r\n    info: get(mapViewer, \"info.info\", {}),\r\n    ...(selectors[moduleName] || {}),\r\n    value_key: get(selectors[moduleName], \"value_key\", value_key),\r\n    currentStep,\r\n    steps,\r\n    mainObject,\r\n    currentModule,\r\n    user: get(user, \"user\", {}),\r\n    comments,\r\n    wizardSettings,\r\n    //allNotes,\r\n    mainApp,\r\n    record: get(currentModule, \"record\") || [],\r\n  };\r\n};\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n  return {\r\n    getValues(name = \"stepForm\") {\r\n      return formValueSelector(\"name\");\r\n    },\r\n    setSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}`,\r\n        data,\r\n      });\r\n    },\r\n    setValueLabelKeys: (label_key, value_key) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.label_key`,\r\n        data: label_key,\r\n      });\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.value_key`,\r\n        data: value_key,\r\n      });\r\n    },\r\n    setData: (data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.data`,\r\n        data,\r\n      });\r\n    },\r\n    addToData: (data, index, operation) => {\r\n      dispatch({\r\n        type: \"insertInArraySelectors\",\r\n        path: `${moduleName}.data`,\r\n        operation,\r\n        index,\r\n        data,\r\n      });\r\n    },\r\n    setNextUrl: (nextUrl) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.links.nextLink`,\r\n        data: nextUrl,\r\n      });\r\n    },\r\n    addNewSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: moduleName,\r\n        data,\r\n      });\r\n    },\r\n    removeSelector: (moduleName) => {\r\n      dispatch({\r\n        type: \"removeSelectors\",\r\n        path: moduleName,\r\n      });\r\n    },\r\n    setCurrentModule: (data) => {\r\n      dispatch({\r\n        type: \"setWizard\",\r\n        path: \"currentModule\",\r\n        data,\r\n      });\r\n    },\r\n    removeMainObject: () => {\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"mainObject\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"currentStep\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"comments\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"allNotes\",\r\n      });\r\n    },\r\n    setMainObject: (data, step, user) => {\r\n      dispatch({\r\n        type: \"setWizard\",\r\n        path: `mainObject.${step}`,\r\n        data,\r\n      });\r\n\r\n      if (user) {\r\n        // user = { ...user, currentDate: moment().format(\"iYYYY/iM/iD\") };\r\n\r\n        dispatch({\r\n          type: \"setWizard\",\r\n          path: `mainObject.${step}.user`,\r\n          data: copyUser({ user }),\r\n        });\r\n      }\r\n    },\r\n  };\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAKA;AACA;AAAA;AAEA;AACA;AAAA;AAuBA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AClsourceRoot":""}
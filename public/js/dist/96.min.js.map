{"version":3,"file":"96.min.js","sources":["webpack:///./src/imports/popups/form/actions/index.js","webpack:///./src/imports/popups/form/create.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport {withTranslation} from \"react-i18next\";\r\nclass Actions extends Component {\r\n  render() {\r\n    const { onCancel, t } = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"80px 80px\",\r\n          gridGap: \"10px\",\r\n          justifyContent: \"flex-end\"\r\n        }}\r\n      >\r\n        <button className=\"btn btn-success\" type=\"submit\">\r\n          {t(\"Save\")}\r\n        </button>\r\n        <button className=\"btn btn-warning\" onClick={onCancel} type=\"button\">\r\n          {t(\"Cancel\")}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation(\"actions\")(Actions);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport mapDispatchToProps from \"main_helpers/actions/main\";\r\nimport { Form } from \"antd\";\r\nimport { FormControl } from \"app/components/inputs\";\r\nimport { map, filter, pick } from \"lodash\";\r\nimport Actions from \"./actions\";\r\nimport { serverFieldMapper, apply_field_permission } from \"app/helpers/functions\";\r\nimport memoize from \"memoize-one\";\r\nimport { getFormValues } from \"redux-form\";\r\nimport { createReduxForm } from \"app/helpers/functions\";\r\n\r\nexport class create extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.fields = filter(\r\n      map(props.fields, (value, key) => ({\r\n        name: key,\r\n        ...serverFieldMapper(value),\r\n      })),\r\n      props.filter\r\n    );\r\n  }\r\n  filteringFields = memoize((values) => {\r\n    return this.fields.filter((field) =>\r\n      apply_field_permission(values, field, this.props)\r\n    );\r\n  });\r\n  submit = (values) => {\r\n    const { ok, onCancel } = this.props;\r\n    ok(values, this.props).then((data) => {\r\n      onCancel();\r\n    });\r\n  };\r\n  render() {\r\n    //\r\n    const { handleSubmit, initialValues } = this.props;\r\n    // console.log(this.prosp)\r\n\r\n    return (\r\n      <Form onSubmit={handleSubmit(this.submit)}>\r\n        {map(this.filteringFields(this.props.values), (d) => (\r\n          <FormControl\r\n            {...d}\r\n            {...pick(this.props, [\"values\", \"change\", \"touch\", \"untouch\"])}\r\n          />\r\n        ))}\r\n        <Actions {...this.props} />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\nexport default createReduxForm(\r\n  connect(\r\n    (state) => ({\r\n      values: getFormValues(\"Create\")(state),\r\n    }),\r\n    mapDispatchToProps\r\n  )(create),\r\n  { form: \"Create\" },\r\n  \"fields\",\r\n  \"currentModule\"\r\n);\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAKA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAUA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAlBA;AAEA;AACA;AACA;AAGA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAUA;AACA;AACA;AAGA;AACA;AAGA;AAAA;;;;A","sourceRoot":""}
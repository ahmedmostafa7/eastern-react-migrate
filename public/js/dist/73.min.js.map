{"version":3,"file":"73.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/editFeaturesTable/index.js","webpack:///./src/app/components/inputs/fields/identify/Component/editFeaturesTable/maping.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Input,\r\n  Select,\r\n  Checkbox,\r\n  Pagination,\r\n  message,\r\n} from \"antd\";\r\nimport RenderField from \"app/components/inputs\";\r\nimport { serverFieldMapper } from \"app/helpers/functions\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"./maping\";\r\nimport { connect } from \"react-redux\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport {\r\n  addParcelNo,\r\n  clearGraphicFromLayer,\r\n  convertToArabic,\r\n  DrawFeatures,\r\n  formatKmlAttributes,\r\n  getFeatureDomainName,\r\n  getFieldDomain,\r\n  getInfo,\r\n  GetSpatialId,\r\n  highlightFeature,\r\n  project,\r\n  queryTask,\r\n  zoomToFeature,\r\n} from \"../common/common_func\";\r\nimport {\r\n  addedParcelMapServiceUrl,\r\n  addFeaturesMapLayers,\r\n} from \"../mapviewer/config\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport store from \"reducers\";\r\nimport {\r\n  faSearchPlus,\r\n  faEdit,\r\n  faStar,\r\n  faTrash,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n  getMap,\r\n  getIsMapLoaded,\r\n  setIsMapLoaded,\r\n} from \"main_helpers/functions/filters/state\";\r\nimport { Modal } from \"antd\";\r\nimport { groupBy } from \"lodash\";\r\n\r\nconst pageSize = 10;\r\n\r\nclass editFeaturesTableComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props = props;\r\n    this.isLoaded = true;\r\n    this.state = {\r\n      features: props.mainObject?.mapEditFeatures?.editableFeatures || null,\r\n      editFields: [],\r\n      editFeature: {},\r\n      current: 1,\r\n      totalPage: 0,\r\n      minIndex: 0,\r\n      uploadFileDetails:\r\n        props.UploadFileDetails ||\r\n        props.mainObject.locationData.uploadFileDetails,\r\n      maxIndex: pageSize,\r\n      selectedFeatures: [],\r\n      isEditMultiple: false,\r\n    };\r\n  }\r\n\r\n  formatNumber(num) {\r\n    return (+num).toFixed(2).replace(/[.,]00$/, \"\");\r\n  }\r\n\r\n  zoomToFeature(feature) {\r\n    var opacity = 1;\r\n    if (feature?.geometry?.type == \"polygon\") {\r\n      opacity = 0.5;\r\n    }\r\n\r\n    highlightFeature(feature, this.map, {\r\n      layerName: \"highlightGraphicLayer\",\r\n      isZoom: true,\r\n      zoomFactor: 20,\r\n      isHiglightSymbol: true,\r\n      highlighColor: [0, 255, 255, opacity],\r\n    });\r\n  }\r\n\r\n  removeFeature(index) {\r\n    this.state.features.splice(index, 1);\r\n\r\n    this.drawEditableFeatures(this.state.features);\r\n\r\n    this.props.setEditableFeatures([...this.state.features]);\r\n\r\n    this.setState({ features: [...this.state.features] });\r\n  }\r\n\r\n  drawEditableFeatures(features) {\r\n    let layerInfo =\r\n      addFeaturesMapLayers[this.state.uploadFileDetails.layerName];\r\n    let annotationField = layerInfo.outFields.find((x) => x.isMainAnnotaion);\r\n    clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"ZoomGraphicLayer\");\r\n\r\n    features.forEach((f) => {\r\n      let pt;\r\n\r\n      if (f.geometry.type == \"point\") {\r\n        pt = f.geometry;\r\n      } else {\r\n        if (f.geometry.getExtent) {\r\n          pt = f.geometry.getExtent().getCenter();\r\n        } else {\r\n          if (f.geometry.type == \"polygon\") {\r\n            f.geometry = new esri.geometry.Polygon(\r\n              JSON.parse(JSON.stringify(f.geometry))\r\n            );\r\n          } else {\r\n            f.geometry = new esri.geometry.Polyline(\r\n              JSON.parse(JSON.stringify(f.geometry))\r\n            );\r\n          }\r\n          pt = f.geometry.getExtent().getCenter();\r\n        }\r\n      }\r\n      addParcelNo(\r\n        pt,\r\n        this.map,\r\n        convertToArabic(f.attributes[annotationField.name]),\r\n        \"ParcelPlanNoGraphicLayer\",\r\n        40,\r\n        [0, 0, 0]\r\n      );\r\n\r\n      var symbol;\r\n\r\n      if (f.geometry.type === \"point\") {\r\n        symbol = new esri.symbol.SimpleMarkerSymbol(\r\n          esri.symbol.SimpleMarkerSymbol.STYLE_CIRCLE,\r\n          28,\r\n          new esri.symbol.SimpleLineSymbol(\r\n            esri.symbol.SimpleLineSymbol.STYLE_SOLID,\r\n            new esri.Color([0, 0, 0]),\r\n            2\r\n          ),\r\n          new esri.Color([0, 0, 0, 0.2])\r\n        );\r\n      } else if (f.geometry.type === \"polyline\") {\r\n        symbol = new esri.symbol.SimpleLineSymbol(\r\n          esri.symbol.SimpleLineSymbol.STYLE_SOLID,\r\n          new esri.Color([0, 0, 0]),\r\n          7\r\n        );\r\n      } else {\r\n        symbol = new esri.symbol.SimpleFillSymbol(\r\n          esri.symbol.SimpleFillSymbol.STYLE_NULL,\r\n          new esri.symbol.SimpleLineSymbol(\r\n            esri.symbol.SimpleFillSymbol.STYLE_SOLID,\r\n            new esri.Color([0, 0, 0]),\r\n            3\r\n          ),\r\n          new esri.Color([0, 0, 0])\r\n        );\r\n      }\r\n\r\n      var graphic = new esri.Graphic(f.geometry, symbol, null);\r\n\r\n      this.map.getLayer(\"ZoomGraphicLayer\").add(graphic);\r\n    });\r\n\r\n    zoomToFeature(this.map.getLayer(\"ZoomGraphicLayer\").graphics, this.map, 2);\r\n  }\r\n\r\n  reProjectAndMapSpatailRelation(features) {\r\n    store.dispatch({ type: \"Show_Loading_new\", loading: true });\r\n    project(\r\n      [...features.map((x) => x.geometry)],\r\n      this.map.spatialReference.wkid,\r\n      (res) => {\r\n        features.forEach((f, index) => {\r\n          f.geometry = res[index];\r\n        });\r\n\r\n        this.getSpatialRelationsWithLayers(\r\n          features,\r\n          this.layerInfo.spatialRelationLayers\r\n        ).then((spatialFeatures) => {\r\n          getFeatureDomainName(\r\n            spatialFeatures,\r\n            this.LayerID[this.state.uploadFileDetails.layerName],\r\n            null,\r\n            addedParcelMapServiceUrl\r\n          ).then((r) => {\r\n            store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n\r\n            let spatialReferenceField = addFeaturesMapLayers[\r\n              this.state.uploadFileDetails.layerName\r\n            ].outFields.find((x) => x.isSpatialId);\r\n            if (spatialReferenceField) {\r\n              r.forEach((feature) => {\r\n                feature.attributes[spatialReferenceField.name] =\r\n                  GetSpatialId(feature);\r\n              });\r\n            }\r\n\r\n            this.drawEditableFeatures([...r]);\r\n            this.props.setEditableFeatures([...r]);\r\n            this.setState({\r\n              features: [...r],\r\n              totalPage: r.length / pageSize,\r\n              minIndex: 0,\r\n              maxIndex: pageSize,\r\n            });\r\n          });\r\n        });\r\n      },\r\n      true\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.isLoaded) {\r\n      this.map = getMap();\r\n      if (getIsMapLoaded()) {\r\n        this.isLoaded = false;\r\n        getInfo(addedParcelMapServiceUrl).then((res) => {\r\n          getFieldDomain(\r\n            \"\",\r\n            res[this.state.uploadFileDetails.layerName],\r\n            addedParcelMapServiceUrl\r\n          ).then((fields) => {\r\n            this.LayerFields = fields;\r\n            this.LayerID = res;\r\n            this.layerInfo =\r\n              addFeaturesMapLayers[this.state.uploadFileDetails.layerName];\r\n\r\n            try {\r\n              if (this.props.editableFeatures?.length) {\r\n                this.props.editableFeatures.map((f) => (f.isSelected = false));\r\n\r\n                this.drawEditableFeatures(this.props.editableFeatures);\r\n                this.setState({\r\n                  features: [...this.props.editableFeatures],\r\n                  totalPage: this.props.editableFeatures.length / pageSize,\r\n                  minIndex: 0,\r\n                  maxIndex: pageSize,\r\n                });\r\n              } else {\r\n                if (this.state.uploadFileDetails.fileType == \"cad\") {\r\n\r\n                  //store.dispatch({ type: 'Show_Loading_new', loading: true })\r\n                  if (\r\n                    this.state.uploadFileDetails.activeLayerDetails.type ==\r\n                    \"polygon\"\r\n                  ) {\r\n                    DrawFeatures(this.map, this.state.uploadFileDetails).then(\r\n                      (features) => {\r\n\r\n                        this.getSpatialRelationsWithLayers(\r\n                          features,\r\n                          this.layerInfo.spatialRelationLayers\r\n                        ).then((spatialFeatures) => {\r\n                          getFeatureDomainName(\r\n                            spatialFeatures,\r\n                            res[this.state.uploadFileDetails.layerName],\r\n                            null,\r\n                            addedParcelMapServiceUrl\r\n                          ).then((r) => {\r\n                            //store.dispatch({ type: 'Show_Loading_new', loading: false })\r\n                            let spatialReferenceField = addFeaturesMapLayers[\r\n                              this.state.uploadFileDetails.layerName\r\n                            ].outFields.find((x) => x.isSpatialId);\r\n                            if (spatialReferenceField) {\r\n                              r.forEach((feature) => {\r\n                                feature.attributes[spatialReferenceField.name] =\r\n                                  GetSpatialId(feature);\r\n                              });\r\n                            }\r\n\r\n                            this.setState({\r\n                              features: r,\r\n                              totalPage: r.length / pageSize,\r\n                              minIndex: 0,\r\n                              maxIndex: pageSize,\r\n                            });\r\n                            this.props.setEditableFeatures([...r]);\r\n                          });\r\n                        });\r\n                      }\r\n                    );\r\n                  } else if (\r\n                    this.state.uploadFileDetails.activeLayerDetails.type ==\r\n                    \"line\"\r\n                  ) {\r\n                    let features = [];\r\n                    let featuresMapping =\r\n                      this.state.uploadFileDetails.fileData.lineFeatures.map(\r\n                        (object) => ({ ...object })\r\n                      );\r\n                    let spatialReference = new esri.SpatialReference(\r\n                      featuresMapping[0].spatialReference.wkid\r\n                    );\r\n\r\n                    featuresMapping.forEach((f) => {\r\n                      features.push({\r\n                        geometry: esri.geometry.Polyline(\r\n                          f.paths,\r\n                          spatialReference\r\n                        ),\r\n                        attributes: {},\r\n                      });\r\n                      features[features.length - 1].geometry.spatialReference =\r\n                        spatialReference;\r\n                    });\r\n\r\n                    this.reProjectAndMapSpatailRelation(features);\r\n                  } else if (\r\n                    this.state.uploadFileDetails.activeLayerDetails.type ==\r\n                    \"point\"\r\n                  ) {\r\n                    let features = [];\r\n                    let featuresMapping =\r\n                      this.state.uploadFileDetails.fileData.pointFeatures.map(\r\n                        (object) => ({ ...object })\r\n                      );\r\n                    let spatialReference = new esri.SpatialReference(\r\n                      featuresMapping[0].spatialReference.wkid\r\n                    );\r\n\r\n                    featuresMapping.forEach((f) => {\r\n                      features.push({\r\n                        geometry: esri.geometry.Point(\r\n                          f.x,\r\n                          f.y,\r\n                          spatialReference\r\n                        ),\r\n                        attributes: {},\r\n                      });\r\n                      features[features.length - 1].geometry.spatialReference =\r\n                        spatialReference;\r\n                    });\r\n\r\n                    this.reProjectAndMapSpatailRelation(features);\r\n                  }\r\n                } else if (this.state.uploadFileDetails.fileType == \"shape\") {\r\n                  let features =\r\n                    this.state.uploadFileDetails.fileData.features.map(\r\n                      (object) => ({ ...object })\r\n                    );\r\n                  let spatialReference = new esri.SpatialReference(\r\n                    this.state.uploadFileDetails.fileData.spatialReference.wkid\r\n                  );\r\n                  features.forEach((f) => {\r\n                    f.attributes = this.mapFieldsAndGetDomainCodes(\r\n                      f.attributes,\r\n                      \"code\"\r\n                    );\r\n\r\n                    if (\r\n                      this.state.uploadFileDetails.fileData.geometryType ==\r\n                      \"esriGeometryPolygon\"\r\n                    ) {\r\n                      f.geometry = esri.geometry.Polygon(\r\n                        f.geometry,\r\n                        this.state.uploadFileDetails.fileData.spatialReference\r\n                      );\r\n                    } else if (\r\n                      this.state.uploadFileDetails.fileData.geometryType ==\r\n                      \"esriGeometryPolyline\"\r\n                    ) {\r\n                      f.geometry = esri.geometry.Polyline(\r\n                        f.geometry,\r\n                        this.state.uploadFileDetails.fileData.spatialReference\r\n                      );\r\n                    } else {\r\n                      f.geometry = esri.geometry.Point(\r\n                        f.geometry,\r\n                        this.state.uploadFileDetails.fileData.spatialReference\r\n                      );\r\n                    }\r\n\r\n                    f.geometry.spatialReference = spatialReference;\r\n                  });\r\n\r\n                  this.reProjectAndMapSpatailRelation(features);\r\n                } else if (this.state.uploadFileDetails.fileType == \"kml\") {\r\n                  let features =\r\n                    this.state.uploadFileDetails.fileData.features.map(\r\n                      (object) => ({ ...object })\r\n                    );\r\n                  features.forEach((f) => {\r\n                    if (f.attributes.PopupInfo) {\r\n                      f.attributes = formatKmlAttributes(f);\r\n                      f.attributes = this.mapFieldsAndGetDomainCodes(\r\n                        f.attributes,\r\n                        \"name\"\r\n                      );\r\n                    }\r\n\r\n                    if (\r\n                      this.state.uploadFileDetails.fileData.geometryType ==\r\n                      \"esriGeometryPolygon\"\r\n                    ) {\r\n                      f.geometry = esri.geometry.Polygon(\r\n                        f.geometry,\r\n                        this.state.uploadFileDetails.fileData.spatialReference\r\n                      );\r\n                    } else if (\r\n                      this.state.uploadFileDetails.fileData.geometryType ==\r\n                      \"esriGeometryPolyline\"\r\n                    ) {\r\n                      f.geometry = esri.geometry.Polyline(\r\n                        f.geometry,\r\n                        this.state.uploadFileDetails.fileData.spatialReference\r\n                      );\r\n                    } else {\r\n                      f.geometry = esri.geometry.Point(\r\n                        f.geometry,\r\n                        this.state.uploadFileDetails.fileData.spatialReference\r\n                      );\r\n                    }\r\n                  });\r\n\r\n                  this.reProjectAndMapSpatailRelation(features);\r\n                } else if (this.state.uploadFileDetails.fileType == \"excel\") {\r\n                  let notFormatedFeatures =\r\n                    this.state.uploadFileDetails.fileData.features.map(\r\n                      (object) => ({ ...object })\r\n                    );\r\n\r\n                  //group by serial\r\n                  let layerOutFields =\r\n                    this.state.uploadFileDetails.activeLayerDetails.outFields;\r\n\r\n                  let xMapFieldName = layerOutFields.find(\r\n                    (x) => x.name == \"x\"\r\n                  )?.mappingField;\r\n                  let yMapFieldName = layerOutFields.find(\r\n                    (x) => x.name == \"y\"\r\n                  )?.mappingField;\r\n                  let serialMapFieldName = layerOutFields.find(\r\n                    (x) => x.name == \"serial\"\r\n                  )?.mappingField;\r\n\r\n                  notFormatedFeatures = groupBy(\r\n                    notFormatedFeatures,\r\n                    (v) => v.attributes[serialMapFieldName]\r\n                  );\r\n\r\n                  let features = [];\r\n\r\n                  if (\r\n                    this.state.uploadFileDetails.activeLayerDetails.type ==\r\n                    \"polygon\"\r\n                  ) {\r\n                    Object.keys(notFormatedFeatures).forEach((serial) => {\r\n                      let rings = [\r\n                        notFormatedFeatures[serial].map((f) => {\r\n                          return [\r\n                            f.attributes[xMapFieldName],\r\n                            f.attributes[yMapFieldName],\r\n                          ];\r\n                        }),\r\n                      ];\r\n\r\n                      //check if start point = end point x , y\r\n                      if (\r\n                        !(\r\n                          rings[0][0][0] == rings[0][rings[0].length - 1][0] &&\r\n                          rings[0][0][1] == rings[0][rings[0].length - 1][1]\r\n                        )\r\n                      ) {\r\n                        rings[0].push(rings[0][0]);\r\n                      }\r\n\r\n                      features.push({\r\n                        attributes: notFormatedFeatures[serial][0].attributes,\r\n                        geometry: { rings: rings },\r\n                      });\r\n                    });\r\n                  } else if (\r\n                    this.state.uploadFileDetails.activeLayerDetails.type ==\r\n                    \"line\"\r\n                  ) {\r\n                    Object.keys(notFormatedFeatures).forEach((serial) => {\r\n                      let paths = [\r\n                        notFormatedFeatures[serial].map((f) => {\r\n                          return [\r\n                            f.attributes[xMapFieldName],\r\n                            f.attributes[yMapFieldName],\r\n                          ];\r\n                        }),\r\n                      ];\r\n\r\n                      features.push({\r\n                        attributes: notFormatedFeatures[serial][0].attributes,\r\n                        geometry: { paths: paths },\r\n                      });\r\n                    });\r\n                  } else if (\r\n                    this.state.uploadFileDetails.activeLayerDetails.type ==\r\n                    \"point\"\r\n                  ) {\r\n                    Object.keys(notFormatedFeatures).forEach((serial) => {\r\n                      let points = notFormatedFeatures[serial].map((f) => {\r\n                        return [\r\n                          f.attributes[xMapFieldName],\r\n                          f.attributes[yMapFieldName],\r\n                        ];\r\n                      });\r\n\r\n                      features.push({\r\n                        attributes: notFormatedFeatures[serial][0].attributes,\r\n                        geometry: { x: points[0][0], y: points[0][1] },\r\n                      });\r\n                    });\r\n                  }\r\n\r\n                  let spatialReference = new esri.SpatialReference(\r\n                    this.map.spatialReference.wkid\r\n                  );\r\n\r\n                  features.forEach((f) => {\r\n                    if (\r\n                      this.state.uploadFileDetails.activeLayerDetails.type ==\r\n                      \"polygon\"\r\n                    ) {\r\n                      f.geometry = esri.geometry.Polygon(\r\n                        f.geometry,\r\n                        this.state.uploadFileDetails.fileData.spatialReference\r\n                      );\r\n                    } else if (\r\n                      this.state.uploadFileDetails.activeLayerDetails.type ==\r\n                      \"line\"\r\n                    ) {\r\n                      f.geometry = esri.geometry.Polyline(\r\n                        f.geometry,\r\n                        this.state.uploadFileDetails.fileData.spatialReference\r\n                      );\r\n                    } else if (\r\n                      this.state.uploadFileDetails.activeLayerDetails.type ==\r\n                      \"point\"\r\n                    ) {\r\n                      f.geometry = esri.geometry.Point(\r\n                        f.geometry,\r\n                        this.state.uploadFileDetails.fileData.spatialReference\r\n                      );\r\n                    }\r\n\r\n                    f.geometry.spatialReference = spatialReference;\r\n                    f.attributes = this.mapFieldsAndGetDomainCodes(\r\n                      f.attributes,\r\n                      \"name\"\r\n                    );\r\n                  });\r\n\r\n                  this.reProjectAndMapSpatailRelation(features);\r\n                } else if (this.state.uploadFileDetails.fileType == \"google\") {\r\n                  let features = [];\r\n                  let points = this.state.uploadFileDetails.googlePoints.map(\r\n                    (f) => {\r\n                      return [+f.long, +f.lat];\r\n                    }\r\n                  );\r\n\r\n                  let spatialReference = new esri.SpatialReference(4326);\r\n\r\n                  points.forEach((f) => {\r\n                    f.geometry = esri.geometry.Point(\r\n                      f[0],\r\n                      f[1],\r\n                      spatialReference\r\n                    );\r\n                    f.geometry.spatialReference = spatialReference;\r\n\r\n                    features.push({ attributes: {}, geometry: f.geometry });\r\n                  });\r\n\r\n                  this.reProjectAndMapSpatailRelation(features);\r\n                }\r\n              }\r\n            } catch (error) {\r\n              window.notifySystem(\"error\", \"حدث خطأ أثناء إضافة البيانات\");\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  mapFieldsAndGetDomainCodes = (attributes, searchBy) => {\r\n    let tempAttributes = {};\r\n\r\n    this.state.uploadFileDetails.activeLayerDetails.outFields.forEach(\r\n      (outField) => {\r\n        if (outField.mappingField) {\r\n          let domainField = this.LayerFields.find(\r\n            (x) => x.name == outField.name\r\n          );\r\n          if (domainField?.domain) {\r\n            let domainValues = domainField.domain.codedValues.filter(\r\n              (x) => x[searchBy] == attributes[outField.mappingField]\r\n            );\r\n            if (domainValues.length == 1) {\r\n              if (searchBy == \"code\") {\r\n                tempAttributes[outField.name + \"_Code\"] = domainValues[0].code;\r\n                tempAttributes[outField.name] = domainValues[0].name;\r\n              } else {\r\n                tempAttributes[outField.name + \"_Code\"] = domainValues[0].code;\r\n                tempAttributes[outField.name] =\r\n                  attributes[outField.mappingField] != \"<Null>\"\r\n                    ? attributes[outField.mappingField]\r\n                    : null;\r\n              }\r\n            }\r\n          } else {\r\n            tempAttributes[outField.name] =\r\n              attributes[outField.mappingField] != \"<Null>\"\r\n                ? attributes[outField.mappingField]\r\n                : null;\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    return tempAttributes;\r\n  };\r\n\r\n  getSpatialRelationsWithLayers = (features, spatialRelationLayers) => {\r\n    return new Promise((resolve, reject) => {\r\n      store.dispatch({ type: \"Show_Loading_new\", loading: true });\r\n      let intersectGraphic = window.geometryEngine.union(\r\n        features.map((f) => {\r\n          return f.geometry;\r\n        })\r\n      );\r\n      let promiseList = [];\r\n      spatialRelationLayers.forEach((item) => {\r\n        let layerId = this.LayerID[item.layerName];\r\n        promiseList.push(\r\n          queryTask({\r\n            url: addedParcelMapServiceUrl + \"/\" + layerId,\r\n            geometry: intersectGraphic,\r\n            queryWithGemoerty: true,\r\n            returnGeometry: true,\r\n            bufferDistance: 1,\r\n            outFields: item.bindFields.map((i) => i.dependLayerField),\r\n            returnExecuteObject: true,\r\n          })\r\n        );\r\n      });\r\n\r\n      let promises = window.promiseAll(promiseList);\r\n      promises.then((result) => {\r\n\r\n        let checkSelfIntersectIndex = spatialRelationLayers.findIndex((x) => x.checkSelfIntersect);\r\n        if (checkSelfIntersectIndex > -1 )  {\r\n\r\n          if (result[checkSelfIntersectIndex].features.length) {\r\n            message.error(\"لا يمكن رفع \" +\r\n              addFeaturesMapLayers[this.state.uploadFileDetails.layerName].label\r\n              + \" فوق \" +\r\n              addFeaturesMapLayers[this.state.uploadFileDetails.layerName].label\r\n              + \" موجودة بالفعل\");\r\n            resolve([]);\r\n          }\r\n\r\n        }\r\n\r\n        for (let feature of features) {\r\n          spatialRelationLayers.forEach((item, index) => {\r\n            let intersectedGeometry = result[index].features.find((x) => {\r\n              return window.geometryEngine.contains(\r\n                x.geometry,\r\n                feature.geometry\r\n              );\r\n            });\r\n            if (intersectedGeometry) {\r\n              item.bindFields.forEach((bindField) => {\r\n                feature.attributes[bindField.mappingField] =\r\n                  intersectedGeometry.attributes[bindField.dependLayerField];\r\n              });\r\n            }\r\n          });\r\n\r\n\r\n\r\n        }\r\n\r\n        store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n\r\n        if (!features.find((x) => x.attributes.MUNICIPALITY_NAME)) {\r\n          message.error(\"البيانات المدرجة خارج حدود البلديات\");\r\n\r\n          resolve([]);\r\n        } else {\r\n          resolve([...features]);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  handleOk = () => {\r\n    if (this.state.isEditMultiple) {\r\n      this.state.features.forEach((f) => {\r\n        if (f.isSelected) {\r\n          Object.keys(this.state.editFeature.attributes).forEach(\r\n            (attribute) => {\r\n              if (this.state.editFeature.attributes[attribute])\r\n                f.attributes[attribute] =\r\n                  this.state.editFeature.attributes[attribute];\r\n            }\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      this.state.features[this.state.editFeature.index].attributes = {\r\n        ...this.state.editFeature.attributes,\r\n      };\r\n    }\r\n\r\n    this.setState({\r\n      features: [...this.state.features],\r\n      showModal: false,\r\n      isEditMultiple: false,\r\n    });\r\n\r\n    this.props.setEditableFeatures([...this.state.features]);\r\n    this.drawEditableFeatures([...this.state.features]);\r\n  };\r\n\r\n  removeDialog = () => {\r\n    this.setState({ showModal: false, isEditMultiple: false });\r\n  };\r\n\r\n  editFeature(feature, index) {\r\n    let editFeatureObj = { index: index };\r\n    editFeatureObj.attributes = { ...feature.attributes };\r\n    let layerInfo =\r\n      addFeaturesMapLayers[this.state.uploadFileDetails.layerName];\r\n    let editFieldsObj = [];\r\n\r\n    let mandatoryFields = layerInfo.outFields\r\n      .filter((x) => x.isMandatory)\r\n      .map((f) => f.name);\r\n\r\n    layerInfo.outFields.forEach((outField) => {\r\n      editFieldsObj.push(this.LayerFields.find((x) => x.name == outField.name));\r\n    });\r\n\r\n    editFieldsObj.forEach((item) => {\r\n      if (item && mandatoryFields.indexOf(item.name) > -1) {\r\n        item.isMandatory = true;\r\n      }\r\n      if (item && item.domain && item.type == \"esriFieldTypeInteger\") {\r\n        editFeatureObj.attributes[item.name + \"_Code\"] =\r\n          +editFeatureObj.attributes[item.name + \"_Code\"];\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      showModal: true,\r\n      editFields: [...editFieldsObj],\r\n      editFeature: { ...editFeatureObj },\r\n      isEditMultiple: false,\r\n    });\r\n  }\r\n\r\n  handleUserInput = (e) => {\r\n    let editFeatureTemp = { ...this.state.editFeature };\r\n    editFeatureTemp.attributes[e.target.name] = e.target.value;\r\n    this.setState({ editFeature: { ...editFeatureTemp } });\r\n  };\r\n\r\n  selectHandleChange = (e, value) => {\r\n    let editFeatureTemp = { ...this.state.editFeature };\r\n    editFeatureTemp.attributes[e.name + \"_Code\"] = value;\r\n    editFeatureTemp.attributes[e.name] = e.domain.codedValues.find(\r\n      (x) => x.code == value\r\n    ).name;\r\n\r\n    this.setState({ editFeature: { ...editFeatureTemp } });\r\n  };\r\n\r\n  isdisabledField = (field) => {\r\n    let isFound = false;\r\n    this.layerInfo.spatialRelationLayers.forEach((layer) => {\r\n      if (!isFound)\r\n        isFound = layer?.bindFields?.find((x) => x.mappingField == field.name);\r\n    });\r\n    return isFound;\r\n  };\r\n\r\n  onChangeSelectFeature = (index, e) => {\r\n    this.state.features[index].isSelected =\r\n      !this.state.features[index].isSelected;\r\n    let selectedFeatures = this.state.features.filter((x) => x.isSelected);\r\n\r\n    if (selectedFeatures.length > 1) {\r\n      this.setState({\r\n        selectedFeatures: [...selectedFeatures],\r\n        features: [...this.state.features],\r\n      });\r\n    } else {\r\n      this.setState({\r\n        selectedFeatures: [],\r\n        features: [...this.state.features],\r\n      });\r\n    }\r\n  };\r\n\r\n  zoomToSelectedFeature = () => {\r\n    let features = [];\r\n\r\n    this.state.features.forEach((f, index) => {\r\n      if (f.isSelected) {\r\n        features.push(f);\r\n      }\r\n    });\r\n\r\n    if (!features.length) {\r\n      features = this.state.features;\r\n    }\r\n\r\n    this.drawEditableFeatures(features);\r\n  };\r\n\r\n  editSelectedFeatures = () => {\r\n    let editFeatureObj = { attributes: {} };\r\n    let layerInfo =\r\n      addFeaturesMapLayers[this.state.uploadFileDetails.layerName];\r\n    let editFieldsObj = [];\r\n\r\n    layerInfo.outFields.forEach((outField) => {\r\n      if (!this.isdisabledField(outField))\r\n        editFieldsObj.push(\r\n          this.LayerFields.find((x) => x.name == outField.name)\r\n        );\r\n    });\r\n\r\n    this.setState({\r\n      showModal: true,\r\n      editFields: [...editFieldsObj],\r\n      editFeature: { ...editFeatureObj },\r\n      isEditMultiple: true,\r\n    });\r\n  };\r\n\r\n  deleteSelectedFeatures = () => {\r\n    let features = [];\r\n\r\n    this.state.features.forEach((f, index) => {\r\n      if (!f.isSelected) {\r\n        features.push(f);\r\n      }\r\n    });\r\n\r\n    this.drawEditableFeatures(features);\r\n\r\n    this.props.setEditableFeatures([...features]);\r\n\r\n    this.setState({\r\n      features: [...features],\r\n      selectedFeatures: [],\r\n      isSelectAll: false,\r\n    });\r\n  };\r\n\r\n  onChangeSelectAll = () => {\r\n    this.state.features.map((f) => {\r\n      f.isSelected = !this.state.isSelectAll;\r\n    });\r\n    this.setState({\r\n      features: [...this.state.features],\r\n      isSelectAll: !this.state.isSelectAll,\r\n      selectedFeatures: [],\r\n    });\r\n  };\r\n\r\n  handleChange = (page) => {\r\n    this.setState({\r\n      current: page,\r\n      minIndex: (page - 1) * pageSize,\r\n      maxIndex: page * pageSize,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { uploadFileDetails } = this.state;\r\n    const {\r\n      features,\r\n      editFields,\r\n      editFeature,\r\n      isSelectAll,\r\n      selectedFeatures,\r\n      current,\r\n      minIndex,\r\n      maxIndex,\r\n    } = this.state;\r\n    const layerInfo = addFeaturesMapLayers[uploadFileDetails?.layerName];\r\n    return (\r\n      <div>\r\n        {features?.length ? (\r\n          <div>\r\n            <div\r\n              style={{\r\n                background: \"#57779d\",\r\n                textAlign: \"center\",\r\n                padding: \"5px\",\r\n              }}>\r\n              <h3\r\n                style={{\r\n                  color: \"white\",\r\n                  float:\r\n                    isSelectAll || selectedFeatures?.length > 1\r\n                      ? \"right\"\r\n                      : \"none\",\r\n                  marginRight: \"20px\",\r\n                }}>\r\n                عدد النتائج : {features.length}\r\n              </h3>\r\n              {(isSelectAll || selectedFeatures?.length > 1) && (\r\n                <div style={{ textAlign: \"left\" }}>\r\n                  <Button\r\n                    size=\"large\"\r\n                    onClick={this.editSelectedFeatures.bind(this)}\r\n                    style={{ marginLeft: \"10px\" }}>\r\n                    <FontAwesomeIcon icon={faEdit} />\r\n                    <span style={{ marginRight: \"5px\" }}>تعديل المحدد</span>\r\n                  </Button>\r\n                  {selectedFeatures?.length > 1 &&\r\n                    selectedFeatures?.length != features?.length && (\r\n                      <Button\r\n                        size=\"large\"\r\n                        onClick={this.deleteSelectedFeatures.bind(this)}\r\n                        style={{ marginLeft: \"10px\" }}>\r\n                        <FontAwesomeIcon icon={faTrash} />\r\n                        <span style={{ marginRight: \"5px\" }}>إزالة المحدد</span>\r\n                      </Button>\r\n                    )}\r\n                  <Button\r\n                    size=\"large\"\r\n                    onClick={this.zoomToSelectedFeature.bind(this)}>\r\n                    <FontAwesomeIcon icon={faSearchPlus} className=\"\" />\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <table\r\n              className=\"table table-bordered centeredTable\"\r\n              style={{ width: \"100%\" }}>\r\n              <thead>\r\n                <tr>\r\n                  <th>\r\n                    <div>\r\n                      <Checkbox\r\n                        style={{ marginTop: \"20px\" }}\r\n                        checked={isSelectAll}\r\n                        onChange={this.onChangeSelectAll.bind(this)}></Checkbox>\r\n                    </div>\r\n                  </th>\r\n                  {layerInfo?.outFields\r\n                    ?.filter((x) => !x.notInclude)\r\n                    ?.map((field) => {\r\n                      return <th>{field.arName}</th>;\r\n                    })}\r\n                  <th>الإجراءات</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {features.map((feature, index) => {\r\n                  return (\r\n                    index >= minIndex &&\r\n                    index < maxIndex && (\r\n                      <tr>\r\n                        <td style={{ textAlign: \"center\" }}>\r\n                          <Checkbox\r\n                            style={{ marginTop: \"20px\" }}\r\n                            checked={feature.isSelected}\r\n                            onChange={this.onChangeSelectFeature.bind(\r\n                              this,\r\n                              index\r\n                            )}></Checkbox>\r\n                        </td>\r\n                        {layerInfo?.outFields\r\n                          ?.filter((x) => !x.notInclude)\r\n                          ?.map((field) => {\r\n                            return (\r\n                              <td>\r\n                                {isNaN(feature.attributes[field.name]) ||\r\n                                  !feature.attributes[field.name]\r\n                                  ? feature.attributes[field.name] ||\r\n                                  \"غير متوفر\"\r\n                                  : this.formatNumber(\r\n                                    feature.attributes[field.name]\r\n                                  )}\r\n                              </td>\r\n                            );\r\n                          })}\r\n                        <td>\r\n                          <Button\r\n                            className=\"toolsBtnStyle\"\r\n                            style={{ margin: \"auto 1px\" }}\r\n                            disabled={\r\n                              isSelectAll || selectedFeatures?.length > 1\r\n                            }\r\n                            size=\"large\"\r\n                            onClick={this.editFeature.bind(\r\n                              this,\r\n                              feature,\r\n                              index\r\n                            )}>\r\n                            <FontAwesomeIcon icon={faEdit} className=\"\" />\r\n                          </Button>\r\n                          <Button\r\n                            className=\"toolsBtnStyle\"\r\n                            style={{ margin: \"auto 1px\" }}\r\n                            disabled={\r\n                              isSelectAll || selectedFeatures?.length > 1\r\n                            }\r\n                            size=\"large\"\r\n                            onClick={this.removeFeature.bind(this, index)}>\r\n                            <FontAwesomeIcon icon={faTrash} className=\"\" />\r\n                          </Button>\r\n                          <Button\r\n                            className=\"toolsBtnStyle\"\r\n                            style={{ margin: \"auto 1px\" }}\r\n                            size=\"large\"\r\n                            onClick={this.zoomToFeature.bind(this, feature)}>\r\n                            <FontAwesomeIcon icon={faSearchPlus} className=\"\" />\r\n                          </Button>\r\n                        </td>\r\n                      </tr>\r\n                    )\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n            <div className=\"updateMap\" style={{ marginTop: \"20px\" }}>\r\n              <Pagination\r\n                pageSize={pageSize}\r\n                current={current}\r\n                total={features.length}\r\n                onChange={this.handleChange}\r\n                style={{ bottom: \"0px\" }}\r\n              />\r\n            </div>\r\n          </div>\r\n        ) : <></>}\r\n\r\n        <Modal\r\n          width={800}\r\n          title=\"تعديل البيانات\"\r\n          onOk={this.handleOk}\r\n          visible={this.state.showModal}\r\n          onCancel={this.removeDialog}\r\n          okText=\"نعم\"\r\n          cancelText=\"إلغاء\">\r\n          <div>\r\n            <table>\r\n              <tbody>\r\n                {editFields.length > 0 &&\r\n                  editFields\r\n                    .filter((x) => x)\r\n                    .map((field) => {\r\n                      return (\r\n                        <tr>\r\n                          <td>\r\n                            {field.alias}\r\n                            {field.isMandatory && (\r\n                              <label\r\n                                style={{ marginRight: \"10px\", color: \"red\" }}>\r\n                                *\r\n                              </label>\r\n                            )}\r\n                          </td>\r\n                          <td>\r\n                            <div>\r\n                              {field.domain?.codedValues?.length ? (\r\n                                <Select\r\n                                  disabled={this.isdisabledField(field)}\r\n                                  style={{ width: \"80%\" }}\r\n                                  virtual={false}\r\n                                  onChange={this.selectHandleChange.bind(\r\n                                    this,\r\n                                    field\r\n                                  )}\r\n                                  className=\"dont-show\"\r\n                                  value={\r\n                                    editFeature.attributes[\r\n                                    field.name + \"_Code\"\r\n                                    ] || editFeature.attributes[field.name]\r\n                                  }\r\n                                  placeholder={\"من فضلك أدخل \" + field.alias}\r\n                                  getPopupContainer={(trigger) =>\r\n                                    trigger.parentNode\r\n                                  }>\r\n                                  {field.domain.codedValues.map(\r\n                                    (domain, index) => {\r\n                                      return (\r\n                                        <Select.Option\r\n                                          value={domain.code}\r\n                                          id={domain.code}>\r\n                                          {domain.name}\r\n                                        </Select.Option>\r\n                                      );\r\n                                    }\r\n                                  )}\r\n                                </Select>\r\n                              ) : (\r\n                                <Input\r\n                                  disabled={this.isdisabledField(field)}\r\n                                  name={field.name}\r\n                                  type={\r\n                                    field.type == \"esriFieldTypeString\"\r\n                                      ? \"text\"\r\n                                      : \"number\"\r\n                                  }\r\n                                  onChange={this.handleUserInput}\r\n                                  value={editFeature.attributes[field.name]}\r\n                                  placeholder={\"من فضلك أدخل \" + field.alias}\r\n                                />\r\n                              )}\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation(\"labels\")(editFeaturesTableComponent));\r\n","export const mapStateToProps = state => {\r\n    \r\n    return {\r\n        mainObject: state.wizard.mainObject,\r\n        UploadFileDetails: state.mainApp.uploadFileDetails,\r\n        editableFeatures: state.mainApp.editableFeatures\r\n    };\r\n}\r\n\r\n\r\nexport const mapDispatchToProps = dispatch => {\r\n    return {\r\n        setLoading: (data) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'loading',\r\n                data\r\n            })\r\n        },\r\n        setCurrentMap: (data) => {\r\n            mainMap = data;\r\n            setMap(data);\r\n          },\r\n        setmap: (e) => dispatch({ type: 'setMap', value: e }),\r\n        setEditableFeatures: (e) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'editableFeatures',\r\n                data: e\r\n            })\r\n        }\r\n\r\n    };\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AAeA;AAIA;AACA;AACA;AAMA;AAQA;AAEA;AACA;AAAA;AACA;AAAA;AA8hBA;AAEA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAonmJA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAyHA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AAAA;AAMA;AACA;AAKA;AACA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAGA;AAKA;AAWA;AAGA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAIA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAMA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AAKA;AACA;AAEA;AAGA;AAEA;AACA;AAAA;AAIA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAOA;AAOA;AACA;AACA;;;;;;;;;;;;ACrnCA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}
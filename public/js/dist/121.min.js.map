{"version":3,"file":"121.min.js","sources":["webpack:///./src/app/components/wizard/components/stepContent/sections/sectionTypes/wizardSummery/components/bda2l.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { host, filesHost } from \"config\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"../mapping\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUrbans,\r\n  convertListToString,\r\n  convertToArabic,\r\n  remove_duplicate,\r\n  checkImage,\r\n} from \"../../../../../../../inputs/fields/identify/Component/common/common_func\";\r\nclass bda2l extends Component {\r\n  render() {\r\n    //console.log(\"GG\", this.props.mainObject);\r\n\r\n    const {\r\n      data,\r\n      t,\r\n      mainObject: {\r\n        bda2l: {\r\n          bands_approval: {\r\n            urban,\r\n            band_number: { owner_selectedValues },\r\n            owner_acceptance,\r\n            others,\r\n          },\r\n        },\r\n      },\r\n      treeNode: {\r\n        option: { module_id },\r\n      },\r\n    } = this.props;\r\n    var _urban = getUrbans(this.props).find((d) => {\r\n      return d.code == urban;\r\n    });\r\n    // mainObject.bda2l.bands_approval.band_number.oldOptions\r\n    let values =\r\n      this.props.mainObject.bda2l.bands_approval.band_number.selectedValues;\r\n    let selectedValues =\r\n      this.props.mainObject?.bda2l?.bands_approval?.band_number?.oldOptions\r\n        ?.filter(\r\n          (r) =>\r\n            ((!Array.isArray(values) && values.values) || values)?.find(\r\n              (e) =>\r\n                r.value[0].key == e?.key &&\r\n                r.value[0].modal == e?.modal &&\r\n                e?.values?.length == r.value[0].values.length\r\n            ) != undefined\r\n          // &&\r\n          // (!Array.isArray(values) && values.values || values)?.find((e) => r.value[0].modal == e?.modal  && e?.values?.length == r.value[0].values.length) != undefined\r\n        )\r\n        ?.map((t) => {\r\n          let values = t.value[0];\r\n          return values;\r\n        });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <table className=\"table table-bordered\">\r\n            <tbody>\r\n              <tr>\r\n                <td>النطاق العمراني</td>\r\n                <td>{convertToArabic((_urban && _urban.name) || urban)}</td>\r\n              </tr>\r\n              <tr>\r\n                <td>البنود</td>\r\n                <td>\r\n                  {convertToArabic(\r\n                    (module_id == 42 &&\r\n                      !Array.isArray(selectedValues) &&\r\n                      selectedValues.values &&\r\n                      convertListToString(\r\n                        selectedValues.values,\r\n                        \"condition.item_description\"\r\n                      )) ||\r\n                      (module_id == 42 &&\r\n                        Array.isArray(selectedValues) &&\r\n                        selectedValues.length &&\r\n                        selectedValues\r\n                          .map((value) =>\r\n                            convertListToString(\r\n                              value.values,\r\n                              \"condition.item_description\"\r\n                            )\r\n                          )\r\n                          .join(\"\\n\")) ||\r\n                      (module_id == 39 &&\r\n                        !Array.isArray(owner_selectedValues) &&\r\n                        owner_selectedValues.values &&\r\n                        convertListToString(\r\n                          owner_selectedValues.values,\r\n                          \"condition.item_description\"\r\n                        )) ||\r\n                      (module_id == 39 &&\r\n                        Array.isArray(owner_selectedValues) &&\r\n                        owner_selectedValues.length &&\r\n                        owner_selectedValues\r\n                          .map((value) =>\r\n                            convertListToString(\r\n                              value.values,\r\n                              \"condition.item_description\"\r\n                            )\r\n                          )\r\n                          .join(\"\\n\"))\r\n                  )}\r\n                </td>\r\n              </tr>\r\n              {owner_acceptance && (\r\n                <tr>\r\n                  <td>\r\n                    نسخة من المخطط مصدقة من المكتب الهندسي مصدقة من المالك\r\n                  </td>\r\n                  <td valign=\"middle\" align=\"center\">\r\n                    {checkImage(this.props, owner_acceptance)}\r\n                  </td>\r\n                </tr>\r\n              )}\r\n              {others && (\r\n                <tr>\r\n                  <td>أخرى</td>\r\n                  <td valign=\"middle\" align=\"center\">\r\n                    {checkImage(this.props, others)}\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation(\"labels\")(bda2l));\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAAA;AAsDA;AAAA;AAAA;AAQA;AAAA;AAAA;AAUA;AACA;AAEA;;;;A","sourceRoot":""}
{"version":3,"file":"54.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/submitCADSugData.css","webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/submitCADSugData.css?2dad","webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/submitCADSuggestedData.js"],"sourcesContent":["exports = module.exports = require(\"../../../../../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".wizard-container {\\r\\n    scroll-behavior: smooth;\\r\\n  }\", \"\"]);\n\n","\nvar content = require(\"!!../../../../../../../../node_modules/css-loader/dist/cjs.js!./submitCADSugData.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../../../../node_modules/css-loader/dist/cjs.js!./submitCADSugData.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../../../../node_modules/css-loader/dist/cjs.js!./submitCADSugData.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React, { Component } from \"react\";\r\nimport {\r\n  getMap,\r\n  getIsMapLoaded,\r\n  setIsMapLoaded,\r\n} from \"main_helpers/functions/filters/state\";\r\nimport \"./submitCADSugData.css\";\r\n//import DOMPurify from 'dompurify'\r\nimport {\r\n  zoomToFeature,\r\n  generateUUID,\r\n  projectPolygons,\r\n  lineIntersect,\r\n  setDistance,\r\n  between,\r\n  calcPolygonArea,\r\n  lineLength,\r\n  segment_intersection,\r\n  queryTask_updated,\r\n  clone,\r\n  addGraphicToLayer,\r\n  project,\r\n  GetSpatial,\r\n  fromLatLngToDegreeSymbol,\r\n  getSubdivisionCode,\r\n  addParcelNo,\r\n  getCornerIconPosition,\r\n  DrawIntersectLines,\r\n  zoomToLayer,\r\n  clearGraphicFromLayer,\r\n  getInfo,\r\n  getCornersIndex,\r\n  toFixed,\r\n  convertToArabicToMap,\r\n  convertToArabic,\r\n  getFieldDomain,\r\n  convertToEnglish,\r\n  resizeMap,\r\n  getFeatureDomainCode\r\n} from \"../common/common_func\";\r\n\r\nimport { mapUrl } from \"../mapviewer/config/map\";\r\nimport \"antd/dist/antd.css\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport { submitFarzSplitAndMerge } from \"../../../../../wizard/modulesObjects/split_merge/steps/request_module/farzSubmitFunction\";\r\n\r\nexport const wasekaFields = {\r\n  selectedLands: {\r\n    field: \"select\",\r\n    label: \"الأراضي المختارة\",\r\n    placeholder: \"الأراضي المختارة\",\r\n    required: true,\r\n    label_key: \"PARCEL_PLAN_NO\",\r\n    value_key: \"PARCEL_PLAN_NO\",\r\n    moduleName: \"waseka\",\r\n  },\r\n  mlkya_type: {\r\n    field: \"select\",\r\n    label: \" نوع وثيقة الملكية  \",\r\n    placeholder: \"من فضلك اختر نوع وثيقة الملكية\",\r\n    label_key: \"name\",\r\n    value_key: \"id\",\r\n    showSearch: true,\r\n    required: true,\r\n    moduleName: \"ee\",\r\n    data: [\r\n      { id: \"1\", name: \" صك ملكية\" },\r\n      { id: \"2\", name: \" أخري\" },\r\n    ],\r\n  },\r\n  number_waseka: {\r\n    label: \"رقم وثيقة الملكية\",\r\n    placeholder: \"من فضلك ادخل رقم وثيقة الملكية\",\r\n    required: true,\r\n    digits: true,\r\n  },\r\n  date_waseka: {\r\n    label: \" تاريخ إصدار وثيقة الملكية\",\r\n    placeholder: \"من فضلك ادخل تاريخ إصدار وثيقة الملكية\",\r\n    field: \"hijriDatePicker\",\r\n    lessThanToday: true,\r\n    required: true,\r\n  },\r\n  waseka_search: {\r\n    field: \"search\",\r\n    label: \" جهة إصدار وثيقة الملكية \",\r\n    placeholder: \"من فضلك اختر جهة إصدار وثيقة الملكية\",\r\n    url: `${workFlowUrl}/issuers/searchbymunicabilityid?municapility_id=10513`,\r\n    filter_key: \"q\",\r\n    label_key: \"name\",\r\n    required: true,\r\n    onSelect(value, option, values, props) {\r\n      const issuer_id = option.id || \"\";\r\n      props.change(\"issuer_id\", option.id);\r\n    },\r\n  },\r\n  image_waseka: {\r\n    label: \"صورة وثيقة الملكية\",\r\n    placeholder: \"select file\",\r\n    field: \"simpleUploader\",\r\n    multiple: false,\r\n    required: true,\r\n    uploadUrl: `${host}/uploadMultifiles`,\r\n    fileType: \"image/*,.pdf\",\r\n    // name: \"image\",\r\n    // path: SubAttachementUrl + \"submission/identity_photo\",\r\n  },\r\n  name_waseka: {\r\n    label: \"اسم وثيقة الملكية\",\r\n    placeholder: \"من فضلك ادخل اسم وثيقة الملكية\",\r\n    required: true,\r\n    permission: { show_match_value: { mlkya_type: \"2\" } },\r\n  },\r\n};\r\n\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"lands\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\n\r\nclass submitCADSuggestedDataComponent extends Component {\r\n\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      redrawPolygonArea: 0,\r\n      spatialIDs: 0,\r\n      layerParcels: [],\r\n      updateFeature: null,\r\n      survayLayer: null,\r\n      editingTempSurvay: null,\r\n      isStartEdit: false,\r\n      polygons:\r\n        props.mainObject.data_msa7y.msa7yData.cadDetails.suggestionsParcels,\r\n      whereContidionToDeleteCornarsBoundires: [],\r\n      parcelSpatialIdsToDeleteFromLandContract: [],\r\n      identifyParcelsToDelete: {},\r\n      attInspector: null,\r\n    };\r\n\r\n    this.props.setLoading(true);\r\n    this.isLoaded = true;\r\n\r\n    window.finishSplitMergeParcels = () => {\r\n      return submitFarzSplitAndMerge(this.map, this.state);\r\n    };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.isLoaded) {\r\n      this.isLoaded = false;\r\n      this.map = getMap();\r\n      if (getIsMapLoaded()) {\r\n        setIsMapLoaded(false);\r\n        getInfo().then((res) => {\r\n          getFieldDomain(\"\", res.Landbase_Parcel).then((domains) => {\r\n            this.LayerDomains = domains;\r\n            this.LayerID = res;\r\n            this.DrawParcels();\r\n          })\r\n        });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getIdentifyParcels = () => {\r\n    let { layerParcels } = this.state;\r\n    if (this.props.mainObject?.landData?.landData?.lands?.parcels) {\r\n      this.state[\"identifyParcelsToDelete\"].ObjectIds = [];\r\n      this.state[\"identifyParcelsToDelete\"].Parcels = [];\r\n      this.state[\"spatialIDs\"] =\r\n        this.props.mainObject?.landData?.landData?.lands?.parcels\r\n          .map((d) => {\r\n            return d.attributes.PARCEL_SPATIAL_ID;\r\n          })\r\n          .join(\" , \");\r\n\r\n      this.props.mainObject?.landData?.landData?.lands?.parcels.forEach((value) => {\r\n        var polygonClass = new esri.geometry.Polygon(value.geometry);\r\n\r\n        var attr = value.attributes;\r\n        queryTask_updated(\r\n          mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n          \"\",\r\n          [\"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"],\r\n          (result) => {\r\n            var parcel = _.find(result.features, (d) => {\r\n              var isNum = /^\\d+$/.test(attr.PARCEL_PLAN_NO);\r\n              if (isNum)\r\n                return +d.attributes.PARCEL_PLAN_NO == +attr.PARCEL_PLAN_NO;\r\n              else return d.attributes.PARCEL_PLAN_NO == attr.PARCEL_PLAN_NO;\r\n            });\r\n\r\n            if (parcel) {\r\n              this.state[\"whereContidionToDeleteCornarsBoundires\"].push(\r\n                \"PARCEL_SPATIAL_ID = \" + parcel.attributes.PARCEL_SPATIAL_ID\r\n              );\r\n              this.state[\"parcelSpatialIdsToDeleteFromLandContract\"].push(\r\n                parcel.attributes.PARCEL_SPATIAL_ID\r\n              );\r\n\r\n              //عملية حذف\r\n              attr.OPERATION_TYPE = 2;\r\n              attr.ORIGINAL_OBJECTID = attr.OBJECTID;\r\n              attr.ARCHIVE_TIME = new Date();\r\n              attr.USER_NAME = \"Test\";\r\n\r\n              polygonClass = new esri.geometry.Polygon(parcel.geometry);\r\n              var graphic = new esri.Graphic(polygonClass, null, attr, null);\r\n              this.state[\"identifyParcelsToDelete\"].Parcels.push(graphic);\r\n              const {\r\n                input: { value },\r\n              } = this.props;\r\n              this.settoStore((value && value.layerParcels) || layerParcels);\r\n            }\r\n          },\r\n          null,\r\n          (query, Query) => {\r\n            query.geometry = polygonClass; //clone(polygonClass, attr);\r\n            query.distance = 4;\r\n            //query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\r\n          },\r\n          true,\r\n          undefined,\r\n          this.map.spatialReference\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  getBoundryDirectionName = (direction) => {\r\n    var name = \"\";\r\n    switch (direction) {\r\n      case 1:\r\n        name = \"الحد الشمالي\";\r\n        break;\r\n      case 2: \r\n        name = \"الحد الشرقي\";\r\n        break;\r\n      case 3:\r\n        name = \"الحد الجنوبي\";\r\n        break;\r\n      case 4:\r\n        name = \"الحد الغربي\";\r\n        break;\r\n    }\r\n    return name;\r\n  };\r\n\r\n  getTextLinePosition = (lineDirection) => {\r\n    var out = { x: 0, y: 0 };\r\n\r\n    if (lineDirection == 1) {\r\n      out.y = 25;\r\n    } else if (lineDirection == 4) {\r\n      out.x = 10;\r\n    } else if (lineDirection == 3) {\r\n      out.y = -10;\r\n    } else if (lineDirection == 2) {\r\n      out.x = -40;\r\n    }\r\n\r\n    return out;\r\n  };\r\n\r\n  GetSpatialData = (pt, PARCEL_SPATIAL_ID) => {\r\n    return new Promise((resolve, reject) => {\r\n      var count = 0;\r\n      var data = {};\r\n\r\n      queryTask_updated(\r\n        mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n        \"PARCEL_SPATIAL_ID=\" + PARCEL_SPATIAL_ID,\r\n        [\"*\"],\r\n        (res) => {\r\n          count++;\r\n\r\n          if (res.features && res.features.length > 0) {\r\n            Object.keys(res.features[0].attributes).forEach((key) => {\r\n              if (!data[key]) {\r\n                data[key] = res.features[0].attributes[key];\r\n              }\r\n            })\r\n          }\r\n\r\n          if (count == 6) resolve(data);\r\n        },\r\n        (error) => {\r\n          reject();\r\n        },\r\n        null,\r\n        true,\r\n        undefined,\r\n        this.map.spatialReference\r\n      );\r\n\r\n\r\n      queryTask_updated(\r\n        mapUrl + \"/\" + this.LayerID.Plan_Data,\r\n        \"\",\r\n        [\"PLAN_SPATIAL_ID\"],\r\n        (res) => {\r\n          count++;\r\n\r\n          if (res.features && res.features.length > 0)\r\n            data[\"PLAN_SPATIAL_ID\"] =\r\n              res.features[0].attributes[\"PLAN_SPATIAL_ID\"];\r\n\r\n          if (count == 6) resolve(data);\r\n        },\r\n        (error) => {\r\n          reject();\r\n        },\r\n        (query, Query) => {\r\n          query.geometry = new esri.geometry.Point(pt);\r\n          query.distance = 1;\r\n        },\r\n        true,\r\n        undefined,\r\n        this.map.spatialReference\r\n      );\r\n\r\n      queryTask_updated(\r\n        mapUrl + \"/\" + this.LayerID.Survey_Block,\r\n        \"\",\r\n        [\"BLOCK_SPATIAL_ID\"],\r\n        (res) => {\r\n          count++;\r\n\r\n          if (res.features && res.features.length > 0) {\r\n            data[\"BLOCK_SPATIAL_ID\"] =\r\n              res.features[0].attributes[\"BLOCK_SPATIAL_ID\"];\r\n            data[\"PARCEL_BLOCK_NO\"] = res.features[0].attributes[\"BLOCK_NO\"];\r\n          }\r\n\r\n          if (count == 6) resolve(data);\r\n        },\r\n        (error) => {\r\n          reject();\r\n        },\r\n        (query, Query) => {\r\n          query.geometry = new esri.geometry.Point(pt);\r\n          query.distance = 1;\r\n        },\r\n        true,\r\n        undefined,\r\n        this.map.spatialReference\r\n      );\r\n\r\n      queryTask_updated(\r\n        mapUrl + \"/\" + this.LayerID.Subdivision,\r\n        \"\",\r\n        [\"SUBDIVISION_TYPE\", \"SUBDIVISION_SPATIAL_ID\"],\r\n        (res) => {\r\n          count++;\r\n\r\n          if (res.features && res.features.length > 0) {\r\n            data[\"SUBDIVISION_TYPE\"] =\r\n              res.features[0].attributes[\"SUBDIVISION_TYPE\"];\r\n            data[\"SUBDIVISION_SPATIAL_ID\"] =\r\n              res.features[0].attributes[\"SUBDIVISION_SPATIAL_ID\"];\r\n          }\r\n\r\n          if (count == 6) resolve(data);\r\n        },\r\n        (error) => {\r\n          reject();\r\n        },\r\n        (query, Query) => {\r\n          query.geometry = new esri.geometry.Point(pt);\r\n          query.distance = 1;\r\n        },\r\n        true,\r\n        undefined,\r\n        this.map.spatialReference\r\n      );\r\n\r\n      queryTask_updated(\r\n        mapUrl + \"/\" + this.LayerID.Municipality_Boundary,\r\n        \"\",\r\n        [\"MUNICIPALITY_NAME\"],\r\n        (res) => {\r\n          count++;\r\n\r\n          if (res.features && res.features.length > 0) {\r\n            data[\"MUNICIPALITY_NAME\"] =\r\n              res.features[0].attributes[\"MUNICIPALITY_NAME\"];\r\n          }\r\n\r\n          if (count == 6) resolve(data);\r\n        },\r\n        (error) => {\r\n          reject();\r\n        },\r\n        (query, Query) => {\r\n          query.geometry = new esri.geometry.Point(pt);\r\n          query.distance = 1;\r\n        },\r\n        true,\r\n        undefined,\r\n        this.map.spatialReference\r\n      );\r\n\r\n      queryTask_updated(\r\n        mapUrl + \"/\" + this.LayerID.District_Boundary,\r\n        \"\",\r\n        [\"SUB_MUNICIPALITY_NAME\", \"DISTRICT_NAME\"],\r\n        (res) => {\r\n          count++;\r\n\r\n          if (res.features && res.features.length > 0) {\r\n            data[\"SUB_MUNICIPALITY_NAME\"] =\r\n              res.features[0].attributes[\"SUB_MUNICIPALITY_NAME\"];\r\n            data[\"DISTRICT_NAME\"] = res.features[0].attributes[\"DISTRICT_NAME\"];\r\n          }\r\n\r\n          if (count == 6) resolve(data);\r\n        },\r\n        (error) => {\r\n          reject();\r\n        },\r\n        (query, Query) => {\r\n          query.geometry = new esri.geometry.Point(pt);\r\n          query.distance = 1;\r\n        },\r\n        true,\r\n        undefined,\r\n        this.map.spatialReference\r\n      );\r\n    });\r\n  };\r\n\r\n  DrawParcels = () => {\r\n    let { polygons, layerParcels, redrawPolygonArea } = this.state;\r\n\r\n    const {\r\n      input: { value },\r\n      mainObject: {\r\n        data_msa7y: {\r\n          msa7yData: {\r\n            cadDetails: {\r\n              temp: {\r\n                cadResults: { data },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    } = this.props;\r\n    this.state[\"survayLayer\"] = this.map.getLayer(\"Landbase_Parcel\");\r\n    this.state[\"editingTempSurvay\"] = this.map.getLayer(\r\n      \"Proposed_Landbase_Parcel\"\r\n    );\r\n\r\n    polygons.forEach((polygon) => {\r\n    \r\n      if(polygon.parcelNameRight && polygon.parcelNameLeft)\r\n      {\r\n         polygon.parcel_name = polygon.parcelNameRight.replaceAll(' ','') + \"/\" + polygon.parcelNameLeft.replaceAll(' ','');     \r\n      }\r\n      polygon.parcel_name = convertToEnglish(polygon.parcel_name);\r\n    });\r\n\r\n    if (polygons && !polygons[0].polygon.spatialReference.wkid) {\r\n      var spatialR = this.map.spatialReference; //: new esri.SpatialReference({ wkid: 32639 });\r\n      polygons.forEach((polygon) => {\r\n        polygon.parcel_name = convertToEnglish(polygon.parcel_name);\r\n\r\n        polygon.data[0].data[0].spatialReference = spatialR;\r\n        polygon.data[1].data[0].spatialReference = spatialR;\r\n        polygon.data[3].data[0].spatialReference = spatialR;\r\n        polygon.data[4].data[0].spatialReference = spatialR;\r\n\r\n        polygon.data[0].data[0].centroid.spatialReference = spatialR;\r\n        polygon.data[1].data[0].centroid.spatialReference = spatialR;\r\n        polygon.data[3].data[0].centroid.spatialReference = spatialR;\r\n        polygon.data[4].data[0].centroid.spatialReference = spatialR;\r\n\r\n        polygon.maxPoint.spatialReference = spatialR;\r\n        polygon.minPoint.spatialReference = spatialR;\r\n        polygon.polygon.spatialReference = spatialR;\r\n        polygon.position.spatialReference = spatialR;\r\n\r\n        if (polygon.polygon.cache && polygon.polygon.cache._extent)\r\n          polygon.polygon.cache._extent.spatialReference = spatialR;\r\n      });\r\n    }\r\n    var permanentSlope;\r\n    if (this.map) {\r\n      projectPolygons(polygons).then((pPolygons) => {\r\n        polygons = pPolygons.polygons || pPolygons;\r\n        this.getIdentifyParcels();\r\n\r\n        clearGraphicFromLayer(this.map, \"boundriesDirection\");\r\n        clearGraphicFromLayer(this.map, \"boundriesDirectionToolTip\");\r\n\r\n        this.map\r\n          .getLayer(\"boundriesDirectionToolTip\")\r\n          .on(\"mouse-move\", (evt) => {\r\n            if (!this.state[\"isStartEdit\"]) {\r\n              var graphicAttributes = evt.graphic.geometry;\r\n              var content = \"\";\r\n              content +=\r\n                \"<b><center>\" +\r\n                this.getBoundryDirectionName(graphicAttributes.lineDirection) +\r\n                \"</center>\";\r\n              content += \"رقم الحد : \" + convertToArabic(graphicAttributes.BOUNDARY_NO);\r\n              content += \"<br> رقم الأرض : \" + convertToArabic(graphicAttributes.parcel_name);\r\n              content +=\r\n                \"<br> طوله : \" + convertToArabic(toFixed(graphicAttributes.text, 2)) + \" م \";\r\n              content += \"<br> نقطة بداية الضلع : \" + convertToArabic(graphicAttributes.from);\r\n              content += \"<br> نقطة نهاية الضلع : \" + convertToArabic(graphicAttributes.to);\r\n\r\n              this.map.infoWindow.setTitle(\"معلومات الأرض\");\r\n              this.map.infoWindow.setContent(content);\r\n              this.map.infoWindow.resize(350, 300);\r\n              this.map.infoWindow.show(\r\n                evt.screenPoint,\r\n                this.map.getInfoWindowAnchor(evt.screenPoint)\r\n              );\r\n            }\r\n          });\r\n\r\n        this.map\r\n          .getLayer(\"boundriesDirectionToolTip\")\r\n          .on(\"mouse-out\", (evt) => {\r\n            if (!this.state[\"isStartEdit\"]) {\r\n              this.map.infoWindow.hide();\r\n            }\r\n          });\r\n\r\n        window.onDragShatfaLayer = [];\r\n        window.onDragShatfaLayer.push((event) => {\r\n          //\r\n\r\n          this.map.getLayer(\"shatfaGraphicLayer\").remove(event.graphic);\r\n          var line = event.graphic;\r\n          permanentSlope =\r\n            (line.geometry.paths[0][1][1] - line.geometry.paths[0][0][1]) /\r\n            (line.geometry.paths[0][1][0] - line.geometry.paths[0][0][0]);\r\n\r\n          event.mapPoint.x += 1.3000009;\r\n          var newLine = setDistance(event.mapPoint, permanentSlope, 10);\r\n          addGraphicToLayer(\r\n            newLine,\r\n            this.map,\r\n            \"shatfaGraphicLayer\",\r\n            [0, 0, 255, 0.5],\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            20\r\n          );\r\n\r\n          var intersectIndex = 0;\r\n          var intersectLineNumber = 0;\r\n          var newIntersectPolygonRings = [];\r\n          var isIntersect = false;\r\n          var isIntersectBefore = false;\r\n          var intersetcedPoint = null;\r\n          layerParcels.forEach((parcel) => {\r\n            intersectIndex = 0;\r\n            intersectLineNumber = 0;\r\n            newIntersectPolygonRings = [];\r\n            isIntersect = false;\r\n            isIntersectBefore = false;\r\n\r\n            redrawPolygonArea = calcPolygonArea(parcel.geometry.rings);\r\n\r\n            if (redrawPolygonArea)\r\n              this.setState({ redrawPolygonArea: redrawPolygonArea });\r\n\r\n            //isClockWise = parcel.isClockwise(parcel.geometry.rings[0])\r\n\r\n            for (var i = 0; i < parcel.geometry.rings[0].length; i++) {\r\n              if (i < parcel.geometry.rings[0].length - 1) {\r\n                var path = {\r\n                  paths: [\r\n                    [\r\n                      parcel.geometry.rings[0][i],\r\n                      parcel.geometry.rings[0][i + 1],\r\n                    ],\r\n                  ],\r\n                  spatialReference: new esri.SpatialReference({ wkid: 32639 }),\r\n                };\r\n\r\n                intersetcedPoint = segment_intersection(\r\n                  path.paths[0][0][0],\r\n                  path.paths[0][0][1],\r\n                  path.paths[0][1][0],\r\n                  path.paths[0][1][1],\r\n                  newLine.paths[0][0][0],\r\n                  newLine.paths[0][0][1],\r\n                  newLine.paths[0][1][0],\r\n                  newLine.paths[0][1][1]\r\n                );\r\n                if (\r\n                  intersetcedPoint &&\r\n                  between(\r\n                    parcel.geometry.rings[0][i][0],\r\n                    intersetcedPoint.x,\r\n                    parcel.geometry.rings[0][i + 1][0]\r\n                  )\r\n                ) {\r\n                  //\r\n                  isIntersect = true;\r\n\r\n                  if (\r\n                    lineLength(\r\n                      intersetcedPoint.x,\r\n                      intersetcedPoint.y,\r\n                      parcel.geometry.rings[0][i + 1][0],\r\n                      parcel.geometry.rings[0][i + 1][1]\r\n                    ) >\r\n                    lineLength(\r\n                      intersetcedPoint.x,\r\n                      intersetcedPoint.y,\r\n                      parcel.geometry.rings[0][i][0],\r\n                      parcel.geometry.rings[0][i][1]\r\n                    )\r\n                  ) {\r\n                    newIntersectPolygonRings.push([\r\n                      intersetcedPoint.x,\r\n                      intersetcedPoint.y,\r\n                    ]);\r\n                    newIntersectPolygonRings.push(\r\n                      parcel.geometry.rings[0][i + 1]\r\n                    );\r\n                  } else {\r\n                    newIntersectPolygonRings.push(parcel.geometry.rings[0][i]);\r\n                    newIntersectPolygonRings.push([\r\n                      intersetcedPoint.x,\r\n                      intersetcedPoint.y,\r\n                    ]);\r\n                  }\r\n\r\n                  intersectIndex = i;\r\n                  isIntersectBefore = true;\r\n                } else {\r\n                  if (\r\n                    !(\r\n                      newIntersectPolygonRings.length > 0 &&\r\n                      newIntersectPolygonRings[\r\n                      newIntersectPolygonRings.length - 1\r\n                      ][0] == parcel.geometry.rings[0][i][0] &&\r\n                      newIntersectPolygonRings[\r\n                      newIntersectPolygonRings.length - 1\r\n                      ][1] == parcel.geometry.rings[0][i][1]\r\n                    )\r\n                  ) {\r\n                    newIntersectPolygonRings.push(parcel.geometry.rings[0][i]);\r\n                    newIntersectPolygonRings.push(\r\n                      parcel.geometry.rings[0][i + 1]\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            if (isIntersect) {\r\n              this.map.getLayer(\"highlightDeletedGraphicLayer\").clear();\r\n              //\r\n              if (\r\n                newIntersectPolygonRings[\r\n                newIntersectPolygonRings.length - 1\r\n                ][0] != newIntersectPolygonRings[0][0]\r\n              ) {\r\n                newIntersectPolygonRings.push(newIntersectPolygonRings[0]);\r\n              }\r\n              var polygonJson = {\r\n                rings: [newIntersectPolygonRings],\r\n                spatialReference: { wkid: 32639 },\r\n              };\r\n              polygonClass = new esri.geometry.Polygon(polygonJson);\r\n              redrawPolygonArea = calcPolygonArea(newIntersectPolygonRings);\r\n\r\n              this.setState({ redrawPolygonArea: redrawPolygonArea });\r\n\r\n              parcel.pendingGeometry = polygonClass;\r\n              addGraphicToLayer(\r\n                polygonClass,\r\n                this.map,\r\n                \"highlightDeletedGraphicLayer\",\r\n                [0, 0, 0, 1],\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                true\r\n              );\r\n            }\r\n          });\r\n        });\r\n\r\n        clearGraphicFromLayer(this.map, \"highlightBoundriesGraphicLayer\");\r\n        clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n        //clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n        clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n        clearGraphicFromLayer(this.map, \"pictureGraphicLayer\");\r\n\r\n        if (polygons) {\r\n          var polygonClass = new esri.geometry.Polygon(polygons[0].polygon);\r\n\r\n          var graphic = new esri.Graphic(polygonClass, null, null, null);\r\n          var pt = graphic.geometry.getExtent().getCenter();\r\n          //\r\n          pt.spatialReference = new esri.SpatialReference({ wkid: 32639 });\r\n\r\n          this.GetSpatialData(pt, this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n            .attributes.PARCEL_SPATIAL_ID).then((spatialRes) => {\r\n\r\n              getFeatureDomainCode([{\r\n                attributes: {\r\n                  DETAILED_LANDUSE: this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                    .attributes.DETAILED_LANDUSE,\r\n                  CITY_NAME: this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                    .attributes.CITY_NAME,\r\n                  ACTUAL_MAINLANDUSE: this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                    .attributes.ACTUAL_MAINLANDUSE\r\n                }\r\n              }],\r\n                this.map.getLayer(\r\n                  \"Proposed_Landbase_Parcel\"\r\n                ).layerId).then((domainValues) => {\r\n\r\n\r\n\r\n                  var projectedPoints = [];\r\n\r\n                  polygons.forEach((polygon) => {\r\n                    var polygonClass = new esri.geometry.Polygon(polygon.polygon);\r\n                    polygon.corners = [];\r\n                    var graphic = new esri.Graphic(polygonClass, null, null, null);\r\n                    projectedPoints.push(graphic.geometry.getExtent().getCenter());\r\n                  });\r\n\r\n                  this.map.getLayer(\"editlengthGraphicLayer\").clear();\r\n\r\n                  var cadResults = this.props.mainObject.data_msa7y.msa7yData.cadDetails.temp.cadResults;\r\n                  if (cadResults && cadResults.lineFeatures) {\r\n                    cadResults.lineFeatures.forEach((line) => {\r\n                      this.map.disablePan();\r\n                      var polyline = new esri.geometry.Polyline(line);\r\n                      permanentSlope =\r\n                        (line.paths[0][1][1] - line.paths[0][0][1]) /\r\n                        (line.paths[0][1][0] - line.paths[0][0][0]);\r\n                      var newLine = setDistance(\r\n                        polyline.getExtent().getCenter(),\r\n                        permanentSlope,\r\n                        10\r\n                      );\r\n                      addGraphicToLayer(\r\n                        newLine,\r\n                        this.map,\r\n                        \"shatfaGraphicLayer\",\r\n                        [0, 0, 255, 0.5],\r\n                        null,\r\n                        null,\r\n                        null,\r\n                        null,\r\n                        null,\r\n                        null,\r\n                        null,\r\n                        20\r\n                      );\r\n                    });\r\n                  }\r\n                  // else if(wc.mainObject.suggestion_parcel)\r\n                  // {\r\n                  //     wc.mainObject.suggestion_parcel.cad_file[0].lineFeatures.forEach(function (line) {\r\n\r\n                  //             this.map.disablePan();\r\n                  //             var polyline = new esri.geometry.Polyline(line);\r\n                  //             permanentSlope = (line.paths[0][1][1] - line.paths[0][0][1]) / (line.paths[0][1][0] - line.paths[0][0][0]);\r\n                  //             var newLine = cadsub.setDistance(polyline.getExtent().getCenter() , permanentSlope , 10)\r\n                  //             commonMapServ.addGraphicToLayer(newLine, this.map, \"editlengthGraphicLayer\", [0, 0, 255, 0.5],null,null,null,null,null,null,null,10);\r\n                  //     });\r\n                  // }\r\n\r\n                  project(projectedPoints, 4326, (projectedPointsRes) => {\r\n                    polygons.forEach((polygon, key) => {\r\n                      var polygonClass = new esri.geometry.Polygon(polygon.polygon);\r\n                      polygon.corners = [];\r\n                      var graphic = new esri.Graphic(polygonClass, null, null, null);\r\n                      var parcelSpatialId = GetSpatial(projectedPointsRes[key]);\r\n                      var newpt = projectedPointsRes[key];\r\n\r\n                      var polygonlatlng = [\r\n                        fromLatLngToDegreeSymbol(newpt.y),\r\n                        fromLatLngToDegreeSymbol(newpt.x),\r\n                      ];\r\n\r\n                      delete spatialRes.OBJECTID;\r\n                      \r\n                      var attr = {...spatialRes};\r\n\r\n                      ///////////////////////////////////////\r\n                      /////// set updated attributes ////////\r\n\r\n                      //\r\n                      attr.PARCEL_PLAN_NO = polygon.parcel_name;\r\n                      attr.MUNICIPALITY_NAME = spatialRes[\"MUNICIPALITY_NAME\"];\r\n                      attr.DISTRICT_NAME = spatialRes[\"DISTRICT_NAME\"];\r\n                      attr.SUB_MUNICIPALITY_NAME = spatialRes[\"SUB_MUNICIPALITY_NAME\"];\r\n                      attr.SUBDIVISION_SPATIAL_ID = spatialRes[\"SUBDIVISION_SPATIAL_ID\"] || null;\r\n                      attr.BLOCK_SPATIAL_ID = spatialRes[\"BLOCK_SPATIAL_ID\"] || null;\r\n                      attr.PLAN_SPATIAL_ID = spatialRes[\"PLAN_SPATIAL_ID\"] || null;\r\n                      attr.USING_SYMBOL =\r\n                        this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                          .attributes.USING_SYMBOL_Code || this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                            .attributes.USING_SYMBOL;\r\n                      attr.PARCEL_LONG_COORD = polygonlatlng[1];\r\n                      attr.PARCEL_AREA = polygon.area;\r\n                      attr.PARCEL_LAT_COORD = polygonlatlng[0];\r\n                      attr.PLAN_NO = this.props.mainObject?.landData?.landData?.lands?.parcels[0].attributes.PLAN_NO;\r\n                      attr.PARCEL_SPATIAL_ID = parcelSpatialId;\r\n\r\n\r\n                      //////////////////////////////////////\r\n                      /////////////////////////////////////\r\n\r\n                      /*var attr = {\r\n                        //\"OBJECTID\": this.props.mainObject?.landData?.landData?.lands?.parcels.find(parcel => parcel.attributes.PARCEL_PLAN_NO == polygon.parcel_name).attributes.OBJECTID,\r\n                        PARCEL_PLAN_NO: polygon.parcel_name,\r\n                        PARCEL_BLOCK_NO:\r\n                          this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                            .attributes.PARCEL_BLOCK_NO || \"\",\r\n                        BLDG_CONDITIONS:\r\n                          this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                            .attributes.BLDG_CONDITIONS || \"\",\r\n                        SUBDIVISION_DESCRIPTION:\r\n                          this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                            .attributes.SUBDIVISION_DESCRIPTION || \"\",\r\n                        SUBDIVISION_TYPE:\r\n                          getSubdivisionCode(\r\n                            this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                              .attributes.SUBDIVISION_TYPE\r\n                            , this.LayerDomains.find((l) => l.name == \"SUBDIVISION_TYPE\")) || null,\r\n                        DISTRICT_NAME: spatialRes[\"DISTRICT_NAME\"],\r\n                        SUB_MUNICIPALITY_NAME: spatialRes[\"SUB_MUNICIPALITY_NAME\"],\r\n                        SUBDIVISION_SPATIAL_ID:\r\n                          spatialRes[\"SUBDIVISION_SPATIAL_ID\"] || null,\r\n                        BLOCK_SPATIAL_ID: spatialRes[\"BLOCK_SPATIAL_ID\"] || null,\r\n                        PLAN_SPATIAL_ID: spatialRes[\"PLAN_SPATIAL_ID\"] || null,\r\n                        USING_SYMBOL:\r\n                          this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                            .attributes.USING_SYMBOL_Code || this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                              .attributes.USING_SYMBOL,\r\n                        MUNICIPALITY_NAME: spatialRes[\"MUNICIPALITY_NAME\"],\r\n                        PLAN_NO:\r\n                          this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                            .attributes.PLAN_NO,\r\n                        PARCEL_LONG_COORD: polygonlatlng[1],\r\n                        PARCEL_AREA: polygon.area,\r\n                        PARCEL_LAT_COORD: polygonlatlng[0],\r\n                        PARCEL_SPATIAL_ID: parcelSpatialId,\r\n                        PARCEL_SUB_LUSE:\r\n                          this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                            .attributes.PARCEL_SUB_LUSE_Code || this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                              .attributes.PARCEL_SUB_LUSE,\r\n                        PARCEL_MAIN_LUSE:\r\n                          this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                            .attributes.PARCEL_MAIN_LUSE_Code || this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                              .attributes.PARCEL_MAIN_LUSE,\r\n                        STREET_NAME: this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                          .attributes.STREET_NAME,\r\n                        DETAILED_LANDUSE: domainValues[0].attributes.DETAILED_LANDUSE,\r\n                        CITY_NAME: domainValues[0].attributes.CITY_NAME,\r\n                        ACTUAL_MAINLANDUSE: domainValues[0].attributes.ACTUAL_MAINLANDUSE,\r\n                        LANDMARK_NAME: this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                          .attributes.LANDMARK_NAME,\r\n                        UNITS_NUMBER:\r\n                          this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n                            .attributes.UNITS_NUMBER,\r\n                      };*/\r\n\r\n                      /*addGraphicToLayer(\r\n                        polygonClass,\r\n                        this.map,\r\n                        \"addedParclGraphicLayer\",\r\n                        [0, 0, 0, 0.01],\r\n                        null,\r\n                        false,\r\n                        () => { },\r\n                        attr,\r\n                        null,\r\n                        true\r\n                      );*/\r\n\r\n\r\n\r\n                      graphic.attributes = attr;\r\n                      var pt = graphic.geometry.getExtent().getCenter();\r\n                      pt.spatialReference = new esri.SpatialReference({\r\n                        wkid: 32639,\r\n                      });\r\n\r\n                      // addParcelNo(\r\n                      //   pt,\r\n                      //   this.map,\r\n                      //   convertToArabic(\"\" + polygon.parcel_name + \"\"),\r\n                      //   \"PacrelNoGraphicLayer\",\r\n                      //   30,\r\n                      //   [255, 0, 0],\r\n                      //   -10\r\n                      // );\r\n\r\n                      layerParcels.push(graphic);\r\n                      layerParcels[layerParcels.length - 1].lines = [];\r\n                      layerParcels[layerParcels.length - 1].corners = [];\r\n                      layerParcels[layerParcels.length - 1].northBorder =\r\n                        polygon.data[0].border || polygon.north_Desc;\r\n                      layerParcels[layerParcels.length - 1].eastBorder =\r\n                        polygon.data[1].border  || polygon.east_Desc;\r\n                      layerParcels[layerParcels.length - 1].southBorder =\r\n                        polygon.data[3].border   || polygon.south_Desc;\r\n                      layerParcels[layerParcels.length - 1].weastBorder =\r\n                        polygon.data[4].border   || polygon.west_Desc;\r\n\r\n                        \r\n                      polygon.data.forEach((boundry) => {\r\n                        if (boundry.name != \"main\") {\r\n                          var color = [0, 0, 255];\r\n                          var lineDirection = 0;\r\n\r\n                          if (boundry.name == \"north\") {\r\n                            color = [0, 141, 255];\r\n                            lineDirection = 1;\r\n                          } else if (boundry.name == \"east\") {\r\n                            color = [117, 114, 114];\r\n                            lineDirection = 2;\r\n                          }\r\n                          //wast is east\r\n                          else if (boundry.name == \"weast\" || boundry.name == \"west\") {\r\n                            color = [255, 0, 0];\r\n                            lineDirection = 4;\r\n                          } else if (boundry.name == \"south\") {\r\n                            color = [0, 255, 0];\r\n                            lineDirection = 3;\r\n                          }\r\n\r\n                          boundry.data.forEach((line, key) => {\r\n                            if (line.lines) {\r\n                              line.lines.forEach((innerLine) => {\r\n                                innerLine.color = color;\r\n                                //innerLine.polygonNum = count;\r\n                                innerLine.lineDirection = lineDirection;\r\n\r\n                                if (\r\n                                  innerLine.spatialReference.wkid != 32639 &&\r\n                                  pPolygons.delta\r\n                                ) {\r\n                                  innerLine.paths[0][0][0] =\r\n                                    innerLine.paths[0][0][0] + pPolygons.delta[0];\r\n                                  innerLine.paths[0][0][1] =\r\n                                    innerLine.paths[0][0][1] + pPolygons.delta[1];\r\n                                  innerLine.paths[0][1][0] =\r\n                                    innerLine.paths[0][1][0] + pPolygons.delta[0];\r\n                                  innerLine.paths[0][1][1] =\r\n                                    innerLine.paths[0][1][1] + pPolygons.delta[1];\r\n                                  innerLine.spatialReference =\r\n                                    new esri.SpatialReference({ wkid: 32639 });\r\n                                }\r\n\r\n                                var polyline = new esri.geometry.Polyline(\r\n                                  innerLine\r\n                                );\r\n\r\n                                layerParcels[layerParcels.length - 1].lines.push(\r\n                                  polyline\r\n                                );\r\n\r\n                                addGraphicToLayer(\r\n                                  polyline,\r\n                                  this.map,\r\n                                  \"boundriesDirection\",\r\n                                  color\r\n                                );\r\n                              });\r\n                            }\r\n\r\n                            //\r\n                            if (\r\n                              line.spatialReference.wkid != 32639 &&\r\n                              pPolygons.delta\r\n                            ) {\r\n                              line.paths[0][0][0] =\r\n                                line.paths[0][0][0] + pPolygons.delta[0];\r\n                              line.paths[0][0][1] =\r\n                                line.paths[0][0][1] + pPolygons.delta[1];\r\n                              line.paths[0][1][0] =\r\n                                line.paths[0][1][0] + pPolygons.delta[0];\r\n                              line.paths[0][1][1] =\r\n                                line.paths[0][1][1] + pPolygons.delta[1];\r\n                              line.spatialReference = new esri.SpatialReference({\r\n                                wkid: 32639,\r\n                              });\r\n                              delete line.cache;\r\n                            } else if (!line.spatialReference.wkid) {\r\n                              line.spatialReference = new esri.SpatialReference({\r\n                                wkid: 32639,\r\n                              });\r\n                            }\r\n\r\n                            var polyline = new esri.geometry.Polyline(line);\r\n\r\n                            var point1 = {};\r\n\r\n                            point1.x = line.paths[0][0][0];\r\n                            point1.y = line.paths[0][0][1];\r\n\r\n                            var latlng = esri.geometry.xyToLngLat(\r\n                              point1.x,\r\n                              point1.y\r\n                            );\r\n                            point1.lat = latlng[0];\r\n                            point1.lng = latlng[1];\r\n\r\n                            var point2 = {};\r\n                            point2.x = line.paths[0][1][0];\r\n                            point2.y = line.paths[0][1][1];\r\n                            latlng = esri.geometry.xyToLngLat(point2.x, point2.y);\r\n                            point2.lat = latlng[0];\r\n                            point2.lng = latlng[1];\r\n\r\n                            var fromCornerIndex = getCornersIndex(\r\n                              polygon.corners,\r\n                              point1\r\n                            );\r\n                            if (fromCornerIndex == -1) {\r\n                              polygon.corners.push(point1);\r\n                              fromCornerIndex = polygon.corners.length;\r\n                            }\r\n                            var toCornerIndex = getCornersIndex(\r\n                              polygon.corners,\r\n                              point2\r\n                            );\r\n                            if (toCornerIndex == -1) {\r\n                              polygon.corners.push(point2);\r\n                              toCornerIndex = polygon.corners.length;\r\n                            }\r\n\r\n                            line = polyline;\r\n                            line.from = fromCornerIndex;\r\n                            line.to = toCornerIndex;\r\n                            line.BOUNDARY_NO = line.from;\r\n                            line.lineDirection = lineDirection;\r\n                            line.parcel_name = polygon.parcel_name;\r\n                            line.POLYGON_PARCEL_SPATIAL_ID = parcelSpatialId;\r\n\r\n                            boundry.data[key] = line;\r\n\r\n                            layerParcels[layerParcels.length - 1].lines.push(\r\n                              line\r\n                            );\r\n\r\n                            var pt = polyline.getExtent().getCenter();\r\n                            pt.spatialReference = new esri.SpatialReference({\r\n                              wkid: 32639,\r\n                            });\r\n\r\n                            addParcelNo(\r\n                              pt,\r\n                              this.map,\r\n                              convertToArabic(\"\" + (+line.text).toFixed(2) + \"\"),\r\n                              \"editlengthGraphicLayer\",\r\n                              null,\r\n                              null,\r\n                              null\r\n                            );\r\n                            addGraphicToLayer(\r\n                              polyline,\r\n                              this.map,\r\n                              \"boundriesDirection\",\r\n                              color\r\n                            );\r\n                            addGraphicToLayer(\r\n                              polyline,\r\n                              this.map,\r\n                              \"boundriesDirectionToolTip\"\r\n                            );\r\n                          });\r\n                        }\r\n                      });\r\n\r\n                      layerParcels[layerParcels.length - 1].corners =\r\n                        polygon.corners;\r\n\r\n                      // setTimeout(() => {\r\n                      //   zoomToLayer(\"boundriesDirection\", this.map);\r\n                      // }, 100);\r\n\r\n                      resizeMap(this.map);\r\n\r\n                      //\r\n                      // add polygons to temp layer\r\n\r\n\r\n                      this.state[\"editingTempSurvay\"].applyEdits(\r\n                        layerParcels,\r\n                        null,\r\n                        null\r\n                      );\r\n                      this.state[\"editingTempSurvay\"].on(\r\n                        \"edits-complete\",\r\n                        function (evt) { }\r\n                      );\r\n\r\n\r\n                    });\r\n\r\n\r\n                    //draw corners\r\n                    layerParcels.forEach((polygon, index) => {\r\n                      var northLength = 0,\r\n                        eastLength = 0,\r\n                        southLength = 0,\r\n                        weastLength = 0;\r\n\r\n                      polygon.lines.forEach((line, key) => {\r\n                        var attr = {\r\n                          BOUNDARY_NO: line.BOUNDARY_NO,\r\n                          FROM_CORNER: line.from,\r\n                          TO_CORNER: line.to,\r\n                          BOUNDARY_LENGTH: line.text,\r\n                          PARCEL_SPATIAL_ID:\r\n                            polygon.attributes.PARCEL_SPATIAL_ID,\r\n                          BOUNDARY_DIRECTION: line.lineDirection,\r\n                        };\r\n\r\n                        var graphic = new esri.Graphic(line, null, attr, null);\r\n                        polygon.lines[key] = graphic;\r\n                        if (line.lineDirection == 1) {\r\n                          if (!polygon.northDescription)\r\n                            polygon.northDescription = \"\";\r\n\r\n                          northLength += line.text;\r\n                          polygon.northDescription =\r\n                            \" طوله \" +\r\n                            \"<b>\" +\r\n                            northLength.toFixed(2) +\r\n                            \"</b>\" +\r\n                            \" م\" +\r\n                            \" ويحده \" +\r\n                            \"<b>\" +\r\n                            (polygon.northBorder || 0) +\r\n                            \"</b>\";\r\n                        } else if (line.lineDirection == 4) {\r\n                          if (!polygon.weastDescription)\r\n                            polygon.weastDescription = \"\";\r\n\r\n                          weastLength += line.text;\r\n                          polygon.weastDescription =\r\n                            \" طوله \" +\r\n                            \"<b>\" +\r\n                            weastLength.toFixed(2) +\r\n                            \"</b>\" +\r\n                            \" م\" +\r\n                            \" ويحده \" +\r\n                            \"<b>\" +\r\n                            (polygon.weastBorder || 0) +\r\n                            \"</b>\";\r\n                        } else if (line.lineDirection == 3) {\r\n                          if (!polygon.southDescription)\r\n                            polygon.southDescription = \"\";\r\n\r\n                          southLength += line.text;\r\n                          polygon.southDescription =\r\n                            \" طوله \" +\r\n                            \"<b>\" +\r\n                            southLength.toFixed(2) +\r\n                            \"</b>\" +\r\n                            \" م\" +\r\n                            \" ويحده \" +\r\n                            \"<b>\" +\r\n                            (polygon.southBorder || 0) +\r\n                            \"</b>\";\r\n                        } else if (line.lineDirection == 2) {\r\n                          if (!polygon.eastDescription)\r\n                            polygon.eastDescription = \"\";\r\n\r\n                          eastLength += line.text;\r\n                          polygon.eastDescription =\r\n                            \" طوله \" +\r\n                            \"<b>\" +\r\n                            eastLength.toFixed(2) +\r\n                            \"</b>\" +\r\n                            \" م\" +\r\n                            \" ويحده \" +\r\n                            \"<b>\" +\r\n                            (polygon.eastBorder || 0) +\r\n                            \"</b>\";\r\n                        }\r\n                      });\r\n\r\n                      polygon.corners.forEach((corner, key) => {\r\n                        var attr = {\r\n                          CORNER_NO: key + 1,\r\n                          XUTM_COORD: corner.x,\r\n                          YUTM_COORD: corner.y,\r\n                          XGCS_COORD: corner.lng,\r\n                          PARCEL_SPATIAL_ID:\r\n                            polygon.attributes.PARCEL_SPATIAL_ID,\r\n                          YGCS_COORD: corner.lat,\r\n                        };\r\n\r\n                        var point = new esri.geometry.Point(\r\n                          corner.x,\r\n                          corner.y,\r\n                          this.map.spatialReference\r\n                        );\r\n\r\n                        var graphic = new esri.Graphic(point, null, attr, null);\r\n                        polygon.corners[key] = graphic;\r\n\r\n                        var iconTextPosition = { x: -5, y: 0 };\r\n                        var iconPosition = { x: 0, y: 0 };\r\n\r\n                        if (layerParcels.length > 1) {\r\n                          iconPosition = getCornerIconPosition(\r\n                            key + 1,\r\n                            polygon.lines\r\n                          );\r\n                          iconTextPosition.x =\r\n                            iconPosition.x > 0\r\n                              ? iconPosition.x\r\n                              : iconPosition.x - 5;\r\n                          iconTextPosition.y =\r\n                            iconPosition.y > 0\r\n                              ? iconPosition.y\r\n                              : iconPosition.y - 4;\r\n                        }\r\n\r\n                        //commonMapServ.addGraphicToLayer(point, this.map, \"pictureGraphicLayer\", null, null, null, null, null, iconPosition);\r\n                        //commonMapServ.addParcelNo(point, this.map, \"\" + (key + 1) + \"\", \"PacrelNoGraphicLayer\", 12, [0, 0, 0], null, iconTextPosition);\r\n                      });\r\n                    });\r\n\r\n                    DrawIntersectLines();\r\n\r\n                    this.settoStore(\r\n                      (value && value.layerParcels) || layerParcels\r\n                    );\r\n\r\n                    //$rootScope.showLoading = false;\r\n                    this.props.setLoading(false);\r\n                  }, true);\r\n\r\n                });\r\n            });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  settoStore(parcels) {\r\n    const { input } = this.props;\r\n\r\n    var value = input.value;\r\n    var inputChanged = {\r\n      ...value,\r\n      layerParcels: parcels,\r\n      parcelSpatialIdsToDeleteFromLandContract:\r\n        this.state[\"parcelSpatialIdsToDeleteFromLandContract\"] ||\r\n        (value && value.parcelSpatialIdsToDeleteFromLandContract) ||\r\n        [],\r\n      whereContidionToDeleteCornarsBoundires:\r\n        this.state[\"whereContidionToDeleteCornarsBoundires\"] ||\r\n        (value && value.whereContidionToDeleteCornarsBoundires) ||\r\n        [],\r\n      identifyParcelsToDelete:\r\n        this.state[\"identifyParcelsToDelete\"] ||\r\n        (value && value.identifyParcelsToDelete) ||\r\n        [],\r\n    };\r\n\r\n    input.onChange({ ...inputChanged });\r\n\r\n    this.setState({\r\n      ...inputChanged,\r\n    });\r\n  }\r\n\r\n  saveEditablePolygon = () => {\r\n    const { layerParcels } = this.state;\r\n    if (layerParcels && layerParcels.length) {\r\n      layerParcels.forEach((parcel) => {\r\n        if (parcel.pendingGeometry) {\r\n          parcel.geometry = parcel.pendingGeometry;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  InitailizeAttributeinspector = (polygon) => {\r\n    let { layerParcels } = this.state;\r\n\r\n    //this.state[\"editingTempSurvay\"]._outFields = ['USING_SYMBOL'];\r\n\r\n    LoadModules([\r\n      \"esri/dijit/AttributeInspector\",\r\n      \"dojo/dom-construct\",\r\n      \"esri/geometry/screenUtils\",\r\n      \"dojo/domReady!\",\r\n    ]).then(([AttributeInspector, domConstruct, screenUtils]) => {\r\n      let editingFeatureLayerFieldsInfo = [\r\n        {\r\n          fieldName: \"REMARKS\",\r\n          isEditable: true,\r\n          tooltip: \"REMARKS\",\r\n          label: \"ملاحظات:\",\r\n        },\r\n        {\r\n          fieldName: \"USING_SYMBOL\",\r\n          isEditable: true,\r\n          tooltip: \"USING_SYMBOL\",\r\n          label: \"رمز الاستخدام:\",\r\n        },\r\n        { fieldName: \"DISTRICT_NAME\", isEditable: true, label: \"الحي:\" },\r\n        {\r\n          fieldName: \"GCP_NO\",\r\n          isEditable: true,\r\n          label: \"رقم نقطة التحكم الأرضية:\",\r\n        },\r\n        {\r\n          fieldName: \"MUNICIPALITY_NAME\",\r\n          isEditable: false,\r\n          label: \"البلدية:\",\r\n        },\r\n        {\r\n          fieldName: \"SUBDIVISION_NO\",\r\n          isEditable: false,\r\n          label: \"رقم التقسيم:\",\r\n        },\r\n        {\r\n          fieldName: \"PARCEL_AREA\",\r\n          isEditable: false,\r\n          label: \" مساحة الأرض م2:\",\r\n        },\r\n      ];\r\n      let layerInfos = [\r\n        {\r\n          featureLayer: this.state[\"editingTempSurvay\"],\r\n          showAttachments: false,\r\n          isEditable: true,\r\n          showDeleteButton: false,\r\n          fieldInfos: editingFeatureLayerFieldsInfo,\r\n        },\r\n      ];\r\n\r\n      if (this.attInspector) {\r\n        this.attInspector.destroy();\r\n      }\r\n\r\n      this.attInspector = new AttributeInspector(\r\n        {\r\n          layerInfos: layerInfos,\r\n        },\r\n        domConstruct.create(\"div\")\r\n      );\r\n\r\n      var saveButton = new dijit.form.Button(\r\n        { label: \"حفظ\", class: \"saveButton\" },\r\n        dojo.create(\"div\")\r\n      );\r\n      var canelButton = new dijit.form.Button(\r\n        { label: \"الغاء\", class: \"cancelButton\" },\r\n        dojo.create(\"div\")\r\n      );\r\n\r\n      dojo.place(\r\n        saveButton.domNode,\r\n        this.attInspector.deleteBtn.domNode,\r\n        \"after\"\r\n      );\r\n      dojo.place(\r\n        canelButton.domNode,\r\n        this.attInspector.deleteBtn.domNode,\r\n        \"after\"\r\n      );\r\n\r\n      this.attInspector.on(\"attribute-change\", (evt) => {\r\n        //store the updates to apply when the save button is clicked\r\n\r\n        this.state[\"updateFeature\"].attributes[evt.fieldName] = evt.fieldValue;\r\n      });\r\n\r\n      canelButton.on(\"click\", () => {\r\n        this.state[\"isStartEdit\"] = false;\r\n        this.map.infoWindow.hide();\r\n\r\n        editingFeatureLayerFieldsInfo.forEach((val) => {\r\n          if (val.isEditable && val.fieldName != \"PARCEL_PLAN_NO\") {\r\n            this.state[\"updateFeature\"].attributes[val.fieldName] = \"\";\r\n          }\r\n        });\r\n\r\n        this.state[\"editingTempSurvay\"].clearSelection();\r\n        // this.state[\"updateFeature\"] = null;\r\n      });\r\n\r\n      saveButton.on(\"click\", () => {\r\n        this.state[\"isStartEdit\"] = false;\r\n\r\n        layerParcels.forEach((value, key) => {\r\n          if (\r\n            value.attributes.OBJECTID ==\r\n            this.state[\"updateFeature\"].attributes.OBJECTID\r\n          ) {\r\n            editingFeatureLayerFieldsInfo.forEach((val) => {\r\n              if (val.isEditable) {\r\n                layerParcels[key].attributes[val.fieldName] =\r\n                  this.state[\"updateFeature\"].attributes[val.fieldName];\r\n                //$scope.$apply();\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        this.state[\"updateFeature\"]\r\n          .getLayer()\r\n          .applyEdits(null, [this.state[\"updateFeature\"]], null);\r\n        this.map.infoWindow.hide();\r\n        this.state[\"editingTempSurvay\"].clearSelection();\r\n        // this.state[\"updateFeature\"] = null;\r\n      });\r\n\r\n      var selectQuery = new esri.tasks.Query();\r\n      selectQuery.objectIds = [polygon.attributes.OBJECTID];\r\n\r\n      zoomToFeature([polygon], this.map, 8, () => {\r\n        this.state[\"editingTempSurvay\"].selectFeatures(\r\n          selectQuery,\r\n          esri.layers.FeatureLayer.SELECTION_NEW,\r\n          (features) => {\r\n            if (features.length > 0) {\r\n              this.state[\"updateFeature\"] = features[0];\r\n\r\n              this.map.infoWindow.hide();\r\n              this.map.resize();\r\n              this.map.reposition();\r\n              var mapPoint = this.state[\"updateFeature\"].geometry\r\n                .getExtent()\r\n                .getCenter();\r\n              var screenPoint = screenUtils.toScreenPoint(\r\n                this.map.extent,\r\n                this.map.width,\r\n                this.map.height,\r\n                mapPoint\r\n              );\r\n\r\n              //screenPoint.x = \"243px\";\r\n              if (this.attInspector && this.attInspector.domNode) {\r\n                this.map.infoWindow.setContent(this.attInspector.domNode);\r\n                this.map.infoWindow.setTitle(\r\n                  this.state[\"updateFeature\"].getLayer().name\r\n                );\r\n                this.map.infoWindow.resize(350, 250);\r\n                this.map.infoWindow.show(\r\n                  mapPoint,\r\n                  this.map.getInfoWindowAnchor(screenPoint)\r\n                );\r\n                this.map.infoWindow.on(\"hide\", (evt) => {\r\n                  this.state[\"editingTempSurvay\"].clearSelection();\r\n                  // this.state[\"updateFeature\"] = null;\r\n                });\r\n                // setTimeout(() => {\r\n                //\r\n                //   document.getElementsByClassName(\"close\")[0].onClick = (evt) => {\r\n                //\r\n                //     this.state[\"editingTempSurvay\"].clearSelection();\r\n                //     // this.state[\"updateFeature\"] = null;\r\n                //   }\r\n                // }, 1000)\r\n\r\n                this.state[\"isStartEdit\"] = true;\r\n              }\r\n            } else {\r\n              this.map.infoWindow.hide();\r\n            }\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  edit = (polygon, evt) => {\r\n    this.InitailizeAttributeinspector(polygon);\r\n    var el = document.querySelector(\".wizard-container\");\r\n    //el.scrollTop = el.scrollHeight;\r\n    setTimeout(function () {\r\n      el.scrollTop = 0;\r\n    }, 500);\r\n    evt.preventDefault();\r\n  };\r\n  addSak = (parcel, scope) => {\r\n    const { mainObject, setMain } = scope.props;\r\n    const { layerParcels } = scope.state;\r\n\r\n    var fields = wasekaFields;\r\n\r\n    if (!parcel.contract) fields.selectedLands.data = [parcel.attributes];\r\n\r\n    setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...parcel.contract },\r\n          ok(values) {\r\n            values.unique_id = generateUUID();\r\n            values.municipilty_id =\r\n              mainObject.landData.landData.lands.parcels[0].attributes.MUNICIPALITY_NAME_Code;\r\n            values.PLAN_NO =\r\n              mainObject.landData.landData.lands.parcels[0].attributes.PLAN_NO;\r\n            values.PARCEL_PLAN_NO =\r\n              mainObject.landData.landData.lands.parcels[0].attributes.PARCEL_PLAN_NO;\r\n            values.PARCEL_BLOCK_NO =\r\n              mainObject.landData.landData.lands.parcels[0].attributes.PARCEL_BLOCK_NO;\r\n            parcel.contract = values;\r\n            scope.settoStore(layerParcels);\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n  removeSak = (parcel, evt) => {\r\n    const { layerParcels } = this.state;\r\n    if (parcel.contract) {\r\n      parcel.contract = null;\r\n      this.settoStore(layerParcels);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { redrawPolygonArea, spatialIDs, layerParcels } = this.state;\r\n    return (\r\n      <div className=\"col-md-12\">\r\n        <div style={{ marginTop: \"10px\" }}>\r\n          المساحة :{redrawPolygonArea > 0 ? redrawPolygonArea : \"\"}\r\n          {redrawPolygonArea > 0 && (\r\n            <button\r\n              className=\"btn btn-primary btn-margin\"\r\n              type=\"button\"\r\n              name=\"name\"\r\n              style={{ marginRight: '50px' }}\r\n              onClick={this.saveEditablePolygon.bind(this)}\r\n            >\r\n              حفظ\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        <div style={{ marginTop: \"10px\" }}>spatial ids : {spatialIDs}</div>\r\n\r\n        <table\r\n          className=\"table table-bordered no-margin\"\r\n          style={{ marginTop: \"23px\" }}\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>رقم قطعة الأرض</th>\r\n              <th>وصف الحدود</th>\r\n              <th>خيارات</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {layerParcels.map((parcel, index) => {\r\n              return (\r\n                <tr key={index}>\r\n                  <td>{convertToArabic(parcel.attributes.PARCEL_PLAN_NO)}</td>\r\n                  <td>\r\n                    <b>الحد الشمالي :</b>\r\n                    <br />\r\n                    <span\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: convertToArabic(parcel.northDescription),\r\n                      }}\r\n                    ></span>\r\n                    <br />\r\n                    <br />\r\n                    <b>الحد الشرقي :</b>\r\n                    <br />\r\n                    <span\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: convertToArabic(parcel.eastDescription),\r\n                      }}\r\n                    ></span>\r\n                    <br />\r\n                    <br />\r\n                    <b>الحد الجنوبي :</b>\r\n                    <br />\r\n                    <span\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: convertToArabic(parcel.southDescription),\r\n                      }}\r\n                    ></span>\r\n                    <br />\r\n                    <br />\r\n                    <b>الحد الغربي :</b>\r\n                    <br />\r\n                    <span\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: convertToArabic(parcel.weastDescription),\r\n                      }}\r\n                    ></span>\r\n                  </td>\r\n                  <td>\r\n                    <button\r\n                      className=\"btn follow\"\r\n                      type=\"button\"\r\n                      name=\"name\"\r\n                      onClick={this.edit.bind(this, parcel)}\r\n                    >\r\n                      تعديل\r\n                    </button>\r\n                    {!parcel.contract && (\r\n                      <button\r\n                        className=\"btn follow\"\r\n                        type=\"button\"\r\n                        name=\"name\"\r\n                        onClick={() => {\r\n                          this.addSak(parcel, this);\r\n                        }}\r\n                      >\r\n                        إضافة صك\r\n                      </button>\r\n                    )}\r\n                    {parcel.contract && (\r\n                      <button\r\n                        className=\"btn follow\"\r\n                        type=\"button\"\r\n                        name=\"name\"\r\n                        onClick={this.removeSak.bind(this, parcel)}\r\n                      >\r\n                        مسح صك\r\n                      </button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(submitCADSuggestedDataComponent);\r\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAKA;AACA;AACA;AAieA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AAEA;AAUA;AAQA;AACA;AAEA;AAcA;AAIA;AAGA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAWA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKA;AAct4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwkCA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAIA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AA8PA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AAOA;AACA;AACA;AAAA;AAOA;AACA;AACA;AAAA;AAOA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAQA;AAKA;AACA;AACA;;;;A","sourceRoot":""}
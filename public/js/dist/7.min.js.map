{"version":3,"file":"7.min.js","sources":["webpack:///./src/app/components/inputs/fields/select/multiSelect.js","webpack:///./src/app/components/inputs/fields/select/select.js"],"sourcesContent":["import React from \"react\";\r\nimport { Select } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"./mapping\";\r\nimport { get, map, isFunction, isEqual } from \"lodash\";\r\nimport { selectComponent } from \"./select\";\r\nconsole.log(selectComponent);\r\nconst Option = Select.Option;\r\nclass multiSelectComponent extends selectComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    const { init_data } = this.props;\r\n\r\n    if (init_data) {\r\n      init_data(this.props);\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    //this.checkData(nextProps, this.props);\r\n    return (\r\n      !isEqual(nextProps.data, this.props.data) ||\r\n      !isEqual(nextProps.input.value, this.props.input.value) ||\r\n      !isEqual(nextProps.lang, this.props.lang) ||\r\n      !isEqual(nextProps.forceUpdate, this.props.forceUpdate)\r\n    );\r\n  }\r\n\r\n  handleChange(value) {\r\n    const { maxChoices } = this.props;\r\n    const {\r\n      input: { onChange },\r\n      init_data,\r\n    } = this.props;\r\n    // onChange(value)\r\n    if (Array.isArray(value)) {\r\n      maxChoices\r\n        ? value.length <= maxChoices && onChange(value)\r\n        : onChange(value);\r\n    }\r\n\r\n    \r\n    if (this.props.onSelect) {\r\n      this.props.onSelect(value, this.props);\r\n    }\r\n  }\r\n  render() {\r\n    const {\r\n      input: { value, ...input },\r\n      label,\r\n      placeholder,\r\n      ux_pattern,\r\n      data = [],\r\n      label_key = \"label\",\r\n      value_key = \"value\",\r\n      disabled,\r\n    } = this.props;\r\n    return (\r\n      <Select\r\n        style={{ direction: \"rtl\", textAlign: \"right\" }}\r\n        mode=\"multiple\"\r\n        onPopupScroll={\r\n          ux_pattern == \"infiniteScrolling\" && this.onScroll.bind(this)\r\n        }\r\n        disabled={isFunction(disabled) ? disabled(value, this.props) : disabled}\r\n        showSearch\r\n        getPopupContainer={(trigger) => trigger.parentNode}\r\n        optionFilterProp=\"children\"\r\n        filterOption={(input, option) =>\r\n          option?.props?.children\r\n            ?.toLowerCase()\r\n            ?.indexOf(input?.toLowerCase()) >= 0\r\n        }\r\n        value={value == \"\" ? undefined : value}\r\n        {...input}\r\n        onChange={this.handleChange.bind(this)}\r\n        placeholder={placeholder ? placeholder : label}\r\n        //allowClear={false}\r\n      >\r\n        {Array.isArray(data) &&\r\n          typeof data[0] == \"object\" &&\r\n          map(data, (d, key) => (\r\n            <Option value={get(d, value_key)} data={d} key={get(d, value_key)}>\r\n              {get(d, label_key)}\r\n            </Option>\r\n          ))}\r\n        {Array.isArray(data) &&\r\n          typeof data[0] == \"string\" &&\r\n          map(data, (d, key) => (\r\n            <Option value={d} data={d} key={d}>\r\n              {d}\r\n            </Option>\r\n          ))}\r\n      </Select>\r\n    );\r\n  }\r\n}\r\n\r\nexport const multiSelect = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(multiSelectComponent);\r\nexport default multiSelect;\r\n","import React from \"react\";\r\nimport { Select } from \"antd\";\r\nimport { fetchAllData } from \"app/helpers/functions\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport mainInput from \"app/helpers/main/input\";\r\nimport { fetchData } from \"app/helpers/apiMethods\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"./mapping\";\r\nimport { get, isEqual, omit, map, isFunction, isEmpty } from \"lodash\";\r\n\r\nconst Option = Select.Option;\r\nexport class selectComponent extends mainInput {\r\n  componentDidMount() {\r\n    const {\r\n      data = [],\r\n      input: { value },\r\n      selectChange,\r\n      setNextUrl,\r\n      value_key = \"value\",\r\n      setData,\r\n      postRequest,\r\n      fetch,\r\n      links = {},\r\n      ux_pattern,\r\n      api_config,\r\n      VALUE,\r\n      inconsistant,\r\n      init,\r\n      resetData,\r\n      label,\r\n      visible,\r\n      //hideLabel = true\r\n      invokeOnRender\r\n    } = this.props;\r\n    const { nextLink } = links;\r\n    VALUE && this.props.input.onChange(VALUE);\r\n    this.checkData(this.props, {});\r\n\r\n    if (init) init(this.props);\r\n\r\n    if (!value && resetData) {\r\n      resetData(this.props);\r\n    }\r\n\r\n    if (\r\n      fetch &&\r\n      (!data.length ||\r\n        (ux_pattern != \"infiniteScrolling\" && (nextLink || inconsistant))) || (fetch && invokeOnRender)\r\n    ) {\r\n      ux_pattern == \"infiniteScrolling\"\r\n        ? this.getScrollingData(this.props, true)\r\n        : fetchAllData(fetch, api_config).then((data) => {\r\n            \r\n            if (!postRequest) {\r\n              setData(data);\r\n              setNextUrl(\"\");\r\n            } else {\r\n              postRequest(this.props, data);\r\n            }\r\n          });\r\n    }\r\n    if (value && selectChange) {\r\n      const selectedRow = data.find((d) => isEqual(get(d, value_key), value));\r\n      selectChange(value, selectedRow, this.props);\r\n    }\r\n  }\r\n\r\n  getScrollingData(props, onMount) {\r\n    const {\r\n      fetch,\r\n      addToData,\r\n      setData,\r\n      links = {},\r\n      api_config,\r\n      setNextUrl,\r\n      pageSize = 20,\r\n    } = props;\r\n    const { nextLink } = links;\r\n    if (onMount) {\r\n      return fetchData(fetch, {\r\n        ...api_config,\r\n        params: {\r\n          ...get(api_config, \"params\"),\r\n          pageSize: pageSize,\r\n        },\r\n      }).then(({ results, next }) => {\r\n        setData(results);\r\n        setNextUrl(next);\r\n      });\r\n    } else {\r\n      return fetchData(nextLink, omit(api_config, \"params\")).then(\r\n        ({ results, next }) => {\r\n          addToData(results, -1);\r\n          setNextUrl(next);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    this.checkData(nextProps, this.props);\r\n    return (\r\n      !isEqual(nextProps.data, this.props.data) ||\r\n      !isEqual(nextProps.input.value, this.props.input.value) ||\r\n      !isEqual(nextProps.lang, this.props.lang) ||\r\n      !isEqual(nextProps.forceUpdate, this.props.forceUpdate)\r\n    );\r\n  }\r\n  checkData = (nextProps, prevProps) => {\r\n    const { value_key = \"value\" } = nextProps;\r\n    if (\r\n      prevProps.data &&\r\n      nextProps.data &&\r\n      !isEqual(nextProps.data, prevProps.data)\r\n    ) {\r\n      this.handleChange(\r\n        nextProps,\r\n        nextProps.select_first && nextProps.data.length == 1\r\n          ? get(nextProps.data[0], value_key)\r\n          : null\r\n      );\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const {\r\n      data,\r\n      input: { value },\r\n      selectChange,\r\n      resetFields,\r\n      change,\r\n    } = prevProps;\r\n    const {\r\n      data: nextData = [],\r\n      reset,\r\n      input: { value: nextValue },\r\n      value_key = \"value\",\r\n    } = this.props;\r\n    if (nextValue == \"\" && value) {\r\n      selectChange && selectChange(nextValue, null, this.props);\r\n    }\r\n    if (\r\n      nextData.length &&\r\n      String(nextValue) != \"\" &&\r\n      (!isEqual(value, nextValue) || !isEqual(data, nextData))\r\n    ) {\r\n      resetFields && resetFields.map((f) => change(f, \"\"));\r\n      if (selectChange) {\r\n        const selectedRow = nextData.find((d) =>\r\n          isEqual(get(d, value_key), nextValue)\r\n        );\r\n        // selectedRow.name = \"ff\";\r\n        selectChange(nextValue, selectedRow, this.props);\r\n        // if (reset) {\r\n        //   selectChange(null, selectedRow, this.props);\r\n        // }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  handleChange(props, value) {\r\n    const {\r\n      input: { name, onChange },\r\n      save_to = \"\",\r\n      data,\r\n      value_key,\r\n      resetFields,\r\n      change,\r\n    } = props;\r\n    resetFields && resetFields.map((f) => change(f, \"\"));\r\n    let newVal = value ? value : \"\";\r\n    onChange(newVal);\r\n    if (save_to) {\r\n      let names = name.split(\".\");\r\n      names.pop();\r\n      names.push(save_to);\r\n      const selectedRow = data.find((d) => isEqual(get(d, value_key), value));\r\n      change(names.join(\".\"), selectedRow);\r\n    }\r\n\r\n    if (this.props.onSelect) {\r\n      this.props.onSelect(value, props);\r\n    }\r\n  }\r\n\r\n  onScroll(event) {\r\n    // let maxScroll = event.target.scrollHeight - event.target.clientHeight;\r\n    // let currentScroll = event.target.scrollTop;\r\n    // event.persist()\r\n    // if (currentScroll >= maxScroll) {\r\n    //     if (get(this.props, 'links.nextLink')) {\r\n    //         this.getScrollingData(this.props)\r\n    //             .then(() => event.target.scrollTop = currentScroll);\r\n    //     }\r\n    // }\r\n  }\r\n  render() {\r\n    let {\r\n      values,\r\n      input: { value, ...input },\r\n      showArrow,\r\n      showSearch = false,\r\n      label,\r\n      title,\r\n      placeholder = label,\r\n      data = [],\r\n      label_key = \"label\",\r\n      value_key = \"value\",\r\n      t,\r\n      disabled,\r\n      ux_pattern,\r\n      visible = true,\r\n      disable_placeholder = true\r\n    } = this.props;\r\n    // console.log(this.props);\r\n    //label = (isFunction(visible) ?  visible(values, this.props) : visible) ? label : '';\r\n\r\n    if (typeof value == \"object\" && isEmpty(value)) {\r\n      value = \"\";\r\n    }\r\n    return (\r\n      <>\r\n        {(isFunction(visible)\r\n          ? visible(values, this.props)\r\n          : visible != undefined\r\n          ? visible\r\n          : true) && (\r\n          <div className=\"addTranDiv\">\r\n            <Select\r\n              suffixIcon={\r\n                <img\r\n                  src=\"images/addTran.svg\"\r\n\r\n                  // style={{ position: \" absolute\", right: \" 5px\", width: \"25px\" }}\r\n                />\r\n              }\r\n              disabled={\r\n                isFunction(disabled) ? disabled(values, this.props) : disabled\r\n              }\r\n              onPopupScroll={\r\n                ux_pattern == \"infiniteScrolling\" && this.onScroll.bind(this)\r\n              }\r\n              // showArrow={showArrow}\r\n              dropdownMatchSelectWidth={false}\r\n              showSearch={showSearch}\r\n              allowClear\r\n              autoClearSearchValue\r\n              title={title}\r\n              getPopupContainer={(trigger) => trigger.parentNode}\r\n              optionFilterProp=\"children\"\r\n              filterOption={(input, option) =>\r\n                option.props.children\r\n                  ?.toLowerCase()\r\n                  ?.indexOf(String(input).toLowerCase()) >= 0\r\n              }\r\n              value={value}\r\n              {...input}\r\n              onChange={this.handleChange.bind(this, this.props)}\r\n            >\r\n              <Option value={\"\"} key={\"null\"} disabled={disable_placeholder}>\r\n                {placeholder}\r\n              </Option>\r\n              {data &&\r\n                typeof data[0] == \"object\" &&\r\n                map(data, (d) => (\r\n                  <Option\r\n                    value={get(d, value_key)}\r\n                    // data={d}\r\n                    key={get(d, value_key)}\r\n                  >\r\n                    {t(get(d, label_key))}\r\n                  </Option>\r\n                ))}\r\n              {data &&\r\n                typeof data[0] == \"string\" &&\r\n                map(data, (d) => (\r\n                  <Option\r\n                    value={d}\r\n                    // data={d}\r\n                    key={d}\r\n                  >\r\n                    {t(d)}\r\n                  </Option>\r\n                ))}\r\n            </Select>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(withTranslation(\"labels\")(selectComponent))\r\n);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAkGA;AAAA;AAAA;AACA;AAKA;AAMA;AACA;AAAA;AA9GA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAGA;AAGA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AASA;AACA;AAAA;AACA;AAAA;AAAA;AAUA;AACA;AAEA;;;;A","sourceRoot":""}
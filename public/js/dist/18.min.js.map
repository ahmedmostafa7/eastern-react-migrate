{"version":3,"file":"18.min.js","sources":["webpack:///./src/app/components/inputs/fields/label/index.js","webpack:///./src/app/components/inputs/fields/label/mapping.js","webpack:///./src/app/components/inputs/fields/label/typeofData/boolean.js","webpack:///./src/app/components/inputs/fields/label/typeofData/date.js","webpack:///./src/app/components/inputs/fields/label/typeofData/index.js","webpack:///./src/app/components/inputs/fields/label/typeofData/number.js","webpack:///./src/app/components/inputs/fields/label/typeofData/object.js","webpack:///./src/app/components/inputs/fields/label/typeofData/string.js","webpack:///./src/app/components/inputs/fields/select/search/index.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport {get} from 'lodash';\r\nimport * as dataTypes from './typeofData'\r\nimport {translate} from 'react-i18next'\r\nimport { mapStateToProps, mapDispatchToProps } from \"./mapping\"\r\nimport { connect } from \"react-redux\";\r\nclass labelComponent extends Component {\r\n\r\n  componentDidMount() {\r\n      const {init_data} = this.props;\r\n      \r\n      if(init_data)\r\n      {\r\n        init_data(this.props);\r\n      }\r\n  }\r\n\r\n  render() {\r\n      const { className, input: {value}, type, data={} , t} = this.props;\r\n      \r\n      let initialVal = get(data, value, value);\r\n      const Val = get(dataTypes, type, () => <label>{initialVal}</label>)\r\n\r\n      return (\r\n      <Val  {...{ className }}  data={value} t={t}/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation('labels')(labelComponent));\r\n","import { get } from 'lodash';\r\nimport {formValueSelector} from 'redux-form'\r\nexport const mapStateToProps = ({ wizard: {mainObject}, selectors = {}, mainApp, mapViewer, ...state }, { moduleName, path, value_key, ...props }) => {\r\n    return ({\r\n        mainObject: {...mainObject},\r\n    })\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n    return {\r\n        getValues(name='stepForm'){return formValueSelector('name')},        \r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport  class boolean extends Component {\r\n\r\n  render() {\r\n    const {data,t} = this.props\r\n    \r\n    return (\r\n      <div>\r\n        {data ? t('Yes') : t('No')}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport moment from 'moment';\r\n\r\nexport  class date extends Component {\r\n  render() {\r\n    const {data}=this.props\r\n    return (\r\n      <div>\r\n        {moment(data)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export * from './object';\r\nexport * from './string';\r\nexport * from './date';\r\nexport * from './number';\r\nexport * from './list';\r\nexport * from './boolean';\r\n","import React, { Component } from 'react'\r\n\r\nexport class number extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.data && (+this.props.data).toFixed(2)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {get, isEmpty} from 'lodash'\r\nimport {fileUploader} from 'app/helpers/fieldValues'\r\n\r\nexport class object extends Component {\r\n\r\n\r\n\r\n  render() {\r\n    const {data,t}=this.props\r\n    let files = data && data.length ? data.filter(singleData => get(singleData, 'uid', null) ? singleData : null) : null\r\n    \r\n    return (\r\n      <div>\r\n        {\r\n          !isEmpty(files) ? \r\n          <div>\r\n            {fileUploader(data)}\r\n          </div>\r\n          :\r\n          <div style={{display:'flex'}}>\r\n            {data.map((val, index) => <div style={{padding:'5px'}} key={index}>{index == 0 ? ` ${t(val)} ` : ` - ${t(val)} ` }</div>)}\r\n          </div> \r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {date as Date} from './date';\r\n\r\n export class string extends Component {\r\n  render() {\r\n     const {data,t} = this.props\r\n     const datetime= /\\d{4,4}-\\d{2,2}-\\d{2,2}/;\r\n\r\n     let item = datetime.test(data) ? <Date data={data}/> : data\r\n\r\n      return (\r\n        <div>\r\n          {item}\r\n        </div>\r\n      )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { AutoComplete } from \"antd\";\r\nimport {\r\n  toArray,\r\n  mapValues,\r\n  get,\r\n  includes,\r\n  eq,\r\n  isArray,\r\n  isEqual,\r\n} from \"lodash\";\r\nimport axios from \"axios\";\r\nimport { array_to_obj } from \"main_helpers/functions\";\r\nconst { Option } = AutoComplete;\r\nimport {withTranslation} from \"react-i18next\";\r\nimport applyFilters from \"main_helpers/functions/filters\";\r\nimport label from \"../../label\";\r\nimport { validate as isValidUUID } from \"uuid\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"../mapping\";\r\nimport { esriRequest } from \"../../identify/Component/common\";\r\nconst funs = {\r\n  includes,\r\n  eq,\r\n};\r\nclass SearchComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dataSource: {},\r\n      text:\r\n        (typeof this.props.input.value == \"object\" &&\r\n          (!isNaN(Object.keys(this.props.input.value)[0]) ||\r\n            isValidUUID(Object.keys(this.props.input.value)[0])) &&\r\n          Object.values(this.props.input.value).map(\r\n            (item) => item[this.props.label_key]\r\n          )) ||\r\n        (typeof this.props.input.value == \"object\" &&\r\n          isNaN(Object.keys(this.props.input.value)[0]) &&\r\n          !isValidUUID(Object.keys(this.props.input.value)[0]) &&\r\n          this.props.input.value[this.props.label_key]) ||\r\n        this.props.input.value ||\r\n        \"\",\r\n    }; //\r\n\r\n    const init = get(props.field.value, props.save, \"\");\r\n    if (init) {\r\n      this.state.dataSource = { [init.id]: init };\r\n    }\r\n    if (!props.min) {\r\n      this.onSearch(\"\");\r\n    }\r\n\r\n    if (props.searchOnLoad) {\r\n      this.onSearch(\" \");\r\n    }\r\n  }\r\n\r\n  // componentDidUpdate(prevProps) {\r\n  //\r\n  //   if (this.props.input.value.isReset) {\r\n  //     this.props.input.value.isReset = false;\r\n  //     const { postRequest } = this.props;\r\n  //     let data = (postRequest &&\r\n  //       postRequest(this.props, this.state.dataSource)) || [];\r\n  //     this.setState({\r\n  //       text: data.length && data?.[0]?.id || \"\",\r\n  //       dataSource: data.length && data?.[0] || [],\r\n  //     });\r\n  //   }\r\n  // }\r\n  handleChange = (name, ev) => {\r\n    const { postRequest, method } = this.props;\r\n    debugger;\r\n    this.setState({\r\n      [name]:\r\n        (method != \"esri\" &&\r\n          postRequest &&\r\n          postRequest(this.props, this.state.dataSource)?.[0]?.id) ||\r\n        get(ev, \"target.value\", ev),\r\n    });\r\n  };\r\n  renderOption = (item) => {\r\n    const { label_key = \"id\", label_value = \"name\" } = this.props;\r\n    const value = get(item, label_value);\r\n    const key = get(item, label_key);\r\n    return (\r\n      <Option key={String(key)} text={value} value={String(key)} data={item}>\r\n        <span className=\"global-search-item-desc\">{value}</span>\r\n      </Option>\r\n    );\r\n  };\r\n  onSelect = (value, option) => {\r\n    const { input, saveTo, change, values, onSelect = () => {} } = this.props;\r\n    input.onChange(value);\r\n    this.setState({ text: value });\r\n    if (saveTo) {\r\n      change(saveTo, option.props.data);\r\n    }\r\n    return onSelect(value, option.props.data, values, this.props);\r\n  };\r\n\r\n  isNonObjectsArray = (arr) => {\r\n    return arr.every((i) => typeof i !== \"object\");\r\n  };\r\n  onSearch = (value) => {\r\n    const {\r\n      values,\r\n      url,\r\n      min = -1,\r\n      filter_key,\r\n      method,\r\n      postRequest,\r\n      preRequest,\r\n    } = this.props;\r\n    if (this.timer) {\r\n      clearTimeout(this.timer);\r\n    }\r\n    debugger;\r\n    if (\r\n      (value && value?.length > min) ||\r\n      value == null ||\r\n      value.match(/^ *$/) !== null\r\n    ) {\r\n      this.timer = setTimeout(() => {\r\n        console.log(values);\r\n        if (preRequest) {\r\n          preRequest(this.props);\r\n        }\r\n        let urlParams = mapValues(this.props.params, (d) =>\r\n          get(values, d, applyFilters({ path: d, default: d }))\r\n        );\r\n        if (filter_key) {\r\n          if (filter_key == \"token\") {\r\n            urlParams[\"f\"] = \"json\";\r\n            urlParams[filter_key] = window.esriToken;\r\n          } else {\r\n            urlParams[filter_key] = value;\r\n          }\r\n        }\r\n        let promise = null;\r\n        if (method == \"post\") {\r\n          promise = axios.post(url, urlParams);\r\n        } else if (method == \"esri\") {\r\n          promise = esriRequest(url);\r\n        } else {\r\n          promise = axios.get(url, { params: urlParams });\r\n        }\r\n        (\r\n          (method != \"esri\" &&\r\n            promise.then(({ data: d }) => {\r\n              this.callbackResult(d);\r\n            })) ||\r\n          promise.then((d) => {\r\n            this.callbackResult(d);\r\n          })\r\n        ).catch(() => {\r\n          this.searhing = false;\r\n        });\r\n      }, 200);\r\n    }\r\n  };\r\n\r\n  callbackResult = (d) => {\r\n    const { postRequest } = this.props;\r\n    let currentData =\r\n      postRequest &&\r\n      postRequest(\r\n        this.props,\r\n        array_to_obj(\r\n          d.results ||\r\n            (this.isNonObjectsArray(_.isArray(d) ? d : [d])\r\n              ? (_.isArray(d) ? d : [d]).map((r) => ({ id: r }))\r\n              : _.isArray(d)\r\n              ? d\r\n              : [d])\r\n        )\r\n      );\r\n    this.setState(\r\n      {\r\n        dataSource: {\r\n          ...this.state.dataSource,\r\n          ...(currentData ||\r\n            array_to_obj(\r\n              d.results ||\r\n                (this.isNonObjectsArray(_.isArray(d) ? d : [d])\r\n                  ? (_.isArray(d) ? d : [d]).map((r) => ({ id: r }))\r\n                  : _.isArray(d)\r\n                  ? d\r\n                  : [d])\r\n            )),\r\n        },\r\n      },\r\n      () => {\r\n        this.searhing = false;\r\n      }\r\n    );\r\n  };\r\n  filterOption = (input, option) => {\r\n    const { label_value = \"name\", search_match = \"includes\" } = this.props;\r\n    const fun = get(funs, search_match);\r\n    return fun(String(get(option.props.data, label_value)), input);\r\n  };\r\n  render() {\r\n    const { dataSource } = this.state;\r\n    const { t, placeholder, owner, values } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <AutoComplete\r\n          dataSource={toArray(dataSource).map(this.renderOption)}\r\n          style={{ width: 200 }}\r\n          onSelect={this.onSelect}\r\n          label={t(placeholder)}\r\n          placeholder={t(placeholder)}\r\n          onSearch={this.onSearch}\r\n          onChange={this.handleChange.bind(this, \"text\")}\r\n          filterOption={this.filterOption}\r\n          value={this.state.text}\r\n          notFoundContent=\"لا توجد بيانات\"\r\n          optionLabelProp=\"value\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(withTranslation(\"labels\")(SearchComponent))\r\n);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAOA;AAAA;AAMA;AAEA;AACA;AACA;AAIA;AAAA;AAKA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AA9KA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAmJA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}
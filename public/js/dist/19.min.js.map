{"version":3,"file":"19.min.js","sources":["webpack:///./src/app/components/wizard/components/stepContent/sections/sectionTypes/wizardSummery/components/building/collapse.js","webpack:///./src/app/components/wizard/components/stepContent/sections/sectionTypes/wizardSummery/components/building/data.js","webpack:///./src/app/components/wizard/components/stepContent/sections/sectionTypes/wizardSummery/components/building/floor.js","webpack:///./src/app/components/wizard/components/stepContent/sections/sectionTypes/wizardSummery/components/building/index.js","webpack:///./src/app/helpers/components/show/checkbox/index.js","webpack:///./src/app/helpers/components/show/index.js","webpack:///./src/app/helpers/components/show/select/index.js","webpack:///./src/app/helpers/components/show/show.js","webpack:///./src/app/helpers/components/show/types.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport {translate} from 'react-i18next'\r\nimport {max, map, isObject, mergeWith, isNumber, mapValues, get} from 'lodash'\r\nimport Building from './data'\r\nimport {Collapse} from 'antd'\r\nimport {\r\n    convertToArabic,\r\n  } from \"../../../../../../../../inputs/fields/identify/Component/common/common_func\";\r\nimport ShowField from 'app/helpers/components/show'\r\n\r\nconst Panel = Collapse.Panel;\r\nconst img_fields = {\r\n    side_image: {\r\n        label: 'Side Image',\r\n        field: 'simpleUploader',\r\n        multiple: false\r\n    },\r\n    top_image: {\r\n        label: 'Top Image',\r\n        field: 'simpleUploader',\r\n        multiple: false\r\n    }\r\n}\r\nclass collapse extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            keys: ['0', 'total']\r\n        }\r\n    }\r\n    changeKeys = (keys)=>{\r\n        this.setState({keys})\r\n    }\r\n    mappingFields = (obj, build, staticKey)=>{\r\n        return mapValues(obj, (d, k)=>{\r\n            if(isObject(d)){\r\n                return {...this.mappingFields(d, build, staticKey), r_build: build.repeat}\r\n            }\r\n            if(!this.keys.includes(k)){\r\n                if(staticKey.includes(k)){\r\n                    return Number(d)    \r\n                }\r\n                return Number(d)*Number(build.repeat)\r\n            }\r\n            return d  \r\n        })\r\n    }\r\n    renderInfo = (field, key)=>{\r\n        const {buildingData} = this.props;\r\n        return <ShowField field={field} val={convertToArabic(get(buildingData, key))} key={key} />\r\n    }\r\n    keys = ['floors', 'height', 'flats', 'far', 'type', 'repeat', 'name', 'flat_name', 'flat_repeat', 'flat_use', 'main_id', 'use', 'surround']\r\n    staticKey = ['backward', 'forward', 'repeat', 'flat_area', 'fence', 'warch']\r\n    maxKeys = ['height','east','west','south','north']\r\n    obKeys = ['floors', \"surround\"]\r\n    render() {\r\n        const {title, pTitle, t, buildings} = this.props\r\n        // const lands = get(state, params.lands, {})\r\n        // const tot_area = sumBy(lands, d=>(d.attributes['PARCEL_AREA']))\r\n        const merged = buildings.map(build=>(mapValues(build, (d, k)=>{\r\n          if(!this.keys.includes(k)){\r\n            if(this.staticKey.includes(k)){\r\n                return Number(d)    \r\n            }\r\n            return Number(d)*Number(build.repeat)\r\n          }\r\n          if(isObject(d)){\r\n              return {...this.mappingFields(d, build, this.staticKey), r_build: build.repeat}\r\n          }\r\n          return d\r\n        })))\r\n        const totals = mergeWith({}, ...merged, (objVal, srcVal, key)=>{\r\n            if(!isObject(objVal)){\r\n                // console.log(key)\r\n                if(this.maxKeys.includes(key)){\r\n                    return max([objVal, srcVal])\r\n                }\r\n                return isNumber(objVal) ? (Number(objVal) + Number(srcVal)):srcVal\r\n            }\r\n            return {...objVal, ...srcVal}\r\n        })\r\n        console.log(\"tooootals\", totals)\r\n        return (\r\n            <>\r\n             <h4>{t(title)}</h4>\r\n                <Collapse\r\n                className='Collapse'\r\n                activeKey={this.state.keys}\r\n                onChange={this.changeKeys}\r\n                key={[...map(buildings, (section, key) => key), 'total']}\r\n                >\r\n                    <>\r\n                        {map(buildings, (data, key) =>\r\n                            <Panel key={key} header={convertToArabic(t(pTitle) + ` ${key+1}`)} forceRender={true}>\r\n                                <Building r_build={1} index={data.main_id || key} {...this.props} data={data} />\r\n                                {/* </Card> */}\r\n                            </Panel>\r\n                        )}\r\n                        <Panel key=\"total\" header={\"المجموع الكلي\"} forceRender={true}>\r\n                            <>\r\n                            <Building index={\"total\"} {...this.props} data={totals} />\r\n                            {/* </Card> */}\r\n                            {map(img_fields, this.renderInfo)}\r\n\r\n                            </>\r\n                        </Panel>\r\n                    </>\r\n                </Collapse>   \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withTranslation('labels')(collapse)","import React, { Component } from \"react\";\r\n// import {FloorFields} from 'app/helpers/modules/fields'\r\nimport { collapseField } from \"app/helpers/modules/imp_project/building\";\r\nimport { get, map, omit, flatMap, range } from \"lodash\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport ShowField from \"app/helpers/components/show\";\r\nimport Floor from \"./floor\";\r\nimport { convertToArabic } from \"../../../../../../../../inputs/fields/identify/Component/common/common_func\";\r\nclass showData extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.fields = omit(collapseField, [\"floors\", \"add_floor\"]);\r\n    this.floors = flatMap(props.data.floors, (d) =>\r\n      range(0, d.repeat).map((v) => ({\r\n        ...d,\r\n        main_id: `${d.main_id}.${v}`,\r\n        type: props.t(d.type) + (d.repeat > 1 ? ` ${v + 1}` : \"\"),\r\n      }))\r\n    );\r\n  }\r\n  renderInfo = (field, key) => {\r\n    const { data } = this.props;\r\n    return (\r\n      <ShowField\r\n        field={field}\r\n        val={convertToArabic(get(data, key))}\r\n        key={key}\r\n      />\r\n    );\r\n  };\r\n  renderFloor = () => {\r\n    return (\r\n      <Floor\r\n        r_build={this.props.r_build}\r\n        data={this.floors}\r\n        repeat={Number(this.props.data.repeat || 1)}\r\n      />\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        {map(this.fields, this.renderInfo)}\r\n        {this.renderFloor()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation(\"labels\")(showData);\r\n","import React, { Component } from 'react'\r\nimport {translate} from 'react-i18next'\r\nimport {get, mapValues, groupBy, sumBy} from 'lodash'\r\nimport ShowField from 'app/helpers/components/show'\r\n\r\nconst floorFields = {\r\n    field: 'list',\r\n    fields: {\r\n        type: {\r\n            head: \"Floor Type\"\r\n        },\r\n        area: {\r\n            head: 'Area'\r\n        },\r\n        trade_num: {\r\n            head: 'Trade Number'\r\n        },\r\n        trade_area: {\r\n            head: 'Trade Area'\r\n        },\r\n        house_num: {\r\n            head: 'House Number'\r\n        },\r\n        house_area: {\r\n            head: 'House Area'\r\n        },\r\n        mange_num: {\r\n            head: 'Manage Number'\r\n        },\r\n        mange_area: {\r\n            head: 'Manage Area'\r\n        },\r\n    }\r\n\r\n}\r\nclass floor extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.data = props.data.map(floor=>{\r\n            const r_build = Number(props.r_build || floor.r_build)\r\n            const grouping = mapValues(groupBy(mapValues(floor.flats, d=>({...d, flat_area: Number(d.flat_area)})), 'flat_use'), d=>({\r\n                area: r_build * sumBy(d, 'flat_area'),\r\n                number: d.length\r\n            }))\r\n            console.log('here', props.r_build, floor.r_build)\r\n            return {\r\n                type: floor.type,\r\n                area: floor.area,\r\n                id: floor.main_id,\r\n                trade_num: (r_build * get(grouping, 'Trade.number', 0)) || null ,\r\n                trade_area: (get(grouping, 'Trade.area', 0)) || null ,\r\n                house_num: (r_build * get(grouping, 'House.number', 0)) || null ,\r\n                house_area: (get(grouping, 'House.area', 0)) || null ,\r\n                mange_num: (r_build * get(grouping, 'Manage.number', 0)) || null ,\r\n                mange_area: (get(grouping, 'Manage.area', 0)) || null ,\r\n    \r\n            }\r\n        }).reduce((o, d)=>({...o, [d.id]: d}), {})\r\n    }\r\n    render() {\r\n        console.log(this.data)\r\n        return (\r\n            <ShowField field={floorFields} val={this.data} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default withTranslation('labels')(floor)\r\n","import React, { Component } from 'react'\r\nimport {translate} from 'react-i18next'\r\nimport Collapsing from './collapse';\r\nimport {get, toArray} from 'lodash'\r\nclass owner extends Component {\r\n    state = {\r\n        keys: []\r\n    }\r\n    BuildingProps = {\r\n        title: \"Buildings\",\r\n        pTitle: \"Building\"\r\n    }\r\n\r\n    render() {\r\n        const {buildingData} = this.props.mainObject.building\r\n        // console.log(this.props)\r\n        return (\r\n            <>\r\n                {get(buildingData, 'buildings', false) && <Collapsing buildings={toArray(buildingData.buildings)} {...this.BuildingProps} buildingData={buildingData} />}\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default withTranslation('labels')(owner)","import {lazy} from 'react'\r\nexport const boolean = lazy(()=>import('./single'));\r\n// export const multiChecks = lazy(()=>import('./multi'));\r\n// export const op = lazy(()=>import('./op'));","import React, { Component } from \"react\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport applyFilters from \"main_helpers/functions/filters\";\r\nimport Show from \"./show\";\r\nclass ShowField extends Component {\r\n  componentDidMount() {\r\n    const { values } = this.props;\r\n    // console.log(values[\"image\"].includes(\"gisapi\"))\r\n    // values.filter()\r\n  }\r\n  render() {\r\n    const { field, t, values, val } = this.props;\r\n    let label = field.label;\r\n    console.log(\"d\", this.props);\r\n    if (!val) {\r\n      // values[\"image\"]=values[\"image\"].replace(\"gisapi\",\"\")\r\n    }\r\n    if (field.label_fun && !field.label) {\r\n      label = field.label_fun(this.props);\r\n    }\r\n\r\n    // console.log(this.props.values[\"image\"]);\r\n    // console.log(FComponent, field.field, field);\r\n    label = field.label_state\r\n      ? applyFilters({\r\n          path: field.label_state,\r\n        })\r\n      : label;\r\n\r\n    // if (field.init_data) {\r\n    //   field.init_data(this.props);\r\n    // }\r\n\r\n    return (\r\n      <div className=\"uu\">\r\n        {(!field.hideLabel && (\r\n          <div className=\"table-div\">\r\n            <div>\r\n              <label style={{ whiteSpace: \"nowrap\" }}>{t(label)}</label>\r\n            </div>\r\n\r\n            <div>\r\n              <Show {...this.props} />\r\n            </div>\r\n          </div>\r\n        )) || (\r\n          <div>\r\n            <Show {...this.props} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation(\"labels\")(ShowField);\r\n","import {lazy} from 'react';\r\nexport const multiSelect = lazy(()=>import('./multiSelect'));\r\nexport const select = lazy(()=>import('./main'));\r\n","import React, { Component, Suspense } from \"react\";\r\nimport * as Fields from \"./types\";\r\nimport { get } from \"lodash\";\r\n\r\nexport default class ShowField extends Component {\r\n  render() {\r\n    const { field } = this.props;\r\n    const FComponent = get(Fields, (field.field || field), Fields.label);\r\n    console.log(this.props, FComponent);\r\n    return (\r\n      <Suspense fallback={<></>}>\r\n        <FComponent {...this.props} ShowField={ShowField} />\r\n      </Suspense>\r\n    );\r\n  }\r\n}\r\n","import { lazy } from \"react\";\r\nexport const fileUploader = lazy(() => import(\"./fileUploader\"));\r\nexport const simpleUploader = lazy(() => import(\"./fileUploader/simple\"));\r\n// export const hijriDatePicker = lazy(()=>import('./hijriDatePicker'));\r\nexport const radio = lazy(() => import(\"./radio\"));\r\nexport const singleSwitch = lazy(() => import(\"./switch\"));\r\n// export const timePicker = lazy(()=>import('./timepicker'));\r\n// export const datePicker = lazy(()=>import('./datePicker'));\r\n// export const slider = lazy(()=>import('./slider'));\r\n// export const mentions = lazy(()=>import('./mention'));\r\nexport const label = lazy(() => import(\"./label\"));\r\n// export const autoValue = lazy(()=>import('./autoValue'));\r\n// export const address = lazy(()=>import('./address'));\r\n// export const tableList = lazy(()=>import('./list/tableList'));\r\nexport const list = lazy(() => import(\"./list/table\"));\r\nexport const simpleModal = lazy(() => import(\"./simpleModal\"));\r\nexport const primaryPricing = lazy(() => import(\"../../../../app/components/inputs/fields/property_removal_primarypricing\"));\r\nexport const propertyRemovalIdentify = lazy(() => import ('../../../../app/components/inputs/fields/identify/Component/propertyRemovalIdentifyComponnent'));\r\n// export const Collapse = lazy(()=>import('./list/collapse'));\r\n// export const cardList = lazy(()=>import('./list/cardList'));\r\n// export const multiTableList = lazy(()=>import('./list/multiTableList'));\r\n// export const gistTable = lazy(()=>import('./list/tableAdd/gisTableAdd'));\r\n// export const gistTable2 = lazy(()=>import('./list/hob'));\r\n// export const textArea = lazy(()=>import('./textArea'));\r\n// export const table = lazy(()=>import('./table'));\r\n export const button = lazy(()=>import('../../../../app/components/inputs/fields/button'));\r\n// export const AdvancedTable = lazy(()=>import('./advanced_table'))\r\n// export const identifyWizard = lazy(()=>import('./identifyWizard'))\r\n// export * from './identify';\r\n// export * from './identify'\r\nexport * from \"./select\";\r\nexport * from \"./checkbox\";\r\n// export * from './calculator'\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AA3BA;AACA;AACA;AACA;AA0BA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAUA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjHA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAWA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAGA;AA3BA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAoBA;AACA;AAMA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAcA;AACA;AAEA;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}
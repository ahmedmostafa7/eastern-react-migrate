{"version":3,"file":"74.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/krokiIdentifyComponnent/Helpers.js","webpack:///./src/app/components/inputs/fields/identify/Component/krokiIdentifyComponnent/index.js"],"sourcesContent":["\r\nimport { loadModules } from 'esri-loader';\r\nimport{mapUrl}from\"../mapviewer/config/map\"\r\n\r\nconst options = {\r\n    url: 'https://js.arcgis.com/3.13'\r\n};\r\n\r\nexport const selectDis=(e)=>{\r\nvar a=[];\r\n\r\ne.forEach(el => {\r\n    el.features.forEach(element=>{\r\n        if(!a.find((t=>t.attributes.PARCEL_SPATIAL_ID==element.attributes.PARCEL_SPATIAL_ID))){\r\n            a.push(element)\r\n        }\r\n    })\r\n});\r\nreturn a;\r\n}\r\n\r\nexport const DataQuery=(layerNum,QueryOptions,CallBack)=>{\r\n    loadModules([\"esri/symbols/SimpleLineSymbol\",\"esri/Color\",\"esri/layers/FeatureLayer\",\"esri/tasks/RelationshipQuery\",\"esri/tasks/QueryTask\",\"esri/tasks/query\",\"esri/request\",\"esri/geometry/Polygon\",\"esri/symbols/SimpleFillSymbol\",\"esri/graphic\"], options)\r\n    .then(([SimpleLineSymbol,Color,FeatureLayer,RQuery,QueryTask,Query,request,Polygon,SimpleFillSymbol,Graphic]) => {\r\n\r\n     var query = new Query()\r\n     var qt = new QueryTask(mapUrl+`/${layerNum}`)\r\n    QueryOptions.forEach(e=>{\r\n        query[e.name]=e.value\r\n    })\r\n     qt.execute(query,CallBack,(res)=>{console.log(res)})\r\n    })\r\n}\r\nexport const queryOption=(where,geo,outfields)=>{\r\n       return [{name:\"where\",value:where},\r\n       {name:\"returnGeometry\",value:geo},\r\n       {name:\"outFields\",value:outfields}\r\n      ]\r\n}\r\nexport const querySetting=(num,where,geo,outfields, url)=>{\r\n    \r\n    \r\n    return {\r\n        url:(url || mapUrl)+\"/\"+num,\r\n        where,\r\n        returnGeometry:geo,\r\n        outFields:outfields\r\n}\r\n\r\n}\r\nexport const DataReqest=(url,callBack)=>{\r\n    loadModules([\"esri/request\"], options)\r\n    .then(([request]) => {\r\n        request({\r\n            url: url,\r\n            content: {f:\"json\"},\r\n            handleAs: \"json\",\r\n            callbackParamName:\"callback\"\r\n        }).then(callBack);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport { esriRequest } from \"../common/esri_request\";\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  addParcelNo,\r\n  convertToArabic,\r\n  convertToEnglish,\r\n  drawLength,\r\n  map_object,\r\n  checkParcelAdjacents,\r\n  localizeNumber\r\n} from \"../common/common_func\";\r\n\r\nimport { geometryServiceUrl, mapUrl } from \"../mapviewer/config/map\";\r\nimport { Select, Button, Form, message } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nimport { getParcels, onBlockChange, onLandParcelChange, onMunChange, onPlaneChange, onSearch, onSubNameChange, onSubTypeChange } from \"../common\";\r\nvar uniqid = require(\"uniqid\");\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n} from \"lodash\";\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport axios from \"axios\";\r\nconst { Option } = Select;\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"lands\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\n\r\nclass krokiIdentifyComponnent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.PlanNum = [];\r\n    this.planId = null;\r\n    this.parcelTs = [];\r\n    this.selectedLandsT =\r\n      (props?.input?.value?.temp?.parcelDis && [\r\n        { features: props?.input?.value?.temp?.parcelDis },\r\n      ]) ||\r\n      [];\r\n    this.selectedLands = [];\r\n    this.selectionMode = false;\r\n\r\n    this.parcel_fields_headers = [\"رقم الأرض\", \"المساحة (م2)\", \"رمز الأستخدام\"];\r\n    this.parcel_fields = [\r\n      { name: \"PARCEL_PLAN_NO\", editable: false },\r\n      { name: \"PARCEL_AREA\", editable: true },\r\n      { name: \"USING_SYMBOL\", editable: false },\r\n    ];\r\n    this.parcelDataFields = {\r\n      parcel_type: {\r\n        label: \"عبارة عن\",\r\n        placeholder: \"من فضلك اخل نوع الأرض\",\r\n        type: \"input\",\r\n        field: \"select\",\r\n        name: \"parcel_type\",\r\n        data: [\r\n          { label: \"أرض فضاء\", value: \"أرض فضاء\" },\r\n          { label: \"مبنى سكني\", value: \"مبنى سكني\" },\r\n          { label: \"ورشة\", value: \"ورشة\" },\r\n          { label: \"أخرى\", value: \"أخرى\" },\r\n        ],\r\n        required: true,\r\n      },\r\n      other: {\r\n        label: \"أخرى\",\r\n        placeholder: \"من فضلك ادخل وصف أخرى\",\r\n        field: \"text\",\r\n        type: \"input\",\r\n        name: \"other\",\r\n        maxLength: 200,\r\n        required: true,\r\n        permission: {\r\n          // show_match_value: { parcel_type: \"أخرى\" },\r\n          show_values_equal_list: [\r\n            {\r\n              key: \"parcel_type\",\r\n              value: \"أخرى\",\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      north_length: {\r\n        label: \"طول الحد الشمالي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الشمالي (م)\",\r\n        type: \"number\",\r\n        name: \"north_length\",\r\n        required: true,\r\n      },\r\n      north_desc: {\r\n        label: \"وصف الحد الشمالي\",\r\n        placeholder: \"من فضلك ادخل وصف الحد الشمالي\",\r\n        type: \"text\",\r\n        name: \"north_desc\",\r\n        maxLength: 200,\r\n        required: true,\r\n      },\r\n      south_length: {\r\n        label: \"طول الحد الجنوبي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الجنوبي (م)\",\r\n        type: \"number\",\r\n        name: \"south_length\",\r\n        required: true,\r\n      },\r\n      south_desc: {\r\n        label: \"وصف الحد الجنوبي\",\r\n        placeholder: \"من فضلك ادخل وصف الحد الجنوبي\",\r\n        type: \"text\",\r\n        name: \"south_desc\",\r\n        maxLength: 200,\r\n        required: true,\r\n      },\r\n      east_length: {\r\n        label: \"طول الحد الشرقي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الشرقي (م)\",\r\n        type: \"number\",\r\n        name: \"east_length\",\r\n        required: true,\r\n      },\r\n      east_desc: {\r\n        label: \"وصف الحد الشرقي\",\r\n        placeholder: \"من فضلك ادخل وصف الحد الشرقي\",\r\n        type: \"text\",\r\n        name: \"east_desc\",\r\n        maxLength: 200,\r\n        required: true,\r\n      },\r\n      west_length: {\r\n        label: \"طول الحد الغربي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الغربي (م)\",\r\n        type: \"number\",\r\n        name: \"west_length\",\r\n        required: true,\r\n      },\r\n      west_desc: {\r\n        label: \"وصف الحد الغربي\",\r\n        placeholder: \"من فضلك ادخل وصف الحد الغربي\",\r\n        type: \"text\",\r\n        name: \"west_desc\",\r\n        maxLength: 200,\r\n        required: true,\r\n      },\r\n    };\r\n\r\n    map_object(props.input && props.input.value.parcels);\r\n    this.state = {\r\n      mapLoaded: false,\r\n      munval:\r\n        (props.input && props.input.value.temp && props.input.value.temp.mun) ||\r\n        undefined,\r\n      planeval:\r\n      this.props.mainObject?.landData?.landData?.PLAN_NO ||\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.plan) ||\r\n        undefined,\r\n        subTypeval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.subTypeval) ||\r\n        undefined,\r\n      subNameval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.subNameval) ||\r\n        undefined,\r\n      blockval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.blockval) ||\r\n        undefined,\r\n      selectedLands: (props.input && props.input.value.parcels) || [],\r\n      parcelval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.parcelval) ||\r\n        undefined,\r\n      \r\n      conditions: (props.input && props.input.value.conditions) || undefined,\r\n      planSersh: null,\r\n      blockNum: [],\r\n      subDivNames: [],\r\n      subDivType: [],\r\n      MunicipalityNames: [],\r\n      PlanNum: [],\r\n      parcelNum: this.props?.input?.value?.temp?.parcelDis || [],\r\n      parcelNumS: [],\r\n      parcelId: null,\r\n      mapExtend: null,\r\n      parcelSearch: null,\r\n      poly: null,\r\n      //parcelSideLengths: [],\r\n      domainLists: props.input.value.domainLists || {},\r\n      parcelData: props.input.value.parcelData || {},\r\n      landsData: {},\r\n    };\r\n\r\n    this.isloaded = true;\r\n  }\r\n  LayerID = [];\r\n\r\n  UpdateSubmissionDataObject = () => {\r\n    const { parcelData } = this.state;\r\n    var fields = { ...parcelData.fields };\r\n    Object.keys(fields).map((key, index) => {\r\n      parcelData[key] = fields[key].value;\r\n    });\r\n    this.state.landsData = {\r\n      ...this.props.input.value,\r\n      parcels: [...this.state.selectedLands],\r\n      parcelData: { ...parcelData },\r\n      domainLists: { ...this.state.domainLists },\r\n      // lists: {\r\n      //   subDivNames: [...this.state.subDivNames],\r\n      //   MunicipalityNames: [...this.state.MunicipalityNames],\r\n      //   subDivType: [...this.state.subDivType],\r\n      //   PlanNum: [...this.state.PlanNum],\r\n      //   blockNum: [...this.state.blockNum],\r\n      // },\r\n    };\r\n    // this.props.input.onChange({ ...this.state.landsData });\r\n    this.setState({ parcelData: parcelData }, () => {\r\n      this.setToStore();\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.filterUrl = mapUrl;\r\n    getInfo().then((res) => {\r\n      this.LayerID = res;\r\n      getParcels(this, null, \"\", {returnDistinctValues: true}, [\"MUNICIPALITY_NAME\"]).then((features) => {\r\n        \r\n        getFeatureDomainName(features, this.LayerID.Landbase_Parcel).then(\r\n          (features) => {\r\n            \r\n            this.setState(\r\n              {\r\n                MunicipalityNames: features.filter(r => r.attributes.MUNICIPALITY_NAME).map((r) => {\r\n                    \r\n                    return {\r\n                      code: r.attributes.MUNICIPALITY_NAME_Code,\r\n                      name: r.attributes.MUNICIPALITY_NAME,\r\n                    };\r\n                  }),\r\n                allParcels: features,\r\n              },\r\n          () => {\r\n            \r\n            this.loadLists = true;\r\n            if (this.state.munval) {\r\n              onMunChange(this, this.state.munval, () => {\r\n                onPlaneChange(this, this.state.planeval, () => {\r\n                  onSubTypeChange(this, this.state.subTypeval, () => {\r\n                    onSubNameChange(this, this.state.subNameval, () => {\r\n                      onBlockChange(this, this.state.blockval, () => {\r\n                        onLandParcelChange(\r\n                          this, \r\n                          this.state.parcelval,\r\n                          () => {}\r\n                        );\r\n                      });\r\n                    });\r\n                  });\r\n                });\r\n              });\r\n            }\r\n            this.loadLists = false;\r\n          });\r\n        }\r\n      );\r\n    });\r\n      esriRequest(mapUrl + \"/\" + this.LayerID.Subdivision).then((response) => {\r\n        this.setState({ subDivType: response.fields[7].domain.codedValues });\r\n      });\r\n    \r\n  });\r\n    this.isloaded = false;\r\n    // if (\r\n    //   this.props.mainObject &&\r\n    //   this.props.mainObject.landData &&\r\n    //   this.isloaded\r\n    // ) {\r\n      \r\n    //   this.UpdateSubmissionDataObject();\r\n    // }\r\n  }\r\n\r\n//   onMunChange = (e, callback) => {\r\n//     //\r\n//     clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n//     if (!callback) {\r\n//     this.setState({\r\n//       munval: e,\r\n//       planeval: undefined,\r\n//       subTypeval: undefined,\r\n//       subNameval: undefined,\r\n//       blockval: undefined,\r\n//       parcelval: undefined,\r\n//       selectedLands: [],\r\n//       selectedLandsT: [],\r\n//       PlanNum: [],\r\n//       blockNum: [],\r\n//       subDivNames: [],\r\n//       // subDivType: [],\r\n//       parcelId: null,\r\n//       parcelNum: [],\r\n//       parcelData: {},\r\n//     });\r\n//   }\r\n//     this.planId = null;\r\n// if (e) {\r\n//     queryTask({\r\n//       ...querySetting(\r\n//         this.LayerID.Municipality_Boundary,\r\n//         `MUNICIPALITY_NAME='${e}'`,\r\n//         true,\r\n//         [\"MUNICIPALITY_NAME\"]\r\n//       ),\r\n//       callbackResult: (res) => {\r\n//         this.pol = res.features[0];\r\n//         highlightFeature(res.features[0], this.map, {\r\n//           layerName: \"SelectGraphicLayer\",\r\n//           isZoom: true,\r\n//           isHiglightSymbol: true,\r\n//           highlighColor: [0, 0, 0, 0.25],\r\n//         });\r\n//       },\r\n//     });\r\n//     queryTask({\r\n//       ...querySetting(\r\n//         this.LayerID.Plan_Data,\r\n//         `MUNICIPALITY_NAME='${e}'`,\r\n//         false,\r\n//         [\"PLAN_SPATIAL_ID\", \"PLAN_NO\"]\r\n//       ),\r\n//       callbackResult: (res) => {\r\n//         this.setState({\r\n//           PlanNum: res.features.map((e, i) => {\r\n//             return {\r\n//               ...e,\r\n//               i: uniqid(),\r\n//             };\r\n//           }),\r\n//         });\r\n//       },\r\n//     });\r\n//   }\r\n//     this.resetGraphics();\r\n\r\n//     if (callback) {\r\n//       callback();\r\n//     }\r\n//   };\r\n\r\n  resetFields = () => {\r\n    this.props.onChange([]);\r\n    this.setState({ selectedLands: [], selectedLandsT: [] });\r\n  };\r\n\r\n  // onPlaneChange = (f, callback) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n\r\n  //   var planSpatialId = this.state.PlanNum.filter((m) => m.i == f)?.[0]?.attributes\r\n  //     ?.PLAN_SPATIAL_ID;\r\n  //     if (!callback) {\r\n  //   this.setState({\r\n  //     plan_no: this.state.PlanNum.filter((m) => m.i == f)?.[0]?.attributes?.PLAN_NO,\r\n  //     planeval: f,\r\n  //     subTypeval: undefined,\r\n  //     subNameval: undefined,\r\n  //     blockval: undefined,\r\n  //     parcelval: undefined,\r\n  //     blockNum: [],\r\n  //     subDivNames: [],\r\n  //     //subDivType: [],\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //     parcelData: {},\r\n  //   });\r\n  // }\r\n\r\n  // if (f) {\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Plan_Data,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       true,\r\n  //       [\"MUNICIPALITY_NAME\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //       this.planId = planSpatialId;\r\n  //     },\r\n  //   });\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Survey_Block,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       false,\r\n  //       [\"BLOCK_NO\", \"BLOCK_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({ blockNum: res.features });\r\n  //     },\r\n  //   });\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Landbase_Parcel,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       false,\r\n  //       [\"*\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     },\r\n  //   });\r\n  // }\r\n  //   this.resetGraphics();\r\n  //   if (callback) {\r\n  //     callback();\r\n  //   }\r\n  // };\r\n\r\n  resetGraphics = () => {\r\n    this.state[\"selectedLands\"] = [];\r\n    this.state[\"selectedLandsT\"] = [];\r\n    this.parcelData = {};\r\n    this.DrawGraph();\r\n  };\r\n  // onSubTypeChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   this.setState({\r\n  //     subType_name: this.state.subDivType.filter((m) => m.code == e)[0].name,\r\n  //     subTypeval: e,\r\n  //     subNameval: undefined,\r\n  //     blockval: undefined,\r\n  //     parcelval: undefined,\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Subdivision,\r\n  //       `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${this.planId}`,\r\n  //       false,\r\n  //       [\"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({ subDivNames: res.features });\r\n  //     },\r\n  //   });\r\n  // };\r\n//   onSubTypeChange = (e, callback) => {\r\n//     this.onPlaneChange(this.state.planeval);\r\n//     if (!callback) {\r\n//     this.setState({\r\n//       subType_name: this.state.subDivType.filter((m) => m.code == e)[0].name,\r\n//       subTypeval: e,\r\n//     });\r\n//   }\r\n//   if (e) {\r\n//     queryTask({\r\n//       ...querySetting(\r\n//         this.LayerID.Subdivision,\r\n//         `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${this.planId}`,\r\n//         false,\r\n//         [\"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_SPATIAL_ID\"]\r\n//       ),\r\n//       callbackResult: (res) => {\r\n//         this.setState({ subDivNames: res.features });\r\n//       },\r\n//     });\r\n//   }\r\n\r\n//   if (callback) {\r\n//     callback();\r\n//   }\r\n//     // this.onSubNameChange(this.state.subNameval);\r\n//     // this.DrawGraph();\r\n//   };\r\n\r\n//   onSubNameChange = (e, callback) => {\r\n//     clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n// if (!callback) {\r\n//     this.setState({\r\n//       subName_name: this.state.subDivNames.filter(\r\n//         (m) => m.attributes.SUBDIVISION_SPATIAL_ID == e\r\n//       )?.[0]?.attributes?.SUBDIVISION_DESCRIPTION,\r\n//       subNameval: e,\r\n//       blockval: undefined,\r\n//       parcelval: undefined,\r\n//       parcelNum: [],\r\n//       parcelId: null,\r\n//     });\r\n//   }\r\n\r\n//   if (e){\r\n//     queryTask({\r\n//       ...querySetting(\r\n//         this.LayerID.Subdivision,\r\n//         `SUBDIVISION_SPATIAL_ID=${e}`,\r\n//         true,\r\n//         [\"SUBDIVISION_SPATIAL_ID\"]\r\n//       ),\r\n//       callbackResult: (res) => {\r\n//         this.pol = res.features[0];\r\n//         highlightFeature(res.features[0], this.map, {\r\n//           layerName: \"SelectGraphicLayer\",\r\n//           isZoom: true,\r\n//           isHiglightSymbol: true,\r\n//           highlighColor: [0, 0, 0, 0.25],\r\n//         });\r\n//       },\r\n//     });\r\n//     queryTask({\r\n//       ...querySetting(\r\n//         this.LayerID.Landbase_Parcel,\r\n//         `SUBDIVISION_SPATIAL_ID=${e}`,\r\n//         false,\r\n//         [\"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"]\r\n//       ),\r\n//       callbackResult: (res) => {\r\n//         this.setState({\r\n//           parcelSearch: null,\r\n//           parcelNum: res.features.map((e, i) => {\r\n//             return {\r\n//               ...e,\r\n//               i,\r\n//             };\r\n//           }),\r\n//         });\r\n//       },\r\n//     });\r\n//   }\r\n//     this.resetGraphics();\r\n//     if (callback) {\r\n//       callback();\r\n//     }\r\n//   };\r\n\r\n//   onBlockChange = (e,callback) => {\r\n//     clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n//     if (!callback) {\r\n//     this.setState({\r\n//       block_no: this.state.blockNum.filter(\r\n//         (m) => m.attributes.BLOCK_SPATIAL_ID == e\r\n//       )?.[0]?.attributes?.BLOCK_NO,\r\n//       blockval: e,\r\n//       parcelval: undefined,\r\n//       parcelId: null,\r\n//       parcelNum: [],\r\n//     });\r\n//   }\r\n\r\n//   if (e) {\r\n\r\n//     queryTask({\r\n//       ...querySetting(\r\n//         this.LayerID.Survey_Block,\r\n//         `BLOCK_SPATIAL_ID=${e}`,\r\n//         true,\r\n//         [\"BLOCK_SPATIAL_ID\"]\r\n//       ),\r\n//       callbackResult: (res) => {\r\n//         this.pol = res.features[0];\r\n//         highlightFeature(res.features[0], this.map, {\r\n//           layerName: \"SelectGraphicLayer\",\r\n//           isZoom: true,\r\n//           isHiglightSymbol: true,\r\n//           highlighColor: [0, 0, 0, 0.25],\r\n//         });\r\n//       },\r\n//     });\r\n\r\n//     queryTask({\r\n//       ...querySetting(\r\n//         this.LayerID.Landbase_Parcel,\r\n//         `BLOCK_SPATIAL_ID=${e}`,\r\n//         false,\r\n//         [\"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"]\r\n//       ),\r\n//       callbackResult: (res) => {\r\n//         this.setState({\r\n//           parcelSearch: null,\r\n//           parcelNum: res.features.map((e, i) => {\r\n//             return {\r\n//               ...e,\r\n//               i,\r\n//             };\r\n//           }),\r\n//         });\r\n//       },\r\n//     });\r\n//   }\r\n//     this.resetGraphics();\r\n//     if (callback) {\r\n//       callback();\r\n//     }\r\n//   };\r\n\r\n//   onLandParcelChange = (f,callback) => {\r\n//     if (!this.state.selectedLands.length) {\r\n//       var e = this.state.parcelNum.filter((m) => m.i === f)?.[0]?.attributes\r\n//         ?.PARCEL_SPATIAL_ID;\r\n//         if (!callback) {\r\n//       this.setState({ parcelId: e, parcelval: f });\r\n//         }\r\n//       this.RolBackPol = this.pol;\r\n//       this.RolBackParcelNum = this.state.parcelNum;\r\n// if (f) {\r\n//       queryTask({\r\n//         ...querySetting(\r\n//           this.LayerID.Landbase_Parcel,\r\n//           `PARCEL_SPATIAL_ID='${e}'`,\r\n//           true,\r\n//           [\"PARCEL_SPATIAL_ID\"]\r\n//         ),\r\n//         callbackResult: (res) => {\r\n//           this.selectedLandsT = [];\r\n//           highlightFeature(res.features[0], this.map, {\r\n//             layerName: \"SelectGraphicLayer\",\r\n//             strokeColor: [0, 0, 0],\r\n//             highlightWidth: 3,\r\n//             isHighlighPolygonBorder: true,\r\n//             isZoom: true,\r\n//             zoomFactor: 25,\r\n//           });\r\n//         },\r\n//       });\r\n//     }\r\n//     } else {\r\n//       // var g = this.state.parcelNum.filter((m) => m.i == f)[0];\r\n//       // this.setState({ parcelId: g.attributes.PARCEL_SPATIAL_ID });\r\n//       // highlightFeature(g, this.map, {\r\n//       //   layerName: \"SelectGraphicLayer\",\r\n//       //   strokeColor: [0, 0, 0],\r\n//       //   isHighlighPolygonBorder: true,\r\n//       //   highlightWidth: 3,\r\n//       // });\r\n//       // this.setState({ parcelval: f });\r\n\r\n//       var prevParcelId = this.state.parcelId;\r\n//       var g = this.state.parcelNum.filter((m) => m.i == f)[0];\r\n//       this.state[\"parcelId\"] = g.attributes.PARCEL_SPATIAL_ID;\r\n//       this.LandHoverOff(\r\n//         this.map\r\n//           .getLayer(\"SelectGraphicLayer\")\r\n//           .graphics.find(\r\n//             (prevGraphic) =>\r\n//               prevGraphic.attributes.PARCEL_SPATIAL_ID == prevParcelId\r\n//           )\r\n//       );\r\n\r\n//       this.setState({ parcelval: f });\r\n//     }\r\n//     if (callback) {\r\n//       callback();\r\n//     }\r\n//   };\r\n\r\n  addParcelToSelect = (feature) => {\r\n    return new Promise((resolve, reject) => {\r\n      // if (this.state.selectedLands && this.state.selectedLands.length > 0) {\r\n      //   this.setState({\r\n      //     parcelId:\r\n      //       this.state.selectedLands[this.state.selectedLands.length - 1].id,\r\n      //   });\r\n\r\n      intersectQueryTask({\r\n        outFields: [\r\n          \"OBJECTID\",\r\n          \"MUNICIPALITY_NAME\",\r\n          \"PARCEL_AREA\",\r\n          \"PARCEL_LAT_COORD\",\r\n          \"PARCEL_LONG_COORD\",\r\n          \"PARCEL_MAIN_LUSE\",\r\n          \"PLAN_NO\",\r\n          \"PARCEL_PLAN_NO\",\r\n          \"USING_SYMBOL\",\r\n          \"PARCEL_SPATIAL_ID\",\r\n        ],\r\n        geometry: feature.geometry,\r\n        url: mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n        where: \"PARCEL_PLAN_NO is not null\",\r\n        callbackResult: (res) => {\r\n          getFeatureDomainName(res.features, this.LayerID.Landbase_Parcel).then(\r\n            (r) => {\r\n              res.features = res.features.map((e, i) => {\r\n                return {\r\n                  ...e,\r\n                  i: uniqid(),\r\n                };\r\n              });\r\n              return resolve(res);\r\n            }\r\n          );\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  DrawGraph = () => {\r\n    if (!this.state.selectedLands.length) {\r\n      this.map.graphics.clear();\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      //this.onSubNameChange(this.state.subNameval);\r\n      this.setToStore(null);\r\n    } else {\r\n      this.parcelDis = selectDis(this.selectedLandsT);\r\n      console.log(this.parcelDis);\r\n      this.setAdjacentToStore(this.parcelDis);\r\n      this.setState({ parcelNum: this.parcelDis });\r\n\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      //clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      //drawLength(this.map, this.state.selectedLands);\r\n      // highlightFeature(\r\n      //   this.parcelDis.filter(\r\n      //     (element) =>\r\n      //       !this.state.selectedLands.find(\r\n      //         (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n      //       )\r\n      //   ),\r\n      //   this.map,\r\n      //   {\r\n      //     layerName: \"SelectLandsGraphicLayer\",\r\n      //     noclear: false,\r\n      //     isZoom: false,\r\n      //     isHiglightSymbol: true,\r\n      //     highlighColor: [0, 255, 0, 0.5],\r\n      //     zoomFactor: 25,\r\n      //   }\r\n      // );\r\n\r\n      this.parcelDis\r\n        .filter(\r\n          (element) =>\r\n            !this.state.selectedLands.find(\r\n              (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n            )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"PacrelNoGraphicLayer\",\r\n            20,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n\r\n      highlightFeature(\r\n        this.parcelDis.filter((element) =>\r\n          this.state.selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectGraphicLayer\",\r\n          noclear: true,\r\n          attr: { isParcel: true },\r\n          isZoom: true,\r\n          isHighlighPolygonBorder: true,\r\n          zoomFactor: 25,\r\n        }\r\n      );\r\n\r\n      this.parcelDis\r\n        .filter((element) =>\r\n          this.state.selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"PacrelNoGraphicLayer\",\r\n            20,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  replaceAll(str, find, replace) {\r\n    return str.replace(new RegExp(find, \"g\"), replace);\r\n  }\r\n\r\n  mapLoaded = (map) => {\r\n    this.map = map;\r\n    this.props.setMap(map);\r\n    if (\r\n      this.props.input &&\r\n      this.props.input.value &&\r\n      this.props.input.value.parcels\r\n    ) {\r\n      highlightFeature(this.props.input.value.parcels, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: true,\r\n        attr: { isParcel: true },\r\n        isHighlighPolygonBorder: true,\r\n        zoomFactor: 25,\r\n      });\r\n\r\n      setTimeout(() => {\r\n        this.props.input.value.parcels.forEach((f) => {\r\n          f.geometry = new esri.geometry.Polygon(f.geometry);\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"PacrelNoGraphicLayer\",\r\n            20,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n\r\n        //drawLength(this.map, this.props.input.value.parcels);\r\n        if (this.props.input.value?.temp?.parcelDis?.length) {\r\n          // highlightFeature(\r\n          //   this.props.input.value?.temp?.parcelDis.filter(\r\n          //     (element) =>\r\n          //       !this.props.input.value.parcels.find(\r\n          //         (i) =>\r\n          //           i.attributes.PARCEL_SPATIAL_ID ===\r\n          //           element.attributes.PARCEL_SPATIAL_ID\r\n          //       )\r\n          //   ),\r\n          //   this.map,\r\n          //   {\r\n          //     layerName: \"SelectLandsGraphicLayer\",\r\n          //     noclear: false,\r\n          //     isZoom: false,\r\n          //     isHiglightSymbol: true,\r\n          //     highlighColor: [0, 255, 0, 0.5],\r\n          //     zoomFactor: 25,\r\n          //   }\r\n          // );\r\n\r\n          this.props.input.value?.temp?.parcelDis\r\n            ?.filter(\r\n              (element) =>\r\n                !this.props.input.value.parcels.find(\r\n                  (i) =>\r\n                    i.attributes.PARCEL_SPATIAL_ID ===\r\n                    element.attributes.PARCEL_SPATIAL_ID\r\n                )\r\n            )\r\n            ?.forEach((f) => {\r\n              if (!f.geometry.getExtent) {\r\n                f.geometry = new esri.geometry.Polygon(f.geometry);\r\n              }\r\n              addParcelNo(\r\n                f.geometry.getExtent().getCenter(),\r\n                this.map,\r\n                f.attributes.PARCEL_PLAN_NO + \"\",\r\n                \"PacrelNoGraphicLayer\",\r\n                20,\r\n                [0, 0, 0]\r\n              );\r\n            });\r\n\r\n          console.log(this.props.input.value?.temp?.parcelDis);\r\n          this.setState({\r\n            parcelSearch: null,\r\n            parcelNum: this.props.input.value?.temp?.parcelDis,\r\n          });\r\n        } else if (this.props.input?.value?.parcels?.length) {\r\n          checkParcelAdjacents(this.props.input?.value?.parcels);\r\n        }\r\n      }, 500);\r\n\r\n      const {\r\n        input: { value },\r\n      } = this.props;\r\n      this.state.landsData = {\r\n        ...value,\r\n        conditions: this.state.conditions,\r\n        temp: {\r\n          //map: this.map,\r\n          mun: this.props.input.value.temp.mun,\r\n          plan: this.props.mainObject?.landData?.landData?.PLAN_NO || this.props.input.value.temp.plan,\r\n          subTypeval: this.props.input.value.temp.subTypeval,\r\n          subNameval: this.props.input.value.temp.subNameval,\r\n          parcelDis: this.props.input.value?.temp?.parcelDis,\r\n          blockval: this.props.input.value.temp.blockval,\r\n          parcelval: this.props.input.value.temp.parcelval,\r\n          subname: this.props.input.value.temp.subname,\r\n          block_no: this.props.input.value.temp.block_no,\r\n        },\r\n        parcels: [...this.props.input.value.parcels],\r\n        parcelData: { ...this.props.input.value.parcelData },\r\n        domainLists: { ...this.state.domainLists },\r\n        // lists: {\r\n        //   firstParcels: [...this.state.parcelNum],\r\n        //   subDivNames: [...this.state.subDivNames],\r\n        //   MunicipalityNames: [...this.state.MunicipalityNames],\r\n        //   subDivType: [...this.state.subDivType],\r\n        //   PlanNum: [...this.state.PlanNum],\r\n        //   blockNum: [...this.state.blockNum],\r\n        // },\r\n      };\r\n      this.props.input.onChange({ ...this.state.landsData });\r\n    }\r\n    this.setState({ mapLoaded: true });\r\n\r\n    // this.map.on(\"click\", (geo) => {\r\n    //   intersectQueryTask({\r\n    //     outFields: [\r\n    //       \"MUNICIPALITY_NAME\",\r\n    //       \"PARCEL_MAIN_LUSE\",\r\n    //       \"PARCEL_AREA\",\r\n    //       \"PARCEL_LAT_COORD\",\r\n    //       \"PARCEL_LONG_COORD\",\r\n    //       \"PLAN_NO\",\r\n    //       \"PARCEL_PLAN_NO\",\r\n    //       \"USING_SYMBOL\",\r\n    //       \"PARCEL_SPATIAL_ID\",\r\n    //     ],\r\n    //     geometry: geo.mapPoint,\r\n    //     url: mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n    //     where: \"PARCEL_PLAN_NO is not null\",\r\n    //     callbackResult: (res) => {\r\n    //       if (res.features.length > 0) {\r\n    //         this.setState({\r\n    //           munval: res.features[0].attributes.MUNICIPALITY_NAME,\r\n    //         });\r\n    //         getFeatureDomainName(\r\n    //           res.features,\r\n    //           this.LayerID.Landbase_Parcel\r\n    //         ).then((r) => {\r\n    //           this.setState({\r\n    //             parcelSearch: null,\r\n    //             parcelNum: res.features.map((e, i) => {\r\n    //               return {\r\n    //                 ...e,\r\n    //                 i,\r\n    //               };\r\n    //             }),\r\n    //           });\r\n\r\n    //           res.features = res.features.map((e, i) => {\r\n    //             return {\r\n    //               ...e,\r\n    //               i,\r\n    //             };\r\n    //           });\r\n\r\n    //           this.RolBackParcelNum = res.features.map((e, i) => {\r\n    //             return {\r\n    //               ...e,\r\n    //               i,\r\n    //             };\r\n    //           });\r\n\r\n    //           setTimeout(() => {\r\n    //             if (\r\n    //               this.selectedLandsT.length == 0 ||\r\n    //               this.selectedLands.length == 0\r\n    //             ) {\r\n    //               this.selectedLandsT.push(res);\r\n\r\n    //               this.DrawGraph(true);\r\n    //               this.onLandParcelChange(0);\r\n    //             }\r\n    //           }, 500);\r\n    //         });\r\n    //       }\r\n    //     },\r\n    //   });\r\n    // });\r\n\r\n    this.props.setCurrentMap(map);\r\n    //this.props.setMapLayers(mapLayers);\r\n  };\r\n\r\n  setValue = (item, event) => {\r\n    item.value = event.target.value;\r\n\r\n    this.UpdateSubmissionDataObject();\r\n  };\r\n\r\n  OnParcelSelect = () => {\r\n    this.setState({ parcelval: undefined });\r\n    clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n\r\n    if (\r\n      !this.state.selectedLands.filter((e) => e.id === this.state.parcelId)\r\n        .length\r\n    ) {\r\n      // [\"PARCEL_AREA\", \"PARCEL_MAIN_LUSE\", \"PARCEL_LAT_COORD\", \"PARCEL_LONG_COORD\", \"PLAN_NO\", \"PARCEL_PLAN_NO\", \"USING_SYMBOL\", \"PARCEL_BLOCK_NO\", \"DISTRICT_NAME\", \"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_TYPE\", \"PARCEL_SPATIAL_ID\", \"MUNICIPALITY_NAME\"]\r\n      queryTask({\r\n        ...querySetting(\r\n          this.LayerID.Landbase_Parcel,\r\n          `PARCEL_SPATIAL_ID =${this.state.parcelId}`,\r\n          true,\r\n          [\"*\"]\r\n        ),\r\n        callbackResult: (res) => {\r\n          if (\r\n            this.state.selectedLands &&\r\n            this.state.selectedLands.length == 0\r\n          ) {\r\n            queryTask({\r\n              ...querySetting(\r\n                this.LayerID.Tbl_Parcel_Conditions,\r\n                `USING_SYMBOL_CODE ='${res.features[0].attributes.USING_SYMBOL}'`,\r\n                false,\r\n                [\r\n                  \"SLIDE_AREA\",\r\n                  \"MIN_FROT_OFFSET\",\r\n                  \"BUILDING_RATIO\",\r\n                  \"FRONT_OFFSET\",\r\n                  \"SIDE_OFFSET\",\r\n                  \"BACK_OFFSET\",\r\n                  \"FLOORS\",\r\n                  \"FLOOR_HEIGHT\",\r\n                  \"FAR\",\r\n                  \"ADD_FLOOR\",\r\n                ]\r\n              ),\r\n              callbackResult: (condition) => {\r\n                this.setState({\r\n                  conditions: condition.features,\r\n                });\r\n                getFeatureDomainName(\r\n                  res.features,\r\n                  this.LayerID.Landbase_Parcel\r\n                ).then((r) => {\r\n                  this.addParcelToSelect(r[0]).then(\r\n                    (res) => {\r\n                      this.setToStore(r);\r\n                      this.setState({\r\n                        parcelId: null,\r\n                      });\r\n                      this.selectedLandsT.push(res);\r\n                      this.DrawGraph();\r\n                    },\r\n                    () => {\r\n                      this.state.selectedLands.pop();\r\n                      this.setToStore();\r\n                    }\r\n                  );\r\n                });\r\n              },\r\n            });\r\n          } else {\r\n            getFeatureDomainName(\r\n              res.features,\r\n              this.LayerID.Landbase_Parcel\r\n            ).then((r) => {\r\n              this.addParcelToSelect(r[0]).then(\r\n                (res) => {\r\n                  this.setToStore(r);\r\n                  this.setState({\r\n                    parcelId: null,\r\n                  });\r\n                  this.selectedLandsT.push(res);\r\n                  this.DrawGraph();\r\n                },\r\n                () => {\r\n                  this.state.selectedLands.pop();\r\n                  this.setToStore();\r\n                }\r\n              );\r\n            });\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  setToStore = (r) => {\r\n    const {\r\n      input: { value },\r\n    } = this.props;\r\n    this.state.landsData = {\r\n      ...value,\r\n      mapGraphics: [],\r\n      conditions: this.state.conditions,\r\n      parcelData: { ...this.state.parcelData },\r\n      temp: {\r\n        //map: this.map,\r\n        mun: this.state.munval,\r\n        plan: this.state.planeval,\r\n        subTypeval: this.state.subTypeval,\r\n        subNameval: this.state.subNameval,\r\n        subname: this.state.subName_name,\r\n        parcelDis: this.parcelDis || this.RolBackParcelNum,\r\n        block_no: this.state.block_no,\r\n        blockval: this.state.blockval,\r\n        parcelval: this.state.parcelval,\r\n      },\r\n      domainLists: { ...this.state.domainLists },\r\n      // parcels: [\r\n      //   ...this.state.selectedLands,\r\n      //   {\r\n      //     attributes: r[0].attributes,\r\n      //     id: this.state.parcelId,\r\n      //     geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n      //   },\r\n      // ],\r\n      // lists: {\r\n      //   subdivisions: [...this.state.subDivNames],\r\n      //   MunicipalityNames: [...this.state.MunicipalityNames],\r\n      //   subDivType: [...this.state.subDivType],\r\n      //   PlanNum: [...this.state.PlanNum],\r\n      //   blockNum: [...this.state.blockNum],\r\n      // },\r\n    };\r\n\r\n    //  if (r) {\r\n    //       r[0].attributes.PARCEL_AREA = \"\";\r\n    //       this.state.selectedLands.push({\r\n    //         geometry: r[0].geometry,\r\n    //         attributes: r[0].attributes,\r\n    //         id: this.state.parcelId,\r\n    //       });\r\n    //     }\r\n\r\n    if (r) {\r\n      r[0].attributes.PARCEL_AREA = \"\";\r\n      this.state.selectedLands.push({\r\n        geometry: r[0].geometry,\r\n        attributes: r[0].attributes,\r\n        id: this.state.parcelId,\r\n      });\r\n\r\n      map_object(this.state.selectedLands);\r\n    }\r\n\r\n    this.state.landsData[\"parcels\"] = [...this.state.selectedLands];\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n  };\r\n\r\n  setAdjacentToStore = (r) => {\r\n    let store = this.props.input.value;\r\n    store.temp.parcelDis = r;\r\n    this.props.input.onChange(store);\r\n  };\r\n\r\n  // LandHoverOn = (f) => {\r\n  //   if (this.state.selectedLands.length) {\r\n  //     clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n  //     var parcel = this.state.parcelNum.filter((m) => m.i == f.key)[0];\r\n  //     highlightFeature(parcel, this.map, {\r\n  //       layerName: \"SelectGraphicLayer\",\r\n  //       strokeColor: [0, 0, 0],\r\n  //       isHighlighPolygonBorder: true,\r\n  //       highlightWidth: 3,\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  // LandHoverOff = (f) => {\r\n  //   if (this.state.selectedLands.length) {\r\n  //     clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n  //   }\r\n  // };\r\n\r\n  LandHoverOn = (f) => {\r\n    if (this.state.selectedLands.length) {\r\n      var fitleredGraphics = this.map\r\n        .getLayer(\"SelectGraphicLayer\")\r\n        .graphics.filter((graphic) => {\r\n          return graphic?.attributes?.OBJECTID != f?.attributes?.OBJECTID;\r\n        });\r\n\r\n      fitleredGraphics = [\r\n        ...new Map(\r\n          fitleredGraphics.map((item) => [item?.[\"attributes\"]?.[\"OBJECTID\"], item])\r\n        ).values(),\r\n      ];\r\n\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      fitleredGraphics.forEach((graphic) => {\r\n        this.map.getLayer(\"SelectGraphicLayer\").add(graphic);\r\n      });\r\n\r\n      highlightFeature([f], this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: false,\r\n        isHiglightSymbol: false,\r\n        attr: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  LandHoverOff = (f) => {\r\n    if (\r\n      f &&\r\n      this.state.selectedLands?.length &&\r\n      f?.attributes?.PARCEL_SPATIAL_ID != this.state?.parcelId\r\n    ) {\r\n      highlightFeature([f], this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: false,\r\n        isHiglightSymbol: true,\r\n        highlighColor: [0, 255, 0, 0.5],\r\n        attr: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // remove = (item) => {\r\n  //   this.state.parcelData = {};\r\n  //   this.state.selectedLands.pop(item);\r\n  //   const values = slice(this.props.input.value.parcels, 0, -1);\r\n  //   this.props.input.onChange([...values]);\r\n  //   if (this.state.selectedLandsT) {\r\n  //     this.state.selectedLandsT.pop(item);\r\n  //   }\r\n  //   this.DrawGraph();\r\n  //   this.UpdateSubmissionDataObject();\r\n  // };\r\n\r\n  remove = (item) => {\r\n    let { mainObject } = this.props;\r\n    if (mainObject && mainObject.waseka) {\r\n      delete mainObject.waseka;\r\n    }\r\n    this.state.parcelData = {};\r\n    this.state.selectedLands.pop(item);\r\n    //this.props.input.value.parcels = slice(this.props.input.value.parcels, 0, -1)\r\n    // this.props.input.onChange([...values])\r\n    if (this.state.selectedLandsT) {\r\n      this.state.selectedLandsT.pop(item);\r\n    }\r\n    this.DrawGraph();\r\n    this.UpdateSubmissionDataObject();\r\n  };\r\n\r\n  saveEdit(id, name, i) {\r\n    let findParcel = this.props.input.value.parcels.find((p) => {\r\n      return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n    });\r\n    findParcel.attributes[name] =\r\n      this[\"edit_\" + name + i] || findParcel.attributes[name];\r\n    let selectLand = this.state.selectedLands.find((p) => {\r\n      return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n    });\r\n    selectLand.attributes[name] =\r\n      this[\"edit_\" + name + i] || selectLand.attributes[name];\r\n    // \r\n    this.setState({\r\n      [name + \"_isEdit_\" + i]: false,\r\n      selectedLands: [...this.state.selectedLands],\r\n    }, () => {\r\n      this.UpdateSubmissionDataObject();\r\n    });\r\n  }\r\n\r\n  openPopup = (scope) => {\r\n    var fields = this.parcelDataFields;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...scope.state.parcelData },\r\n          ok(values) {\r\n            scope.state[\"parcelData\"] = values;\r\n            scope.UpdateSubmissionDataObject();\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  myChangeHandler = (name, i, e, event) => {\r\n    // \r\n    if (event.target.value && +event.target.value > 0) {\r\n      this[\"edit_\" + name + i] = event.target.value;\r\n      e.attributes[name] = event.target.value;\r\n      //e.attributes[\"PARCEL_AREA\"] = event.target.value;\r\n    } else {\r\n      this[\"edit_\" + name + i] = \"\";\r\n      e.attributes[name] = \"\";\r\n    }\r\n\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  showEditBtn = (name, value) => {\r\n    if (name == \"USING_SYMBOL\") {\r\n      return value == null;\r\n    } else {\r\n      return [\"PARCEL_AREA\"].indexOf(name) > -1;\r\n    }\r\n  };\r\n\r\n  enableEdit = (name, i) => {\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      parcelData,\r\n      selectedLands,\r\n      MunicipalityNames,\r\n      subDivType,\r\n      subDivNames,\r\n      subNameval,\r\n      blockNum,\r\n      blockval,\r\n      PlanNum,\r\n      mapLoaded,\r\n      planeval,\r\n      parcelSearch,\r\n      parcelNum,\r\n      parcelval,\r\n      conditions,\r\n    } = this.state;\r\n    const { fullMapWidth } = this.props;\r\n    return (\r\n      <div>\r\n        <div className={!fullMapWidth ? \"content-section implementation\" : \"\"}>\r\n          <div>\r\n            {mapLoaded && (\r\n              <div\r\n                style={{\r\n                  boxShadow: \"1px 1px 3px black\",\r\n                  paddingLeft: \"15px\",\r\n                  paddingTop: \"30px\",\r\n                  height: \"487px\",\r\n                }}\r\n              >\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onChange={(val) => {\r\n                    onMunChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  value={this.state.munval}\r\n                  placeholder=\"اختر اسم البلديه\"\r\n                  disabled={!this.state.MunicipalityNames?.length}\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children.find((i) => {\r\n                          return i && i.indexOf(input.trim().toLowerCase()) >= 0;\r\n                        }) != null\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                >\r\n                  {MunicipalityNames?.map((e) => (\r\n                    <Option key={e.code} value={e.code}>\r\n                      {e.name}{\" \"}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  onChange={(val) => {\r\n                    onPlaneChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  autoFocus\r\n                  disabled={!PlanNum.length}\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children\r\n                          ?.indexOf(convertToArabic(input)) != -1\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                  value={planeval}\r\n                  placeholder=\"رقم المخطط\"\r\n                  notFoundContent=\"not found\"\r\n                >\r\n                  {PlanNum\r\n                  //.slice(0, 100)\r\n                  .map((d, i) => {\r\n                    return (\r\n                      <Option key={i} value={d.i}>\r\n                        {convertToArabic(d.attributes.PLAN_NO)}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onChange={(val) => {\r\n                    onSubTypeChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  disabled={!subDivType.length}\r\n                  value={this.state.subTypeval}\r\n                  placeholder={\"نوع التقسيم\"}\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children\r\n                          ?.indexOf(convertToArabic(input)) != -1\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                >\r\n                  {subDivType\r\n                  //.slice(0, 100)\r\n                  .map((e, i) => (\r\n                    <Option key={i} value={e.code}>\r\n                      {\" \"}\r\n                      {e.name}{\" \"}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onChange={(val) => {\r\n                    onSubNameChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  disabled={!subDivNames.length}\r\n                  placeholder=\"اسم التقسيم\"\r\n                  value={subNameval}\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) =>\r\n                    option.props.children\r\n                      ?.indexOf(convertToArabic(input)) != -1\r\n                  }\r\n                >\r\n                  {subDivNames\r\n                  //.slice(0, 100)\r\n                  .map((e, i) => (\r\n                    <Option key={i} value={e.attributes.SUBDIVISION_SPATIAL_ID}>\r\n                      {\" \"}\r\n                      {e.attributes.SUBDIVISION_DESCRIPTION}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onChange={(val) => {\r\n                    onBlockChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  disabled={!blockNum.length}\r\n                  value={blockval}\r\n                  placeholder=\"رقم البلك\"\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) =>\r\n                    option.props.children\r\n                      ?.indexOf(convertToArabic(input)) != -1\r\n                  }\r\n                >\r\n                  {blockNum\r\n                  //.slice(0, 100)\r\n                  .map((e, i) => (\r\n                    <Option key={i} value={e.attributes.BLOCK_SPATIAL_ID}>\r\n                      {convertToArabic(e.attributes.BLOCK_NO)}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n                {/* <Select\r\n                getPopupContainer={(trigger) => trigger.parentNode}\r\n                onChange={this.onLandParcelChange}\r\n                showSearch\r\n                disabled={parcelNum && !parcelNum.length}\r\n                onSearch={(e) => {\r\n                  this.setState({ parcelSearch: e });\r\n                }}\r\n                filterOption={(input, option) => {\r\n                  if (option.props.children) {\r\n                    return (\r\n                      option.props.children\r\n                        .toLowerCase()\r\n                        .indexOf(convertToArabic(input?.toLowerCase() || \"\")) != -1\r\n                    );\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                }}\r\n                value={parcelval}\r\n                placeholder=\"رقم قطعة الارض\"\r\n              >\r\n                {parcelNum &&\r\n                  parcelNum\r\n                    .filter((e, i) => {\r\n                      if (parcelSearch) {\r\n                        if (this.state.selectedLands.length) {\r\n                          return !this.state.selectedLands.find(\r\n                            (tt) =>\r\n                              tt.attributes.PARCEL_SPATIAL_ID ==\r\n                              e.attributes.PARCEL_SPATIAL_ID\r\n                          );\r\n                        } else {\r\n                          return (\r\n                            e.attributes.PARCEL_PLAN_NO &&\r\n                            e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                              parcelSearch.toLowerCase()\r\n                            ) >= 0\r\n                          );\r\n                        }\r\n                      } else {\r\n                        if (selectedLands.length) {\r\n                          return (\r\n                            !selectedLands.find(\r\n                              (tt) =>\r\n                                tt.attributes.PARCEL_PLAN_NO ==\r\n                                e.attributes.PARCEL_PLAN_NO\r\n                            ) && e.attributes.PARCEL_PLAN_NO\r\n                          );\r\n                        } else {\r\n                          return e.attributes.PARCEL_PLAN_NO;\r\n                        }\r\n                      }\r\n                    })\r\n                    .slice(0, 100)\r\n                    .map((e, i) => {\r\n                      return (\r\n                        <Option\r\n                          onMouseEnter={this.LandHoverOn}\r\n                          onMouseLeave={this.LandHoverOff}\r\n                          key={e.attributes.PARCEL_SPATIAL_ID}\r\n                          value={e.i}\r\n                        >\r\n                          {convertToArabic(e.attributes.PARCEL_PLAN_NO)}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n              </Select> */}\r\n                <Select\r\n                  // onBlur={() => {\r\n                  //   clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n                  // }}\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onFocus={() => {\r\n                    //clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n                    if (!this.state[\"parcelId\"]) {\r\n                      highlightFeature(\r\n                        parcelNum.filter((e, i) => {\r\n                          if (parcelSearch) {\r\n                            if (this.state.selectedLands.length) {\r\n                              return !this.state.selectedLands.find(\r\n                                (tt) =>\r\n                                  tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                  e.attributes.PARCEL_SPATIAL_ID\r\n                              );\r\n                            } else {\r\n                              return (\r\n                                e.attributes.PARCEL_PLAN_NO &&\r\n                                e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                                  parcelSearch.toLowerCase()\r\n                                ) >= 0\r\n                              );\r\n                            }\r\n                          } else {\r\n                            if (selectedLands.length) {\r\n                              return (\r\n                                !selectedLands.find(\r\n                                  (tt) =>\r\n                                    tt.attributes.PARCEL_PLAN_NO ==\r\n                                    e.attributes.PARCEL_PLAN_NO\r\n                                ) && e.attributes.PARCEL_PLAN_NO\r\n                              );\r\n                            } else {\r\n                              return e.attributes.PARCEL_PLAN_NO;\r\n                            }\r\n                          }\r\n                        }),\r\n                        //.slice(0, 100),\r\n                        this.map,\r\n                        {\r\n                          layerName: \"SelectGraphicLayer\",\r\n                          noclear: false,\r\n                          isZoom: false,\r\n                          isHiglightSymbol: true,\r\n                          highlighColor: [0, 255, 0, 0.5],\r\n                          attr: true,\r\n                        }\r\n                      );\r\n                    }\r\n                  }}\r\n                  onChange={(val) => {\r\n                    onLandParcelChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  disabled={parcelNum && !parcelNum.length}\r\n                  onSearch={(e) => {\r\n                    this.setState({ parcelSearch: e });\r\n                    onSearch(this, e);\r\n                  }}\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children\r\n                          ?.indexOf(convertToArabic(input)) != -1\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                  value={parcelval}\r\n                  placeholder=\"رقم قطعة الارض\"\r\n                >\r\n                  {parcelNum &&\r\n                    parcelNum\r\n                      .filter((e, i) => {\r\n                        if (parcelSearch) {\r\n                          if (this.state.selectedLands.length) {\r\n                            return !this.state.selectedLands.find(\r\n                              (tt) =>\r\n                                tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                e.attributes.PARCEL_SPATIAL_ID\r\n                            );\r\n                          } else {\r\n                            return (\r\n                              e.attributes.PARCEL_PLAN_NO &&\r\n                              e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                                parcelSearch.toLowerCase()\r\n                              ) >= 0\r\n                            );\r\n                          }\r\n                        } else {\r\n                          if (selectedLands.length) {\r\n                            return (\r\n                              !selectedLands.find(\r\n                                (tt) =>\r\n                                  tt.attributes.PARCEL_PLAN_NO ==\r\n                                  e.attributes.PARCEL_PLAN_NO\r\n                              ) && e.attributes.PARCEL_PLAN_NO\r\n                            );\r\n                          } else {\r\n                            return e.attributes.PARCEL_PLAN_NO;\r\n                          }\r\n                        }\r\n                      })\r\n                      .slice(0, 100)\r\n                      .sort((a, b) =>\r\n                        a.attributes.PARCEL_PLAN_NO >\r\n                        b.attributes.PARCEL_PLAN_NO\r\n                          ? 1\r\n                          : -1\r\n                      )\r\n                      .map((e, i) => {\r\n                        return (\r\n                          <Option\r\n                            onMouseEnter={this.LandHoverOn.bind(this, e)}\r\n                            onMouseLeave={this.LandHoverOff.bind(this, e)}\r\n                            key={e.attributes.PARCEL_SPATIAL_ID}\r\n                            value={e.i}\r\n                          >\r\n                            {localizeNumber(e.attributes.PARCEL_PLAN_NO)}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                </Select>\r\n                <Button\r\n                  className=\"add-gis\"\r\n                  disabled={!this.state.parcelId}\r\n                  onClick={this.OnParcelSelect}\r\n                >\r\n                  إضافة الأرض\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div>\r\n            <div>\r\n              <MapBtnsComponent {...this.props}></MapBtnsComponent>\r\n            </div>\r\n            <div>\r\n              <MapComponent\r\n                mapload={this.mapLoaded.bind(this)}\r\n                {...this.props}\r\n              ></MapComponent>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {mapLoaded && (\r\n          <div style={{ gridColumn: \"1/3\" }}>\r\n            {selectedLands && selectedLands.length > 0 && (\r\n              <div>\r\n                <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n\r\n                <table\r\n                  className=\"table table-bordered\"\r\n                  style={{ marginTop: \"1%\" }}\r\n                >\r\n                  <thead>\r\n                    <tr>\r\n                      {this.parcel_fields_headers.map((field_header, k) => {\r\n                        return <th>{field_header}</th>;\r\n                      })}\r\n                      <th> خيارات</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {selectedLands.map((e, i) => {\r\n                      return (\r\n                        <tr key={i}>\r\n                          {this.parcel_fields.map((field, k) => {\r\n                            return (\r\n                              <td key={k}>\r\n                                <div>\r\n                                  {field.editable ? (\r\n                                    !this.state[field.name + \"_isEdit_\" + i] ? (\r\n                                      <span>\r\n                                        <span>\r\n                                          {localizeNumber(\r\n                                            e.attributes[field.name] || \"\"\r\n                                          )}\r\n                                        </span>\r\n                                        {this.showEditBtn(\r\n                                          field.name,\r\n                                          e.attributes[field.name]\r\n                                        ) && (\r\n                                          <span>\r\n                                            <button\r\n                                              className=\"btn\"\r\n                                              style={{\r\n                                                marginRight: e.attributes[\r\n                                                  field.name\r\n                                                ]\r\n                                                  ? \"20px\"\r\n                                                  : \"0px\",\r\n                                              }}\r\n                                              onClick={this.enableEdit.bind(\r\n                                                this,\r\n                                                field.name,\r\n                                                i\r\n                                              )}\r\n                                            >\r\n                                              <i className=\"fas fa-edit\"></i>\r\n                                            </button>\r\n                                          </span>\r\n                                        )}\r\n                                      </span>\r\n                                    ) : (\r\n                                      <span\r\n                                        style={{\r\n                                          display: \"grid\",\r\n                                          gridTemplateColumns: \"1fr auto\",\r\n                                        }}\r\n                                      >\r\n                                        <input\r\n                                          key={i}\r\n                                          className=\"form-control\"\r\n                                          type=\"number\"\r\n                                          step=\"any\"\r\n                                          value={e.attributes[field.name]}\r\n                                          onChange={this.myChangeHandler.bind(\r\n                                            this,\r\n                                            field.name,\r\n                                            i,\r\n                                            e\r\n                                          )}\r\n                                        />\r\n                                        <button\r\n                                          className=\"btn\"\r\n                                          style={{ marginRight: \"20px\" }}\r\n                                          onClick={this.saveEdit.bind(\r\n                                            this,\r\n                                            e.attributes.PARCEL_SPATIAL_ID,\r\n                                            field.name,\r\n                                            i\r\n                                          )}\r\n                                        >\r\n                                          <i className=\"fa fa-floppy-o\"></i>\r\n                                        </button>\r\n                                      </span>\r\n                                    )\r\n                                  ) : (\r\n                                    <span>\r\n                                      <span>\r\n                                        {localizeNumber(\r\n                                          e.attributes[field.name] || \"\"\r\n                                        )}\r\n                                      </span>\r\n                                    </span>\r\n                                  )}\r\n                                </div>\r\n                              </td>\r\n                            );\r\n                          })}\r\n\r\n                          {i === selectedLands.length - 1 ? (\r\n                            <td>\r\n                              <button\r\n                                className=\"btn follow\"\r\n                                style={{ margin: \"0px 5px\" }}\r\n                                onClick={() => {\r\n                                  this.openPopup(this);\r\n                                }}\r\n                              >\r\n                                حدود و أبعاد الأرض\r\n                              </button>\r\n                              <button\r\n                                className=\" btn btn-danger \"\r\n                                onClick={this.remove.bind(this, e)}\r\n                              >\r\n                                حذف\r\n                              </button>\r\n                            </td>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(krokiIdentifyComponnent);\r\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAwiuBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAzwgBA;AACA;AACA;AAkcA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA8CA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AAGA;AACA;AACA;AAAA;AAaA;AAAA;AAOA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AAMA;AACA;AAAA;AAEA;AACA;AAAA;AAgBA;AACA;AACA;AAKA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AAAA;AAAA;AACA;AAKA;AAEA;AAAA;AAgBA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAAA;AAUA;AASA;AACA;AACA;;;;A","sourceRoot":""}
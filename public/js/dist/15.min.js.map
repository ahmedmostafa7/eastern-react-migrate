{"version":3,"file":"15.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/Helpers.js","webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/cadData.js","webpack:///./src/app/components/inputs/fields/label/index.js","webpack:///./src/app/components/inputs/fields/label/mapping.js","webpack:///./src/app/components/inputs/fields/label/typeofData/boolean.js","webpack:///./src/app/components/inputs/fields/label/typeofData/date.js","webpack:///./src/app/components/inputs/fields/label/typeofData/index.js","webpack:///./src/app/components/inputs/fields/label/typeofData/number.js","webpack:///./src/app/components/inputs/fields/label/typeofData/object.js","webpack:///./src/app/components/inputs/fields/label/typeofData/string.js"],"sourcesContent":["\r\nimport { loadModules } from 'esri-loader';\r\nimport{mapUrl}from\"../mapviewer/config/map\"\r\n\r\nconst options = {\r\n    url: 'https://js.arcgis.com/3.13'\r\n};\r\n\r\nexport const selectDis=(e)=>{\r\nvar a=[];\r\n\r\ne.forEach(el => {\r\n    el.features.forEach(element=>{\r\n        if(!a.find((t=>t.attributes.PARCEL_SPATIAL_ID==element.attributes.PARCEL_SPATIAL_ID))){\r\n            a.push(element)\r\n        }\r\n    })\r\n});\r\nreturn a;\r\n}\r\n\r\nexport const DataQuery=(layerNum,QueryOptions,CallBack)=>{\r\n    loadModules([\"esri/symbols/SimpleLineSymbol\",\"esri/Color\",\"esri/layers/FeatureLayer\",\"esri/tasks/RelationshipQuery\",\"esri/tasks/QueryTask\",\"esri/tasks/query\",\"esri/request\",\"esri/geometry/Polygon\",\"esri/symbols/SimpleFillSymbol\",\"esri/graphic\"], options)\r\n    .then(([SimpleLineSymbol,Color,FeatureLayer,RQuery,QueryTask,Query,request,Polygon,SimpleFillSymbol,Graphic]) => {\r\n\r\n     var query = new Query()\r\n     var qt = new QueryTask(mapUrl+`/${layerNum}`)\r\n    QueryOptions.forEach(e=>{\r\n        query[e.name]=e.value\r\n    })\r\n     qt.execute(query,CallBack,(res)=>{console.log(res)})\r\n    })\r\n}\r\nexport const queryOption=(where,geo,outfields)=>{\r\n       return [{name:\"where\",value:where},\r\n       {name:\"returnGeometry\",value:geo},\r\n       {name:\"outFields\",value:outfields}\r\n      ]\r\n}\r\nexport const querySetting=(num,where,geo,outfields, url)=>{\r\n    \r\n    \r\n    return {\r\n        url:(url || mapUrl)+\"/\"+num,\r\n        where,\r\n        returnGeometry:geo,\r\n        outFields:outfields\r\n}\r\n\r\n}\r\nexport const DataReqest=(url,callBack)=>{\r\n    loadModules([\"esri/request\"], options)\r\n    .then(([request]) => {\r\n        request({\r\n            url: url,\r\n            content: {f:\"json\"},\r\n            handleAs: \"json\",\r\n            callbackParamName:\"callback\"\r\n        }).then(callBack);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport { postItem, fetchData } from \"app/helpers/apiMethods\";\r\nimport {\r\n  getMap,\r\n  getIsMapLoaded,\r\n  setIsMapLoaded,\r\n} from \"main_helpers/functions/filters/state\";\r\nimport { esriRequest, getMapInfo } from \"../common/esri_request\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport applyFilters from \"main_helpers/functions/filters\";\r\nimport {\r\n  resetMapData,\r\n  redrawNames,\r\n  DrawGraphics,\r\n  createFeatureLayer,\r\n  getInfo,\r\n  reverse,\r\n  queryTask,\r\n  project,\r\n  isPointOrArc,\r\n  addGraphicToLayer,\r\n  computeLineAngle,\r\n  addParcelNo,\r\n  getLengthOffset,\r\n  clearGraphicFromLayer,\r\n  getCornersIndex,\r\n  sortLines,\r\n  getCornerIconPosition,\r\n  getColorFromCadIndex,\r\n  zoomToLayer,\r\n  zoomToIdentifyParcel,\r\n  IdentifyTask,\r\n  getPolygons,\r\n  HasArabicCharacters,\r\n  computeAngle,\r\n  highlightFeature,\r\n  convertToArabic,\r\n  localizeNumber,\r\n  setParcelName,\r\n  intersectQueryTask,\r\n  resizeMap,\r\n  getLineLength,\r\n  computePointDirection,\r\n  checkOverlappingFeaturesWithLayer,\r\n  CheckShapeOverlapWithBoundry,\r\n  selectMainObject,\r\n  checkImportedMainObject,\r\n} from \"../common/common_func\";\r\nimport { layersSetting } from \"../mapviewer/config/layers\";\r\nimport { geometryServiceUrl, mapUrl } from \"../mapviewer/config/map\";\r\nimport { Row, Col, Select, Button, Form, message, Checkbox, Tabs } from \"antd\";\r\nconst { TabPane } = Tabs;\r\nimport {\r\n  DragDropContext,\r\n  Droppable,\r\n  Draggable,\r\n  useKeyboardSensor,\r\n} from \"react-beautiful-dnd\";\r\nimport \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport { connect } from \"react-redux\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nvar uniqid = require(\"uniqid\");\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n  isEmpty,\r\n} from \"lodash\";\r\nconst _ = require(\"lodash\");\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport axios from \"axios\";\r\nimport label from \"../../../label\";\r\nimport store from \"reducers\";\r\nimport { FINAL_SERVICE_REVIEW } from \"../../../../../wizard/modulesObjects\";\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: \"2px\",\r\n  fontSize: \"20px\",\r\n  marginRight: \"13px\",\r\n  float: \"right\",\r\n  // change background colour if dragging\r\n  background: \"#E0E0E0\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nconst dragStyle = {\r\n  float: \"right\",\r\n  marginRight: \"13px\",\r\n  backgroundColor: \"#E0E0E0\",\r\n  padding: \"2px\",\r\n};\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  //background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  padding: grid,\r\n  width: \"100%\",\r\n  height: \"60px\",\r\n});\r\n\r\nconst itemContainerNorth = {\r\n  borderTop: \"13px solid #008DFF\",\r\n  margin: \"auto\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst sideClass = {\r\n  float: \"right\",\r\n  textAlign: \"right\",\r\n  fontSize: \"20px\",\r\n  marginLeft: \"10px\",\r\n  marginRight: \"10px\",\r\n  backgroundColor: \"#E0E0E0\",\r\n};\r\n\r\nconst itemContainerWest = {\r\n  borderLeft: \"13px solid red\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerEmpty = {\r\n  height: \"auto\",\r\n  margin: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"35px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerEast = {\r\n  borderRight: \"13px solid #8A8A8A\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerSouth = {\r\n  borderBottom: \"13px solid #09F869\",\r\n  margin: \"auto\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nArray.prototype.sum = function (prop) {\r\n  var total = 0;\r\n  for (var y = 0, _len = this.length; y < _len; y++) {\r\n    prop = prop.replace(/\\[(\\w+)\\]/g, \".$1\");\r\n    prop = prop.replace(/^\\./, \"\");\r\n    var a = prop.split(\".\");\r\n    var data = JSON.parse(JSON.stringify(this[y]));\r\n\r\n    for (var i = 0, n = a.length; i < n; ++i) {\r\n      var k = a[i];\r\n      if (k in data) {\r\n        data = data[k];\r\n      } else {\r\n        return 0;\r\n      }\r\n    }\r\n\r\n    total += data;\r\n  }\r\n  return total;\r\n};\r\n\r\nclass cadDataComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.parcel_fields_headers = [\r\n      \"الإتجاه\",\r\n      \"شمال / شرق\",\r\n      \"شمال / غرب\",\r\n      \"جنوب / شرق\",\r\n      \"جنوب / غرب\",\r\n    ];\r\n    this.parcel_fields = [\r\n      { name: \"direction\", editable: false },\r\n      { name: \"NORTH_EAST_DIRECTION\", editable: true },\r\n      { name: \"NORTH_WEST_DIRECTION\", editable: true },\r\n      { name: \"SOUTH_EAST_DIRECTION\", editable: true },\r\n      { name: \"SOUTH_WEST_DIRECTION\", editable: true },\r\n    ];\r\n\r\n    this.polygon_fields_headers = [\r\n      \"رقم الأرض\",\r\n      \"المساحة (م۲)\",\r\n      \"رقم المخطط\",\r\n      \"رقم البلك\",\r\n      \"الحي\",\r\n      \"رمز الإستخدام\",\r\n      \"عدد الوحدات\",\r\n    ];\r\n\r\n    this.neighbors =\r\n      this.props.mainObject?.landData?.landData?.lands?.temp?.parcelDis || [];\r\n    this.neighbors =\r\n      this.neighbors &&\r\n      this.neighbors.filter((f) => {\r\n        return !this.props.mainObject?.landData?.landData?.lands?.parcels?.find(\r\n          (p) => ((p.attributes.PARCEL_PLAN_NO == f.attributes.PARCEL_PLAN_NO) && (p.attributes.PLAN_NO == f.attributes.PLAN_NO))\r\n        );\r\n      });\r\n\r\n    this.polygon_fields = [\r\n      { name: \"PARCEL_PLAN_NO\", editable: false, type: \"text\" },\r\n      {\r\n        name: \"PARCEL_AREA\",\r\n        editable: (!this.props.isView && true) || false,\r\n        type: \"number\",\r\n      },\r\n      {\r\n        name: \"PLAN_NO\",\r\n        editable: (!this.props.isView && true) || false,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        name: \"PARCEL_BLOCK_NO\",\r\n        editable: (!this.props.isView && true) || false,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        name: \"DISTRICT_NAME\",\r\n        editable: (!this.props.isView && true) || false,\r\n        type: \"text\",\r\n      },\r\n      // {\r\n      //   name: \"SUBDIVISION_TYPE\",\r\n      //   editable: (!this.props.isView && true) || false,\r\n      //   type: \"select\",\r\n      // },\r\n      // {\r\n      //   name: \"SUBDIVISION_DESCRIPTION\",\r\n      //   editable: (!this.props.isView && true) || false,\r\n      //   type: \"text\",\r\n      // },\r\n      { name: \"USING_SYMBOL\", editable: false },\r\n      { name: \"UNITS_NUMBER\", editable: false },\r\n    ];\r\n\r\n    this.parcelDataFields = {};\r\n\r\n    if (\r\n      ([22, 23].indexOf(props.currentModule.id) != -1 ||\r\n        [1928].indexOf(props.currentModule.record.workflow_id) != -1) &&\r\n      props.is_parcel_type\r\n    ) {\r\n      this.parcelDataFields[\"parcel_type\"] = {\r\n        label: \"عبارة عن\",\r\n        placeholder: \"من فضلك اخل نوع الأرض\",\r\n        type: \"text\",\r\n        name: \"parcel_type\",\r\n        required: true,\r\n        // label: \"عبارة عن\",\r\n        // placeholder: \"من فضلك اخل نوع الأرض\",\r\n        // type: \"input\",\r\n        // field: \"select\",\r\n        // className: \"select_flex\",\r\n        // name: \"parcel_type\",\r\n        // data: [\r\n        //   { label: \"أرض فضاء\", value: \"أرض فضاء\" },\r\n        //   { label: \"مبنى سكني\", value: \"مبنى سكني\" },\r\n        //   { label: \"ورشة\", value: \"ورشة\" },\r\n        //   { label: \"أخرى\", value: \"أخرى\" },\r\n        // ],\r\n        // required: true,\r\n      };\r\n    }\r\n    this.parcelDataFields[\"north_length\"] = {\r\n      label: \"طول الحد الشمالي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الشمالي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"north_length\",\r\n      required: true,\r\n      disabled: true,\r\n    };\r\n    this.parcelDataFields[\"north_desc\"] = {\r\n      label: \"وصف الحد الشمالي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشمالي\",\r\n      type: \"text\",\r\n      name: \"north_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"south_length\"] = {\r\n      label: \"طول الحد الجنوبي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الجنوبي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"south_length\",\r\n      required: true,\r\n      disabled: true,\r\n    };\r\n    (this.parcelDataFields[\"south_desc\"] = {\r\n      label: \"وصف الحد الجنوبي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الجنوبي\",\r\n      type: \"text\",\r\n      name: \"south_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    }),\r\n      (this.parcelDataFields[\"east_length\"] = {\r\n        label: \"طول الحد الشرقي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الشرقي (م)\",\r\n        field: \"inputNumber\",\r\n        name: \"east_length\",\r\n        required: true,\r\n        disabled: true,\r\n      });\r\n    this.parcelDataFields[\"east_desc\"] = {\r\n      label: \"وصف الحد الشرقي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشرقي\",\r\n      type: \"text\",\r\n      name: \"east_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"west_length\"] = {\r\n      label: \"طول الحد الغربي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الغربي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"west_length\",\r\n      required: true,\r\n      disabled: true,\r\n    };\r\n    this.parcelDataFields[\"west_desc\"] = {\r\n      label: \"وصف الحد الغربي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الغربي\",\r\n      type: \"text\",\r\n      name: \"west_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n\r\n    this.InvokedToAdParcel = false;\r\n\r\n    let cadDetails =\r\n      this.props.input.value ||\r\n      selectMainObject(props)?.data_msa7y?.msa7yData?.cadDetails;\r\n\r\n    if (cadDetails) {\r\n      const { input } = props;\r\n      this.state = {\r\n        viewNumbersOnly: (checkImportedMainObject(props) && true) || false,\r\n        zoomRatio:\r\n          [2028, 2029, 2191].indexOf(\r\n            this.props?.currentModule?.workflow_id ||\r\n            this.props?.currentModule?.record?.workflow_id\r\n          ) != -1 ||\r\n            this.props?.currentModule?.app_id == 14 ||\r\n            this.props?.currentModule?.record?.app_id == 14\r\n            ? 10\r\n            : 25,\r\n        isConfirmed: true,\r\n        outRange: null,\r\n        hasNotify: false,\r\n        pointsLength: [],\r\n        annotationLength: 17,\r\n        polygons:\r\n          cadDetails?.suggestionsParcels && cadDetails?.suggestionsParcels[0]\r\n            ? cadDetails?.suggestionsParcels.sort(\r\n              (a, b) =>\r\n                a.parcel_name.indexOf(\"/\") == -1 &&\r\n                b.parcel_name.indexOf(\"/\") == -1 &&\r\n                (+a.parcel_name > +b.parcel_name ? 1 : -1)\r\n            )\r\n            : [],\r\n        demSaveDraft: false,\r\n        cadFiles: {},\r\n        layerParcels: [],\r\n        planDescription: cadDetails?.planDescription || \"\",\r\n        activeKey: \"1\",\r\n        isWithinUrbanBoundry: cadDetails?.isWithinUrbanBoundry || null,\r\n        isUnPlannedParcelIntersect: cadDetails?.isUnPlannedParcelIntersect || false,\r\n        cadResults:\r\n          (cadDetails?.temp && cadDetails?.temp?.cadResults) || undefined,\r\n        isKrokyUpdateContract:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 8 || false,\r\n\r\n        isTadkekMesahy:\r\n          [29].indexOf(\r\n            props?.currentModule?.app_id || props?.currentModule?.record?.app_id\r\n          ) != -1,\r\n        isPropetryCheck:\r\n          [27].indexOf(\r\n            props?.currentModule?.app_id || props?.currentModule?.record?.app_id\r\n          ) != -1,\r\n        isTadkekMesahyModule: props?.currentModule?.id != 114,\r\n        isFarz:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 1 || false,\r\n        isUpdateContract:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 14 || false,\r\n        isPlan:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 16 || false,\r\n\r\n        notify: (cadDetails?.temp && cadDetails?.temp?.notify) || false,\r\n        hideDrag: (cadDetails?.temp && cadDetails?.temp?.hideDrag) || false,\r\n        lineLengthFont: 25,\r\n        parcelNumberFont: 25,\r\n        isBoundry: false,\r\n        mun: cadDetails?.mun || {},\r\n        muns: [],\r\n        have_electric_room:\r\n          (cadDetails?.temp && cadDetails?.temp?.have_electric_room) || false,\r\n        electric_room_area:\r\n          (cadDetails?.temp && cadDetails?.temp?.electric_room_area) || 0,\r\n        electric_room_place:\r\n          (cadDetails?.temp && cadDetails?.temp?.electric_room_place) || 0,\r\n        reqType:\r\n          ([1949, 2048].indexOf(this.props.currentModule.record.workflow_id) !=\r\n            -1 &&\r\n            \"duplex\") ||\r\n          \"\",\r\n      };\r\n\r\n      if (\r\n        cadDetails?.temp &&\r\n        (cadDetails?.temp?.isKrokyUpdateContract || cadDetails?.temp?.isPlan)\r\n      ) {\r\n        this.state[\"survayParcelCutter\"] = cadDetails?.survayParcelCutter || [\r\n          {\r\n            direction: \"الشطفة\",\r\n            NORTH_EAST_DIRECTION: \"\",\r\n            NORTH_WEST_DIRECTION: \"\",\r\n            SOUTH_EAST_DIRECTION: \"\",\r\n            SOUTH_WEST_DIRECTION: \"\",\r\n          },\r\n        ];\r\n      }\r\n\r\n      if (this.state.isTadkekMesahy) {\r\n        if (this.state.polygons) {\r\n          this.state.polygons.forEach((polygon, index) => {\r\n            this.state[`parcel_name${index}`] = polygon.parcel_name;\r\n          });\r\n        }\r\n      }\r\n\r\n      if (this.state?.isUpdateContract && this.state.polygons.length > 0) {\r\n        this.state.polygons.forEach((polygon, index) => {\r\n          this.state[`have_electric_room${index}`] =\r\n            polygon.have_electric_room || false;\r\n          this.state[`electric_room_area${index}`] =\r\n            polygon.electric_room_area || \"\";\r\n          this.state[`electric_room_place${index}`] =\r\n            polygon.electric_room_place;\r\n        });\r\n      }\r\n    } else {\r\n      this.state = {\r\n        viewNumbersOnly: (checkImportedMainObject(props) && true) || false,\r\n        zoomRatio:\r\n          [2028, 2029, 2191].indexOf(\r\n            this.props?.currentModule?.workflow_id ||\r\n            this.props?.currentModule?.record?.workflow_id\r\n          ) != -1 ||\r\n            this.props?.currentModule?.app_id == 14 ||\r\n            this.props?.currentModule?.record?.app_id == 14\r\n            ? 10\r\n            : 25,\r\n        isConfirmed: true,\r\n        outRange: null,\r\n        hasNotify: false,\r\n        pointsLength: [],\r\n        annotationLength: 17,\r\n        polygons: [],\r\n        survayParcelCutter: [\r\n          {\r\n            direction: \"الشطفة\",\r\n            NORTH_EAST_DIRECTION: \"\",\r\n            NORTH_WEST_DIRECTION: \"\",\r\n            SOUTH_EAST_DIRECTION: \"\",\r\n            SOUTH_WEST_DIRECTION: \"\",\r\n          },\r\n        ],\r\n        demSaveDraft: false,\r\n        cadFiles: {},\r\n        layerParcels: [],\r\n        planDescription: \"\",\r\n        activeKey: \"1\",\r\n        isWithinUrbanBoundry: null,\r\n        cadResults: undefined,\r\n        isKrokyUpdateContract:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 8 || false,\r\n\r\n        isTadkekMesahy:\r\n          [29].indexOf(\r\n            props?.currentModule?.app_id || props?.currentModule?.record?.app_id\r\n          ) != -1,\r\n        isPropetryCheck:\r\n          [27].indexOf(\r\n            props?.currentModule?.app_id || props?.currentModule?.record?.app_id\r\n          ) != -1,\r\n        isFarz:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 1 || false,\r\n        isUpdateContract:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 14 || false,\r\n        isPlan:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 16 || false,\r\n        notify: false,\r\n        hideDrag: false,\r\n        lineLengthFont: 25,\r\n        parcelNumberFont: 25,\r\n        isBoundry: false,\r\n        mun: {},\r\n        muns: [],\r\n        have_electric_room: false,\r\n        electric_room_area: 0,\r\n        electric_room_place: 0,\r\n        reqType:\r\n          ([1949, 2048].indexOf(this.props.currentModule.record.workflow_id) !=\r\n            -1 &&\r\n            \"duplex\") ||\r\n          \"\",\r\n      };\r\n    }\r\n\r\n    fetchData(`${workFlowUrl}/api/Municipality`).then((response) => {\r\n      this.state.muns = response.results;\r\n    });\r\n\r\n    if (cadDetails?.temp) {\r\n      // const {\r\n      //   landData: {\r\n      //     requestType,\r\n      //     landData: {\r\n      //       lands: { parcels },\r\n      //     },\r\n      //   },\r\n      // } = \r\n      let requestType = selectMainObject(props)?.landData?.requestType;\r\n      let parcels = selectMainObject(props)?.landData?.landData?.lands?.parcels;\r\n\r\n      const { inputs } = props;\r\n      const { suggestionsParcels, temp } = cadDetails;\r\n\r\n      suggestionsParcels.forEach((element, index) => {\r\n        let landDataParcel = parcels.find((r) =>\r\n          r.geometry\r\n            ? new esri.geometry.Polygon(element.polygon).contains(\r\n              new esri.geometry.Polygon(r?.geometry)?.getExtent()?.getCenter()\r\n            )\r\n            : false\r\n        );\r\n        if (landDataParcel) {\r\n          if (this.state.isUpdateContract) {\r\n            if (element.parcel_name != \"حدود المعاملة\") {\r\n              // element.data[0].data = [\r\n              //   {\r\n              //     ...element.data[0].data[0],\r\n              //     text: +landDataParcel.parcelData.north_length,\r\n              //   },\r\n              // ];\r\n              // element.data[0].totalLength =\r\n              //   +landDataParcel.parcelData.north_length;\r\n              // element.data[1].data = [\r\n              //   {\r\n              //     ...element.data[1].data[0],\r\n              //     text: +landDataParcel.parcelData.east_length,\r\n              //   },\r\n              // ];\r\n              // element.data[1].totalLength =\r\n              //   +landDataParcel.parcelData.east_length;\r\n              // element.data[3].data = [\r\n              //   {\r\n              //     ...element.data[3].data[0],\r\n              //     text: +landDataParcel.parcelData.west_length,\r\n              //   },\r\n              // ];\r\n              // element.data[3].totalLength =\r\n              //   +landDataParcel.parcelData.west_length;\r\n              // element.data[4].data = [\r\n              //   {\r\n              //     ...element.data[4].data[0],\r\n              //     text: +landDataParcel.parcelData.south_length,\r\n              //   },\r\n              // ];\r\n              // element.data[4].totalLength =\r\n              //   +landDataParcel.parcelData.south_length;\r\n              element.survayParcelCutter = [\r\n                {\r\n                  direction: \"الشطفة\",\r\n                  NORTH_EAST_DIRECTION:\r\n                    landDataParcel?.parcelShatfa?.SHATFA_NORTH_EAST_DIRECTION ||\r\n                    \"\",\r\n                  NORTH_WEST_DIRECTION:\r\n                    landDataParcel?.parcelShatfa?.SHATFA_NORTH_WEST_DIRECTION ||\r\n                    \"\",\r\n                  SOUTH_EAST_DIRECTION:\r\n                    landDataParcel?.parcelShatfa?.SHATFA_SOUTH_EAST_DIRECTION ||\r\n                    \"\",\r\n                  SOUTH_WEST_DIRECTION:\r\n                    landDataParcel?.parcelShatfa?.SHATFA_SOUTH_WEST_DIRECTION ||\r\n                    \"\",\r\n                },\r\n              ];\r\n\r\n              this.state[\"electric_room_area\" + index] =\r\n                landDataParcel?.parcelElectric?.electric_room_area || \"\";\r\n              this.state[\"electric_room_place\" + index] =\r\n                landDataParcel?.parcelElectric?.electric_room_place || \"\";\r\n            }\r\n          } else if (this.state.isFarz && !element.attributes) {\r\n            element.attributes = { ...landDataParcel.attributes };\r\n            // element.attributes.PARCEL_PLAN_NO = element.parcel_name;\r\n            element.attributes.PARCEL_AREA = (+element.area)?.toFixed(2) || \"0\";\r\n            element.parcelData = {\r\n              north_length: element?.data[0]?.totalLength,\r\n              north_desc: element.north_Desc,\r\n              east_length: element?.data[1]?.totalLength,\r\n              east_desc: element.east_Desc,\r\n              west_length: element?.data[3]?.totalLength,\r\n              west_desc: element.west_Desc,\r\n              south_length: element?.data[4]?.totalLength,\r\n              south_desc: element.south_Desc,\r\n            }\r\n          }\r\n        }\r\n\r\n        inputs.north.forEach((input, key) => {\r\n          this.state[input.name + index] = temp[input.name + index] || \"\";\r\n        });\r\n        inputs.east.forEach((input, key) => {\r\n          this.state[input.name + index] = temp[input.name + index] || \"\";\r\n        });\r\n        inputs.west.forEach((input, key) => {\r\n          this.state[input.name + index] = temp[input.name + index] || \"\";\r\n        });\r\n        inputs.south.forEach((input, key) => {\r\n          this.state[input.name + index] = temp[input.name + index] || \"\";\r\n        });\r\n        this.state[\"parcelSliceNo\" + index] =\r\n          requestType != 2 ? temp[\"parcelSliceNo\" + index] || \"\" : \"\";\r\n        this.state[\"parcel_name\" + index] =\r\n          element.parcel_name || temp[\"parcelName\" + index] || \"\";\r\n        this.state[\"area_text\" + index] = temp[\"area_text\" + index] || \"\";\r\n      });\r\n\r\n      this.recalculateBoundries(suggestionsParcels, (obj) => {\r\n        Object.keys(obj).forEach((key) => {\r\n          this.state[key] = obj[key];\r\n        });\r\n      });\r\n    }\r\n\r\n    this.isLoaded = true;\r\n    this.toLoadLines = true;\r\n    //this.setState({});\r\n  }\r\n\r\n  saveEdit(id, name, i, polygonKey) {\r\n    if (this.state.isUpdateContract) {\r\n      this.state.polygons[polygonKey][\"survayParcelCutter\"][0][name] =\r\n        this[\"edit_\" + name + i + `${!isNaN(polygonKey) ? polygonKey : \"\"}`];\r\n      this.setState(\r\n        {\r\n          [name +\r\n            \"_isEdit_\" +\r\n            i +\r\n            `${!isNaN(polygonKey) ? polygonKey : \"\"}`]: false,\r\n        },\r\n        () => {\r\n          this.settoStore(this.state.polygons);\r\n        }\r\n      );\r\n    } else {\r\n      if ([\"DISTRICT_NAME\", \"PARCEL_BLOCK_NO\"].indexOf(name) == -1) {\r\n        this.setState(\r\n          {\r\n            [name +\r\n              \"_isEdit_\" +\r\n              i +\r\n              `${!isNaN(polygonKey) ? polygonKey : \"\"}`]: false,\r\n            //karim for whaheed\r\n            /*[`survayParcelCutter${!isNaN(polygonKey) ? polygonKey : \"\"}`]:\r\n              this[\r\n                \"edit_\" + name + i + `${!isNaN(polygonKey) ? polygonKey : \"\"}`\r\n              ],*/\r\n          },\r\n          () => {\r\n            this.settoStore(this.state.polygons);\r\n          }\r\n        );\r\n      } else {\r\n        this.state.polygons[i].attributes[name] =\r\n          this[\"edit_\" + name + i + `${!isNaN(polygonKey) ? polygonKey : \"\"}`];\r\n        this.setState(\r\n          {\r\n            [name +\r\n              \"_isEdit_\" +\r\n              i +\r\n              `${!isNaN(polygonKey) ? polygonKey : \"\"}`]: false,\r\n          },\r\n          () => {\r\n            this.settoStore(this.state.polygons);\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  myChangeHandler = (name, i, e, polygonKey, event) => {\r\n    this[\"edit_\" + name + i + `${!isNaN(polygonKey) ? polygonKey : \"\"}`] =\r\n      event.target.value;\r\n    if ([\"DISTRICT_NAME\", \"PARCEL_BLOCK_NO\"].indexOf(name) == -1) {\r\n      e[name] = event.target.value;\r\n    } else {\r\n      e.attributes[name] = event.target.value;\r\n    }\r\n    this.setState({\r\n      [name + \"_isEdit_\" + i + `${!isNaN(polygonKey) ? polygonKey : \"\"}`]: true,\r\n    });\r\n  };\r\n\r\n  showEditBtn = (name, value) => {\r\n    return (\r\n      (!this.state.viewNumbersOnly &&\r\n        [\r\n          \"NORTH_EAST_DIRECTION\",\r\n          \"NORTH_WEST_DIRECTION\",\r\n          \"SOUTH_EAST_DIRECTION\",\r\n          \"SOUTH_WEST_DIRECTION\",\r\n        ].indexOf(name) > -1) ||\r\n      [\"DISTRICT_NAME\", \"PARCEL_BLOCK_NO\"].indexOf(name) != -1 ||\r\n      false\r\n    );\r\n  };\r\n\r\n  enableEdit = (name, i, polygonKey) => {\r\n    this.setState({\r\n      [name + \"_isEdit_\" + i + `${!isNaN(polygonKey) ? polygonKey : \"\"}`]: true,\r\n    });\r\n  };\r\n\r\n  id2List = {\r\n    droppable_North: \"northBoundries\",\r\n    droppable_South: \"southBoundries\",\r\n    droppable_East: \"eastBoundries\",\r\n    droppable_West: \"westBoundries\",\r\n  };\r\n\r\n  getList = (id) => this.state[this.id2List[id] + (this.state.activeKey - 1)];\r\n\r\n  onDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const items = reorder(\r\n        this.getList(source.droppableId),\r\n        source.index,\r\n        destination.index\r\n      );\r\n\r\n      let state = { items };\r\n\r\n      if (source.droppableId === \"droppable_South\") {\r\n        state = { [\"southBoundries\" + (this.state.activeKey - 1)]: items };\r\n      }\r\n      if (source.droppableId === \"droppable_North\") {\r\n        state = { [\"northBoundries\" + (this.state.activeKey - 1)]: items };\r\n      }\r\n      if (source.droppableId === \"droppable_East\") {\r\n        state = { [\"eastBoundries\" + (this.state.activeKey - 1)]: items };\r\n      }\r\n      if (source.droppableId === \"droppable_West\") {\r\n        state = { [\"westBoundries\" + (this.state.activeKey - 1)]: items };\r\n      }\r\n\r\n      this.setState(state);\r\n    } else {\r\n      const result = move(\r\n        this.getList(source.droppableId),\r\n        this.getList(destination.droppableId),\r\n        source,\r\n        destination\r\n      );\r\n\r\n      if (result.droppable_North) {\r\n        this.state.polygons[+this.state.activeKey - 1].data[0].data =\r\n          result.droppable_North.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n      if (result.droppable_West) {\r\n        this.state.polygons[+this.state.activeKey - 1].data[3].data =\r\n          result.droppable_West.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n      if (result.droppable_South) {\r\n        this.state.polygons[+this.state.activeKey - 1].data[4].data =\r\n          result.droppable_South.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n      if (result.droppable_East) {\r\n        this.state.polygons[+this.state.activeKey - 1].data[1].data =\r\n          result.droppable_East.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n\r\n      this.dropSuccess();\r\n      this.calculateLines();\r\n\r\n      this.setState({\r\n        [\"northBoundries\" + (this.state.activeKey - 1)]:\r\n          result.droppable_North ||\r\n          this.state[\"northBoundries\" + (this.state.activeKey - 1)],\r\n        [\"southBoundries\" + (this.state.activeKey - 1)]:\r\n          result.droppable_South ||\r\n          this.state[\"southBoundries\" + (this.state.activeKey - 1)],\r\n        [\"eastBoundries\" + (this.state.activeKey - 1)]:\r\n          result.droppable_East ||\r\n          this.state[\"eastBoundries\" + (this.state.activeKey - 1)],\r\n        [\"westBoundries\" + (this.state.activeKey - 1)]:\r\n          result.droppable_West ||\r\n          this.state[\"westBoundries\" + (this.state.activeKey - 1)],\r\n      });\r\n    }\r\n  };\r\n\r\n  dropSuccess = () => {\r\n    const { input } = this.props;\r\n    const { layerParcels } = this.state;\r\n\r\n    clearGraphicFromLayer(this.map, \"boundriesDirection\");\r\n    clearGraphicFromLayer(this.map, \"highlightBoundriesGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"pictureGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n\r\n    var count = 0;\r\n\r\n    var oldData = JSON.parse(JSON.stringify(layerParcels));\r\n\r\n    this.state.layerParcels = [];\r\n\r\n    sortLines(this.state.polygons);\r\n\r\n    this.state.polygons.forEach((polygon, key) => {\r\n      if (polygon.polygon) {\r\n        count++;\r\n        var parcelNumber = key + 1;\r\n\r\n        if (oldData[key]) {\r\n          polygon.corners = JSON.parse(JSON.stringify(oldData[key].corners));\r\n        } else polygon.corners = [];\r\n\r\n        layerParcels.push(JSON.parse(JSON.stringify(polygon.polygon)));\r\n        layerParcels[layerParcels.length - 1].lines = [];\r\n        layerParcels[layerParcels.length - 1].corners = [];\r\n\r\n        polygon.data.forEach((boundry) => {\r\n          var lineDirection;\r\n          if (boundry.name != \"main\") {\r\n            var color = [0, 0, 255];\r\n\r\n            if (boundry.name == \"north\") {\r\n              color = [0, 141, 255];\r\n              lineDirection = 1;\r\n            } else if (boundry.name == \"east\") {\r\n              color = [117, 114, 114];\r\n              lineDirection = 2;\r\n            } else if (boundry.name == \"west\") {\r\n              color = [255, 0, 0];\r\n              lineDirection = 4;\r\n            } else if (boundry.name == \"south\") {\r\n              color = [0, 255, 0];\r\n              lineDirection = 3;\r\n            }\r\n\r\n            boundry.data.forEach((line) => {\r\n              //if (this.toLoadLines) {\r\n              line.color = color;\r\n              line.polygonNum = count;\r\n              line.lineDirection = lineDirection;\r\n\r\n              var polyline = new esri.geometry.Polyline(line);\r\n\r\n              var point1 = {};\r\n              point1.x = line.paths[0][0][0];\r\n              point1.y = line.paths[0][0][1];\r\n\r\n              point1.x = Number(point1.x.toPrecision(12));\r\n              point1.y = Number(point1.y.toPrecision(12));\r\n\r\n              var latlng = esri.geometry.xyToLngLat(point1.x, point1.y);\r\n              point1.lat = latlng[0];\r\n              point1.lng = latlng[1];\r\n\r\n              var point2 = {};\r\n              point2.x = line.paths[0][1][0];\r\n              point2.y = line.paths[0][1][1];\r\n\r\n              point2.x = Number(point2.x.toPrecision(12));\r\n              point2.y = Number(point2.y.toPrecision(12));\r\n\r\n              latlng = esri.geometry.xyToLngLat(point2.x, point2.y);\r\n              point2.lat = latlng[0];\r\n              point2.lng = latlng[1];\r\n\r\n              var fromCornerIndex = getCornersIndex(polygon.corners, point1);\r\n              if (fromCornerIndex == -1) {\r\n                polygon.corners.push(point1);\r\n                fromCornerIndex = polygon.corners.length;\r\n              }\r\n              var toCornerIndex = getCornersIndex(polygon.corners, point2);\r\n              if (toCornerIndex == -1) {\r\n                polygon.corners.push(point2);\r\n                toCornerIndex = polygon.corners.length;\r\n              }\r\n\r\n              line.from = fromCornerIndex;\r\n              line.to = toCornerIndex;\r\n              line.BOUNDARY_NO = line.from;\r\n\r\n              var polyline = new esri.geometry.Polyline(line);\r\n\r\n              layerParcels[layerParcels.length - 1].lines.push(polyline);\r\n\r\n              var attr = {\r\n                parcelNumber: parcelNumber,\r\n              };\r\n\r\n              addGraphicToLayer(\r\n                polyline,\r\n                this.map,\r\n                \"boundriesDirection\",\r\n                color,\r\n                null,\r\n                null,\r\n                null,\r\n                attr\r\n              );\r\n              // } else {\r\n              //   var polyline = new esri.geometry.Polyline(line);\r\n              //   addGraphicToLayer(\r\n              //     polyline,\r\n              //     this.map,\r\n              //     \"boundriesDirection\",\r\n              //     color,\r\n              //     null,\r\n              //     null,\r\n              //     null,\r\n              //     attr\r\n              //   );\r\n              // }\r\n            });\r\n          }\r\n        });\r\n\r\n        layerParcels[layerParcels.length - 1].corners = JSON.parse(\r\n          JSON.stringify(polygon.corners)\r\n        );\r\n      }\r\n    });\r\n\r\n    //draw corners\r\n    layerParcels.forEach((polygon, key) => {\r\n      var polygonClass = new esri.geometry.Polygon(polygon);\r\n      var graphic = new esri.Graphic(polygonClass, null, null, null);\r\n      var pt = graphic.geometry.getExtent().getCenter();\r\n      polygon.lines.forEach((line, key) => {\r\n        var attr = {\r\n          BOUNDARY_NO: line.BOUNDARY_NO,\r\n          FROM_CORNER: line.from,\r\n          TO_CORNER: line.to,\r\n          BOUNDARY_LENGTH: line.text,\r\n          BOUNDARY_DIRECTION: line.lineDirection,\r\n        };\r\n\r\n        var graphic = new esri.Graphic(line, null, attr, null);\r\n        polygon.lines[key] = graphic;\r\n\r\n        var tempString = \" يميل \"; //\" من النقطة \" + \"<b>\" + line.from + \"</b>\" + \" الي النقطة \" + \"<b>\" + line.to + \"</b>\" + \" \";\r\n\r\n        if (line.lineDirection == 1) {\r\n          if (!polygon.northDescription)\r\n            polygon.northDescription = \"من الغرب الي الشرق\";\r\n          else {\r\n            polygon.northDescription += \" ثم \";\r\n          }\r\n          polygon.northDescription +=\r\n            tempString +\r\n            computeAngle(line.paths[0][0], line.paths[0][1]) +\r\n            \" بطول \" +\r\n            \"<b>\" +\r\n            line.text +\r\n            \"</b>\" +\r\n            \" م\";\r\n        } else if (line.lineDirection == 4) {\r\n          if (!polygon.westDescription)\r\n            polygon.westDescription = \" من الجنوب الي الشمال\";\r\n          else {\r\n            polygon.westDescription += \" ثم \";\r\n          }\r\n          polygon.westDescription +=\r\n            tempString +\r\n            computeAngle(line.paths[0][0], line.paths[0][1]) +\r\n            \" بطول \" +\r\n            \"<b>\" +\r\n            line.text +\r\n            \"</b>\" +\r\n            \" م\";\r\n        } else if (line.lineDirection == 3) {\r\n          if (!polygon.southDescription)\r\n            polygon.southDescription = \"من الشرق الي الغرب\";\r\n          else {\r\n            polygon.southDescription += \" ثم \";\r\n          }\r\n\r\n          polygon.southDescription +=\r\n            tempString +\r\n            computeAngle(line.paths[0][0], line.paths[0][1]) +\r\n            \" بطول \" +\r\n            \"<b>\" +\r\n            line.text +\r\n            \"</b>\" +\r\n            \" م\";\r\n        } else if (line.lineDirection == 2) {\r\n          if (!polygon.eastDescription)\r\n            polygon.eastDescription = \"من الشمال الي الجنوب\";\r\n          else {\r\n            polygon.eastDescription += \" ثم \";\r\n          }\r\n\r\n          polygon.eastDescription +=\r\n            tempString +\r\n            computeAngle(line.paths[0][0], line.paths[0][1]) +\r\n            \" بطول \" +\r\n            \"<b>\" +\r\n            line.text +\r\n            \"</b>\" +\r\n            \" م\";\r\n        }\r\n      });\r\n\r\n      polygon?.corners?.forEach((corner, key) => {\r\n        var point = new esri.geometry.Point(corner.lat, corner.lng);\r\n        var mp = esri.geometry.geographicToWebMercator(point);\r\n\r\n        var iconTextPosition;\r\n        var iconPosition;\r\n\r\n        if (!corner.iconPosition) {\r\n          iconTextPosition = { x: -5, y: 0 };\r\n          iconPosition = { x: 0, y: 0 };\r\n\r\n          if (layerParcels.length > 1) {\r\n            iconPosition = getCornerIconPosition(key + 1, polygon.lines);\r\n            iconTextPosition.x =\r\n              iconPosition.x > 0 ? iconPosition.x : iconPosition.x - 5;\r\n            iconTextPosition.y =\r\n              iconPosition.y > 0 ? iconPosition.y : iconPosition.y - 4;\r\n          }\r\n\r\n          corner.iconTextPosition = iconTextPosition;\r\n          corner.iconPosition = iconPosition;\r\n        } else {\r\n          iconTextPosition = corner.iconTextPosition;\r\n          iconPosition = corner.iconPosition;\r\n        }\r\n\r\n        if (\r\n          !this.state.isUpdateContract &&\r\n          !this.state.isKrokyUpdateContract &&\r\n          !this.state.isTadkekMesahy &&\r\n          !this.state.isFarz\r\n        )\r\n          addParcelNo(\r\n            mp,\r\n            this.map,\r\n            \"\" + (key + 1) + \"\",\r\n            \"PacrelNoGraphicLayer\",\r\n            25,\r\n            [255, 0, 0],\r\n            null,\r\n            iconTextPosition\r\n          );\r\n      });\r\n    });\r\n\r\n    this.state.polygons.forEach((polygon, key) => {\r\n      if (polygon.polygon) {\r\n        var polygonClass = new esri.geometry.Polygon(polygon.polygon);\r\n        var graphic = new esri.Graphic(polygonClass, null, null, null);\r\n        var pt = graphic.geometry.getExtent().getCenter();\r\n\r\n        polygon.position = pt;\r\n        polygon.northDescription = layerParcels[key]?.northDescription || \"\";\r\n        polygon.westDescription = layerParcels[key]?.westDescription || \"\";\r\n        polygon.southDescription = layerParcels[key]?.southDescription || \"\";\r\n        polygon.eastDescription = layerParcels[key]?.eastDescription || \"\";\r\n        if (\r\n          !polygon.isFullBoundry &&\r\n          !this.state.isKrokyUpdateContract &&\r\n          !this.state.isTadkekMesahy\r\n        ) {\r\n          redrawNames(\r\n            polygon,\r\n            this.map,\r\n            setParcelName([\r\n              this.state[\"parcel_name\" + key],\r\n              this.state[\"parcelSliceNo\" + key],\r\n            ]),\r\n            \"PacrelNoGraphicLayer\",\r\n            key\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    // DrawIntersectLines();\r\n  };\r\n\r\n  calculateLines = () => {\r\n    this.state.polygons.forEach((polygon, key) => {\r\n      polygon.data.forEach((lines) => {\r\n        lines.totalLength = 0;\r\n        lines.data.forEach((line) => {\r\n          //if (!line.hide) lines.totalLength += line.text;\r\n          if (!line.hide) lines.totalLength += +(+line.text).toFixed(2);\r\n        });\r\n        lines.totalLength = lines.totalLength; //.toFixed(2);\r\n      });\r\n    });\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  getSuggestLine = () => {\r\n    this.state.polygons.forEach((polygon, index) => {\r\n      if (polygon.area != -1) {\r\n        this.state[\"area\" + index] = (+polygon.area).toFixed(2);\r\n        var lengthPoint1, lengthPoint2;\r\n        var polyg = new esri.geometry.Polygon(polygon.polygon);\r\n        var polygonCenterPoint = polyg.getExtent().getCenter();\r\n        polygon.data[2].data.forEach((boundry, key) => {\r\n          if (this.toLoadLines) {\r\n            // var line = new esri.geometry.Polyline(boundry);\r\n            // var centerPointofLine = line.getExtent().getCenter();\r\n\r\n            // var diffrenceInXWithMaxPoint = Math.abs(\r\n            //   centerPointofLine.x - polygon.maxPoint.x\r\n            // );\r\n            // var diffrenceWithPolygonCenterPoint = Math.abs(\r\n            //   centerPointofLine.x - polygonCenterPoint.x\r\n            // );\r\n\r\n            // if (diffrenceInXWithMaxPoint < diffrenceWithPolygonCenterPoint) {\r\n            //   polygon.data[1].data.push(boundry);\r\n            // } else {\r\n            //   if (direction.direction == \"west\") {\r\n            //     polygon.data[3].data.push(boundry);\r\n            //   } else if (direction.direction == \"north\") {\r\n            //     polygon.data[0].data.push(boundry);\r\n            //   } else if (direction.direction == \"south\") {\r\n            //     polygon.data[4].data.push(boundry);\r\n            //   }\r\n            // }\r\n            let direction = computePointDirection(\r\n              polygon,\r\n              boundry.paths[0][0],\r\n              boundry.paths[0][1],\r\n              polyg\r\n            );\r\n            if (direction.direction == \"east\") {\r\n              polygon.data[1].data.push(boundry);\r\n            } else {\r\n              if (direction.direction == \"west\") {\r\n                polygon.data[3].data.push(boundry);\r\n              } else if (direction.direction == \"north\") {\r\n                polygon.data[0].data.push(boundry);\r\n              } else if (direction.direction == \"south\") {\r\n                polygon.data[4].data.push(boundry);\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        polygon.data[2].data = [];\r\n      }\r\n    });\r\n\r\n    // const {\r\n    //   mainObject: {\r\n    //     waseka: {\r\n    //       waseka: { sakType },\r\n    //     },\r\n    //   },\r\n    // } = this.props;\r\n\r\n    //if (!sakType || (sakType && sakType != \"4\")) {\r\n    this.dropSuccess();\r\n    //}\r\n\r\n    this.recalculateBoundries(this.state.polygons, (obj) => {\r\n      this.setState(obj);\r\n    });\r\n    this.calculateLines();\r\n  };\r\n\r\n  recalculateBoundries = (polygons, callback) => {\r\n    if (polygons && polygons.length > 0) {\r\n      var obj = { polygons: polygons };\r\n      polygons.forEach((polygon, index) => {\r\n        obj[\"westBoundries\" + index] = polygon.data[3].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"west_\" + i}`,\r\n            content: item.text,\r\n            data: item,\r\n          };\r\n        });\r\n        obj[\"northBoundries\" + index] = polygon.data[0].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"north_\" + i}`,\r\n            content: item.text,\r\n            data: item,\r\n          };\r\n        });\r\n        obj[\"eastBoundries\" + index] = polygon.data[1].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"east_\" + i}`,\r\n            content: item.text,\r\n            data: item,\r\n          };\r\n        });\r\n        obj[\"southBoundries\" + index] = polygon.data[4].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"south_\" + i}`,\r\n            content: item.text,\r\n            data: item,\r\n          };\r\n        });\r\n      });\r\n\r\n      if (callback) {\r\n        callback(obj);\r\n      }\r\n    }\r\n  };\r\n\r\n  buildCADDetails = (isLoading) => {\r\n    // componentDidUpdate\r\n    //return new Promise((resolve,reject) => {\r\n    let mainObject = selectMainObject(this.props);\r\n    const { mapLayers, t } = this.props;\r\n    const {\r\n      outRange,\r\n      pointsLength,\r\n      annotationLength,\r\n      polygons,\r\n      lineLengthFont,\r\n      parcelNumberFont,\r\n      isBoundry,\r\n      cadResults,\r\n      isKrokyUpdateContract,\r\n      isUpdateContract,\r\n      isTadkekMesahy,\r\n      isPlan,\r\n      notify,\r\n      hideDrag,\r\n      muns,\r\n    } = this.state;\r\n\r\n    //if(this.state.polygons && this.state.polygons.length == 0 && cadResults.data.length > 0){\r\n\r\n    //if (isPlan) {\r\n\r\n    if (this.map && cadResults && cadResults.data) {\r\n      getInfo().then((res) => {\r\n        this.LayerID = res;\r\n        let LayerID = res;\r\n        intersectQueryTask({\r\n          outFields: [\"*\"],\r\n          geometry:\r\n            (cadResults?.data &&\r\n              cadResults?.data[0]?.shapeFeatures &&\r\n              cadResults?.data[0]?.shapeFeatures[0]) ||\r\n            null,\r\n          url: mapUrl + \"/\" + LayerID?.Municipality_Boundary,\r\n          where: `MUNICIPALITY_NAME = ${mainObject?.landData?.landData?.municipality_id ||\r\n            mainObject?.landData?.landData?.municipality?.code ||\r\n            mainObject?.landData?.landData?.lands?.parcels?.[0]?.attributes\r\n              ?.MUNICIPALITY_NAME_Code\r\n            }`,\r\n          preQuery: (query, Query) => {\r\n            query.spatialRelationship = Query.SPATIAL_REL_WITHIN;\r\n          },\r\n          callbackResult: (res) => {\r\n            this.state.mun = _.find(muns, function (d) {\r\n              return (\r\n                res?.features &&\r\n                res?.features[0]?.attributes?.MUNICIPALITY_NAME == d?.code\r\n              );\r\n            });\r\n            this.settoStore(this.state.polygons);\r\n          },\r\n          errorCallbackResult: (res) => {\r\n            this.state.mun = null;\r\n            this.settoStore(this.state.polygons);\r\n          },\r\n        });\r\n      });\r\n      let settings = {\r\n        map: this.map,\r\n        layers: mapLayers,\r\n        tolerance: 1,\r\n        polygonFeature: cadResults?.data[0]?.shapeFeatures[0],\r\n        identifyResults: (results) => {\r\n          results = _.groupBy(results, \"layerName\");\r\n          var munLits = [];\r\n          var urbanList = [];\r\n          var submunList = [];\r\n\r\n          if (\r\n            (mainObject?.landData?.landData?.municipality_id ||\r\n              mainObject?.landData?.landData?.municipality?.code ||\r\n              mainObject?.landData?.landData?.lands?.parcels?.[0]?.attributes\r\n                ?.MUNICIPALITY_NAME_Code) &&\r\n            results &&\r\n            results[\"Municipality_Boundary\"]\r\n          ) {\r\n            var mun_class =\r\n              mainObject?.landData?.landData?.municipality?.mun_classes\r\n                ?.mun_class;\r\n\r\n            results[\"Municipality_Boundary\"].forEach((mun) => {\r\n              submunList.push(\r\n                (mun?.feature?.attributes[\"تصنيف البلدية\"]?.toUpperCase() !=\r\n                  \"NULL\" &&\r\n                  mun?.feature?.attributes[\"تصنيف البلدية\"]) ||\r\n                mun_class\r\n              );\r\n            });\r\n\r\n            results[\"Municipality_Boundary\"].forEach(\r\n              function (mun) {\r\n                munLits.push(mun.feature.attributes[\"اسم البلدية\"]);\r\n              }.bind(this)\r\n            );\r\n            results[\"UrbanAreaBoundary\"].forEach((urban) => {\r\n              urbanList.push(urban.feature.attributes[\"نوع النطاق العمرانى\"]);\r\n            });\r\n\r\n            if (!this.state.isPropetryCheck) {\r\n              this.setState({\r\n                planDescription:\r\n                  \"مرحلة التنمية العمرانية ك ( \" +\r\n                  urbanList.join(\" , \") +\r\n                  \" ) بمدينة  ( \" +\r\n                  munLits.join(\" , \") +\r\n                  \" ) المحددة ( \" +\r\n                  submunList.join(\" , \") +\r\n                  \" )\",\r\n              });\r\n              this.settoStore(this.state.polygons);\r\n            }\r\n          }\r\n        },\r\n      };\r\n\r\n      if (\r\n        cadResults?.data[0]?.shapeFeatures[0] &&\r\n        !this.state.isTadkekMesahy &&\r\n        !this.state.isPropetryCheck\r\n      ) {\r\n        this.map.spatialReference = new esri.SpatialReference({\r\n          wkid:\r\n            cadResults?.data[0]?.shapeFeatures[0]?.spatialReference?.wkid ||\r\n            32639,\r\n        });\r\n      }\r\n\r\n      IdentifyTask(settings);\r\n\r\n      clearGraphicFromLayer(this.map, \"highlightBoundriesGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"boundriesGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"boundriesDirection\");\r\n      clearGraphicFromLayer(this.map, \"pictureGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelUnNamedGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"detailedGraphicLayer\");\r\n\r\n      var fullBoundryIndex = cadResults?.data[0]?.shapeFeatures?.findIndex(\r\n        (feature) => feature.isFullBoundry\r\n      );\r\n      if (fullBoundryIndex > 0) {\r\n        let tempShapeFeature = JSON.parse(\r\n          JSON.stringify(cadResults?.data[0]?.shapeFeatures[fullBoundryIndex])\r\n        );\r\n\r\n        cadResults?.data[0]?.shapeFeatures?.splice(fullBoundryIndex, 1);\r\n        cadResults.data[0]?.shapeFeatures?.unshift(tempShapeFeature);\r\n\r\n        if (cadResults?.data[0]?.cadFeatures) {\r\n          let tempCADFeature = JSON.parse(\r\n            JSON.stringify(cadResults?.data[0]?.cadFeatures[fullBoundryIndex])\r\n          );\r\n          cadResults?.data[0]?.cadFeatures?.splice(fullBoundryIndex, 1);\r\n          cadResults?.data[0]?.cadFeatures?.unshift(tempCADFeature);\r\n        }\r\n      }\r\n\r\n      var cadResponse = cadResults?.data[0]?.shapeFeatures;\r\n      var cadOutOfSakBoundriesResponse = cadResults?.data[0]?.outOfSakBoundries;\r\n      var cadHiddenOfSakBoundriesResponse =\r\n        cadResults?.data[0]?.hiddenOfSakBoundries;\r\n\r\n      const { inputs } = this.props;\r\n      //\r\n\r\n      let requestType = mainObject?.landData?.requestType;\r\n\r\n      if (\r\n        !isTadkekMesahy &&\r\n        cadResponse.length > 1 &&\r\n        (!(\r\n          isKrokyUpdateContract ||\r\n          isUpdateContract ||\r\n          this.props.currentModule.record.workflow_id == 2028\r\n        ) ||\r\n          (isUpdateContract && requestType == 2))\r\n      ) {\r\n        cadResults.data = null;\r\n        window.notifySystem(\"error\", t(\"NOTVALIDCAD\"));\r\n        return;\r\n      }\r\n\r\n      if (\r\n        (isKrokyUpdateContract ||\r\n          isUpdateContract ||\r\n          this.props.currentModule.record.workflow_id == 2028) &&\r\n        !isTadkekMesahy\r\n      ) {\r\n        this.state.isBoundry = _.find(\r\n          cadResults?.data[0]?.shapeFeatures,\r\n          (d) => {\r\n            return d.isFullBoundry;\r\n          }\r\n        );\r\n\r\n        if (\r\n          !this.state.isBoundry &&\r\n          cadResults?.data[0]?.shapeFeatures?.length > 1\r\n        ) {\r\n          window.notifySystem(\"error\", t(\"BOUNDRYNOTFOUND\"));\r\n          return;\r\n        }\r\n      }\r\n\r\n      //this.state.cadFiles: cadResults.data[0]});\r\n\r\n      var cadResponsePoints = _.chain(cadResults?.data[0]?.shapeFeatures)\r\n        .map((polygon, key) => {\r\n          return polygon.rings[0].map((point) => {\r\n            return new esri.geometry.Point(\r\n              point[0],\r\n              point[1],\r\n              new esri.SpatialReference(polygon.spatialReference)\r\n            );\r\n          });\r\n        })\r\n        .flatten(true)\r\n        .value();\r\n\r\n      var cadResponseOutOfSakBoundriesPoints = _.chain(\r\n        cadResults?.data[0]?.outOfSakBoundries\r\n      )\r\n        .map((polygon, key) => {\r\n          return polygon.rings[0].map((point) => {\r\n            return new esri.geometry.Point(\r\n              point[0],\r\n              point[1],\r\n              new esri.SpatialReference(polygon.spatialReference)\r\n            );\r\n          });\r\n        })\r\n        .flatten(true)\r\n        .value();\r\n\r\n      var cadResponseCopy = JSON.stringify(cadResults?.data[0]?.shapeFeatures);\r\n      var cadResponseOutOfSakBoundriesCopy = JSON.stringify(\r\n        cadResults?.data[0]?.outOfSakBoundries\r\n      );\r\n\r\n      var cadArcResponseCopy = JSON.stringify(\r\n        cadResults?.data[0]?.shapeFeatures\r\n      );\r\n      var unPolgyons = JSON.parse(cadArcResponseCopy);\r\n      unPolgyons.forEach((polygon, key) => {\r\n        polygon.rings[0] = _.filter(polygon.rings[0], (point) => {\r\n          return isPointOrArc(\r\n            { x: point[0], y: point[1] },\r\n            key,\r\n            cadResults?.data[0]?.cadFeatures\r\n          );\r\n        });\r\n      });\r\n\r\n      var unprojectArcPolygons = _.chain(cadResults?.data[0]?.shapeFeatures)\r\n        .map((polygon, key) => {\r\n          return polygon.rings[0].map((point) => {\r\n            if (\r\n              isPointOrArc(\r\n                { x: point[0], y: point[1] },\r\n                key,\r\n                cadResults?.data[0]?.cadFeatures\r\n              )\r\n            ) {\r\n              return new esri.geometry.Point(\r\n                point[0],\r\n                point[1],\r\n                new esri.SpatialReference(polygon.spatialReference)\r\n              );\r\n            } else return null;\r\n          });\r\n        })\r\n        .flatten(true)\r\n        .value();\r\n\r\n      project(\r\n        cadResponsePoints,\r\n        32639,\r\n        (points) => {\r\n          if (points) {\r\n            var plogs = _.chain(JSON.parse(cadResponseCopy))\r\n              .map((d) => {\r\n                d.rings[0] = ((Array.isArray(points[0]) && points[0]) || points)\r\n                  ?.splice(0, d.rings[0].length)\r\n                  ?.map((point) => {\r\n                    return [point.x, point.y];\r\n                  });\r\n                //d.spatialReference = new esri.SpatialReference({ wkid: 102100 });\r\n                return d;\r\n              })\r\n              .value();\r\n\r\n            var index = -1;\r\n\r\n            let featuresLengthTemp = JSON.parse(cadResponseCopy).length;\r\n\r\n            getPolygons(\r\n              JSON.parse(cadResponseCopy),\r\n              (polygon_project, esriModules, elem, key) => {\r\n                var polygon = new esri.geometry.Polygon(plogs[key]);\r\n                //check if in urban area boundry\r\n                var successWithinFun = (res) => {\r\n                  if (res.features.length > 0) {\r\n                    var cache = [];\r\n                    let eliminateCircularRecursive = function (key, value) {\r\n                      if (typeof value === \"object\" && value !== null) {\r\n                        if (cache.indexOf(value) !== -1) {\r\n                          // Circular reference found, discard key\r\n                          return;\r\n                        }\r\n                        // Store value in our collection\r\n                        cache.push(value);\r\n                      }\r\n                      return value;\r\n                    };\r\n                    //data.datasets = JSON.stringify(data.datasets, eliminateCircularRecursive);\r\n\r\n                    res.features = JSON.parse(\r\n                      JSON.stringify(res.features, eliminateCircularRecursive)\r\n                    );\r\n                    this.state.isWithinUrbanBoundry = res.features;\r\n                  }\r\n                  //stepItem.isWithinUrbanBoundry = false;\r\n                  else {\r\n                    this.state.isWithinUrbanBoundry = false;\r\n                    this.resetStore();\r\n                    window.notifySystem(\r\n                      \"error\",\r\n                      t(\"messages:IS_NOT_WITHIN_URBAN_AREA_BOUNDRY\")\r\n                    );\r\n                    return;\r\n                  }\r\n\r\n                  // store.dispatch({type:'Show_Loading_new',loading: false});\r\n                };\r\n\r\n                if (mapLayers?.length && this.props.currentModule?.record?.app_id == 16) {\r\n                  //\"Municipality_Boundary\"\r\n\r\n                  checkOverlappingFeaturesWithLayer(\r\n                    window.mapUrl +\r\n                    \"/\" +\r\n                    _.find(mapLayers, (layer) => {\r\n                      return (\r\n                        layer.name.toLowerCase() == \"municipality_boundary\"\r\n                      );\r\n                    })?.id,\r\n                    polygon,\r\n                    \"MUNICIPALITY_NAME = \" +\r\n                    (mainObject?.landData?.landData?.municipality_id ||\r\n                      mainObject?.landData?.landData?.municipality?.code ||\r\n                      mainObject?.landData?.landData?.lands?.parcels?.[0]\r\n                        ?.attributes?.MUNICIPALITY_NAME_Code),\r\n                    this.map\r\n                  ).then(\r\n                    (res) => {\r\n                      let municipality =\r\n                        mainObject?.landData?.landData?.municipality_id ||\r\n                        mainObject?.landData?.landData?.municipality?.code ||\r\n                        mainObject?.landData?.landData?.lands?.parcels?.[0]\r\n                          ?.attributes?.MUNICIPALITY_NAME_Code;\r\n\r\n                      if (\r\n                        res?.features[0]?.attributes?.MUNICIPALITY_NAME ==\r\n                        municipality\r\n                      ) {\r\n                        checkOverlappingFeaturesWithLayer(\r\n                          window.mapUrl +\r\n                          \"/\" +\r\n                          _.find(mapLayers, (layer) => {\r\n                            return (\r\n                              layer.name.toLowerCase() == \"urbanareaboundary\"\r\n                            );\r\n                          })?.id,\r\n                          polygon,\r\n                          undefined,\r\n                          this.map\r\n                        ).then(successWithinFun, (res) => {\r\n                          this.state.isWithinUrbanBoundry = false;\r\n                          this.resetMsa7yData();\r\n                          //this.resetStore();\r\n                          window.notifySystem(\r\n                            \"error\",\r\n                            t(\"messages:IS_NOT_WITHIN_URBAN_AREA_BOUNDRY\"),\r\n                            10\r\n                          );\r\n                        });\r\n                      } else {\r\n                        this.resetMsa7yData();\r\n                        window.notifySystem(\r\n                          \"error\",\r\n                          t(\"خارج نطاق البلدية المختارة\"),\r\n                          10\r\n                        );\r\n                      }\r\n                    },\r\n                    (res) => {\r\n                      //this.state.isWithinUrbanBoundry = false;\r\n                      this.resetMsa7yData();\r\n                      window.notifySystem(\r\n                        \"error\",\r\n                        t(\"خارج نطاق البلدية المختارة\"),\r\n                        10\r\n                      );\r\n                    }\r\n                  );\r\n\r\n                  // queryTask({\r\n                  //   url:\r\n                  //     window.mapUrl +\r\n                  //     \"/\" +\r\n                  //     _.find(mapLayers, (layer) => {\r\n                  //       return layer.name.toLowerCase() == \"urbanareaboundary\";\r\n                  //     })?.id,\r\n                  //   where: \"1=1\",\r\n                  //   outFields: [\"OBJECTID\", \"REMARKS\"],\r\n                  //   callbackResult: successWithinFun,\r\n                  //   callbackError: () => {\r\n                  //     //    store.dispatch({type:'Show_Loading_new',loading: false});\r\n                  //     this.state.isWithinUrbanBoundry = false;\r\n                  //   },\r\n                  //   preQuery: (query, Query) => {\r\n                  //     if (polygon) {\r\n                  //       query.geometry = dojo.clone(polygon);\r\n                  //       query.spatialRelationship = Query.SPATIAL_REL_WITHIN;\r\n                  //     }\r\n                  //   },\r\n                  // });\r\n                }\r\n\r\n\r\n                if (mapLayers?.length && this.props.currentModule?.record?.app_id == 27) {\r\n\r\n                  getInfo().then((res) => {\r\n                    this.state.isUnPlannedParcelIntersect = false;\r\n                    intersectQueryTask({\r\n                      outFields: [\"SUBMISSIONNO\"],\r\n                      geometry: polygon,\r\n                      url: mapUrl + \"/\" + res[\"UnplannedParcels\"],\r\n                      preQuery: (query, Query) => {\r\n                        query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\r\n                      },\r\n                      callbackResult: (res) => {\r\n                        debugger\r\n                        if (res.features.length) {\r\n                          this.state.isUnPlannedParcelIntersect = \" ( \" + res.features.filter(x => x.attributes.SUBMISSIONNO).map(x => x.attributes.SUBMISSIONNO).join(\" , \") + \" )\";\r\n                          this.setState({\r\n                            isUnPlannedParcelIntersect: this.state.isUnPlannedParcelIntersect\r\n                          });\r\n                        }\r\n                      },\r\n                      errorCallbackResult: (res) => {\r\n                        debugger\r\n                      },\r\n                    });\r\n                  });\r\n\r\n                }\r\n                const { input } = this.props;\r\n                const { isView } = this.props;\r\n\r\n                // const {\r\n                //   landData: {\r\n                //     landData: {\r\n                //       lands: { parcels },\r\n                //     },\r\n                //   },\r\n                // } = mainObject;\r\n                let requestType = mainObject?.landData?.requestType;\r\n                let parcels = mainObject?.landData?.landData?.lands?.parcels;\r\n\r\n                if (this.InvokedToAdParcel) {\r\n                  this.state.polygons.splice(\r\n                    !polygon_project.isFullBoundry\r\n                      ? this.state.polygons.length\r\n                      : 0,\r\n                    0,\r\n                    {\r\n                      parcel_name: \"\",\r\n                      area: -1,\r\n                      data: [\r\n                        { name: \"north\", data: [], totalLength: 0 },\r\n                        { name: \"east\", data: [], totalLength: 0 },\r\n                        { name: \"main\", data: [], totalLength: 0 },\r\n                        { name: \"west\", data: [], totalLength: 0 },\r\n                        { name: \"south\", data: [], totalLength: 0 },\r\n                      ],\r\n                    }\r\n                  );\r\n                }\r\n\r\n                let isFullBoundryIndex = JSON.parse(cadResponseCopy)?.findIndex(\r\n                  (cadParcel) => cadParcel?.isFullBoundry\r\n                );\r\n\r\n                // key =\r\n                // isFullBoundryIndex > -1 &&\r\n                //   (isKrokyUpdateContract ||\r\n                //     isUpdateContract ||\r\n                //     this.props.currentModule.record.workflow_id == 2028)\r\n                //     ? this.state.polygons.length - 1\r\n                //     : 0;\r\n                if (polygon_project.isFullBoundry) {\r\n                  this.state.polygons[key].parcel_name = \"حدود المعاملة\";\r\n                  this.state.polygons[key].isFullBoundry = true;\r\n                  this.state.polygons[key].area =\r\n                    (!isLoading &&\r\n                      +cadResponse.sum(\"area\").toFixed(2) -\r\n                      (+cadOutOfSakBoundriesResponse\r\n                        ?.sum(\"area\")\r\n                        ?.toFixed(2) || 0) -\r\n                      (+cadHiddenOfSakBoundriesResponse\r\n                        ?.sum(\"area\")\r\n                        ?.toFixed(2) || 0)) ||\r\n                    this.props.mainObject?.data_msa7y?.msa7yData?.cadDetails\r\n                      ?.temp[\"area\" + key];\r\n                } else {\r\n                  this.state.polygons[key].area =\r\n                    (!isLoading &&\r\n                      ((isFullBoundryIndex == -1 &&\r\n                        elem.area -\r\n                        (+cadOutOfSakBoundriesResponse\r\n                          ?.sum(\"area\")\r\n                          ?.toFixed(2) || 0) -\r\n                        (+cadHiddenOfSakBoundriesResponse\r\n                          ?.sum(\"area\")\r\n                          ?.toFixed(2) || 0)) ||\r\n                        elem.area)) ||\r\n                    this.props.mainObject?.data_msa7y?.msa7yData?.cadDetails?.[\r\n                    \"area\" + key\r\n                    ] ||\r\n                    (this.state.polygons[key].area > 0 &&\r\n                      this.state.polygons[key].area) ||\r\n                    Math.abs(+elem.area.toFixed(2)) ||\r\n                    \"\";\r\n\r\n                  if (\r\n                    this.state.isUpdateContract &&\r\n                    !isEmpty(this.state.polygons[key].parcel_name)\r\n                  ) {\r\n                    this.state.polygons[key].parcel_name = isEmpty(\r\n                      this.state[`parcelSliceNo${key}`]\r\n                    )\r\n                      ? this.state[`parcel_name${key}`]\r\n                      : `${this.state[`parcelSliceNo${key}`]}/${this.state[`parcel_name${key}`]\r\n                      }`;\r\n\r\n                    // if (this.state.polygons[key]?.position) {\r\n                    //   redrawNames(\r\n                    //     this.state.polygons[key],\r\n                    //     this.map,\r\n                    //     setParcelName([\r\n                    //       this.state[\"parcel_name\" + key],\r\n                    //       this.state[\"parcelSliceNo\" + key],\r\n                    //     ]),\r\n                    //     \"PacrelNoGraphicLayer\",\r\n                    //     key\r\n                    //   );\r\n                    // }\r\n                  } else if (\r\n                    (this.state.isUpdateContract ||\r\n                      this.state.isKrokyUpdateContract ||\r\n                      this.state.isTadkekMesahy) &&\r\n                    isEmpty(this.state.polygons[key].parcel_name)\r\n                  ) {\r\n                    this.state[`parcelSliceNo${key}`] = \"\";\r\n                    this.state.polygons[key].parcel_name =\r\n                      this.state.isKrokyUpdateContract &&\r\n                        !this.state.isTadkekMesahy\r\n                        ? `أرض رقم ${key}`\r\n                        : `أرض رقم ${key + 1}`;\r\n                    this.state[`parcel_name${key}`] =\r\n                      this.state.polygons[key].parcel_name;\r\n                    this.state[`parcel_name${key}`] = undefined;\r\n                  } else if (\r\n                    !this.state.isKrokyUpdateContract &&\r\n                    !this.state.isUpdateContract\r\n                  )\r\n                    this.state.polygons[key].parcel_name =\r\n                      parcels[isFullBoundryIndex > -1 ? key - 1 : key]\r\n                        ?.attributes?.PARCEL_PLAN_NO || \"\";\r\n                }\r\n\r\n                this.state.polygons[key].polygon_unprojected = unPolgyons[key];\r\n                this.state.polygons[key].polygon_unprojected.polylines = [];\r\n                this.state.polygons[key].notify = polygon_project.notify;\r\n                this.state.polygons[key].polygon = polygon;\r\n                this.state.polygons[key].min;\r\n                this.state.polygons[key].max = 0;\r\n                this.state.polygons[key].maxPointLineLen;\r\n                this.state.polygons[key].minPointLineLen;\r\n                this.state.polygons[key].minLineLen;\r\n\r\n                if (polygon.rings.length > 0) {\r\n                  var arcLength = 0;\r\n                  var arcPoints = [];\r\n                  var arcLines = [];\r\n\r\n                  for (var j = 0, n = polygon.rings[0].length - 1; j < n; j++) {\r\n                    var point1 = new esri.geometry.Point(\r\n                      polygon.rings[0][j][0],\r\n                      polygon.rings[0][j][1]\r\n                    );\r\n                    var point2 = new esri.geometry.Point(\r\n                      polygon.rings[0][j + 1][0],\r\n                      polygon.rings[0][j + 1][1]\r\n                    );\r\n\r\n                    var point1_project = new esri.geometry.Point(\r\n                      polygon_project.rings[0][j][0],\r\n                      polygon_project.rings[0][j][1]\r\n                    );\r\n                    var point2_project = new esri.geometry.Point(\r\n                      polygon_project.rings[0][j + 1][0],\r\n                      polygon_project.rings[0][j + 1][1]\r\n                    );\r\n\r\n                    var length = +esriModules.mathUtils\r\n                      .getLength(point1_project, point2_project)\r\n                    //.toFixed(2);\r\n                    //length = Number(parseFloat(length).toFixed(2));\r\n\r\n                    if (point1.x > this.state.polygons[key].max) {\r\n                      this.state.polygons[key].max = point1.x;\r\n                      this.state.polygons[key].maxPoint = point1;\r\n                    }\r\n\r\n                    if (\r\n                      !this.state.polygons[key].min ||\r\n                      point1.x < this.state.polygons[key].min\r\n                    ) {\r\n                      this.state.polygons[key].min = point1.x;\r\n                      this.state.polygons[key].minPoint = point1;\r\n                    }\r\n\r\n                    if (point2.x > this.state.polygons[key].max) {\r\n                      this.state.polygons[key].max = point2.x;\r\n                      this.state.polygons[key].maxPoint = point2;\r\n                    }\r\n\r\n                    if (\r\n                      !this.state.polygons[key].min ||\r\n                      point2.x < this.state.polygons[key].min\r\n                    ) {\r\n                      this.state.polygons[key].min = point2.x;\r\n                      this.state.polygons[key].minPoint = point2;\r\n                    }\r\n\r\n                    var path = {\r\n                      paths: [[polygon.rings[0][j], polygon.rings[0][j + 1]]],\r\n                      text: length,\r\n                      spatialReference: polygon.spatialReference,\r\n                    };\r\n\r\n                    if (\r\n                      !(\r\n                        isPointOrArc(\r\n                          point1,\r\n                          key,\r\n                          cadResults?.data[0]?.cadFeatures\r\n                        ) &&\r\n                        isPointOrArc(\r\n                          point2,\r\n                          key,\r\n                          cadResults?.data[0]?.cadFeatures\r\n                        )\r\n                      )\r\n                    ) {\r\n                      if (\r\n                        isPointOrArc(\r\n                          point2,\r\n                          key,\r\n                          cadResults?.data[0]?.cadFeatures\r\n                        )\r\n                      ) {\r\n                        arcLength += length;\r\n                        arcPoints.push(point1);\r\n                        path = new esriModules.Polyline(path);\r\n                        path.centroid = path.getExtent().getCenter();\r\n                        arcLines.push(new esriModules.Polyline(path));\r\n                        path.text = arcLength || length;\r\n\r\n                        if (\r\n                          cadResults?.data[0]?.boundryFeaturesLen?.length > 0\r\n                        ) {\r\n                          var line = getLineLength(\r\n                            cadResults?.data[0]?.boundryFeaturesLen,\r\n                            arcPoints[0],\r\n                            point2,\r\n                            cadResults?.data[0]?.isArc || false\r\n                          );\r\n                          if (line) path.text = line.length;\r\n                        }\r\n\r\n                        length = path.text;\r\n                        path.lines = arcLines;\r\n                        arcLines = [];\r\n                        arcLength = 0;\r\n\r\n                        this.state.polygons[key].data[2].data.push(\r\n                          JSON.parse(JSON.stringify(path))\r\n                        );\r\n                        this.state.polygons[key].data[2].data[\r\n                          this.state.polygons[key].data[2].data.length - 1\r\n                        ].centroid = path.getExtent().getCenter();\r\n                      } else {\r\n                        arcLength += length;\r\n                        arcPoints.push(point1);\r\n                        path = new esriModules.Polyline(path);\r\n                        var polyline = new esriModules.Polyline(path);\r\n                        path.centroid = polyline.getExtent().getCenter();\r\n                        arcLines.push(new esriModules.Polyline(path));\r\n                        path.hide = true;\r\n                        // if (\r\n                        //   this.state.isKrokyUpdateContract ||\r\n                        //   this.state.isUpdateContract\r\n                        // ) {\r\n                        //   this.state.polygons[key].data[2].data.push(\r\n                        //     JSON.parse(JSON.stringify(path))\r\n                        //   );\r\n                        //   this.state.polygons[key].data[2].data[\r\n                        //     this.state.polygons[key].data[2].data.length - 1\r\n                        //   ].centroid = path.getExtent().getCenter();\r\n                        // } else {\r\n                        //   path.hide = true;\r\n                        // }\r\n                      }\r\n                    }\r\n                    if (\r\n                      isPointOrArc(\r\n                        point1,\r\n                        key,\r\n                        cadResults?.data[0]?.cadFeatures\r\n                      ) &&\r\n                      isPointOrArc(\r\n                        point2,\r\n                        key,\r\n                        cadResults?.data[0]?.cadFeatures\r\n                      )\r\n                    ) {\r\n                      if (cadResults?.data[0]?.boundryFeaturesLen?.length > 0) {\r\n                        var line = getLineLength(\r\n                          cadResults?.data[0]?.boundryFeaturesLen,\r\n                          point1,\r\n                          point2,\r\n                          cadResults?.data[0]?.isArc || false\r\n                        );\r\n                        if (line) path.text = line.length;\r\n\r\n                        length = path.text;\r\n                      }\r\n                      this.state.polygons[key].data[2].data.push(\r\n                        JSON.parse(JSON.stringify(path))\r\n                      );\r\n                      this.state.polygons[\r\n                        key\r\n                      ].polygon_unprojected.polylines.push(path);\r\n                    }\r\n\r\n                    var polyline = new esriModules.Polyline(path);\r\n\r\n                    if (\r\n                      !this.state.polygons[key].minLineLen ||\r\n                      this.state.polygons[key].minLineLen > length\r\n                    )\r\n                      this.state.polygons[key].minLineLen = length;\r\n\r\n                    var pt = polyline.getExtent().getCenter();\r\n\r\n                    if (\r\n                      !(\r\n                        isPointOrArc(\r\n                          point1,\r\n                          key,\r\n                          cadResults?.data[0]?.cadFeatures\r\n                        ) &&\r\n                        isPointOrArc(\r\n                          point2,\r\n                          key,\r\n                          cadResults?.data[0]?.cadFeatures\r\n                        )\r\n                      )\r\n                    ) {\r\n                      if (\r\n                        isPointOrArc(\r\n                          point2,\r\n                          key,\r\n                          cadResults?.data[0]?.cadFeatures\r\n                        )\r\n                      ) {\r\n                        if (arcPoints.length)\r\n                          pt = arcPoints[Math.floor(arcPoints.length / 2)];\r\n                      }\r\n                    }\r\n\r\n                    if (\r\n                      isPointOrArc(\r\n                        point1,\r\n                        key,\r\n                        cadResults?.data[0]?.cadFeatures\r\n                      ) &&\r\n                      isPointOrArc(\r\n                        point2,\r\n                        key,\r\n                        cadResults?.data[0]?.cadFeatures\r\n                      )\r\n                    ) {\r\n                      this.state.polygons[key].data[2].data[\r\n                        this.state.polygons[key].data[2].data.length - 1\r\n                      ].centroid = pt;\r\n                    }\r\n\r\n                    addGraphicToLayer(\r\n                      polyline,\r\n                      this.map,\r\n                      \"boundriesGraphicLayer\",\r\n                      null,\r\n                      null,\r\n                      null,\r\n                      (response) => {\r\n                        let app_id =\r\n                          this.props?.currentModule?.app_id ||\r\n                          this.props?.currentModule?.record?.app_id;\r\n                        if (\r\n                          [14, 8].indexOf(app_id) != -1 ||\r\n                          [14, 8].indexOf(app_id) != -1\r\n                        ) {\r\n                          resizeMap(\r\n                            this.map,\r\n                            (app_id == 8 && 10) || this.state[\"zoomRatio\"]\r\n                          );\r\n                        } else {\r\n                          zoomToLayer(\r\n                            \"boundriesGraphicLayer\",\r\n                            this.map,\r\n                            this.state[\"zoomRatio\"]\r\n                          );\r\n                        }\r\n                      }\r\n                    );\r\n\r\n                    if (pt.length) {\r\n                      pt.x = pt[0];\r\n                      pt.y = pt[1];\r\n                    }\r\n\r\n                    var ang;\r\n\r\n                    if (!isBoundry) {\r\n                      ang = computeLineAngle(\r\n                        polygon.rings[0][j],\r\n                        polygon.rings[0][j + 1],\r\n                        polygon.getExtent().getCenter()\r\n                      );\r\n                    }\r\n\r\n                    var attr = {\r\n                      text: length,\r\n                      angle: ang,\r\n                    };\r\n\r\n                    // because there were similarity between points in fraction part 123.4567 , 123.4512\r\n                    if (\r\n                      !(\r\n                        pointsLength.indexOf(\r\n                          pt.x.toFixed(4) + \",\" + pt.y.toFixed(4)\r\n                        ) > -1 && !polygon_project.isFullBoundry\r\n                      )\r\n                    ) {\r\n                      if (\r\n                        isPointOrArc(\r\n                          point1,\r\n                          key,\r\n                          cadResults?.data[0]?.cadFeatures\r\n                        ) &&\r\n                        isPointOrArc(\r\n                          point2,\r\n                          key,\r\n                          cadResults?.data[0]?.cadFeatures\r\n                        )\r\n                      ) {\r\n                        pointsLength.push(\r\n                          pt.x.toFixed(4) + \",\" + pt.y.toFixed(4)\r\n                        );\r\n\r\n                        addParcelNo(\r\n                          pt,\r\n                          this.map,\r\n                          \"\" + parseFloat(length.toFixed(2)) + \"\",\r\n                          \"editlengthGraphicLayer\",\r\n                          lineLengthFont,\r\n                          null,\r\n                          ang,\r\n                          polygon_project.isFullBoundry\r\n                            ? getLengthOffset(pt, this.state.polygons[key])\r\n                            : null,\r\n                          attr\r\n                        );\r\n                      } else if (\r\n                        isPointOrArc(\r\n                          point2,\r\n                          key,\r\n                          cadResults?.data[0]?.cadFeatures\r\n                        )\r\n                      ) {\r\n                        //\r\n                        if (arcPoints.length) {\r\n                          pt = arcPoints[Math.floor(arcPoints.length / 2)];\r\n                          //pt.spatialReference.wkid = 102100;\r\n                        }\r\n\r\n                        addParcelNo(\r\n                          pt,\r\n                          this.map,\r\n                          \"\" + parseFloat(length.toFixed(2)) + \"\",\r\n                          \"editlengthGraphicLayer\",\r\n                          lineLengthFont,\r\n                          null,\r\n                          ang,\r\n                          polygon_project.isFullBoundry\r\n                            ? getLengthOffset(pt, this.state.polygons[key])\r\n                            : null,\r\n                          attr\r\n                        );\r\n                      }\r\n                    }\r\n\r\n                    if (\r\n                      isPointOrArc(\r\n                        point2,\r\n                        key,\r\n                        cadResults?.data[0]?.cadFeatures\r\n                      )\r\n                    ) {\r\n                      points = [];\r\n                      arcPoints.forEach((point) => {\r\n                        points.push(\r\n                          esri.geometry.toScreenPoint(\r\n                            this.map.extent,\r\n                            this.map.width,\r\n                            this.map.height,\r\n                            new esri.geometry.Point(\r\n                              point[0],\r\n                              point[1],\r\n                              new esri.SpatialReference({\r\n                                wkid: polygon.spatialReference,\r\n                              })\r\n                            )\r\n                          )\r\n                        );\r\n                      });\r\n                      //\r\n                      arcPoints = [];\r\n                    }\r\n                  }\r\n\r\n                  if (outRange) {\r\n                    this.state.outRange = true;\r\n                  }\r\n\r\n                  if (notify) {\r\n                    //\r\n                    // isConfirmed = false;\r\n                    // hasNotify = true;\r\n                    this.state.isConfirmed = false;\r\n                    this.state.hasNotify = true;\r\n                    if (!this.state.isTadkekMesahy) {\r\n                      addGraphicToLayer(\r\n                        polygon,\r\n                        this.map,\r\n                        \"addedParclGraphicLayer\",\r\n                        null,\r\n                        null\r\n                      );\r\n                    }\r\n                  } else {\r\n                    if (!this.state.isTadkekMesahy) {\r\n                      addGraphicToLayer(\r\n                        polygon,\r\n                        this.map,\r\n                        \"addedParclGraphicLayer\",\r\n                        null,\r\n                        null,\r\n                        true\r\n                      );\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (\r\n                  this.state.isTadkekMesahy &&\r\n                  !this.state.polygons[key].isFullBoundry\r\n                ) {\r\n                  this.state.polygons[key].position =\r\n                    this.state.polygons[key].polygon.getCentroid();\r\n                  redrawNames(\r\n                    this.state.polygons[key],\r\n                    this.map,\r\n                    setParcelName([\r\n                      this.state[\"parcel_name\" + key],\r\n                      this.state[\"parcelSliceNo\" + key],\r\n                    ]),\r\n                    \"PacrelUnNamedGraphicLayer\",\r\n                    key\r\n                  );\r\n                }\r\n\r\n                if (\r\n                  this.state.isTadkekMesahy &&\r\n                  featuresLengthTemp == 2 &&\r\n                  key == 1\r\n                ) {\r\n                  //this.state.polygons = [{ ...this.state.polygons[1] }];\r\n                }\r\n              }\r\n            );\r\n            var cadifArcResponsePoints = _.chain(\r\n              cadResults?.data[0]?.shapeFeatures\r\n            )\r\n              .map((polygon, key) => {\r\n                return polygon.rings[0].map((point) => {\r\n                  if (\r\n                    isPointOrArc(\r\n                      { x: point[0], y: point[1] },\r\n                      key,\r\n                      cadResults?.data[0]?.cadFeatures\r\n                    )\r\n                  ) {\r\n                    return new esri.geometry.Point(\r\n                      point[0],\r\n                      point[1],\r\n                      new esri.SpatialReference(polygon.spatialReference)\r\n                    );\r\n                  } else return null;\r\n                });\r\n              })\r\n              .flatten(true)\r\n              .value();\r\n\r\n            cadifArcResponsePoints = cadifArcResponsePoints.filter((n) => {\r\n              return n != null;\r\n            });\r\n\r\n            project(cadifArcResponsePoints, 4326, (points) => {\r\n              if (points) {\r\n                var polygons_unprojected = _.chain(unPolgyons)\r\n                  .map((d) => {\r\n                    d.rings[0] = points?.splice(0, d.rings[0].length);\r\n                    d.spatialReference = new esri.SpatialReference({\r\n                      wkid: 4326,\r\n                    });\r\n                    return d;\r\n                  })\r\n                  .value();\r\n\r\n                getPolygons(\r\n                  polygons_unprojected,\r\n                  (polygon_WGS84, esriModules, elem, key) => {\r\n                    if (this.state.polygons[key]) {\r\n                      this.state.polygons[\r\n                        key\r\n                      ]?.polygon_unprojected?.rings?.forEach((rings, index) => {\r\n                        this.state.polygons[key].polygon_unprojected.rings[\r\n                          index\r\n                        ] = polygon_WGS84.rings[index];\r\n                      });\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n              project(cadResponseOutOfSakBoundriesPoints, 32639, (points) => {\r\n                if (points) {\r\n                  var plogs = _.chain(\r\n                    JSON.parse(cadResponseOutOfSakBoundriesCopy)\r\n                  )\r\n                    .map((d) => {\r\n                      d.rings[0] = (\r\n                        (Array.isArray(points[0]) && points[0]) ||\r\n                        points\r\n                      )\r\n                        ?.splice(0, d.rings[0].length)\r\n                        ?.map((point) => {\r\n                          return [point.x, point.y];\r\n                        });\r\n                      //d.spatialReference = new esri.SpatialReference({ wkid: 102100 });\r\n                      return d;\r\n                    })\r\n                    .value();\r\n\r\n                  getPolygons(\r\n                    JSON.parse(cadResponseOutOfSakBoundriesCopy),\r\n                    (polygon_project, esriModules, elem, key) => {\r\n                      var polygon = new esri.geometry.Polygon(plogs[key]);\r\n                      if (!this.state.isTadkekMesahy) {\r\n                        addGraphicToLayer(\r\n                          polygon,\r\n                          this.map,\r\n                          \"addedParclGraphicLayer\",\r\n                          null,\r\n                          null\r\n                        );\r\n                      }\r\n                    }\r\n                  );\r\n                }\r\n              });\r\n\r\n              if (this.InvokedToAdParcel) {\r\n                this.getSuggestLine();\r\n              }\r\n            });\r\n\r\n            //this.state.this.state.polygons : _.sortBy(this.state.polygons, (d) => { return d.polygon && !d.polygon.isFullBoundry }) });\r\n          }\r\n        },\r\n        true\r\n      );\r\n\r\n      var details = [];\r\n      //draw details\r\n      cadResults?.data[0]?.details?.forEach((appart, appartNumber) => {\r\n        var polyline = new esri.geometry.Polyline(appart);\r\n        details.push(polyline);\r\n      });\r\n\r\n      var detailsCopy = JSON.parse(JSON.stringify(details));\r\n\r\n      if (details && details.length > 0 && this.InvokedToAdParcel) {\r\n        project(\r\n          details,\r\n          32639,\r\n          (details_Projected) => {\r\n            if (details_Projected) {\r\n              (\r\n                (Array.isArray(details_Projected[0]) && details_Projected[0]) ||\r\n                details_Projected\r\n              ).forEach((parcel, index) => {\r\n                //parcel.spatialReference = new esri.SpatialReference({ wkid: 102100 });\r\n\r\n                if (parcel.getExtent()) {\r\n                  var pt = parcel.getExtent().getCenter();\r\n\r\n                  addGraphicToLayer(\r\n                    parcel,\r\n                    this.map,\r\n                    \"detailedGraphicLayer\",\r\n                    getColorFromCadIndex(detailsCopy[index].color),\r\n                    null,\r\n                    null,\r\n                    (response) => {\r\n                      let app_id =\r\n                        this.props?.currentModule?.app_id ||\r\n                        this.props?.currentModule?.record?.app_id;\r\n                      if (\r\n                        [14, 8].indexOf(app_id) != -1 ||\r\n                        [14, 8].indexOf(app_id) != -1\r\n                      ) {\r\n                        resizeMap(\r\n                          this.map,\r\n                          (app_id == 8 && 10) || this.state[\"zoomRatio\"]\r\n                        );\r\n                      } else {\r\n                        zoomToLayer(\r\n                          \"detailedGraphicLayer\",\r\n                          this.map,\r\n                          this.state[\"zoomRatio\"]\r\n                        );\r\n                      }\r\n                    }\r\n                  );\r\n                }\r\n              });\r\n\r\n              // if (details) {\r\n              //     zoomToLayer(\"detailedGraphicLayer\", this.map, this.state[\"zoomRatio\"]);\r\n              // }\r\n              // else\r\n              //     zoomToLayer(\"boundriesGraphicLayer\", this.map, this.state[\"zoomRatio\"]);\r\n            }\r\n          },\r\n          true\r\n        );\r\n      }\r\n\r\n      var annotations = [];\r\n\r\n      cadResults?.data[0]?.annotations?.forEach((annotation) => {\r\n        var point = new esri.geometry.Point(annotation.shape);\r\n        point.text = annotation.text;\r\n        point.angle = annotation.angle;\r\n        annotations.push(point);\r\n      });\r\n\r\n      var annotationsCopy = JSON.parse(JSON.stringify(annotations));\r\n\r\n      if (annotations && annotations.length > 0 && this.InvokedToAdParcel) {\r\n        project(\r\n          annotations,\r\n          32639,\r\n          (annotations_Projected) => {\r\n            if (annotations_Projected) {\r\n              (\r\n                (Array.isArray(annotations_Projected[0]) &&\r\n                  annotations_Projected[0]) ||\r\n                annotations_Projected\r\n              ).forEach((annotation, index) => {\r\n                //annotation.spatialReference = new esri.SpatialReference({ wkid: 102100 });\r\n\r\n                var text = annotationsCopy[index].text;\r\n\r\n                if (annotationsCopy[index].text.indexOf(\"شارع\") > -1) {\r\n                  var extractNmber =\r\n                    annotationsCopy[index].text.match(/[\\d\\.]+/);\r\n\r\n                  if (extractNmber && extractNmber.length > 0) {\r\n                    extractNmber = extractNmber[0];\r\n                    annotationsCopy[index].text = annotationsCopy[\r\n                      index\r\n                    ].text.replace(\r\n                      extractNmber,\r\n                      extractNmber.split(\"\").join(\"\")\r\n                    );\r\n                  }\r\n                  text = annotationsCopy[index].text;\r\n                }\r\n                if (HasArabicCharacters(annotationsCopy[index].text))\r\n                  text = reverse(annotationsCopy[index].text);\r\n\r\n                if (annotationsCopy[index].text.indexOf(\"شارع\") > -1) {\r\n                  addParcelNo(\r\n                    annotation,\r\n                    this.map,\r\n                    text,\r\n                    \"detailedGraphicLayer\",\r\n                    annotationLength,\r\n                    getColorFromCadIndex(annotationsCopy[index].color),\r\n                    360 - (annotationsCopy[index].angle || 0),\r\n                    null,\r\n                    null,\r\n                    true\r\n                  );\r\n                } else {\r\n                  addParcelNo(\r\n                    annotation,\r\n                    this.map,\r\n                    text,\r\n                    \"detailedGraphicLayer\",\r\n                    annotationLength,\r\n                    getColorFromCadIndex(annotationsCopy[index].color),\r\n                    360 - (annotationsCopy[index].angle || 0),\r\n                    null,\r\n                    null\r\n                  );\r\n                }\r\n              });\r\n            }\r\n          },\r\n          true\r\n        );\r\n      }\r\n\r\n      //cadResults.data = this.state.polygons;\r\n\r\n      //this.state.demSaveDraft = false;\r\n      this.state.demSaveDraft = false;\r\n\r\n      if (!this.state.hasNotify && isLoading) {\r\n        clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n        if (!hideDrag) {\r\n          this.getSuggestLine();\r\n        } else {\r\n          //this.state.isConfirmed = false;\r\n          this.state.isConfirmed = false;\r\n        }\r\n        this.state.polygons.forEach((elem, key) => {\r\n          if (!this.state.isTadkekMesahy) {\r\n            addGraphicToLayer(\r\n              elem.polygon,\r\n              this.map,\r\n              \"addedParclGraphicLayer\",\r\n              null,\r\n              null,\r\n              true\r\n            );\r\n          }\r\n        });\r\n\r\n        zoomToIdentifyParcel(this.map);\r\n      }\r\n    } //else {\r\n    //   window.notifySystem('warning', t('خارج نطاق البلدية الرئيسية'))\r\n    //   return;\r\n    // }\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (\r\n      !isEqual(nextProps.input?.value, this.props.input?.value) ||\r\n      !isEqual(nextProps.lang, this.props.lang) ||\r\n      !isEqual(nextProps.forceUpdate, this.props.forceUpdate)\r\n    );\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  settoStore(polygons) {\r\n    const { mun } = this.state;\r\n    const { input, inputs } = this.props;\r\n    console.log(\"pooooollllllyyyyygggggooooonnnnnnss\", polygons);\r\n    var obj = {};\r\n    polygons.forEach((element, key) => {\r\n      obj[\"westBoundries\" + key] = this.state[\"westBoundries\" + key];\r\n      obj[\"southBoundries\" + key] = this.state[\"southBoundries\" + key];\r\n      obj[\"northBoundries\" + key] = this.state[\"northBoundries\" + key];\r\n      obj[\"eastBoundries\" + key] = this.state[\"eastBoundries\" + key];\r\n      inputs.north.forEach((input, index) => {\r\n        obj[input.name + key] = this.state[input.name + key];\r\n      });\r\n      inputs.east.forEach((input, index) => {\r\n        obj[input.name + key] = this.state[input.name + key];\r\n      });\r\n      inputs.west.forEach((input, index) => {\r\n        obj[input.name + key] = this.state[input.name + key];\r\n      });\r\n      inputs.south.forEach((input, index) => {\r\n        obj[input.name + key] = this.state[input.name + key];\r\n      });\r\n\r\n      obj[\"area\" + key] = this.state[\"area\" + key];\r\n      obj[\"parcelSliceNo\" + key] = this.state[\"parcelSliceNo\" + key];\r\n      obj[\"area_text\" + key] = this.state[\"area_text\" + key];\r\n      obj[\"parcelName\" + key] = this.state[\"parcel_name\" + key];\r\n      obj[\"duplixType\" + key] = this.state[\"duplixType\" + key] || 1;\r\n\r\n      if (this.state.isUpdateContract) {\r\n        if (!element.survayParcelCutter) {\r\n          element.survayParcelCutter = [\r\n            {\r\n              direction: \"الشطفة\",\r\n              NORTH_EAST_DIRECTION: \"\",\r\n              NORTH_WEST_DIRECTION: \"\",\r\n              SOUTH_EAST_DIRECTION: \"\",\r\n              SOUTH_WEST_DIRECTION: \"\",\r\n            },\r\n          ];\r\n        }\r\n        element.have_electric_room =\r\n          this.state[`have_electric_room${key}`] || false;\r\n        element.electric_room_area =\r\n          this.state[`electric_room_area${key}`] || \"\";\r\n        element.electric_room_place =\r\n          this.state[`electric_room_place${key}`] || \"\";\r\n      }\r\n    });\r\n\r\n    if (this.state.isKrokyUpdateContract || this.state.isPlan) {\r\n      obj[\"have_electric_room\"] = this.state[\"have_electric_room\"];\r\n      obj[\"electric_room_area\"] = this.state[\"electric_room_area\"];\r\n    }\r\n\r\n    var inputChanged = {\r\n      suggestionsParcels: polygons,\r\n      planDescription: this.state.planDescription,\r\n      isWithinUrbanBoundry: this.state.isWithinUrbanBoundry,\r\n      isUnPlannedParcelIntersect: this.state.isUnPlannedParcelIntersect,\r\n      mun: mun,\r\n      temp: {\r\n        cadResults:\r\n          input?.value?.cadData ||\r\n          (input?.value?.temp && input?.value?.temp?.cadResults) ||\r\n          this.state.cadResults ||\r\n          undefined,\r\n        isKrokyUpdateContract:\r\n          input?.value?.isKrokyUpdateContract ||\r\n          (input?.value?.temp && input?.value?.temp?.isKrokyUpdateContract) ||\r\n          this.state.isKrokyUpdateContract ||\r\n          false,\r\n        isUpdateContract: this.state.isUpdateContract || false,\r\n        isPlan:\r\n          input?.value?.isPlan ||\r\n          (input?.value?.temp && input?.value?.temp?.isPlan) ||\r\n          this.state.isPlan ||\r\n          false,\r\n        notify:\r\n          input?.value?.notify ||\r\n          (input?.value?.temp && input?.value?.temp?.notify) ||\r\n          this.state.notify ||\r\n          false,\r\n        hideDrag:\r\n          input?.value?.hideDrag ||\r\n          (input?.value?.temp && input?.value?.temp?.hideDrag) ||\r\n          this.state.hideDrag ||\r\n          false,\r\n        ...obj,\r\n      },\r\n    };\r\n\r\n    if (this.state.isKrokyUpdateContract || this.state.isPlan) {\r\n      inputChanged[\"survayParcelCutter\"] = this.state.survayParcelCutter;\r\n    }\r\n    input.onChange({ ...inputChanged });\r\n\r\n    this.setState({\r\n      polygons: polygons,\r\n      ...obj,\r\n    });\r\n  }\r\n\r\n  resetStore() {\r\n    const { mun } = this.state;\r\n    const { input, inputs } = this.props;\r\n\r\n    var obj = {};\r\n    this.state.polygons.forEach((element, key) => {\r\n      obj[\"westBoundries\" + key] = \"\";\r\n      obj[\"southBoundries\" + key] = \"\";\r\n      obj[\"northBoundries\" + key] = \"\";\r\n      obj[\"eastBoundries\" + key] = \"\";\r\n      inputs.north.forEach((input, index) => {\r\n        obj[input.name + key] = \"\";\r\n      });\r\n      inputs.east.forEach((input, index) => {\r\n        obj[input.name + key] = \"\";\r\n      });\r\n      inputs.west.forEach((input, index) => {\r\n        obj[input.name + key] = \"\";\r\n      });\r\n      inputs.south.forEach((input, index) => {\r\n        obj[input.name + key] = \"\";\r\n      });\r\n      obj[\"area\" + key] = \"\";\r\n      obj[\"parcelSliceNo\" + key] = \"\";\r\n      obj[\"area_text\" + key] = \"\";\r\n      obj[\"parcelName\" + key] = \"\";\r\n      obj[\"duplixType\" + key] = \"\";\r\n    });\r\n\r\n    if (this.state.isKrokyUpdateContract || this.state.isPlan) {\r\n      obj[\"have_electric_room\"] = false;\r\n      obj[\"electric_room_area\"] = \"\";\r\n    }\r\n    var polygons = [];\r\n    this.setState({ polygons: polygons, ...obj });\r\n\r\n    var inputChanged = {\r\n      suggestionsParcels: polygons,\r\n      planDescription: \"\",\r\n      isWithinUrbanBoundry: false,\r\n      isUnPlannedParcelIntersect: false,\r\n      mun: mun,\r\n      temp: {\r\n        //map: this.map,\r\n        cadResults: undefined,\r\n        isKrokyUpdateContract: this.state.isKrokyUpdateContract || false,\r\n        isUpdateContract: this.state.isUpdateContract || false,\r\n        isPlan: this.state.isPlan || false,\r\n        notify: false,\r\n        hideDrag: false,\r\n        ...obj,\r\n      },\r\n    };\r\n\r\n    if (this.state.isKrokyUpdateContract || this.state.isPlan) {\r\n      inputChanged[\"survayParcelCutter\"] = [\r\n        {\r\n          direction: \"الشطفة\",\r\n          NORTH_EAST_DIRECTION: \"\",\r\n          NORTH_WEST_DIRECTION: \"\",\r\n          SOUTH_EAST_DIRECTION: \"\",\r\n          SOUTH_WEST_DIRECTION: \"\",\r\n        },\r\n      ];\r\n    } else if (this.state.isUpdateContract) {\r\n      inputChanged[\"suggestionsParcels\"].forEach((parcel, index) => {\r\n        parcel.survayParcelCutter = [\r\n          {\r\n            direction: \"الشطفة\",\r\n            NORTH_EAST_DIRECTION: \"\",\r\n            NORTH_WEST_DIRECTION: \"\",\r\n            SOUTH_EAST_DIRECTION: \"\",\r\n            SOUTH_WEST_DIRECTION: \"\",\r\n          },\r\n        ];\r\n        polygon.have_electric_room = false;\r\n        polygon.electric_room_area = \"\";\r\n        polygon.electric_room_place = \"\";\r\n      });\r\n    }\r\n\r\n    this.props.input.onChange({ ...inputChanged });\r\n  }\r\n\r\n  clearInputs = () => {\r\n    const { inputs } = this.props;\r\n    this.state.polygons.forEach((polygon, index) => {\r\n      this.state[\"westBoundries\" + index] = [];\r\n      this.state[\"northBoundries\" + index] = [];\r\n      this.state[\"eastBoundries\" + index] = [];\r\n      this.state[\"southBoundries\" + index] = [];\r\n      inputs.north.forEach((input, key) => {\r\n        this.state[input.name + index] = \"\";\r\n      });\r\n      inputs.east.forEach((input, key) => {\r\n        this.state[input.name + index] = \"\";\r\n      });\r\n      inputs.west.forEach((input, key) => {\r\n        this.state[input.name + index] = \"\";\r\n      });\r\n      inputs.south.forEach((input, key) => {\r\n        this.state[input.name + index] = \"\";\r\n      });\r\n      this.state[\"area\" + index] = \"\";\r\n      this.state[\"area_text\" + index] = \"\";\r\n      this.state[\"parcelSliceNo\" + index] = \"\";\r\n      this.state[\"parcel_name\" + index] = \"\";\r\n      this.state[\"duplixType\" + index] = \"\";\r\n      this.state[\"parcel_name\" + index] = \"\";\r\n      if (this.state.isUpdateContract) {\r\n        polygon.survayParcelCutter = [\r\n          {\r\n            direction: \"الشطفة\",\r\n            NORTH_EAST_DIRECTION: \"\",\r\n            NORTH_WEST_DIRECTION: \"\",\r\n            SOUTH_EAST_DIRECTION: \"\",\r\n            SOUTH_WEST_DIRECTION: \"\",\r\n          },\r\n        ];\r\n        this.state[`have_electric_room${index}`] = false;\r\n        this.state[`electric_room_area${index}`] = \"\";\r\n        this.state[`electric_room_place${index}`] = \"\";\r\n      }\r\n    });\r\n\r\n    this.state[\"have_electric_room\"] = false;\r\n    this.state[\"electric_room_area\"] = \"\";\r\n    //this.state[\"electric_room_place\"] = \"\";\r\n\r\n    this.state.polygons = [];\r\n    this.state.pointsLength = [];\r\n    this.state.cadFiles = {};\r\n    this.state.layerParcels = [];\r\n    this.state.planDescription = \"\";\r\n    this.state.activeKey = \"1\";\r\n    this.state.isWithinUrbanBoundry = true;\r\n    this.state.isUnPlannedParcelIntersect = false;\r\n  };\r\n\r\n  resetMsa7yData = () => {\r\n    resetMapData(this.map);\r\n    this.resetStore();\r\n  };\r\n\r\n  checkOverlayFeatures = (boundry, parcels) => {\r\n    let found = false;\r\n    parcels.forEach((parcel) => {\r\n      if (CheckShapeOverlapWithBoundry(boundry[0], parcel.geometry)) {\r\n        found = true;\r\n      }\r\n    });\r\n\r\n    return found;\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    const { input } = this.props;\r\n\r\n    let mainObject = selectMainObject(this.props);\r\n\r\n    if (input?.value && input?.value != \"\" && input?.value?.justInvoked) {\r\n      this.InvokedToAdParcel = true;\r\n      input.value.justInvoked = false;\r\n      this.isLoaded = false;\r\n      this.map = getMap();\r\n\r\n      this.toLoadLines = true;\r\n      this.state.cadResults = input?.value?.cadData || undefined;\r\n      this.state.isTadkekMesahy =\r\n        (this.props.currentModule.app_id ||\r\n          this.props.currentModule?.record?.app_id) == 29;\r\n      this.state.isTadkekMesahyModule = this.props.currentModule.id != 114;\r\n\r\n      this.state.isKrokyUpdateContract =\r\n        input?.value?.isKrokyUpdateContract || false;\r\n      this.state.isUpdateContract = input?.value?.isUpdateContract || false;\r\n      this.state.isPlan = input?.value?.isPlan || false;\r\n      this.state.notify = input?.value?.notify || false;\r\n      this.state.hideDrag = input?.value?.hideDrag || false;\r\n      this.clearInputs();\r\n      if (this.state.isKrokyUpdateContract || this.state.isPlan) {\r\n        this.state.survayParcelCutter = [\r\n          {\r\n            direction: \"الشطفة\",\r\n            NORTH_EAST_DIRECTION: \"\",\r\n            NORTH_WEST_DIRECTION: \"\",\r\n            SOUTH_EAST_DIRECTION: \"\",\r\n            SOUTH_WEST_DIRECTION: \"\",\r\n          },\r\n        ];\r\n      }\r\n      if (this.state.cadResults)\r\n        setTimeout(() => {\r\n          if (this.state.isTadkekMesahy) {\r\n            if (\r\n              this.state.cadResults?.data[0]?.shapeFeatures?.filter(\r\n                (x) => !x.isFullBoundry\r\n              )?.length == 0\r\n            ) {\r\n              window.notifySystem(\r\n                \"error\",\r\n                \"( boundry لا يحتوى على طبقة ) الكاد المرفوع غير مطابق للمواصفات\"\r\n              );\r\n            } else if (\r\n              this.state.cadResults?.data[0]?.shapeFeatures?.filter(\r\n                (x) => !x.isFullBoundry\r\n              )?.length != mainObject.landData.landData.lands.parcels.length\r\n            ) {\r\n              window.notifySystem(\r\n                \"error\",\r\n                \"عدد الأراضي المرفوعة لا يتوافق مع عدد الأراضي المختارة\"\r\n              );\r\n            } else {\r\n              /*else if (!this.state.cadResults?.data[0]?.shapeFeatures?.find((x) => x.isFullBoundry)) {\r\n              window.notifySystem(\r\n                \"error\",\r\n                \"( full_boundry لا يحتوى على طبقة ) الكاد المرفوع غير مطابق للمواصفات\"\r\n              );\r\n            }*/\r\n              if (\r\n                !this.checkOverlayFeatures(\r\n                  this.state.cadResults?.data[0]?.shapeFeatures?.filter(\r\n                    (x) => !x.isFullBoundry\r\n                  ),\r\n                  mainObject.landData.landData.lands.parcels\r\n                )\r\n              ) {\r\n                window.notifySystem(\r\n                  \"error\",\r\n                  \"الرفع المساحي لا يتقاطع مع حدود الأراضي المختارة\"\r\n                );\r\n              } else {\r\n                this.buildCADDetails(false);\r\n              }\r\n            }\r\n          } else {\r\n            this.buildCADDetails(false);\r\n          }\r\n        });\r\n      else {\r\n        this.resetMsa7yData();\r\n\r\n        if (\r\n          (this.props?.currentModule?.record.app_id == 14 ||\r\n            this.props?.currentModule?.app_id == 14) &&\r\n          this.props.mainObject?.waseka?.waseka?.sakType == \"4\"\r\n        ) {\r\n          this.loadParcelsFromLandData();\r\n          this.settoStore(this.state.polygons);\r\n        }\r\n      }\r\n    } else if (\r\n      this.isLoaded &&\r\n      window.mapInfo &&\r\n      !mainObject?.data_msa7y?.msa7yData?.mapviewer?.mapGraphics?.length\r\n    ) {\r\n      this.map = getMap();\r\n\r\n      if (this.state.isPropetryCheck) {\r\n        zoomToLayer(\"boundriesGraphicLayer\", this.map, this.state[\"zoomRatio\"]);\r\n      }\r\n\r\n      if (getIsMapLoaded()) {\r\n        setIsMapLoaded(false);\r\n        this.toLoadLines = true;\r\n        this.InvokedToAdParcel =\r\n          !mainObject.data_msa7y?.msa7yData?.cadDetails?.suggestionsParcels?.filter(\r\n            (r) =>\r\n              !r.isFullBoundry &&\r\n              r.data.filter((e) => +e.totalLength == 0).length > 0\r\n          )?.length\r\n            ? false\r\n            : true;\r\n        if (this.InvokedToAdParcel) {\r\n          this.getSuggestLine();\r\n        }\r\n        if (\r\n          (this.props?.currentModule?.record.app_id == 14 ||\r\n            this.props?.currentModule?.app_id == 14) &&\r\n          this.props.mainObject?.waseka?.waseka?.sakType == \"4\" &&\r\n          mainObject?.landData?.landData?.lands?.parcels.length == 1\r\n        ) {\r\n          this.loadParcelsFromLandData();\r\n        }\r\n        // else {\r\n        //   setTimeout(() => {\r\n        //     this.buildCADDetails(true);\r\n        //   });\r\n        // }\r\n        this.isLoaded = false;\r\n      }\r\n    } else if (\r\n      this.isLoaded &&\r\n      window.mapInfo &&\r\n      mainObject?.data_msa7y?.msa7yData?.mapviewer?.mapGraphics?.length\r\n    ) {\r\n      this.map = getMap();\r\n\r\n      if (this.state.isPropetryCheck) {\r\n        zoomToLayer(\"boundriesGraphicLayer\", this.map, this.state[\"zoomRatio\"]);\r\n      }\r\n\r\n      if (getIsMapLoaded()) {\r\n        setTimeout(() => {\r\n          if (this.state.isTadkekMesahy) {\r\n            clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n            this.neighbors.forEach((f) => {\r\n              f.geometry = new esri.geometry.Polygon(f.geometry);\r\n              addParcelNo(\r\n                f.geometry.getExtent().getCenter(),\r\n                this.map,\r\n                f.attributes.PARCEL_PLAN_NO + \"\",\r\n                \"ParcelPlanNoGraphicLayer\",\r\n                20,\r\n                [0, 0, 0]\r\n              );\r\n            });\r\n          }\r\n        }, 100);\r\n\r\n        setIsMapLoaded(false);\r\n\r\n        if (\r\n          (this.props?.currentModule?.record.app_id == 14 ||\r\n            this.props?.currentModule?.app_id == 14) &&\r\n          this.props.mainObject?.waseka?.waseka?.sakType == \"4\" &&\r\n          mainObject?.landData?.landData?.lands?.parcels.length == 1\r\n        ) {\r\n          this.loadParcelsFromLandData();\r\n        } else {\r\n          this.settoStore(this.state.polygons);\r\n        }\r\n        this.isLoaded = false;\r\n      }\r\n    } else {\r\n      if (!this.isLoaded && input.value.isApplyTadkekMsa7yData) {\r\n        input.value.isApplyTadkekMsa7yData = false;\r\n        this.reApplyTadkekMsa7yData(mainObject);\r\n      } else if (!this.isLoaded && input.value.isReset) {\r\n        this.resetMsa7yData();\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  reApplyTadkekMsa7yData = (mainObject) => {\r\n    let cadDetails = mainObject?.data_msa7y?.msa7yData?.cadDetails;\r\n    let props = this.props;\r\n    const {\r\n      data_msa7y: {\r\n        msa7yData: {\r\n          cadDetails: { suggestionsParcels, temp },\r\n        },\r\n      },\r\n    } = mainObject;\r\n    let requestType = mainObject?.landData?.requestType;\r\n    let parcels = mainObject?.landData?.landData?.lands?.parcels;\r\n\r\n    const { inputs } = props;\r\n    if (cadDetails) {\r\n      suggestionsParcels.forEach((element, index) => {\r\n        let landDataParcel = parcels.find(\r\n          (r) =>\r\n            r.geometry &&\r\n            new esri.geometry.Polygon(element.polygon).contains(\r\n              new esri.geometry.Polygon(r.geometry).getExtent().getCenter()\r\n            )\r\n        );\r\n        if (landDataParcel) {\r\n          if (element.parcel_name != \"حدود المعاملة\") {\r\n            element.survayParcelCutter = [\r\n              {\r\n                direction: \"الشطفة\",\r\n                NORTH_EAST_DIRECTION:\r\n                  landDataParcel?.parcelShatfa?.SHATFA_NORTH_EAST_DIRECTION ||\r\n                  \"\",\r\n                NORTH_WEST_DIRECTION:\r\n                  landDataParcel?.parcelShatfa?.SHATFA_NORTH_WEST_DIRECTION ||\r\n                  \"\",\r\n                SOUTH_EAST_DIRECTION:\r\n                  landDataParcel?.parcelShatfa?.SHATFA_SOUTH_EAST_DIRECTION ||\r\n                  \"\",\r\n                SOUTH_WEST_DIRECTION:\r\n                  landDataParcel?.parcelShatfa?.SHATFA_SOUTH_WEST_DIRECTION ||\r\n                  \"\",\r\n              },\r\n            ];\r\n\r\n            this.state[\"electric_room_area\" + index] =\r\n              landDataParcel?.parcelElectric?.electric_room_area || \"\";\r\n            this.state[\"electric_room_place\" + index] =\r\n              landDataParcel?.parcelElectric?.electric_room_place || \"\";\r\n          }\r\n\r\n          element.attributes = { ...landDataParcel.attributes };\r\n          // element.attributes.PARCEL_PLAN_NO = element.parcel_name;\r\n          element.attributes.PARCEL_AREA = (+element.area)?.toFixed(2) || \"0\";\r\n          // element.parcelData = { ...landDataParcel.parcelData };\r\n        }\r\n\r\n        inputs.north.forEach((input, key) => {\r\n          this.state[input.name + index] = temp[input.name + index] || \"\";\r\n        });\r\n        inputs.east.forEach((input, key) => {\r\n          this.state[input.name + index] = temp[input.name + index] || \"\";\r\n        });\r\n        inputs.west.forEach((input, key) => {\r\n          this.state[input.name + index] = temp[input.name + index] || \"\";\r\n        });\r\n        inputs.south.forEach((input, key) => {\r\n          this.state[input.name + index] = temp[input.name + index] || \"\";\r\n        });\r\n        this.state[\"parcelSliceNo\" + index] =\r\n          requestType != 2 ? temp[\"parcelSliceNo\" + index] || \"\" : \"\";\r\n        this.state[\"parcel_name\" + index] =\r\n          element.parcel_name || temp[\"parcelName\" + index] || \"\";\r\n        this.state[\"area_text\" + index] = temp[\"area_text\" + index] || \"\";\r\n      });\r\n\r\n      this.recalculateBoundries(suggestionsParcels, (obj) => {\r\n        Object.keys(obj).forEach((key) => {\r\n          this.state[key] = obj[key];\r\n        });\r\n      });\r\n\r\n      let obj = {\r\n        viewNumbersOnly:\r\n          (checkImportedMainObject(props) != undefined && true) || false,\r\n        zoomRatio:\r\n          [2028, 2029, 2191].indexOf(\r\n            props?.currentModule?.workflow_id ||\r\n            props?.currentModule?.record?.workflow_id\r\n          ) != -1 ||\r\n            props?.currentModule?.app_id == 14 ||\r\n            props?.currentModule?.record?.app_id == 14\r\n            ? 10\r\n            : 25,\r\n        isConfirmed: true,\r\n        outRange: null,\r\n        hasNotify: false,\r\n        pointsLength: [],\r\n        annotationLength: 17,\r\n        polygons: suggestionsParcels || [],\r\n        demSaveDraft: false,\r\n        cadFiles: {},\r\n        layerParcels: [],\r\n        planDescription: cadDetails?.planDescription || \"\",\r\n        activeKey: \"1\",\r\n        isWithinUrbanBoundry: cadDetails?.isWithinUrbanBoundry || null,\r\n        isUnPlannedParcelIntersect: cadDetails?.isUnPlannedParcelIntersect || false,\r\n        cadResults:\r\n          (cadDetails?.temp && cadDetails?.temp?.cadResults) || undefined,\r\n        isKrokyUpdateContract:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 8 || false,\r\n\r\n        isTadkekMesahy:\r\n          [29].indexOf(\r\n            props?.currentModule?.app_id || props?.currentModule?.record?.app_id\r\n          ) != -1,\r\n        isTadkekMesahyModule: props?.currentModule?.id != 114,\r\n        isFarz:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 1 || false,\r\n        isUpdateContract:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 14 || false,\r\n        isPlan:\r\n          (props?.currentModule?.app_id ||\r\n            props?.currentModule?.record?.app_id) == 16 || false,\r\n\r\n        notify: (cadDetails?.temp && cadDetails?.temp?.notify) || false,\r\n        hideDrag: (cadDetails?.temp && cadDetails?.temp?.hideDrag) || false,\r\n        lineLengthFont: 25,\r\n        parcelNumberFont: 25,\r\n        isBoundry: false,\r\n        mun: cadDetails?.mun || {},\r\n        muns: [],\r\n        have_electric_room:\r\n          (cadDetails?.temp && cadDetails?.temp?.have_electric_room) || false,\r\n        electric_room_area:\r\n          (cadDetails?.temp && cadDetails?.temp?.electric_room_area) || 0,\r\n        electric_room_place:\r\n          (cadDetails?.temp && cadDetails?.temp?.electric_room_place) || 0,\r\n        reqType:\r\n          ([1949, 2048].indexOf(props.currentModule.record.workflow_id) != -1 &&\r\n            \"duplex\") ||\r\n          \"\",\r\n      };\r\n\r\n      if (\r\n        cadDetails?.temp &&\r\n        (cadDetails?.temp?.isKrokyUpdateContract || cadDetails?.temp?.isPlan)\r\n      ) {\r\n        obj[\"survayParcelCutter\"] = cadDetails?.survayParcelCutter || [\r\n          {\r\n            direction: \"الشطفة\",\r\n            NORTH_EAST_DIRECTION: \"\",\r\n            NORTH_WEST_DIRECTION: \"\",\r\n            SOUTH_EAST_DIRECTION: \"\",\r\n            SOUTH_WEST_DIRECTION: \"\",\r\n          },\r\n        ];\r\n      }\r\n\r\n      if (obj.isTadkekMesahy) {\r\n        if (obj.polygons) {\r\n          obj.polygons.forEach((polygon, index) => {\r\n            obj[`parcel_name${index}`] = polygon.parcel_name;\r\n          });\r\n        }\r\n      }\r\n\r\n      if (obj.isUpdateContract && obj.polygons.length > 0) {\r\n        obj.polygons.forEach((polygon, index) => {\r\n          obj[`have_electric_room${index}`] =\r\n            polygon.have_electric_room || false;\r\n          obj[`electric_room_area${index}`] = polygon.electric_room_area || \"\";\r\n          obj[`electric_room_place${index}`] = polygon.electric_room_place;\r\n        });\r\n      }\r\n      this.setState({ ...obj }, () => {\r\n        this.settoStore(obj.polygons);\r\n      });\r\n    }\r\n  };\r\n\r\n  loadParcelsFromLandData = () => {\r\n    let mainObject = selectMainObject(this.props);\r\n    if (!this.state.polygons.length && !this.state?.cadResults) {\r\n      //this.state.isUpdateContract = true;\r\n      this.state.cadResults = {\r\n        data: [\r\n          {\r\n            shapeFeatures: mainObject?.landData?.landData?.lands?.parcels.map(\r\n              (polygon, index) => {\r\n                return { ...polygon, index };\r\n              }\r\n            ),\r\n          },\r\n        ],\r\n      };\r\n      this.state.cadResults.data[0].shapeFeatures.forEach((elem) => {\r\n        this.state[`parcel_name${elem.index}`] =\r\n          elem?.attributes?.PARCEL_PLAN_NO;\r\n\r\n        this.state.polygons.splice(this.state.polygons.length, 0, {\r\n          polygon: elem,\r\n          parcel_name: elem?.attributes?.PARCEL_PLAN_NO,\r\n          area: elem?.attributes?.PARCEL_AREA,\r\n          data: [\r\n            {\r\n              name: \"north\",\r\n              data: [\r\n                {\r\n                  lineDirection: 1,\r\n                  text:\r\n                    +elem?.parcelData?.north_length?.inputValue ||\r\n                    +elem?.parcelData?.north_length,\r\n                },\r\n              ],\r\n              totalLength:\r\n                elem?.parcelData?.north_length?.inputValue?.toString() ||\r\n                +elem?.parcelData?.north_length,\r\n            },\r\n            {\r\n              name: \"east\",\r\n              data: [\r\n                {\r\n                  lineDirection: 2,\r\n                  text:\r\n                    +elem?.parcelData?.east_length?.inputValue ||\r\n                    +elem?.parcelData?.east_length,\r\n                },\r\n              ],\r\n              totalLength:\r\n                elem?.parcelData?.east_length?.inputValue?.toString() ||\r\n                +elem?.parcelData?.east_length,\r\n            },\r\n            { name: \"main\", data: [], totalLength: \"0.00\" },\r\n            {\r\n              name: \"west\",\r\n              data: [\r\n                {\r\n                  lineDirection: 4,\r\n                  text:\r\n                    +elem?.parcelData?.west_length?.inputValue ||\r\n                    +elem?.parcelData?.west_length,\r\n                },\r\n              ],\r\n              totalLength:\r\n                elem?.parcelData?.west_length?.inputValue?.toString() ||\r\n                elem?.parcelData?.west_length,\r\n            },\r\n            {\r\n              name: \"south\",\r\n              data: [\r\n                {\r\n                  lineDirection: 3,\r\n                  text:\r\n                    +elem?.parcelData?.south_length?.inputValue ||\r\n                    +elem?.parcelData?.south_length,\r\n                },\r\n              ],\r\n              totalLength:\r\n                elem?.parcelData?.south_length?.inputValue?.toString() ||\r\n                +elem?.parcelData?.south_length,\r\n            },\r\n          ],\r\n          north_Desc: elem?.parcelData.north_desc.toString(),\r\n          north_length_text: \"\",\r\n          east_Desc: elem?.parcelData.east_desc.toString(),\r\n          east_length_text: \"\",\r\n          west_Desc: elem?.parcelData.west_desc.toString(),\r\n          west_length_text: \"\",\r\n          south_Desc: elem?.parcelData.south_desc.toString(),\r\n          south_length_text: \"\",\r\n          electric_room_area: \"\",\r\n          electric_room_place: \"\",\r\n          have_electric_room: false,\r\n          survayParcelCutter: [\r\n            {\r\n              direction: \"الشطفة\",\r\n              NORTH_EAST_DIRECTION: \"\",\r\n              NORTH_WEST_DIRECTION: \"\",\r\n              SOUTH_EAST_DIRECTION: \"\",\r\n              SOUTH_WEST_DIRECTION: \"\",\r\n            },\r\n          ],\r\n        });\r\n      });\r\n    } else if (\r\n      this.state?.cadResults?.data[0]?.cadFeatures?.length &&\r\n      this.state?.polygons?.length &&\r\n      !mainObject?.data_msa7y?.msa7yData?.mapviewer?.mapGraphics?.length\r\n    ) {\r\n      this.buildCADDetails(true);\r\n    }\r\n  };\r\n\r\n  duplixTypeChange = (selectedType, polygon, key, evt) => {\r\n    polygon[\"duplixType\"] = selectedType;\r\n    this.state[\"duplixType\" + key] = selectedType;\r\n\r\n    var minLength = 0;\r\n    polygon.data.forEach((val, key) => {\r\n      if (\r\n        (minLength > parseFloat(val.totalLength) || minLength == 0) &&\r\n        val.name != \"main\"\r\n      ) {\r\n        minLength = val.totalLength;\r\n      }\r\n    });\r\n\r\n    if (selectedType == \"splited\") {\r\n      if (minLength < 11.5) {\r\n        polygon.cantSplitedOrMarged = true;\r\n        polygon.errorInDuplixType = true;\r\n        polygon.errorMsgForDuplixType = \"DUPLIXSPLITEDERRORMESSAGE\";\r\n      } else {\r\n        polygon.cantSplitedOrMarged = false;\r\n        polygon.errorInDuplixType = false;\r\n        polygon.errorMsgForDuplixType = \"\";\r\n      }\r\n    } else if (selectedType == \"marged\") {\r\n      if (minLength < 9.5) {\r\n        polygon.cantSplitedOrMarged = true;\r\n        polygon.errorInDuplixType = true;\r\n        polygon.errorMsgForDuplixType = \"DUPLIXMARGEDERRORMESSAGE\";\r\n      } else {\r\n        polygon.cantSplitedOrMarged = false;\r\n        polygon.errorInDuplixType = false;\r\n        polygon.errorMsgForDuplixType = \"\";\r\n      }\r\n    } else {\r\n      polygon.errorInDuplixType = false;\r\n      polygon.errorMsgForDuplixType = \"\";\r\n    }\r\n\r\n    if (!isEmpty(polygon.errorMsgForDuplixType))\r\n      window.notifySystem(\"error\", `messages:${polygon.errorMsgForDuplixType}`);\r\n\r\n    this.state.polygons[key] = polygon;\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  onInputTextChange = (polygon, key, evt) => {\r\n    polygon[evt.target.name] = evt.target.value;\r\n    console.log(polygon);\r\n    this.state[evt.target.name + key] = evt.target.value;\r\n    this.state.polygons[key] = polygon;\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  // onParcelTextChange = (polygon, key, evt) => {\r\n  //   this.state[evt.target.name + key] = evt.target.value;\r\n  //   polygon.parcel_name = isEmpty(this.state[`parcelSliceNo${key}`])\r\n  //     ? this.state[`parcel_name${key}`]\r\n  //     : `${this.state[`parcelSliceNo${key}`]}/${\r\n  //         this.state[`parcel_name${key}`]\r\n  //       }`;\r\n  //   this.state.polygons[key] = polygon;\r\n  //   this.settoStore(this.state.polygons);\r\n  // };\r\n\r\n  onParcelTextChange = (polygon, key, evt) => {\r\n    this.state[evt.target.name + key] = evt.target.value;\r\n\r\n    polygon.parcel_name = setParcelName([\r\n      this.state[`parcel_name${key}`],\r\n      this.state[\"parcelSliceNo\" + key],\r\n    ]);\r\n\r\n    polygon.parcelNameRight = this.state[`parcel_name${key}`];\r\n    polygon.parcelNameLeft = this.state[\"parcelSliceNo\" + key];\r\n\r\n    this.state.polygons[key] = polygon;\r\n\r\n    if (this.state.isTadkekMesahy) {\r\n      clearGraphicFromLayer(this.map, \"PacrelUnNamedGraphicLayer\");\r\n\r\n      this.state.polygons\r\n        .filter((x) => !x.isFullBoundry)\r\n        .forEach((polygon, key) => {\r\n          redrawNames(\r\n            polygon,\r\n            this.map,\r\n            setParcelName([\r\n              this.state[`parcel_name${key}`],\r\n              this.state[\"parcelSliceNo\" + key],\r\n            ]),\r\n            \"PacrelUnNamedGraphicLayer\",\r\n            key\r\n          );\r\n        });\r\n    } else {\r\n      redrawNames(\r\n        this.state.polygons[key],\r\n        this.map,\r\n        setParcelName([\r\n          this.state[`parcel_name${key}`],\r\n          this.state[\"parcelSliceNo\" + key],\r\n        ]),\r\n        \"PacrelUnNamedGraphicLayer\",\r\n        key\r\n      );\r\n    }\r\n\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  onChange = (activeKey) => {\r\n    if (this.state.polygons[+activeKey - 1].data) {\r\n      this.setState({\r\n        activeKey,\r\n        [\"westBoundries\" + (+activeKey - 1)]: this.state.polygons[\r\n          +activeKey - 1\r\n        ].data[3].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"west_\" + i}`,\r\n            content: item.text,\r\n            data: item,\r\n          };\r\n        }),\r\n        [\"northBoundries\" + (+activeKey - 1)]: this.state.polygons[\r\n          +activeKey - 1\r\n        ].data[0].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"north_\" + i}`,\r\n            content: item.text,\r\n\r\n            data: item,\r\n          };\r\n        }),\r\n        [\"eastBoundries\" + (+activeKey - 1)]: this.state.polygons[\r\n          +activeKey - 1\r\n        ].data[1].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"east_\" + i}`,\r\n            content: item.text,\r\n\r\n            data: item,\r\n          };\r\n        }),\r\n        [\"southBoundries\" + (+activeKey - 1)]: this.state.polygons[\r\n          +activeKey - 1\r\n        ].data[4].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"south_\" + i}`,\r\n            content: item.text,\r\n            data: item,\r\n          };\r\n        }),\r\n      });\r\n    } else {\r\n      this.setState({ activeKey });\r\n    }\r\n  };\r\n\r\n  onmouseover = (item) => {\r\n    var polyline = new esri.geometry.Polyline(item);\r\n    highlightFeature(polyline, this.map, {\r\n      layerName: \"highlightBoundriesGraphicLayer\",\r\n      fillColor: item.color,\r\n    });\r\n  };\r\n\r\n  onmouseleave = () => {\r\n    clearGraphicFromLayer(this.map, \"highlightBoundriesGraphicLayer\");\r\n  };\r\n\r\n  onElectricInputChange = (stateName, evt) => {\r\n    this.state[stateName] =\r\n      evt.target.type == \"checkbox\" ? evt.target.checked : evt.target.value;\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  openPopup = (scope, element) => {\r\n    var fields = this.parcelDataFields;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: element.parcelData && { ...element.parcelData } || {\r\n            north_length: element?.data[0]?.totalLength,\r\n            north_desc: element.north_Desc,\r\n            east_length: element?.data[1]?.totalLength,\r\n            east_desc: element.east_Desc,\r\n            west_length: element?.data[3]?.totalLength,\r\n            west_desc: element.west_Desc,\r\n            south_length: element?.data[4]?.totalLength,\r\n            south_desc: element.south_Desc,\r\n          },\r\n          ok(values) {\r\n            element.data[0].totalLength = values.north_length;\r\n            element.data[1].totalLength = values.east_length;\r\n            element.data[3].totalLength = values.west_length;\r\n            element.data[4].totalLength = values.south_length;\r\n            element.north_Desc = values.north_desc;\r\n            element.east_Desc = values.east_desc;\r\n            element.west_Desc = values.west_desc;\r\n            element.south_Desc = values.south_desc;\r\n            element.parcelData = {\r\n              south_length: values.south_length,\r\n              south_desc: values.south_desc,\r\n              north_length: values.north_length,\r\n              north_desc: values.north_desc,\r\n              east_desc: values.east_desc,\r\n              east_length: values.east_length,\r\n              west_desc: values.west_desc,\r\n              west_length: values.west_length\r\n            }\r\n            scope.settoStore(scope.state.polygons);\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  remove = (item) => {\r\n    this.state.polygons.pop(item);\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      planDescription,\r\n      survayParcelCutter,\r\n      isKrokyUpdateContract,\r\n      isPlan,\r\n      isUpdateContract,\r\n      reqType,\r\n      viewNumbersOnly,\r\n      isTadkekMesahy,\r\n      isFarz,\r\n      isPropetryCheck,\r\n    } = this.state;\r\n\r\n    if (isTadkekMesahy) {\r\n      clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n    }\r\n\r\n    let mainObject = selectMainObject(this.props);\r\n    const { isView, inputs } = this.props;\r\n\r\n    let isFinishStepContractUpdate =\r\n      (this.props.currentModule?.id == 118 &&\r\n        this.props.currentModule?.record?.app_id == 14) ||\r\n      (this.props.currentModule?.id == 119 &&\r\n        this.props.currentModule?.record?.app_id == 27);\r\n\r\n    // const {\r\n    //   landData: {\r\n    //     landData: {\r\n    //       area,\r\n    //       lands: { parcels },\r\n    //     },\r\n    //   },\r\n    // } = mainObject;\r\n    let requestType = mainObject?.landData?.requestType;\r\n    let parcels = mainObject?.landData?.landData?.lands?.parcels;\r\n    let area = mainObject?.landData?.landData?.area;\r\n    return (\r\n      <div>\r\n        {isFinishStepContractUpdate ? (\r\n          <>\r\n            <table\r\n              className=\"table table-bordered no-margin\"\r\n              style={{ marginTop: \"23px\" }}\r\n            >\r\n              <thead>\r\n                <tr>\r\n                  <th>رقم قطعة الأرض</th>\r\n                  <th>وصف الحدود</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.polygons.map((parcel, index) => {\r\n                  return (\r\n                    <tr key={index}>\r\n                      <td>{convertToArabic(parcel.parcel_name)}</td>\r\n                      <td>\r\n                        <b>الحد الشمالي :</b>\r\n                        <br />\r\n                        <span\r\n                          dangerouslySetInnerHTML={{\r\n                            __html: `طوله <b>${convertToArabic(\r\n                              parcel.data[0].totalLength\r\n                            )}</b> م ويحدها ${convertToArabic(\r\n                              parcel.north_Desc\r\n                            )}`,\r\n                          }}\r\n                        ></span>\r\n                        <br />\r\n                        <br />\r\n                        <b>الحد الشرقي :</b>\r\n                        <br />\r\n                        <span\r\n                          dangerouslySetInnerHTML={{\r\n                            __html: `طوله <b>${convertToArabic(\r\n                              parcel.data[1].totalLength\r\n                            )}</b> م ويحدها ${convertToArabic(\r\n                              parcel.east_Desc\r\n                            )}`,\r\n                          }}\r\n                        ></span>\r\n                        <br />\r\n                        <br />\r\n                        <b>الحد الجنوبي :</b>\r\n                        <br />\r\n                        <span\r\n                          dangerouslySetInnerHTML={{\r\n                            __html: `طوله <b>${convertToArabic(\r\n                              parcel.data[4].totalLength\r\n                            )}</b> م ويحدها ${convertToArabic(\r\n                              parcel.south_Desc\r\n                            )}`,\r\n                          }}\r\n                        ></span>\r\n                        <br />\r\n                        <br />\r\n                        <b>الحد الغربي :</b>\r\n                        <br />\r\n                        <span\r\n                          dangerouslySetInnerHTML={{\r\n                            __html: `طوله <b>${convertToArabic(\r\n                              parcel.data[3].totalLength\r\n                            )}</b> م ويحدها ${convertToArabic(\r\n                              parcel.west_Desc\r\n                            )}`,\r\n                          }}\r\n                        ></span>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div style={{ marginTop: \"50px\" }}>\r\n              {!isKrokyUpdateContract &&\r\n                !isUpdateContract &&\r\n                !this.state.isTadkekMesahy &&\r\n                !isFarz &&\r\n                planDescription != \"\" && (\r\n                  <p style={{ textAlign: \"right\", fontSize: \"18px\" }}>\r\n                    {planDescription}\r\n                  </p>\r\n                )}\r\n            </div>\r\n            <div>\r\n              {this.state.isUnPlannedParcelIntersect &&\r\n                <div>\r\n                  الأرض المرفوعة تتقاطع مع أحد الأراضي في طبقة الأراضي الخام برقم المعاملة {this.state.isUnPlannedParcelIntersect}\r\n                </div>\r\n              }\r\n              {!isView &&\r\n                this.state.polygons &&\r\n                this.state.polygons.length > 0 &&\r\n                this.state.polygons[0].area != -1 &&\r\n                ((!isFarz && (\r\n                  <Tabs\r\n                    style={{ marginTop: \"30px\" }}\r\n                    tabPosition=\"top\"\r\n                    type=\"card\"\r\n                    activeKey={this.state.activeKey}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    {this.state.polygons.map((polygon, key) => {\r\n                      return (\r\n                        <TabPane\r\n                          tab={convertToArabic(polygon.parcel_name)}\r\n                          key={key + 1}\r\n                        >\r\n                          <div\r\n                            key={key}\r\n                            style={{\r\n                              pointerEvents:\r\n                                (this.state.isTadkekMesahyModule &&\r\n                                  this.state.isTadkekMesahy) || this.props.isDisabled\r\n                                  ? \"none\"\r\n                                  : \"auto\",\r\n                            }}\r\n                          >\r\n                            {!isKrokyUpdateContract &&\r\n                              !isUpdateContract &&\r\n                              !this.state.isTadkekMesahy &&\r\n                              !isFarz &&\r\n                              (polygon.area ||\r\n                                parseFloat(\r\n                                  parcels?.[key]?.attributes?.PARCEL_AREA || 0\r\n                                )) > 0 && (\r\n                                <>\r\n                                  <div>\r\n                                    المساحة الكلية للأرض حسب الطبيعة :{\" \"}\r\n                                    {convertToArabic(\r\n                                      (+polygon.area).toFixed(2)\r\n                                    )}{\" \"}\r\n                                    م{convertToArabic(2)}\r\n                                  </div>\r\n                                  <div>\r\n                                    مساحة الأرض حسب وثيقة الملكية :{\" \"}\r\n                                    {convertToArabic(\r\n                                      isKrokyUpdateContract\r\n                                        ? polygon.parcel_name != \"حدود المعاملة\"\r\n                                          ? parseFloat(\r\n                                            parcels?.[key - 1]?.attributes\r\n                                              ?.PARCEL_AREA || 0\r\n                                          ).toFixed(2)\r\n                                          : area\r\n                                        : parseFloat(\r\n                                          parcels?.[key]?.attributes\r\n                                            ?.PARCEL_AREA || 0\r\n                                        ).toFixed(2)\r\n                                    )}{\" \"}\r\n                                    م{convertToArabic(2)}\r\n                                  </div>\r\n                                </>\r\n                              )}\r\n                            {(isKrokyUpdateContract ||\r\n                              isUpdateContract ||\r\n                              this.state.isTadkekMesahy ||\r\n                              isFarz) &&\r\n                              polygon.area > 0 && (\r\n                                <>\r\n                                  <div>\r\n                                    المساحة الكلية :{\" \"}\r\n                                    {convertToArabic(\r\n                                      (\r\n                                        +polygon.cad_area || +polygon.area\r\n                                      ).toFixed(2)\r\n                                    )}{\" \"}\r\n                                    م{convertToArabic(2)}\r\n                                  </div>\r\n                                </>\r\n                              )}\r\n                            {\r\n                              <DragDropContext onDragEnd={this.onDragEnd}>\r\n                                <div style={itemContainerNorth}>\r\n                                  <p\r\n                                    style={{\r\n                                      textAlign: \"center\",\r\n                                      fontSize: \"18px\",\r\n                                    }}\r\n                                  >\r\n                                    الشمال\r\n                                  </p>\r\n\r\n                                  {inputs.north.map((input, index) => {\r\n                                    return (\r\n                                      <input\r\n                                        name={input.name}\r\n                                        type={input.type || \"text\"}\r\n                                        className=\"ant-input\"\r\n                                        placeholder={input.placeholder}\r\n                                        required=\"required\"\r\n                                        value={polygon[input.name]}\r\n                                        onChange={this.onInputTextChange.bind(\r\n                                          this,\r\n                                          polygon,\r\n                                          key\r\n                                        )}\r\n                                      />\r\n                                    );\r\n                                  })}\r\n\r\n                                  {!viewNumbersOnly && (\r\n                                    <Droppable droppableId=\"droppable_North\">\r\n                                      {(provided, snapshot) => (\r\n                                        <div\r\n                                          ref={provided.innerRef}\r\n                                          style={getListStyle(\r\n                                            snapshot.isDraggingOver\r\n                                          )}\r\n                                        >\r\n                                          {this.state[\"northBoundries\" + key] &&\r\n                                            this.state[\r\n                                              \"northBoundries\" + key\r\n                                            ].map((item, index) => (\r\n                                              <Draggable\r\n                                                key={item.id}\r\n                                                draggableId={item.id}\r\n                                                index={index}\r\n                                              >\r\n                                                {(provided, snapshot) => (\r\n                                                  <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    style={getItemStyle(\r\n                                                      snapshot.isDragging,\r\n                                                      provided.draggableProps\r\n                                                        .style\r\n                                                    )}\r\n                                                    onMouseOver={this.onmouseover.bind(\r\n                                                      this,\r\n                                                      item.data\r\n                                                    )}\r\n                                                    onMouseLeave={this.onmouseleave.bind(\r\n                                                      this\r\n                                                    )}\r\n                                                  >\r\n                                                    {convertToArabic(\r\n                                                      item.content &&\r\n                                                      (+item.content)?.toFixed(\r\n                                                        2\r\n                                                      )\r\n                                                    )}\r\n                                                  </div>\r\n                                                )}\r\n                                              </Draggable>\r\n                                            ))}\r\n                                          {provided.placeholder}\r\n                                        </div>\r\n                                      )}\r\n                                    </Droppable>\r\n                                  )}\r\n                                  <p\r\n                                    style={{\r\n                                      float: \"left\",\r\n                                      textAlign: \"left\",\r\n                                      fontSize: \"20px\",\r\n                                    }}\r\n                                  >\r\n                                    طول الحد :{\" \"}\r\n                                    {convertToArabic(\r\n                                      polygon.data[0].totalLength &&\r\n                                      (+polygon.data[0].totalLength)?.toFixed(\r\n                                        2\r\n                                      )\r\n                                    )}\r\n                                  </p>\r\n                                  {/* <p style={{ float: \"right\",textAlign: \"right\", fontSize: \"20px\" }}>\r\n                            {polygon.data[0].data.map((side, subkey) => {\r\n                                return (\r\n                                  <span style={sideClass} onMouseOver={this.onmouseover.bind(this, side)} onMouseLeave={this.onmouseleave.bind(this)}>{parseFloat(side.text).toFixed(2)}</span>\r\n                                )\r\n                            })}\r\n                          </p> */}\r\n                                </div>\r\n\r\n                                <div style={{ display: \"flex\" }}>\r\n                                  <div style={itemContainerEast}>\r\n                                    <p\r\n                                      style={{\r\n                                        textAlign: \"center\",\r\n                                        fontSize: \"18px\",\r\n                                      }}\r\n                                    >\r\n                                      الشرق\r\n                                    </p>\r\n\r\n                                    {inputs.east.map((input, index) => {\r\n                                      return (\r\n                                        <input\r\n                                          name={input.name}\r\n                                          type={input.type || \"text\"}\r\n                                          className=\"ant-input\"\r\n                                          placeholder={input.placeholder}\r\n                                          required=\"required\"\r\n                                          value={polygon[input.name]}\r\n                                          onChange={this.onInputTextChange.bind(\r\n                                            this,\r\n                                            polygon,\r\n                                            key\r\n                                          )}\r\n                                        />\r\n                                      );\r\n                                    })}\r\n\r\n                                    {!viewNumbersOnly && (\r\n                                      <Droppable droppableId=\"droppable_East\">\r\n                                        {(provided, snapshot) => (\r\n                                          <div\r\n                                            ref={provided.innerRef}\r\n                                            style={getListStyle(\r\n                                              snapshot.isDraggingOver\r\n                                            )}\r\n                                          >\r\n                                            {this.state[\r\n                                              \"eastBoundries\" + key\r\n                                            ] &&\r\n                                              this.state[\r\n                                                \"eastBoundries\" + key\r\n                                              ].map((item, index) => (\r\n                                                <Draggable\r\n                                                  key={item.id}\r\n                                                  draggableId={item.id}\r\n                                                  index={index}\r\n                                                >\r\n                                                  {(provided, snapshot) => (\r\n                                                    <div\r\n                                                      ref={provided.innerRef}\r\n                                                      {...provided.draggableProps}\r\n                                                      {...provided.dragHandleProps}\r\n                                                      style={getItemStyle(\r\n                                                        snapshot.isDragging,\r\n                                                        provided.draggableProps\r\n                                                          .style\r\n                                                      )}\r\n                                                      onMouseOver={this.onmouseover.bind(\r\n                                                        this,\r\n                                                        item.data\r\n                                                      )}\r\n                                                      onMouseLeave={this.onmouseleave.bind(\r\n                                                        this\r\n                                                      )}\r\n                                                    >\r\n                                                      {convertToArabic(\r\n                                                        item.content &&\r\n                                                        (+item.content)?.toFixed(\r\n                                                          2\r\n                                                        )\r\n                                                      )}\r\n                                                    </div>\r\n                                                  )}\r\n                                                </Draggable>\r\n                                              ))}\r\n                                            {provided.placeholder}\r\n                                          </div>\r\n                                        )}\r\n                                      </Droppable>\r\n                                    )}\r\n                                    <p\r\n                                      style={{\r\n                                        float: \"left\",\r\n                                        textAlign: \"left\",\r\n                                        fontSize: \"20px\",\r\n                                      }}\r\n                                    >\r\n                                      طول الحد :{\" \"}\r\n                                      {convertToArabic(\r\n                                        polygon.data[1].totalLength &&\r\n                                        (+polygon.data[1]\r\n                                          .totalLength)?.toFixed(2)\r\n                                      )}\r\n                                    </p>\r\n                                    {/* <p style={{ float: \"right\",textAlign: \"right\", fontSize: \"20px\" }}>\r\n                            {polygon.data[1].data.map((side, subkey) => {\r\n                                return (\r\n                                  <span style={sideClass} onMouseOver={this.onmouseover.bind(this, side)} onMouseLeave={this.onmouseleave.bind(this)}>{parseFloat(side.text).toFixed(2)}</span>\r\n                                )\r\n                            })}\r\n                          </p> */}\r\n                                  </div>\r\n\r\n                                  <div style={itemContainerEmpty}> </div>\r\n                                  <div style={itemContainerWest}>\r\n                                    <p\r\n                                      style={{\r\n                                        textAlign: \"center\",\r\n                                        fontSize: \"18px\",\r\n                                      }}\r\n                                    >\r\n                                      الغرب\r\n                                    </p>\r\n\r\n                                    {inputs.west.map((input, index) => {\r\n                                      return (\r\n                                        <input\r\n                                          name={input.name}\r\n                                          type={input.type || \"text\"}\r\n                                          className=\"ant-input\"\r\n                                          placeholder={input.placeholder}\r\n                                          required=\"required\"\r\n                                          value={polygon[input.name]}\r\n                                          onChange={this.onInputTextChange.bind(\r\n                                            this,\r\n                                            polygon,\r\n                                            key\r\n                                          )}\r\n                                        />\r\n                                      );\r\n                                    })}\r\n\r\n                                    {!viewNumbersOnly && (\r\n                                      <Droppable droppableId=\"droppable_West\">\r\n                                        {(provided, snapshot) => (\r\n                                          <div\r\n                                            ref={provided.innerRef}\r\n                                            style={getListStyle(\r\n                                              snapshot.isDraggingOver\r\n                                            )}\r\n                                          >\r\n                                            {this.state[\r\n                                              \"westBoundries\" + key\r\n                                            ] &&\r\n                                              this.state[\r\n                                                \"westBoundries\" + key\r\n                                              ].map((item, index) => (\r\n                                                <Draggable\r\n                                                  key={item.id}\r\n                                                  draggableId={item.id}\r\n                                                  index={index}\r\n                                                >\r\n                                                  {(provided, snapshot) => (\r\n                                                    <div\r\n                                                      ref={provided.innerRef}\r\n                                                      {...provided.draggableProps}\r\n                                                      {...provided.dragHandleProps}\r\n                                                      style={getItemStyle(\r\n                                                        snapshot.isDragging,\r\n                                                        provided.draggableProps\r\n                                                          .style\r\n                                                      )}\r\n                                                      onMouseOver={this.onmouseover.bind(\r\n                                                        this,\r\n                                                        item.data\r\n                                                      )}\r\n                                                      onMouseLeave={this.onmouseleave.bind(\r\n                                                        this\r\n                                                      )}\r\n                                                    >\r\n                                                      {convertToArabic(\r\n                                                        item.content &&\r\n                                                        (+item.content)?.toFixed(\r\n                                                          2\r\n                                                        )\r\n                                                      )}\r\n                                                    </div>\r\n                                                  )}\r\n                                                </Draggable>\r\n                                              ))}\r\n                                            {provided.placeholder}\r\n                                          </div>\r\n                                        )}\r\n                                      </Droppable>\r\n                                    )}\r\n\r\n                                    <p\r\n                                      style={{\r\n                                        float: \"left\",\r\n                                        textAlign: \"left\",\r\n                                        fontSize: \"20px\",\r\n                                      }}\r\n                                    >\r\n                                      طول الحد :{\" \"}\r\n                                      {convertToArabic(\r\n                                        polygon.data[3].totalLength &&\r\n                                        (+polygon.data[3]\r\n                                          .totalLength)?.toFixed(2)\r\n                                      )}\r\n                                    </p>\r\n                                    {/* <p style={{ float: \"right\",textAlign: \"right\", fontSize: \"20px\" }}>\r\n                            {polygon.data[3].data.map((side, subkey) => {\r\n                                return (\r\n                                  <span style={sideClass} onMouseOver={this.onmouseover.bind(this, side)} onMouseLeave={this.onmouseleave.bind(this)}>{parseFloat(side.text).toFixed(2)}</span>\r\n                                )\r\n                            })}\r\n                          </p> */}\r\n                                  </div>\r\n                                </div>\r\n\r\n                                <div style={itemContainerSouth}>\r\n                                  <p\r\n                                    style={{\r\n                                      textAlign: \"center\",\r\n                                      fontSize: \"18px\",\r\n                                    }}\r\n                                  >\r\n                                    الجنوب\r\n                                  </p>\r\n\r\n                                  {inputs.south.map((input, index) => {\r\n                                    return (\r\n                                      <input\r\n                                        name={input.name}\r\n                                        type={input.type || \"text\"}\r\n                                        className=\"ant-input\"\r\n                                        placeholder={input.placeholder}\r\n                                        required=\"required\"\r\n                                        value={polygon[input.name]}\r\n                                        onChange={this.onInputTextChange.bind(\r\n                                          this,\r\n                                          polygon,\r\n                                          key\r\n                                        )}\r\n                                      />\r\n                                    );\r\n                                  })}\r\n\r\n                                  {!viewNumbersOnly && (\r\n                                    <Droppable droppableId=\"droppable_South\">\r\n                                      {(provided, snapshot) => (\r\n                                        <div\r\n                                          ref={provided.innerRef}\r\n                                          style={getListStyle(\r\n                                            snapshot.isDraggingOver\r\n                                          )}\r\n                                        >\r\n                                          {this.state[\"southBoundries\" + key] &&\r\n                                            this.state[\r\n                                              \"southBoundries\" + key\r\n                                            ].map((item, index) => (\r\n                                              <Draggable\r\n                                                key={item.id}\r\n                                                draggableId={item.id}\r\n                                                index={index}\r\n                                              >\r\n                                                {(provided, snapshot) => (\r\n                                                  <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    style={getItemStyle(\r\n                                                      snapshot.isDragging,\r\n                                                      provided.draggableProps\r\n                                                        .style\r\n                                                    )}\r\n                                                    onMouseOver={this.onmouseover.bind(\r\n                                                      this,\r\n                                                      item.data\r\n                                                    )}\r\n                                                    onMouseLeave={this.onmouseleave.bind(\r\n                                                      this\r\n                                                    )}\r\n                                                  >\r\n                                                    {convertToArabic(\r\n                                                      item.content &&\r\n                                                      (+item.content)?.toFixed(\r\n                                                        2\r\n                                                      )\r\n                                                    )}\r\n                                                  </div>\r\n                                                )}\r\n                                              </Draggable>\r\n                                            ))}\r\n                                          {provided.placeholder}\r\n                                        </div>\r\n                                      )}\r\n                                    </Droppable>\r\n                                  )}\r\n                                  <p\r\n                                    style={{\r\n                                      float: \"left\",\r\n                                      textAlign: \"left\",\r\n                                      fontSize: \"20px\",\r\n                                    }}\r\n                                  >\r\n                                    طول الحد :{\" \"}\r\n                                    {convertToArabic(\r\n                                      polygon.data[4].totalLength &&\r\n                                      (+polygon.data[4].totalLength)?.toFixed(\r\n                                        2\r\n                                      )\r\n                                    )}\r\n                                  </p>\r\n                                  {/* <p style={{ float: \"right\",textAlign: \"right\", fontSize: \"20px\" }}>\r\n                            {polygon.data[4].data.map((side, subkey) => {\r\n                              return (\r\n                                <span style={sideClass} onMouseOver={this.onmouseover.bind(this, side)} onMouseLeave={this.onmouseleave.bind(this)}>{parseFloat(side.text).toFixed(2)}</span>\r\n                              )\r\n                            })}\r\n                          </p> */}\r\n                                </div>\r\n                              </DragDropContext>\r\n                            }\r\n                          </div>\r\n                          {/* {isUpdateContract &&\r\n                        polygon.parcel_name != \"حدود المعاملة\" && (\r\n                          <div\r\n                            className=\"col-xs-12\"\r\n                            style={{ marginTop: \"30px\", padding: \"0px\" }}\r\n                          >\r\n                            <div\r\n                              className=\"col-xs-2\"\r\n                              style={{ margin: \"20px 0px\", float: \"left\" }}\r\n                            >\r\n                              <input\r\n                                name=\"parcelSliceNo\"\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                value={this.state[`parcelSliceNo${key}`]}\r\n                                disabled={requestType == 2}\r\n                                placeholder=\"اسم التقسيم\"\r\n                                onChange={this.onParcelTextChange.bind(\r\n                                  this,\r\n                                  polygon,\r\n                                  key\r\n                                )}\r\n                              />\r\n                            </div>\r\n                            <div style={{ margin: \"20px 0px\", float: \"left\" }}>\r\n                              /\r\n                            </div>\r\n                            <div\r\n                              className=\"col-xs-2\"\r\n                              style={{ margin: \"20px 0px\", float: \"left\" }}\r\n                            >\r\n                              <input\r\n                                name=\"parcel_name\"\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                required=\"required\"\r\n                                value={this.state[`parcel_name${key}`]}\r\n                                disabled={viewNumbersOnly}\r\n                                placeholder=\"رقم قطعة الأرض\"\r\n                                onChange={this.onParcelTextChange.bind(\r\n                                  this,\r\n                                  polygon,\r\n                                  key\r\n                                )}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        )} */}\r\n\r\n                          {polygon.parcel_name != \"حدود المعاملة\" && (\r\n                            <Row gutter={[24, 16]}>\r\n                              {/* {isUpdateContract && (\r\n                            <Col span={4}>\r\n                              <input\r\n                                name=\"parcelSliceNo\"\r\n                                type=\"number\"\r\n                                placeholder=\"رقم التقسيم\"\r\n                                className=\"form-control\"\r\n                                value={this.state[`parcelSliceNo${key}`]}\r\n                                disabled={requestType == 2}\r\n                                onChange={this.onParcelTextChange.bind(\r\n                                  this,\r\n                                  polygon,\r\n                                  key\r\n                                )}\r\n                              />\r\n                            </Col>\r\n                          )}\r\n                          {isUpdateContract && <Col span={1}>/</Col>} */}\r\n                              {(isUpdateContract ||\r\n                                isFarz ||\r\n                                this.state.isTadkekMesahy) && (\r\n                                  <div\r\n                                    style={{\r\n                                      pointerEvents:\r\n                                        this.state.isTadkekMesahyModule &&\r\n                                          this.state.isTadkekMesahy\r\n                                          ? \"none\"\r\n                                          : \"auto\",\r\n                                    }}\r\n                                  >\r\n                                    <Col\r\n                                      span={\r\n                                        ((isFarz || isUpdateContract) && 9) || 4\r\n                                      }\r\n                                    >\r\n                                      <Select\r\n                                        getPopupContainer={(trigger) =>\r\n                                          trigger.parentNode\r\n                                        }\r\n                                        name=\"parcel_name\"\r\n                                        onChange={(val) => {\r\n                                          this.onParcelTextChange(polygon, key, {\r\n                                            target: {\r\n                                              value: val,\r\n                                              name: \"parcel_name\",\r\n                                            },\r\n                                          });\r\n                                        }}\r\n                                        placeholder=\"رقم قطعة الارض\"\r\n                                        value={this.state[`parcel_name${key}`]}\r\n                                        disabled={viewNumbersOnly}\r\n                                      >\r\n                                        {parcels?.map((e, i) => {\r\n                                          return (\r\n                                            <Option\r\n                                              key={e.attributes.PARCEL_SPATIAL_ID}\r\n                                              value={e.attributes.PARCEL_PLAN_NO}\r\n                                            >\r\n                                              {localizeNumber(\r\n                                                e.attributes.PARCEL_PLAN_NO\r\n                                              )}\r\n                                            </Option>\r\n                                          );\r\n                                        })}\r\n                                      </Select>\r\n                                    </Col>\r\n                                  </div>\r\n                                )}\r\n                            </Row>\r\n                          )}\r\n                          {isKrokyUpdateContract && (\r\n                            <Row gutter={[24, 16]}>\r\n                              <Col span={9}>\r\n                                <input\r\n                                  name=\"area\"\r\n                                  type=\"text\"\r\n                                  className=\"form-control\"\r\n                                  placeholder=\"المساحة (م۲)\"\r\n                                  required=\"required\"\r\n                                  value={this.state[`area${key}`]}\r\n                                  onChange={this.onInputTextChange.bind(\r\n                                    this,\r\n                                    polygon,\r\n                                    key\r\n                                  )}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                          )}\r\n\r\n                          {/* {(isKrokyUpdateContract || isUpdateContract) && (\r\n                        <Row gutter={[24, 16]}>\r\n                          <Col span={9}>\r\n                            <input\r\n                              name={`${\r\n                                (isUpdateContract && \"area_text\") || \"area\"\r\n                              }`}\r\n                              type=\"text\"\r\n                              className=\"form-control\"\r\n                              placeholder={`${\r\n                                (isUpdateContract &&\r\n                                  \"من فضلك ادخل المساحة نصا هنا\") ||\r\n                                \"المساحة م2\"\r\n                              }`}\r\n                              required=\"required\"\r\n                              value={\r\n                                this.state[\r\n                                  ((isUpdateContract && \"area_text\") ||\r\n                                    \"area\") + `${key}`\r\n                                ]\r\n                              }\r\n                              onChange={this.onInputTextChange.bind(\r\n                                this,\r\n                                polygon,\r\n                                key\r\n                              )}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                      )} */}\r\n                          {(isFarz || isUpdateContract) && (\r\n                            <div className=\"col-xs-12\">\r\n                              <div>\r\n                                {!polygon.isFullBoundry &&\r\n                                  polygon.survayParcelCutter?.length > 0 && (\r\n                                    <div style={{ marginTop: \"20px\" }}>\r\n                                      <h1 className=\"titleSelectedParcel\">\r\n                                        الشطفات\r\n                                      </h1>\r\n\r\n                                      <table\r\n                                        className=\"table table-bordered\"\r\n                                        style={{ marginTop: \"1%\" }}\r\n                                      >\r\n                                        <thead>\r\n                                          <tr>\r\n                                            {this.parcel_fields_headers.map(\r\n                                              (field_header, k) => {\r\n                                                return <th>{field_header}</th>;\r\n                                              }\r\n                                            )}\r\n                                          </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                          {polygon.survayParcelCutter?.map(\r\n                                            (e, i) => {\r\n                                              return (\r\n                                                <tr key={i}>\r\n                                                  {this.parcel_fields.map(\r\n                                                    (field, k) => {\r\n                                                      return (\r\n                                                        <td key={k}>\r\n                                                          <div>\r\n                                                            {field.editable ? (\r\n                                                              !this.state[\r\n                                                                field.name +\r\n                                                                \"_isEdit_\" +\r\n                                                                i +\r\n                                                                `${key}`\r\n                                                              ] ? (\r\n                                                                <span>\r\n                                                                  <span>\r\n                                                                    {e[\r\n                                                                      field.name\r\n                                                                    ] || \"\"}\r\n                                                                  </span>\r\n                                                                  {this.showEditBtn(\r\n                                                                    field.name,\r\n                                                                    e[\r\n                                                                    field.name\r\n                                                                    ]\r\n                                                                  ) && (\r\n                                                                      <span>\r\n                                                                        <button\r\n                                                                          className=\"btn\"\r\n                                                                          style={{\r\n                                                                            marginRight:\r\n                                                                              e[\r\n                                                                                field\r\n                                                                                  .name\r\n                                                                              ]\r\n                                                                                ? \"20px\"\r\n                                                                                : \"0px\",\r\n                                                                          }}\r\n                                                                          onClick={(\r\n                                                                            event\r\n                                                                          ) => {\r\n                                                                            this.enableEdit(\r\n                                                                              field.name,\r\n                                                                              i,\r\n                                                                              key\r\n                                                                            );\r\n                                                                          }}\r\n                                                                        >\r\n                                                                          <i className=\"fas fa-edit\"></i>\r\n                                                                        </button>\r\n                                                                      </span>\r\n                                                                    )}\r\n                                                                </span>\r\n                                                              ) : (\r\n                                                                <span\r\n                                                                  style={{\r\n                                                                    display:\r\n                                                                      \"grid\",\r\n                                                                    gridTemplateColumns:\r\n                                                                      \"1fr auto\",\r\n                                                                  }}\r\n                                                                >\r\n                                                                  <input\r\n                                                                    key={i}\r\n                                                                    className=\"form-control\"\r\n                                                                    type=\"number\"\r\n                                                                    step=\"any\"\r\n                                                                    name={`${field.name +\r\n                                                                      i +\r\n                                                                      `${key}`\r\n                                                                      }`}\r\n                                                                    value={\r\n                                                                      e[\r\n                                                                      field\r\n                                                                        .name\r\n                                                                      ]\r\n                                                                    }\r\n                                                                    onChange={(\r\n                                                                      event\r\n                                                                    ) => {\r\n                                                                      this.myChangeHandler(\r\n                                                                        field.name,\r\n                                                                        i,\r\n                                                                        e,\r\n                                                                        key,\r\n                                                                        event\r\n                                                                      );\r\n                                                                    }}\r\n                                                                  />\r\n                                                                  <button\r\n                                                                    className=\"btn\"\r\n                                                                    style={{\r\n                                                                      marginRight:\r\n                                                                        \"20px\",\r\n                                                                    }}\r\n                                                                    onClick={(\r\n                                                                      event\r\n                                                                    ) => {\r\n                                                                      this.saveEdit(\r\n                                                                        0,\r\n                                                                        field.name,\r\n                                                                        i,\r\n                                                                        key\r\n                                                                      );\r\n                                                                    }}\r\n                                                                  >\r\n                                                                    <i className=\"fa fa-floppy-o\"></i>\r\n                                                                  </button>\r\n                                                                </span>\r\n                                                              )\r\n                                                            ) : (\r\n                                                              <span>\r\n                                                                <span>\r\n                                                                  {e[\r\n                                                                    field.name\r\n                                                                  ] || \"\"}\r\n                                                                </span>\r\n                                                              </span>\r\n                                                            )}\r\n                                                          </div>\r\n                                                        </td>\r\n                                                      );\r\n                                                    }\r\n                                                  )}\r\n                                                </tr>\r\n                                              );\r\n                                            }\r\n                                          )}\r\n                                        </tbody>\r\n                                      </table>\r\n                                    </div>\r\n                                  )}\r\n                              </div>\r\n                              {(isFarz || isUpdateContract) &&\r\n                                polygon.parcel_name != \"حدود المعاملة\" && (\r\n                                  <div>\r\n                                    {!viewNumbersOnly && (\r\n                                      <div>\r\n                                        <input\r\n                                          type=\"checkbox\"\r\n                                          style={{\r\n                                            width: \"20px\",\r\n                                            height: \"20px\",\r\n                                            margin: \"3px\",\r\n                                          }}\r\n                                          checked={\r\n                                            (!viewNumbersOnly &&\r\n                                              this.state[\r\n                                              `have_electric_room${key}`\r\n                                              ]) ||\r\n                                            true\r\n                                          }\r\n                                          disabled={viewNumbersOnly}\r\n                                          onChange={(evt) => {\r\n                                            this.state[\r\n                                              `electric_room_area${key}`\r\n                                            ] = \"\";\r\n                                            this.onElectricInputChange(\r\n                                              `have_electric_room${key}`,\r\n                                              evt\r\n                                            );\r\n                                          }}\r\n                                        />\r\n                                        تشمل غرفة الكهرباء\r\n                                      </div>\r\n                                    )}\r\n                                    {((!viewNumbersOnly &&\r\n                                      this.state[`have_electric_room${key}`]) ||\r\n                                      true) && (\r\n                                        <div>\r\n                                          <input\r\n                                            className=\"form-control\"\r\n                                            type=\"number\"\r\n                                            step=\"any\"\r\n                                            name={`electric_room_area${key}`}\r\n                                            value={\r\n                                              this.state[\r\n                                              `electric_room_area${key}`\r\n                                              ]\r\n                                            }\r\n                                            placeholder=\"مساحة غرفة الكهرباء\"\r\n                                            onChange={this.onElectricInputChange.bind(\r\n                                              this,\r\n                                              `electric_room_area${key}`\r\n                                            )}\r\n                                            disabled={viewNumbersOnly}\r\n                                          />\r\n                                        </div>\r\n                                      )}\r\n                                    {((!viewNumbersOnly &&\r\n                                      this.state[`have_electric_room${key}`]) ||\r\n                                      true) && (\r\n                                        <div>\r\n                                          <input\r\n                                            className=\"form-control\"\r\n                                            type=\"text\"\r\n                                            step=\"any\"\r\n                                            name={`electric_room_place${key}`}\r\n                                            value={\r\n                                              this.state[\r\n                                              `electric_room_place${key}`\r\n                                              ]\r\n                                            }\r\n                                            placeholder=\"مكان غرفة الكهرباء\"\r\n                                            onChange={this.onElectricInputChange.bind(\r\n                                              this,\r\n                                              `electric_room_place${key}`\r\n                                            )}\r\n                                            disabled={viewNumbersOnly}\r\n                                          />\r\n                                        </div>\r\n                                      )}\r\n                                  </div>\r\n                                )}\r\n                            </div>\r\n                          )}\r\n                        </TabPane>\r\n                      );\r\n                    })}\r\n                  </Tabs>\r\n                )) || (\r\n                    <div>\r\n                      <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n                      <table\r\n                        className=\"table table-bordered\"\r\n                        style={{ marginTop: \"1%\" }}\r\n                      >\r\n                        <thead>\r\n                          <tr>\r\n                            {this.polygon_fields_headers.map(\r\n                              (field_header, k) => {\r\n                                return <th>{field_header}</th>;\r\n                              }\r\n                            )}\r\n                            <th> خيارات</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {this.state.polygons.map((e, i) => {\r\n                            return (\r\n                              <tr key={i}>\r\n                                {this.polygon_fields.map((field, k) => {\r\n                                  return (\r\n                                    <td key={k}>\r\n                                      <div>\r\n                                        {field.editable ? (\r\n                                          !this.state[\r\n                                            field.name + \"_isEdit_\" + i\r\n                                          ] ? (\r\n                                            <span>\r\n                                              <span>\r\n                                                {localizeNumber(\r\n                                                  e.attributes[field.name] || \"\"\r\n                                                )}\r\n                                              </span>\r\n                                              {this.showEditBtn(\r\n                                                field.name,\r\n                                                e.attributes[field.name]\r\n                                              ) && (\r\n                                                  <span>\r\n                                                    <button\r\n                                                      className=\"btn\"\r\n                                                      style={{\r\n                                                        marginRight: e.attributes[\r\n                                                          field.name\r\n                                                        ]\r\n                                                          ? \"20px\"\r\n                                                          : \"0px\",\r\n                                                      }}\r\n                                                      onClick={this.enableEdit.bind(\r\n                                                        this,\r\n                                                        field.name,\r\n                                                        i\r\n                                                      )}\r\n                                                    >\r\n                                                      <i className=\"fas fa-edit\"></i>\r\n                                                    </button>\r\n                                                  </span>\r\n                                                )}\r\n                                            </span>\r\n                                          ) : (\r\n                                            <span\r\n                                              style={{\r\n                                                display: \"grid\",\r\n                                                gridTemplateColumns: \"1fr auto\",\r\n                                              }}\r\n                                            >\r\n                                              {field.type != \"select\" && (\r\n                                                <input\r\n                                                  key={i}\r\n                                                  className=\"form-control\"\r\n                                                  type={field.type}\r\n                                                  step=\"any\"\r\n                                                  value={e.attributes[field.name]}\r\n                                                  onChange={(event) => {\r\n                                                    this.myChangeHandler(\r\n                                                      field.name,\r\n                                                      i,\r\n                                                      e,\r\n                                                      undefined,\r\n                                                      event\r\n                                                    );\r\n                                                  }}\r\n                                                />\r\n                                              )}\r\n                                              {field.type == \"select\" && (\r\n                                                <Select\r\n                                                  value={e.attributes[field.name]}\r\n                                                  onChange={this.selectOnchange.bind(\r\n                                                    this,\r\n                                                    field.name,\r\n                                                    i,\r\n                                                    e\r\n                                                  )}\r\n                                                  placeholder=\"نوع التقسيم\"\r\n                                                  optionFilterProp=\"children\"\r\n                                                  filterOption={(input, option) =>\r\n                                                    convertToEnglish(\r\n                                                      option.props.children\r\n                                                    )\r\n                                                      ?.toLowerCase()\r\n                                                      ?.indexOf(\r\n                                                        input.toLowerCase()\r\n                                                      ) >= 0\r\n                                                  }\r\n                                                >\r\n                                                  {field?.options?.map((e, i) => (\r\n                                                    <Option\r\n                                                      key={i}\r\n                                                      value={e.name}\r\n                                                    >\r\n                                                      {convertToArabic(e.name)}\r\n                                                    </Option>\r\n                                                  ))}\r\n                                                </Select>\r\n                                              )}\r\n                                              <button\r\n                                                className=\"btn\"\r\n                                                style={{ marginRight: \"20px\" }}\r\n                                                onClick={this.saveEdit.bind(\r\n                                                  this,\r\n                                                  e.attributes.PARCEL_SPATIAL_ID,\r\n                                                  field.name,\r\n                                                  i\r\n                                                )}\r\n                                              >\r\n                                                <i className=\"fa fa-floppy-o\"></i>\r\n                                              </button>\r\n                                            </span>\r\n                                          )\r\n                                        ) : (\r\n                                          <span>\r\n                                            <span>\r\n                                              {localizeNumber(\r\n                                                e.attributes[field.name] || \"\"\r\n                                              )}\r\n                                            </span>\r\n                                          </span>\r\n                                        )}\r\n                                      </div>\r\n                                    </td>\r\n                                  );\r\n                                })}\r\n\r\n                                <td>\r\n                                  <button\r\n                                    className=\"btn follow\"\r\n                                    style={{ margin: \"0px 5px\" }}\r\n                                    onClick={() => {\r\n                                      this.openPopup(this, e);\r\n                                    }}\r\n                                  >\r\n                                    حدود و أبعاد الأرض\r\n                                  </button>\r\n\r\n                                  <button\r\n                                    className=\"btn btn-danger\"\r\n                                    onClick={this.remove.bind(this, e)}\r\n                                  >\r\n                                    حذف\r\n                                  </button>\r\n                                </td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  ))}\r\n\r\n              {(isKrokyUpdateContract || isPlan || isPropetryCheck) &&\r\n                this.state.polygons &&\r\n                this.state.polygons.length > 0 &&\r\n                this.state.polygons[0].area != -1 && (\r\n                  <div style={{ gridColumn: \"1/3\" }}>\r\n                    <div>\r\n                      {survayParcelCutter?.length > 0 && (\r\n                        <div style={{ marginTop: \"20px\" }}>\r\n                          <h1 className=\"titleSelectedParcel\">الشطفات</h1>\r\n\r\n                          <table\r\n                            className=\"table table-bordered\"\r\n                            style={{ marginTop: \"1%\" }}\r\n                          >\r\n                            <thead>\r\n                              <tr>\r\n                                {this.parcel_fields_headers.map(\r\n                                  (field_header, k) => {\r\n                                    return <th>{field_header}</th>;\r\n                                  }\r\n                                )}\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {survayParcelCutter?.map((e, i) => {\r\n                                return (\r\n                                  <tr key={i}>\r\n                                    {this.parcel_fields.map((field, k) => {\r\n                                      return (\r\n                                        <td key={k}>\r\n                                          <div>\r\n                                            {field.editable ? (\r\n                                              !this.state[\r\n                                                field.name + \"_isEdit_\" + i\r\n                                              ] ? (\r\n                                                <span>\r\n                                                  <span>\r\n                                                    {e[field.name] || \"\"}\r\n                                                  </span>\r\n                                                  {this.showEditBtn(\r\n                                                    field.name,\r\n                                                    e[field.name]\r\n                                                  ) && (\r\n                                                      <span>\r\n                                                        {!this.props.isDisabled && <button\r\n                                                          className=\"btn\"\r\n                                                          style={{\r\n                                                            marginRight: e[\r\n                                                              field.name\r\n                                                            ]\r\n                                                              ? \"20px\"\r\n                                                              : \"0px\",\r\n                                                          }}\r\n                                                          onClick={(event) => {\r\n                                                            this.enableEdit(\r\n                                                              field.name,\r\n                                                              i\r\n                                                            );\r\n                                                          }}\r\n                                                        >\r\n                                                          <i className=\"fas fa-edit\"></i>\r\n                                                        </button>}\r\n                                                      </span>\r\n                                                    )}\r\n                                                </span>\r\n                                              ) : (\r\n                                                <span\r\n                                                  style={{\r\n                                                    display: \"grid\",\r\n                                                    gridTemplateColumns:\r\n                                                      \"1fr auto\",\r\n                                                  }}\r\n                                                >\r\n                                                  <input\r\n                                                    key={i}\r\n                                                    className=\"form-control\"\r\n                                                    type=\"number\"\r\n                                                    step=\"any\"\r\n                                                    name={`${field.name + i}`}\r\n                                                    value={e[field.name]}\r\n                                                    onChange={(event) => {\r\n                                                      this.myChangeHandler(\r\n                                                        field.name,\r\n                                                        i,\r\n                                                        e,\r\n                                                        undefined,\r\n                                                        event\r\n                                                      );\r\n                                                    }}\r\n                                                  />\r\n                                                  <button\r\n                                                    className=\"btn\"\r\n                                                    style={{\r\n                                                      marginRight: \"20px\",\r\n                                                    }}\r\n                                                    onClick={(event) => {\r\n                                                      this.saveEdit(\r\n                                                        0,\r\n                                                        field.name,\r\n                                                        i\r\n                                                      );\r\n                                                    }}\r\n                                                  >\r\n                                                    <i className=\"fa fa-floppy-o\"></i>\r\n                                                  </button>\r\n                                                </span>\r\n                                              )\r\n                                            ) : (\r\n                                              <span>\r\n                                                <span>\r\n                                                  {e[field.name] || \"\"}\r\n                                                </span>\r\n                                              </span>\r\n                                            )}\r\n                                          </div>\r\n                                        </td>\r\n                                      );\r\n                                    })}\r\n                                  </tr>\r\n                                );\r\n                              })}\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    {(isKrokyUpdateContract || isPlan || isPropetryCheck) &&\r\n                      this.state.polygons &&\r\n                      this.state.polygons.length > 0 &&\r\n                      this.state.polygons[0].area != -1 && (\r\n                        <div style={{\r\n                          pointerEvents: this.props.isDisabled\r\n                            ? \"none\"\r\n                            : \"auto\",\r\n                        }}>\r\n                          <div>\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              style={{\r\n                                width: \"20px\",\r\n                                height: \"20px\",\r\n                                margin: \"3px\",\r\n                              }}\r\n                              checked={this.state[\"have_electric_room\"]}\r\n                              onChange={(evt) => {\r\n                                this.state[`electric_room_area`] = \"\";\r\n                                this.onElectricInputChange(\r\n                                  `have_electric_room`,\r\n                                  evt\r\n                                );\r\n                              }}\r\n                            />\r\n                            تشمل غرفة الكهرباء\r\n                          </div>\r\n                          {this.state[\"have_electric_room\"] && (\r\n                            <div>\r\n                              <input\r\n                                className=\"form-control\"\r\n                                type=\"number\"\r\n                                step=\"any\"\r\n                                name=\"electric_room_area\"\r\n                                value={this.state[\"electric_room_area\"]}\r\n                                placeholder=\"مساحة غرفة الكهرباء\"\r\n                                onChange={this.onElectricInputChange.bind(\r\n                                  this,\r\n                                  \"electric_room_area\"\r\n                                )}\r\n                              />\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                  </div>\r\n                )}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation(\"cadData\")(cadDataComponent));\r\n","import React, { Component } from 'react'\r\nimport {get} from 'lodash';\r\nimport * as dataTypes from './typeofData'\r\nimport {translate} from 'react-i18next'\r\nimport { mapStateToProps, mapDispatchToProps } from \"./mapping\"\r\nimport { connect } from \"react-redux\";\r\nclass labelComponent extends Component {\r\n\r\n  componentDidMount() {\r\n      const {init_data} = this.props;\r\n      \r\n      if(init_data)\r\n      {\r\n        init_data(this.props);\r\n      }\r\n  }\r\n\r\n  render() {\r\n      const { className, input: {value}, type, data={} , t} = this.props;\r\n      \r\n      let initialVal = get(data, value, value);\r\n      const Val = get(dataTypes, type, () => <label>{initialVal}</label>)\r\n\r\n      return (\r\n      <Val  {...{ className }}  data={value} t={t}/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation('labels')(labelComponent));\r\n","import { get } from 'lodash';\r\nimport {formValueSelector} from 'redux-form'\r\nexport const mapStateToProps = ({ wizard: {mainObject}, selectors = {}, mainApp, mapViewer, ...state }, { moduleName, path, value_key, ...props }) => {\r\n    return ({\r\n        mainObject: {...mainObject},\r\n    })\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n    return {\r\n        getValues(name='stepForm'){return formValueSelector('name')},        \r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport  class boolean extends Component {\r\n\r\n  render() {\r\n    const {data,t} = this.props\r\n    \r\n    return (\r\n      <div>\r\n        {data ? t('Yes') : t('No')}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport moment from 'moment';\r\n\r\nexport  class date extends Component {\r\n  render() {\r\n    const {data}=this.props\r\n    return (\r\n      <div>\r\n        {moment(data)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export * from './object';\r\nexport * from './string';\r\nexport * from './date';\r\nexport * from './number';\r\nexport * from './list';\r\nexport * from './boolean';\r\n","import React, { Component } from 'react'\r\n\r\nexport class number extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.data && (+this.props.data).toFixed(2)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {get, isEmpty} from 'lodash'\r\nimport {fileUploader} from 'app/helpers/fieldValues'\r\n\r\nexport class object extends Component {\r\n\r\n\r\n\r\n  render() {\r\n    const {data,t}=this.props\r\n    let files = data && data.length ? data.filter(singleData => get(singleData, 'uid', null) ? singleData : null) : null\r\n    \r\n    return (\r\n      <div>\r\n        {\r\n          !isEmpty(files) ? \r\n          <div>\r\n            {fileUploader(data)}\r\n          </div>\r\n          :\r\n          <div style={{display:'flex'}}>\r\n            {data.map((val, index) => <div style={{padding:'5px'}} key={index}>{index == 0 ? ` ${t(val)} ` : ` - ${t(val)} ` }</div>)}\r\n          </div> \r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {date as Date} from './date';\r\n\r\n export class string extends Component {\r\n  render() {\r\n     const {data,t} = this.props\r\n     const datetime= /\\d{4,4}-\\d{2,2}-\\d{2,2}/;\r\n\r\n     let item = datetime.test(data) ? <Date data={data}/> : data\r\n\r\n      return (\r\n        <div>\r\n          {item}\r\n        </div>\r\n      )\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AAKA;AACA;AACA;AACA;AAsCA;AACA;AAEA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAehBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAWA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAGA;AAGA;AAGA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAQA;AACA;AAGA;AACA;AACA;AAQA;AACA;AAGA;AACA;AAEA;AAQA;AACA;AAGA;AACA;AAEA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAgmBA;AAIA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAKA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAIA;AAKA;AAIA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAaA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AAAA;AACA;AAMA;AAEA;AACA;AACA;AAGA;AAGA;AAEA;AAEA;AAMA;AAEA;AAaA;AACA;AAOA;AAEA;AACA;AAEA;AAYA;AAGA;AAEA;AAOA;AACA;AAGA;AAIA;AAIA;AACA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAYA;AAIA;AAaA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAaiMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAGA;AAGA;AAGA;AAGA;AAGA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAIA;AACA;AAGA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAIA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AAUA;AACA;AACA;AAUA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AApyszyEA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAKA;AAIA;AAKA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA2gBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AAMA;AACA;AAKA;AAAA;AAOA;AACA;AAKA;AAAA;AAOA;AACA;AAKA;AAAA;AAOA;AACA;AAKA;AAAA;AAKA;AAMA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAKA;AAAA;AAuDA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAGA;AAAA;AAGA;AACA;AAEA;AAOA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAKA;AAIA;AAEA;AAQA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAmBA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAGA;AAAA;AAGA;AACA;AAEA;AASA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAKA;AAIA;AAEA;AAQA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAkBA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAGA;AAAA;AAGA;AACA;AAEA;AASA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAKA;AAIA;AAEA;AAQA;AAWA;AACA;AACA;AACA;AACA;AAAA;AAmBA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAGA;AAAA;AAGA;AACA;AAEA;AAOA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAKA;AAIA;AAEA;AAQA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAuEA;AAAA;AAuBA;AACA;AAKA;AAAA;AAGA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAOA;AAQA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAqCA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AAOA;AACA;AAAA;AAGA;AACA;AAAA;AAuBA;AACA;AACA;AAOA;AACA;AAGA;AAKA;AAAA;AAEA;AAAA;AAOA;AACA;AAEA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAIA;AAMA;AAGA;AAOA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAMA;AAAA;AAEA;AAAA;AAgBA;AAIA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAGA;AAIA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AAAA;AASA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AAAA;AAUA;AAIA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAkBA;AACA;AACA;AAKA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAKA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAOA;AACA;AAIA;AACA;AAAA;AAQA;AACA;AAAA;AAAA;AACA;AAKA;AAEA;AAAA;AAgBA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAMA;AACA;AAAA;AAOA;AAUA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AAMA;AACA;AAAA;AAEA;AACA;AAAA;AAgBA;AACA;AACA;AAKA;AACA;AACA;AAIA;AAAA;AAEA;AAAA;AAOA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAEA;AAAA;AAcA;AAGA;AAUA;AACA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAaA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACr5JA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AAKA;AACA;;;;A","sourceRoot":""}
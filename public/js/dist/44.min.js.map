{"version":3,"file":"44.min.js","sources":["webpack:///./node_modules/lodash/compact.js","webpack:///./src/app/components/inputs/fields/equation/data.js","webpack:///./src/app/components/inputs/fields/equation/index.js","webpack:///./src/app/components/inputs/fields/equation/mapping.js"],"sourcesContent":["/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = compact;\n","export const mentionOptions = [\r\n    {\r\n        label: \"or\",\r\n        value: \"||\"\r\n    },\r\n    {\r\n        label: \"min\",\r\n        value: \"Min\"\r\n    },\r\n    {\r\n        label: \"max\",\r\n        value: \"Max\"\r\n    }\r\n]\r\n\r\n\r\nexport const operationArray = [{\r\n    label: 'equal',\r\n    value: '=='\r\n},\r\n{\r\n    label: 'Not equal',\r\n    value: '!='\r\n},\r\n{\r\n    label: 'In between',\r\n    value: '<>'\r\n},\r\n{\r\n    label: 'No condition',\r\n    value: 1\r\n},\r\n{\r\n    label: 'greater than or equal',\r\n    value: '>='\r\n},\r\n{\r\n    label: 'less than or equal',\r\n    value: '<='\r\n},\r\n{\r\n    label: 'greater than',\r\n    value: '>'\r\n},\r\n{\r\n    label: 'less than',\r\n    value: '<'\r\n}]\r\n","import React from 'react'\r\nimport { Row, Col } from 'antd';\r\nimport { Button } from \"antd\";\r\nimport { compact } from 'lodash';\r\nimport { mentionOptions, operationArray } from \"./data\";\r\nimport { Field } from 'redux-form';\r\nimport renderField from 'app/components/inputs';\r\nimport { get, split, includes, isEqual, first, last } from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport { mapStateToProps } from './mapping';\r\nimport {withTranslation} from 'react-i18next';\r\nimport mainInput from 'app/helpers/main/input';\r\nimport { required } from 'app/helpers/validations'\r\nconst req = required(true)\r\nclass equationComponent extends mainInput {\r\n    constructor(props) {\r\n        super(props);\r\n        const { input: { onChange } } = props;\r\n        onChange({ eq: [''], final_eq: \"\", isSpecial: false })\r\n        this.state = {\r\n            numberOfMention: 1\r\n        }\r\n        this.blurFlag = false;\r\n        this.operationsValues = operationArray.map(d => d.value).filter(d => d != 1)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { input: { value, onChange } } = this.props;\r\n        onChange(this.toEquationObject(value))\r\n    }\r\n\r\n    toEquationObject(stringEquation = '') {\r\n        if (first(stringEquation) == '(' && last(stringEquation) == ')') {\r\n            return {\r\n                final_eq: stringEquation,\r\n                isSpecial: true,\r\n                queryBuilder: stringEquation.replace('(', '').replace(/.$/, ''),\r\n                eq:['']\r\n            }\r\n        }\r\n        stringEquation = (stringEquation||'').replace('(', '')\r\n        stringEquation = (stringEquation||'').replace(/^\\(|\\)$/, '')\r\n        if (/^(?=.*>)(?=.*&&)(?=.*<).*$/.test(stringEquation)) {\r\n            const [left, , greaterThan, , , , lessThan] = split(stringEquation, /(\\)&&\\(|<|>)/).map(d => ((d || '').replace(/\\(|\\)/g, '')))\r\n            return {\r\n                eq: [''],\r\n                final_eq: stringEquation,\r\n                leftParam: left,\r\n                operation: '<>',\r\n                greaterThan,\r\n                lessThan\r\n            }\r\n        }\r\n        let [leftParam, operation = 1, rightParam] = split(stringEquation, /(!=|==|<>|>=|<=|<|>)/);\r\n        let rightOperation = \"\";\r\n        let eq = [''];\r\n        if (includes(rightParam, \"||\")) {\r\n            rightOperation = \"||\";\r\n            eq = split(rightParam, '||')\r\n        } else if (/(Max|Min)/.test(rightParam)) {\r\n            const [, rightOp, equation] = split(rightParam, /(Max|Min)/)\r\n            rightOperation = rightOp\r\n            eq = compact(split(equation, /[,()]/));\r\n        } else {\r\n            eq = [rightParam];\r\n        }\r\n        eq = eq.map(d => ((d || '').replace(/\\(|\\)/g, '')))\r\n        return {\r\n            final_eq: stringEquation,\r\n            leftParam,\r\n            operation,\r\n            rightOperation,\r\n            eq\r\n        }\r\n    }\r\n    build_eq() {\r\n        const { input: { value, onChange } } = this.props;\r\n        let final_eq = \"\";\r\n        if (value.isSpecial) {\r\n            final_eq = `(${(value.queryBuilder || '').replace(/@|#/g, '')})`\r\n        } else {\r\n            if (value.leftParam) {\r\n                final_eq += value.leftParam;\r\n            }\r\n            if (value.operation && value.operation !== 1) {\r\n                final_eq += value.operation\r\n            }\r\n            const eqs = value.eq && [...value.eq.slice()].map((d = \"\") => (d.replace(/@|#/g, '')));\r\n            if (eqs.length > 1) {\r\n                if (value.rightOperation) {\r\n                    if (value.rightOperation == \"||\") {\r\n                        final_eq += `(${eqs.map(d => `(${d})`).join(\"||\")})`\r\n                    }\r\n                    else {\r\n                        final_eq += `(${value.rightOperation}((${eqs[0]}),(${eqs[1]})))`\r\n                    }\r\n                }\r\n            }\r\n            else if (value.operation !== '<>') {\r\n                final_eq += `(${get(eqs, '[0]')})`\r\n            }\r\n            if (value.operation === '<>') {\r\n                final_eq = `((${value.leftParam}>${value.greaterThan})&&(${value.leftParam}<${value.lessThan}))`\r\n            }\r\n        }\r\n        if (value.final_eq != final_eq) {\r\n            onChange({ ...value, final_eq })\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { input: { value: newVal, name }, meta: { touched: newTouch }, touch, untouch } = this.props;\r\n        const { input: { value: oldVal }, meta: { touched: oldTouch } } = prevProps;\r\n        if (this.blurFlag && newVal.final_eq == oldVal.final_eq && oldVal.final_eq != undefined && isEqual(newVal, oldVal)) {\r\n            this.build_eq();\r\n            this.blurFlag = false;\r\n        }\r\n        if (!isEqual(newTouch, oldTouch)) {\r\n            if (newTouch) {\r\n                untouch(`${name}.leftParam`)\r\n            } else {\r\n                touch(`${name}.leftParam`)\r\n            }\r\n        }\r\n    }\r\n\r\n    addField() {\r\n        const { input: { value, onChange } } = this.props;\r\n        onChange({ ...value, eq: [...value.eq, ''] })\r\n    }\r\n\r\n    checkMention() {\r\n        const { input: { value } } = this.props;\r\n        return get(value, 'eq.length', 0) > 1\r\n    }\r\n\r\n    setBlurred() {\r\n        this.blurFlag = true;\r\n    }\r\n    render() {\r\n        const { input: { name, value }, t, mentions } = this.props;\r\n        const suggestions = { '@': mentions, '#': this.operationsValues }\r\n        return <div>\r\n            <Row style={{ display: 'grid', gridTemplateColumns: '0 1fr 1fr 1fr 1fr', gridGap: '10px' }}>\r\n                <Col>\r\n                    <Field component={renderField} field=\"select\" moduleName=\"variable\" valueKey='name' name={`${name}.leftParam`} placeholder={t(\"Left equation\")} onBlur={this.setBlurred.bind(this)} validate={[req]} />\r\n                </Col>\r\n                <Col>\r\n                    <Field component={renderField} field=\"boolean\" name={`${name}.isSpecial`} hideLabel={true} label={t('Special equation')} />\r\n                </Col>\r\n                {value.isSpecial || value.rightOperation === 'Min' || value.rightOperation === 'Max' ?\r\n                    (value.isSpecial) ?\r\n                        <Col>\r\n                            <Field component={renderField} field={\"mentions\"}  {...{ suggestions }} placeholder={t(\"Query Builder\")} name={`${name}.queryBuilder`} onBlur={this.setBlurred.bind(this)} />\r\n                        </Col>\r\n                        :\r\n                        <Col>\r\n                            <Field component={renderField} field=\"select\" data={operationArray.map(d => ({ ...d, label: t(d.label) }))} name={`${name}.operation`} placeholder={t(\"Operation\")} onChange={this.setBlurred.bind(this)} />\r\n                            <Field component={renderField} field={\"mentions\"} {...{ suggestions }} placeholder={t(\"Equation\")} name={`${name}.eq[0]`} onBlur={this.setBlurred.bind(this)} />\r\n                            <Field component={renderField} field={\"mentions\"} {...{ suggestions }} placeholder={t(\"Equation\")} name={`${name}.eq[1]`} onBlur={this.setBlurred.bind(this)} />\r\n                            <Field component={renderField} field=\"select\" data={mentionOptions} name={`${name}.rightOperation`} placeholder={t(\"Right operation\")} onChange={this.setBlurred.bind(this)} />\r\n                        </Col>\r\n                    : <div>\r\n                        <Col>\r\n                            <Field component={renderField} field=\"select\" data={operationArray.map(d => ({ ...d, label: t(d.label) }))} name={`${name}.operation`} placeholder={t(\"Operation\")} onChange={this.setBlurred.bind(this)} />\r\n                        </Col>\r\n                        {(value.operation !== 1) && (value.operation != '<>') &&\r\n                            <div>\r\n                                <Col>\r\n                                    <div>\r\n                                        {(value.eq || []).map((d, k) => (\r\n                                            <div key={k} style={{ gridColumn: '1/5' }}>\r\n                                                <Field  component={renderField} field={\"mentions\"} {...{ suggestions }} placeholder={t(\"Equation\")} name={`${name}.eq[${k}]`} onBlur={this.setBlurred.bind(this)} />\r\n                                            </div>\r\n                                        ))}\r\n\r\n                                    </div>\r\n                                    {this.checkMention() && <div>\r\n                                        <Field component={renderField} field=\"select\" data={mentionOptions} name={`${name}.rightOperation`} placeholder={t(\"Right operation\")} onChange={this.setBlurred.bind(this)} />\r\n                                    </div>}\r\n                                </Col>\r\n                                <Col>\r\n                                    <div>\r\n                                        <Button icon=\"plus-circle\" shape=\"circle\" onClick={this.addField.bind(this)} />\r\n                                        {/* <Button icon=\"minus-circle\" shape=\"circle\" onClick={this.removeField.bind(this)} /> */}\r\n                                    </div>\r\n                                </Col>\r\n                            </div>\r\n                        }\r\n                        {(value.operation == '<>') &&\r\n                            <Col>\r\n                                <Field component={renderField} field={\"mentions\"} {...{ suggestions }} placeholder={t(\"Greater than\")} name={`${name}.greaterThan`} onBlur={this.setBlurred.bind(this)} />\r\n                                <Field component={renderField} field={\"mentions\"} {...{ suggestions }} placeholder={t(\"Less than\")} name={`${name}.lessThan`} onBlur={this.setBlurred.bind(this)} />\r\n                            </Col>}\r\n                    </div>}\r\n            </Row>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(withTranslation('labels')(equationComponent))\r\n","import {get} from 'lodash';\r\nexport const mapStateToProps = ({selectors}, ownProps) => ({\r\n    mentions: get(selectors, 'variable.data', []).map(d=>d.name)\r\n})\r\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAEA;;;;;;;;;;;;;;;;;ACtMA;AAAA;AAAA;AACA;AACA;;;;A","sourceRoot":""}
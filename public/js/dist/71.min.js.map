{"version":3,"file":"71.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/addedParcelsIdentifyComponnent/Helpers.js","webpack:///./src/app/components/inputs/fields/identify/Component/addedParcelsIdentifyComponnent/index.js"],"sourcesContent":["\r\nimport { loadModules } from 'esri-loader';\r\nimport{mapUrl}from\"../mapviewer/config/map\"\r\n\r\nconst options = {\r\n    url: 'https://js.arcgis.com/3.13'\r\n};\r\n\r\nexport const selectDis=(e)=>{\r\nvar a=[];\r\n\r\ne.forEach(el => {\r\n    el.features.forEach(element=>{\r\n        if(!a.find((t=>t.attributes.PARCEL_SPATIAL_ID==element.attributes.PARCEL_SPATIAL_ID))){\r\n            a.push(element)\r\n        }\r\n    })\r\n});\r\nreturn a;\r\n}\r\n\r\nexport const DataQuery=(layerNum,QueryOptions,CallBack)=>{\r\n    loadModules([\"esri/symbols/SimpleLineSymbol\",\"esri/Color\",\"esri/layers/FeatureLayer\",\"esri/tasks/RelationshipQuery\",\"esri/tasks/QueryTask\",\"esri/tasks/query\",\"esri/request\",\"esri/geometry/Polygon\",\"esri/symbols/SimpleFillSymbol\",\"esri/graphic\"], options)\r\n    .then(([SimpleLineSymbol,Color,FeatureLayer,RQuery,QueryTask,Query,request,Polygon,SimpleFillSymbol,Graphic]) => {\r\n\r\n     var query = new Query()\r\n     var qt = new QueryTask(mapUrl+`/${layerNum}`)\r\n    QueryOptions.forEach(e=>{\r\n        query[e.name]=e.value\r\n    })\r\n     qt.execute(query,CallBack,(res)=>{console.log(res)})\r\n    })\r\n}\r\nexport const queryOption=(where,geo,outfields)=>{\r\n       return [{name:\"where\",value:where},\r\n       {name:\"returnGeometry\",value:geo},\r\n       {name:\"outFields\",value:outfields}\r\n      ]\r\n}\r\nexport const querySetting=(num,where,geo,outfields, url)=>{\r\n    \r\n    \r\n    return {\r\n        url:(url || mapUrl)+\"/\"+num,\r\n        where,\r\n        returnGeometry:geo,\r\n        outFields:outfields\r\n}\r\n\r\n}\r\nexport const DataReqest=(url,callBack)=>{\r\n    loadModules([\"esri/request\"], options)\r\n    .then(([request]) => {\r\n        request({\r\n            url: url,\r\n            content: {f:\"json\"},\r\n            handleAs: \"json\",\r\n            callbackParamName:\"callback\"\r\n        }).then(callBack);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport { esriRequest } from \"../common/esri_request\";\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  addParcelNo,\r\n  convertToEnglish,\r\n  localizeNumber,\r\n  convertToArabic,\r\n} from \"../common/common_func\";\r\nimport {\r\n  onBlockChange,\r\n  onLandParcelChange,\r\n  onMunChange,\r\n  onPlaneChange,\r\n  onSubNameChange,\r\n  onSubTypeChange,\r\n  getParcels,\r\n  onSearch,\r\n} from \"../common\";\r\nimport applyFilters from \"main_helpers/functions/filters\";\r\nimport { geometryServiceUrl, mapUrl } from \"../mapviewer/config/map\";\r\nimport { Select, Button, Form, message } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport { connect } from \"react-redux\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nvar uniqid = require(\"uniqid\");\r\nimport { StickyContainer, Sticky } from \"react-sticky\";\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n} from \"lodash\";\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport axios from \"axios\";\r\nconst { Option } = Select;\r\n\r\nclass addedParcelsIdentifyComponnent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.PlanNum = [];\r\n    this.planId = null;\r\n    this.parcelTs = [];\r\n    this.selectedLandsT =\r\n      (props?.input?.value?.temp?.parcelDis && [\r\n        { features: props?.input?.value?.temp?.parcelDis },\r\n      ]) ||\r\n      [];\r\n    this.selectedLands = [];\r\n    this.selectionMode = false;\r\n    this.parcel_fields = [\r\n      \"PARCEL_PLAN_NO\",\r\n      \"PARCEL_AREA\",\r\n      \"PARCEL_BLOCK_NO\",\r\n      \"DISTRICT_NAME\",\r\n      \"SUBDIVISION_TYPE\",\r\n      \"SUBDIVISION_DESCRIPTION\",\r\n      \"USING_SYMBOL\",\r\n      \"Natural_Area\",\r\n    ];\r\n\r\n    this.state = {\r\n      mapLoaded: false,\r\n      munval:\r\n        (props.input && props.input.value.temp && props.input.value.temp.mun) ||\r\n        undefined,\r\n      planeval:\r\n        this.props.mainObject?.landData?.landData?.PLAN_NO ||\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.plan) ||\r\n        undefined,\r\n      subTypeval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.subTypeval) ||\r\n        undefined,\r\n      subNameval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.subNameval) ||\r\n        undefined,\r\n      blockval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.blockval) ||\r\n        undefined,\r\n      selectedLands: (props.input && props.input.value.parcels) || [],\r\n      parcelval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.parcelval) ||\r\n        undefined,\r\n      conditions: (props.input && props.input.value.conditions) || undefined,\r\n      blockNum: [],\r\n      planSersh: null,\r\n      subDivNames: [],\r\n      subDivType: [],\r\n      parcelNum: this.props?.input?.value?.temp?.parcelDis || [],\r\n      parcelNumS: [],\r\n      MunicipalityNames: [],\r\n      PlanNum: [],\r\n      parcelId: null,\r\n      mapExtend: null,\r\n      parcelSearch: null,\r\n      poly: null,\r\n      landsData: {},\r\n      submission_data: props?.values?.submission_data || {\r\n        north_length: \"0\",\r\n        north_desc: \"\",\r\n        south_length: \"0\",\r\n        south_desc: \"\",\r\n        east_length: \"0\",\r\n        east_desc: \"\",\r\n        west_length: \"0\",\r\n        west_desc: \"\",\r\n      },\r\n    };\r\n  }\r\n  LayerID = [];\r\n\r\n  convertToArabic(num) {\r\n    if (num) {\r\n      var id = [\"۰\", \"۱\", \"۲\", \"۳\", \"٤\", \"٥\", \"٦\", \"۷\", \"۸\", \"۹\"];\r\n      return num.replace(/[0-9]/g, function (w) {\r\n        return id[+w];\r\n      });\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  replaceAll(str, find, replace) {\r\n    return str.replace(new RegExp(find, \"g\"), replace);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (window.isAkarApp) {\r\n      console.log(\"window\", window);\r\n      this.parcel_fields = [\r\n        \"PARCEL_PLAN_NO\",\r\n        \"PARCEL_AREA\",\r\n        \"PARCEL_BLOCK_NO\",\r\n        \"DISTRICT_NAME\",\r\n        \"SUBDIVISION_TYPE\",\r\n        \"SUBDIVISION_DESCRIPTION\",\r\n        \"USING_SYMBOL\",\r\n      ];\r\n    }\r\n    getInfo().then((res) => {\r\n      this.LayerID = res;\r\n      getParcels(this, null, \"\", {returnDistinctValues: true}, [\"MUNICIPALITY_NAME\"]).then((features) => {\r\n        \r\n        getFeatureDomainName(features, this.LayerID.Landbase_Parcel).then(\r\n          (features) => {\r\n            \r\n            this.setState(\r\n              {\r\n                MunicipalityNames: features.filter(r => r.attributes.MUNICIPALITY_NAME).map((r) => {\r\n                    \r\n                    return {\r\n                      code: r.attributes.MUNICIPALITY_NAME_Code,\r\n                      name: r.attributes.MUNICIPALITY_NAME,\r\n                    };\r\n                  }),\r\n                allParcels: features,\r\n              },\r\n              () => {\r\n                this.loadLists = true;\r\n                if (this.state.munval) {\r\n                  onMunChange(this, this.state.munval, () => {\r\n                    onPlaneChange(this, this.state.planeval, () => {\r\n                      onSubTypeChange(this, this.state.subTypeval, () => {\r\n                        onSubNameChange(this, this.state.subNameval, () => {\r\n                          onBlockChange(this, this.state.blockval, () => {\r\n                            onLandParcelChange(\r\n                              this,\r\n                              this.state.parcelval,\r\n                              () => {}\r\n                            );\r\n                          });\r\n                        });\r\n                      });\r\n                    });\r\n                  });\r\n                }\r\n                this.loadLists = false;\r\n              }\r\n            );\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  resetFields = () => {\r\n    this.props.onChange([]);\r\n    this.setState({ selectedLands: [], selectedLandsT: [] });\r\n  };\r\n\r\n  addParcelToSelect = (feature) => {\r\n    return new Promise((resolve, reject) => {\r\n      intersectQueryTask({\r\n        outFields: [\r\n          // \"MUNICIPALITY_NAME\",\r\n          // \"PARCEL_AREA\",\r\n          // \"PARCEL_LAT_COORD\",\r\n          // \"PARCEL_LONG_COORD\",\r\n          // \"PARCEL_MAIN_LUSE\",\r\n          // \"PLAN_NO\",\r\n          // \"PARCEL_PLAN_NO\",\r\n          // \"USING_SYMBOL\",\r\n          // \"PARCEL_SPATIAL_ID\",\r\n          \"*\"\r\n        ],\r\n        geometry: feature.geometry,\r\n        url: mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n        where: \"PARCEL_PLAN_NO is not null\",\r\n        callbackResult: (res) => {\r\n          getFeatureDomainName(res.features, this.LayerID.Landbase_Parcel).then(\r\n            (r) => {\r\n              res.features = res.features.map((e, i) => {\r\n                return {\r\n                  ...e,\r\n                  i: uniqid(),\r\n                };\r\n              });\r\n\r\n              return resolve(res);\r\n            }\r\n          );\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  DrawGraph = () => {\r\n    if (!this.state.selectedLands.length) {\r\n      this.map.graphics.clear();\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n\r\n      highlightFeature(this.RolBackPol, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        isZoom: true,\r\n        isHiglightSymbol: true,\r\n        highlighColor: [255, 0, 0, 0.25],\r\n      });\r\n\r\n      this.setState({\r\n        parcelSearch: null,\r\n        parcelNum: this.RolBackParcelNum,\r\n        parcelval: undefined,\r\n      });\r\n    } else {\r\n      this.parcelDis = selectDis(this.selectedLandsT);\r\n      console.log(this.parcelDis);\r\n      this.setAdjacentToStore(this.parcelDis);\r\n      this.setState({ parcelSearch: null, parcelNum: this.parcelDis });\r\n\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n      highlightFeature(\r\n        this.parcelDis.filter(\r\n          (element) =>\r\n            !this.state.selectedLands.find(\r\n              (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n            )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectLandsGraphicLayer\",\r\n          noclear: false,\r\n          isZoom: false,\r\n          isHiglightSymbol: true,\r\n          highlighColor: [0, 255, 0, 0.5],\r\n          zoomFactor: 50,\r\n        }\r\n      );\r\n\r\n      this.parcelDis\r\n        .filter(\r\n          (element) =>\r\n            !this.state.selectedLands.find(\r\n              (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n            )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"ParcelPlanNoGraphicLayer\",\r\n            14,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n\r\n      highlightFeature(\r\n        this.parcelDis.filter((element) =>\r\n          this.state.selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectLandsGraphicLayer\",\r\n          noclear: true,\r\n          attr: { isParcel: true },\r\n          isZoom: true,\r\n          isHighlighPolygonBorder: true,\r\n          zoomFactor: 50,\r\n        }\r\n      );\r\n\r\n      this.parcelDis\r\n        .filter((element) =>\r\n          this.state.selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"ParcelPlanNoGraphicLayer\",\r\n            14,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  mapLoaded = (map) => {\r\n    this.map = map;\r\n    if (\r\n      this.props.input &&\r\n      this.props.input.value &&\r\n      this.props.input.value.parcels\r\n    ) {\r\n      highlightFeature(this.props.input.value.parcels, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: true,\r\n        attr: { isParcel: true },\r\n        isHighlighPolygonBorder: true,\r\n        zoomFactor: 50,\r\n      });\r\n\r\n      //setTimeout(() => {\r\n      this.props.input.value.parcels.forEach((f) => {\r\n        f.geometry = new esri.geometry.Polygon(f.geometry);\r\n        addParcelNo(\r\n          f.geometry.getExtent().getCenter(),\r\n          this.map,\r\n          f.attributes.PARCEL_PLAN_NO + \"\",\r\n          \"ParcelPlanNoGraphicLayer\",\r\n          14,\r\n          [0, 0, 0]\r\n        );\r\n      });\r\n\r\n      highlightFeature(\r\n        this.props.input.value?.temp?.parcelDis?.filter(\r\n          (element) =>\r\n            !this.props.input.value.parcels.find(\r\n              (i) =>\r\n                i.attributes.PARCEL_SPATIAL_ID ===\r\n                element.attributes.PARCEL_SPATIAL_ID\r\n            )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectLandsGraphicLayer\",\r\n          noclear: false,\r\n          isZoom: false,\r\n          isHiglightSymbol: true,\r\n          highlighColor: [0, 255, 0, 0.5],\r\n          zoomFactor: 50,\r\n        }\r\n      );\r\n\r\n      this.props.input.value?.temp?.parcelDis\r\n        ?.filter(\r\n          (element) =>\r\n            !this.props.input.value.parcels.find(\r\n              (i) =>\r\n                i.attributes.PARCEL_SPATIAL_ID ===\r\n                element.attributes.PARCEL_SPATIAL_ID\r\n            )\r\n        )\r\n        ?.forEach((f) => {\r\n          if (!f.geometry.getExtent) {\r\n            f.geometry = new esri.geometry.Polygon(f.geometry);\r\n          }\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"ParcelPlanNoGraphicLayer\",\r\n            14,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n\r\n      const {\r\n        input: { value, onChange },\r\n      } = this.props;\r\n\r\n      let landsData = {\r\n        ...value,\r\n        conditions: this.state?.conditions,\r\n        temp: {\r\n          // map: this.map,\r\n          // mun: value?.temp?.mun,\r\n          // plan: value?.temp?.plan,\r\n          // subtype: value?.temp?.subtype,\r\n          // subname: value?.temp?.subname,\r\n          // parcelDis: value?.temp?.parcelDis,\r\n          // block: value?.temp?.block,\r\n          // parcel: value?.temp?.parcel,\r\n          mun: this.props.input.value.temp.mun,\r\n          plan:\r\n            this.props.mainObject?.landData?.landData?.PLAN_NO ||\r\n            this.props.input.value.temp.plan,\r\n          subTypeval: this.props.input.value.temp.subTypeval,\r\n          subNameval: this.props.input.value.temp.subNameval,\r\n          parcelDis: this.props.input.value.temp.parcelDis,\r\n          blockval: this.props.input.value.temp.blockval,\r\n          parcelval: this.props.input.value.temp.parcelval,\r\n          subname: this.props.input.value.temp.subname,\r\n          block_no: this.props.input.value.temp.block_no,\r\n          city_name: this.props.input.value.temp.city_name,\r\n        },\r\n        parcels: [...value?.parcels],\r\n      };\r\n      onChange({ ...landsData });\r\n    }\r\n    this.setState({\r\n      mapLoaded: true,\r\n    });\r\n    this.props.setCurrentMap(map);\r\n  };\r\n\r\n  myChangeHandler = (name, event) => {\r\n    this[\"edit_\" + name] = event.target.value;\r\n  };\r\n\r\n  enableEdit(name, i) {\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  }\r\n\r\n  showEditBtn(name, value) {\r\n    if (name == \"USING_SYMBOL\") {\r\n      return value == null;\r\n    } else {\r\n      return (\r\n        [\r\n          \"PARCEL_AREA\",\r\n          \"PARCEL_BLOCK_NO\",\r\n          \"DISTRICT_NAME\",\r\n          \"SUBDIVISION_TYPE\",\r\n          \"SUBDIVISION_DESCRIPTION\",\r\n          \"Natural_Area\",\r\n        ].indexOf(name) > -1\r\n      );\r\n    }\r\n  }\r\n\r\n  saveEdit(id, name, i) {\r\n    let findParcel = this.props.input.value.parcels.find((p) => {\r\n      return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n    });\r\n    findParcel.attributes[name] =\r\n      this[\"edit_\" + name] || findParcel.attributes[name];\r\n    let selectLand = this.state.selectedLands.find((p) => {\r\n      return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n    });\r\n    selectLand.attributes[name] =\r\n      this[\"edit_\" + name] || selectLand.attributes[name];\r\n    this.setState(\r\n      {\r\n        [name + \"_isEdit_\" + i]: false,\r\n        selectedLands: [...this.state.selectedLands],\r\n      },\r\n      () => {\r\n        this.setToStore();\r\n      }\r\n    );\r\n  }\r\n\r\n  resetGraphics = () => {\r\n    this.state[\"selectedLands\"] = [];\r\n    this.state[\"selectedLandsT\"] = [];\r\n    this.DrawGraph();\r\n    this.UpdateSubmissionDataObject();\r\n  };\r\n\r\n  UpdateSubmissionDataObject = () => {\r\n    const { submission_data } = this.state;\r\n    this.setToStore();\r\n    this.props.change(\"submission_data\", submission_data);\r\n  };\r\n\r\n  setValue = (item, event) => {\r\n    item.value = event.target.value;\r\n\r\n    this.UpdateSubmissionDataObject();\r\n  };\r\n\r\n  OnParcelSelect = () => {\r\n    let submission_data = {};\r\n    this.setState({ parcelval: undefined });\r\n    clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n\r\n    if (\r\n      !this.state.selectedLands.filter((e) => e.id === this.state.parcelId)\r\n        .length\r\n    ) {\r\n      queryTask({\r\n        ...querySetting(\r\n          this.LayerID.Landbase_Parcel,\r\n          `PARCEL_SPATIAL_ID =${this.state.parcelId}`,\r\n          true,\r\n          [\r\n            \"PARCEL_AREA\",\r\n            \"PARCEL_MAIN_LUSE\",\r\n            \"PARCEL_LAT_COORD\",\r\n            \"PARCEL_LONG_COORD\",\r\n            \"PLAN_NO\",\r\n            \"PARCEL_PLAN_NO\",\r\n            \"USING_SYMBOL\",\r\n            \"PARCEL_BLOCK_NO\",\r\n            \"DISTRICT_NAME\",\r\n            \"SUBDIVISION_DESCRIPTION\",\r\n            \"SUBDIVISION_TYPE\",\r\n            \"PARCEL_SPATIAL_ID\",\r\n            \"MUNICIPALITY_NAME\",\r\n          ]\r\n        ),\r\n        callbackResult: (res) => {\r\n          if (\r\n            this.state.selectedLands &&\r\n            this.state.selectedLands.length == 0\r\n          ) {\r\n            this.setParcelLengths(res.features[0]).then((submission_data) => {\r\n              const formValues = applyFilters({\r\n                key: \"FormValues\",\r\n                form: \"stepForm\",\r\n              });\r\n\r\n              Object.keys(submission_data).forEach((key) => {\r\n                submission_data[key] =\r\n                  (+formValues.submission_data[key] || 0) +\r\n                  (+submission_data[key] || 0);\r\n              });\r\n\r\n              queryTask({\r\n                ...querySetting(\r\n                  this.LayerID.Tbl_Parcel_Conditions,\r\n                  `USING_SYMBOL_CODE ='${res.features[0].attributes.USING_SYMBOL}'`,\r\n                  false,\r\n                  [\r\n                    \"SLIDE_AREA\",\r\n                    \"MIN_FROT_OFFSET\",\r\n                    \"BUILDING_RATIO\",\r\n                    \"FRONT_OFFSET\",\r\n                    \"SIDE_OFFSET\",\r\n                    \"BACK_OFFSET\",\r\n                    \"FLOORS\",\r\n                    \"FLOOR_HEIGHT\",\r\n                    \"FAR\",\r\n                    \"ADD_FLOOR\",\r\n                  ]\r\n                ),\r\n                callbackResult: (condition) => {\r\n                  this.setState(\r\n                    {\r\n                      conditions: condition.features,\r\n                      submission_data,\r\n                    },\r\n                    () => {\r\n                      this.UpdateSubmissionDataObject();\r\n                    }\r\n                  );\r\n                  getFeatureDomainName(\r\n                    res.features,\r\n                    this.LayerID.Landbase_Parcel\r\n                  ).then((r) => {\r\n                    this.setToStore(r);\r\n                    this.addParcelToSelect(r[0]).then((res) => {\r\n                      this.selectedLandsT.push(res);\r\n                      this.DrawGraph();\r\n                    });\r\n                  });\r\n                },\r\n              });\r\n            });\r\n          } else {\r\n            submission_data.north_length = \"\";\r\n            submission_data.south_length = \"\";\r\n            submission_data.east_length = \"\";\r\n            submission_data.west_length = \"\";\r\n            this.setState({ submission_data }, () => {\r\n              this.UpdateSubmissionDataObject();\r\n            });\r\n            getFeatureDomainName(\r\n              res.features,\r\n              this.LayerID.Landbase_Parcel\r\n            ).then((r) => {\r\n              this.setToStore(r);\r\n              this.addParcelToSelect(r[0]).then((res) => {\r\n                this.selectedLandsT.push(res);\r\n                this.DrawGraph();\r\n              });\r\n            });\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  setParcelLengths = (parcel) => {\r\n    let submission_data = {};\r\n    return new Promise((resolve, reject) => {\r\n      LoadModules([\r\n        \"esri/geometry/Point\",\r\n        \"esri/geometry/Polyline\",\r\n        \"esri/geometry/Polygon\",\r\n        \"esri/tasks/LengthsParameters\",\r\n        \"esri/tasks/GeometryService\",\r\n        \"esri/geometry/mathUtils\",\r\n      ]).then(\r\n        ([\r\n          Point,\r\n          Polyline,\r\n          Polygon,\r\n          LengthsParameters,\r\n          GeometryService,\r\n          mathUtils,\r\n        ]) => {\r\n          let maxPoint, minPoint;\r\n          let max = 0,\r\n            min;\r\n          //\r\n\r\n          parcel.geometry = new esri.geometry.Polygon(parcel.geometry);\r\n          for (let j = 0; j < parcel.geometry.rings[0].length - 1; j++) {\r\n            let point1 = new esri.geometry.Point(\r\n              parcel.geometry.rings[0][j][0],\r\n              parcel.geometry.rings[0][j][1]\r\n            );\r\n            let point2 = new esri.geometry.Point(\r\n              parcel.geometry.rings[0][j + 1][0],\r\n              parcel.geometry.rings[0][j + 1][1]\r\n            );\r\n\r\n            if (point1.x > max) {\r\n              max = point1.x;\r\n              maxPoint = point1;\r\n            }\r\n\r\n            if (!min || point1.x < min) {\r\n              min = point1.x;\r\n              minPoint = point1;\r\n            }\r\n\r\n            if (point2.x > max) {\r\n              max = point2.x;\r\n              maxPoint = point2;\r\n            }\r\n\r\n            if (!min || point2.x < min) {\r\n              min = point2.x;\r\n              minPoint = point2;\r\n            }\r\n          }\r\n\r\n          let arr = [...parcel.geometry.rings[0]];\r\n\r\n          for (let i = arr.length - 1; i > 0; i--) {\r\n            let pnt1 = new Point(arr[i], parcel.geometry.spatialReference);\r\n            let pnt2 = new Point(arr[i - 1], parcel.geometry.spatialReference);\r\n            let length = mathUtils.getLength(pnt1, pnt2);\r\n            length = Number(parseFloat(length).toFixed(2));\r\n\r\n            let path = {\r\n              paths: [[arr[i], arr[i - 1]]],\r\n              text: length,\r\n              spatialReference: parcel.geometry.spatialReference,\r\n            };\r\n\r\n            let geometryServiceLength = new GeometryService(geometryServiceUrl);\r\n            let polyline = new Polyline(path);\r\n            let lengthParams = new LengthsParameters();\r\n\r\n            lengthParams.polylines = [polyline];\r\n\r\n            lengthParams.lengthUnit = GeometryService.UNIT_METER;\r\n\r\n            lengthParams.geodesic = true;\r\n\r\n            geometryServiceLength.lengths(lengthParams, (result) => {\r\n              let polygonCenterPoint = parcel.geometry.getCentroid();\r\n              let polylineCenterPoint = polyline.getExtent().getCenter();\r\n              let maxPolgonPoint = maxPoint;\r\n              let minPolygonPoint = minPoint;\r\n\r\n              let diffrenceInXWithMaxPoint = Math.abs(\r\n                polylineCenterPoint.x - maxPolgonPoint.x\r\n              );\r\n              let diffrenceWithPolygonCenterPoint = Math.abs(\r\n                polylineCenterPoint.x - polygonCenterPoint.x\r\n              );\r\n              //east\r\n              if (diffrenceInXWithMaxPoint < diffrenceWithPolygonCenterPoint) {\r\n                submission_data.east_length = +(\r\n                  parseFloat(submission_data.east_length || 0) +\r\n                  (result?.lengths?.[0] || 0)\r\n                ).toFixed(2);\r\n              } else {\r\n                let diffrenceInXWithMinPoint = Math.abs(\r\n                  polylineCenterPoint.x - minPolygonPoint.x\r\n                );\r\n                if (\r\n                  diffrenceInXWithMinPoint < diffrenceWithPolygonCenterPoint\r\n                ) {\r\n                  submission_data.west_length = +(\r\n                    parseFloat(submission_data.west_length || 0) +\r\n                    (result?.lengths?.[0] || 0)\r\n                  ).toFixed(2);\r\n                } else if (polylineCenterPoint.y > polygonCenterPoint.y) {\r\n                  submission_data.north_length = +(\r\n                    parseFloat(submission_data.north_length || 0) +\r\n                    (result?.lengths?.[0] || 0)\r\n                  ).toFixed(2);\r\n                } else {\r\n                  submission_data.south_length = +(\r\n                    parseFloat(submission_data.south_length || 0) +\r\n                    (result?.lengths?.[0] || 0)\r\n                  ).toFixed(2);\r\n                }\r\n              }\r\n\r\n              if (i == 1) {\r\n                return resolve(submission_data);\r\n              }\r\n            });\r\n          }\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  setToStore = (r) => {\r\n    const {\r\n      input: { value },\r\n    } = this.props;\r\n    this.state.landsData = {\r\n      ...value,\r\n      mapGraphics: [],\r\n      conditions: this.state.conditions,\r\n      //submission_data: { ...this.state.submission_data },\r\n      temp: {\r\n        mun: this.state.munval,\r\n        plan: this.state.planeval,\r\n        subTypeval: this.state.subTypeval,\r\n        subNameval: this.state.subNameval,\r\n        subname: this.state.subName_name,\r\n        parcelDis: this.parcelDis || this.RolBackParcelNum,\r\n        block_no: this.state.block_no,\r\n        blockval: this.state.blockval,\r\n        parcelval: this.state.parcelval,\r\n        city_name: this.state.city_name,\r\n      },\r\n    };\r\n    if (r) {\r\n      if (this.state.selectedLands.length) {\r\n        this.state.landsData[\"parcels\"] = [\r\n          ...this.state.selectedLands,\r\n          {\r\n            attributes: r[0].attributes,\r\n            id: this.state.parcelId,\r\n            geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n          },\r\n        ];\r\n      } else {\r\n        this.state.landsData[\"parcels\"] = [\r\n          {\r\n            geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n            attributes: r[0].attributes,\r\n            id: this.state.parcelId,\r\n          },\r\n        ];\r\n      }\r\n    }\r\n    this.setState({ selectedLands: this.state.landsData.parcels || [] }, () => {\r\n      this.props.input.onChange({ ...this.state.landsData });\r\n    });\r\n  };\r\n\r\n  setAdjacentToStore = (r) => {\r\n    let store = this.props.input.value;\r\n    store.temp.parcelDis = r;\r\n    this.props.input.onChange(store);\r\n  };\r\n\r\n  LandHoverOn = (f) => {\r\n    if (this.state.selectedLands?.length) {\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      var parcel = this.state.parcelNum.filter((m) => m.i == f.key)[0];\r\n      highlightFeature(parcel, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        strokeColor: [0, 0, 0],\r\n        isHighlighPolygonBorder: true,\r\n        highlightWidth: 3,\r\n      });\r\n    }\r\n  };\r\n\r\n  LandHoverOff = (f) => {\r\n    if (this.state.selectedLands?.length) {\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    }\r\n  };\r\n\r\n  remove = (item) => {\r\n    this.state.selectedLands.pop(item);\r\n    const values = slice(this.props.input.value.parcels, 0, -1);\r\n    this.props.input.onChange([...values]);\r\n    if (this.state.selectedLandsT) {\r\n      this.state.selectedLandsT.pop(item);\r\n    }\r\n    this.DrawGraph();\r\n\r\n    if (this.state.selectedLands.length == 1) {\r\n      this.setParcelLengths(item).then((submission_data) => {\r\n        const formValues = applyFilters({\r\n          key: \"FormValues\",\r\n          form: \"stepForm\",\r\n        });\r\n\r\n        Object.keys(submission_data).forEach((key) => {\r\n          submission_data[key] =\r\n            (+formValues.submission_data[key] || 0) +\r\n            (+submission_data[key] || 0);\r\n        });\r\n\r\n        this.setState({ submission_data }, () => {\r\n          this.UpdateSubmissionDataObject();\r\n        });\r\n      });\r\n    } else {\r\n      let submission_data = {};\r\n      submission_data.north_length = \"\";\r\n      submission_data.south_length = \"\";\r\n      submission_data.east_length = \"\";\r\n      submission_data.west_length = \"\";\r\n      this.setState({ submission_data }, () => {\r\n        this.UpdateSubmissionDataObject();\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      selectedLands,\r\n      MunicipalityNames,\r\n      subDivType,\r\n      subDivNames,\r\n      subNameval,\r\n      blockNum,\r\n      blockval,\r\n      PlanNum,\r\n      mapLoaded,\r\n      planeval,\r\n      parcelSearch,\r\n      parcelNum,\r\n      parcelval,\r\n      conditions,\r\n    } = this.state;\r\n    const { fullMapWidth } = this.props;\r\n    return (\r\n      <div>\r\n        <StickyContainer style={{ direction: \"ltr\" }}>\r\n          <Sticky bottomOffset={80}>\r\n            {({ style }) => (\r\n              <MapBtnsComponent\r\n                style={style}\r\n                {...this.props}\r\n              ></MapBtnsComponent>\r\n            )}\r\n          </Sticky>\r\n        </StickyContainer>\r\n        {/* <div className=\"btn-fixed\">\r\n          <MapBtnsComponent {...this.props}></MapBtnsComponent>\r\n        </div> */}\r\n\r\n        <div className={!fullMapWidth ? \"content-section implementation\" : \"\"}>\r\n          {mapLoaded && (\r\n            <div style={{ padding: \"10px\" }}>\r\n              <Select\r\n                getPopupContainer={(trigger) => trigger.parentNode}\r\n                autoFocus\r\n                onChange={(val) => {\r\n                  onMunChange(this, val);\r\n                }}\r\n                showSearch\r\n                value={this.state.munval}\r\n                placeholder=\"اختر اسم البلديه\"\r\n                disabled={!this.state.MunicipalityNames?.length}\r\n                optionFilterProp=\"children\"\r\n                filterOption={(input, option) => {\r\n                  if (option.props.children) {\r\n                    return (\r\n                      option.props.children?.find((i) => {\r\n                        return i && i.indexOf(input.trim().toLowerCase()) >= 0;\r\n                      }) != null\r\n                    );\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                }}\r\n              >\r\n                {MunicipalityNames?.map((e) => (\r\n                  <Option key={e.code} value={e.code}>\r\n                    {e.name}{\" \"}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n\r\n              <Select\r\n                getPopupContainer={(trigger) => trigger.parentNode}\r\n                //onChange={this.onPlaneChange}\r\n                onChange={(val) => {\r\n                  onPlaneChange(this, val);\r\n                }}\r\n                showSearch\r\n                autoFocus\r\n                disabled={!PlanNum.length}\r\n                optionFilterProp=\"children\"\r\n                filterOption={(input, option) => {\r\n                  if (option.props.children) {\r\n                    return (\r\n                      option.props.children\r\n                        ?.indexOf(convertToArabic(input)) != -1\r\n                    );\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                }}\r\n                value={planeval}\r\n                placeholder=\"رقم المخطط\"\r\n                notFoundContent=\"not found\"\r\n              >\r\n                {PlanNum\r\n                //.slice(0, 100)\r\n                .map((d, i) => {\r\n                  return (\r\n                    <Option key={d.i} value={d.i}>\r\n                      {localizeNumber(d.attributes.PLAN_NO)}\r\n                    </Option>\r\n                  );\r\n                })}\r\n              </Select>\r\n              <Select\r\n                getPopupContainer={(trigger) => trigger.parentNode}\r\n                autoFocus\r\n                onChange={(val) => {\r\n                  onSubTypeChange(this, val);\r\n                }}\r\n                showSearch\r\n                disabled={!subDivType.length}\r\n                value={this.state.subTypeval}\r\n                placeholder={\"نوع التقسيم\"}\r\n                optionFilterProp=\"children\"\r\n                filterOption={(input, option) => {\r\n                  if (option.props.children) {\r\n                    return (\r\n                      option.props.children\r\n                        ?.indexOf(convertToArabic(input)) != -1\r\n                    );\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                }}\r\n              >\r\n                {subDivType\r\n                //.slice(0, 100)\r\n                .map((e, i) => (\r\n                  <Option key={i} value={e.code}>\r\n                    {\" \"}\r\n                    {e.name}{\" \"}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n              <Select\r\n                getPopupContainer={(trigger) => trigger.parentNode}\r\n                autoFocus\r\n                onChange={(val) => {\r\n                  onSubNameChange(this, val);\r\n                }}\r\n                showSearch\r\n                disabled={!subDivNames.length}\r\n                placeholder=\"اسم التقسيم\"\r\n                value={subNameval}\r\n                optionFilterProp=\"children\"\r\n                filterOption={(input, option) =>\r\n                  option.props.children\r\n                    ?.indexOf(convertToArabic(input)) != -1\r\n                }\r\n              >\r\n                {subDivNames\r\n                //.slice(0, 100)\r\n                .map((e, i) => (\r\n                  <Option key={i} value={e.attributes.SUBDIVISION_SPATIAL_ID}>\r\n                    {\" \"}\r\n                    {e.attributes.SUBDIVISION_DESCRIPTION}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n              <Select\r\n                getPopupContainer={(trigger) => trigger.parentNode}\r\n                autoFocus\r\n                onChange={(val) => {\r\n                  onBlockChange(this, val);\r\n                }}\r\n                showSearch\r\n                disabled={!blockNum.length}\r\n                value={blockval}\r\n                placeholder=\"رقم البلك\"\r\n                optionFilterProp=\"children\"\r\n                filterOption={(input, option) =>\r\n                  option.props.children\r\n                    ?.indexOf(convertToArabic(input)) != -1\r\n                }\r\n              >\r\n                {blockNum\r\n                //.slice(0, 100)\r\n                .map((e, i) => (\r\n                  <Option key={i} value={e.attributes.BLOCK_SPATIAL_ID}>\r\n                    {localizeNumber(e.attributes.BLOCK_NO)}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n              <Select\r\n                getPopupContainer={(trigger) => trigger.parentNode}\r\n                autoFocus\r\n                onChange={(val) => {\r\n                  onLandParcelChange(this, val);\r\n                }}\r\n                showSearch\r\n                disabled={parcelNum && !parcelNum.length}\r\n                onSearch={(e) => {\r\n                  this.setState({ parcelSearch: e });\r\n                  onSearch(this, e);\r\n                }}\r\n                filterOption={(input, option) => {\r\n                  if (option.props.children) {\r\n                    return (\r\n                      option.props.children\r\n                        ?.indexOf(convertToArabic(input)) != -1\r\n                    );\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                }}\r\n                value={parcelval}\r\n                placeholder=\"رقم قطعة الارض\"\r\n              >\r\n                {parcelNum &&\r\n                  parcelNum\r\n                    .filter((e, i) => {\r\n                      if (parcelSearch) {\r\n                        if (this.state.selectedLands.length) {\r\n                          return !this.state.selectedLands.find(\r\n                            (tt) =>\r\n                              tt.attributes.PARCEL_SPATIAL_ID ==\r\n                              e.attributes.PARCEL_SPATIAL_ID\r\n                          );\r\n                        } else {\r\n                          return (\r\n                            e.attributes.PARCEL_PLAN_NO &&\r\n                            e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                              parcelSearch.toLowerCase()\r\n                            ) >= 0\r\n                          );\r\n                        }\r\n                      } else {\r\n                        if (selectedLands?.length) {\r\n                          return (\r\n                            !selectedLands.find(\r\n                              (tt) =>\r\n                                tt.attributes.PARCEL_PLAN_NO ==\r\n                                e.attributes.PARCEL_PLAN_NO\r\n                            ) && e.attributes.PARCEL_PLAN_NO\r\n                          );\r\n                        } else {\r\n                          return e.attributes.PARCEL_PLAN_NO;\r\n                        }\r\n                      }\r\n                    })\r\n                    .slice(0, 100)\r\n                    .map((e, i) => {\r\n                      return (\r\n                        <Option\r\n                          onMouseEnter={this.LandHoverOn}\r\n                          onMouseLeave={this.LandHoverOff}\r\n                          key={e.attributes.PARCEL_SPATIAL_ID}\r\n                          value={e.i}\r\n                        >\r\n                          {localizeNumber(e.attributes.PARCEL_PLAN_NO)}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n              </Select>\r\n\r\n              <Button\r\n                className=\"add-gis\"\r\n                disabled={this.state.parcelId === null}\r\n                onClick={this.OnParcelSelect}\r\n              >\r\n                إضافة الأرض\r\n              </Button>\r\n            </div>\r\n          )}\r\n\r\n          <MapComponent\r\n            mapload={this.mapLoaded.bind(this)}\r\n            {...this.props}\r\n          ></MapComponent>\r\n        </div>\r\n        {mapLoaded && (\r\n          <div style={{ gridColumn: \"1/3\" }}>\r\n            {selectedLands && selectedLands.length > 0 && (\r\n              <div>\r\n                <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n\r\n                <table\r\n                  className=\"table table-bordered\"\r\n                  style={{ marginTop: \"1%\" }}\r\n                >\r\n                  <thead>\r\n                    <tr>\r\n                      <th>رقم القطعه</th>\r\n                      <th>المساحة من الصك م٢</th>\r\n                      <th>رقم البلك</th>\r\n                      <th>الحي</th>\r\n                      <th>نوع التقسيم</th>\r\n                      <th>اسم التقسيم</th>\r\n                      <th>رمز الاستخدام</th>\r\n                      {!window.isAkarApp && <th>المساحة من الطبيعة م٢</th>}\r\n                      <th> خيارات</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {selectedLands.map((e, i) => {\r\n                      return (\r\n                        <tr key={i}>\r\n                          {this.parcel_fields.map((field, k) => {\r\n                            return (\r\n                              <td key={k}>\r\n                                <div>\r\n                                  {!this.state[field + \"_isEdit_\" + i] ? (\r\n                                    <span>\r\n                                      <span>\r\n                                        {e.attributes[field] || \"غير متوفر\"}\r\n                                      </span>\r\n                                      {this.showEditBtn(\r\n                                        field,\r\n                                        e.attributes[field]\r\n                                      ) && (\r\n                                        <span>\r\n                                          <button\r\n                                            className=\"btn\"\r\n                                            style={{ marginRight: \"20px\" }}\r\n                                            onClick={this.enableEdit.bind(\r\n                                              this,\r\n                                              field,\r\n                                              i\r\n                                            )}\r\n                                          >\r\n                                            <i className=\"fas fa-edit\"></i>\r\n                                          </button>\r\n                                        </span>\r\n                                      )}\r\n                                    </span>\r\n                                  ) : (\r\n                                    <span\r\n                                      style={{\r\n                                        display: \"grid\",\r\n                                        gridTemplateColumns: \"1fr auto\",\r\n                                      }}\r\n                                    >\r\n                                      <input\r\n                                        key={i}\r\n                                        className=\"form-control\"\r\n                                        type=\"text\"\r\n                                        onChange={this.myChangeHandler.bind(\r\n                                          this,\r\n                                          field\r\n                                        )}\r\n                                      />\r\n                                      <button\r\n                                        className=\"btn\"\r\n                                        style={{ marginRight: \"20px\" }}\r\n                                        onClick={this.saveEdit.bind(\r\n                                          this,\r\n                                          e.id,\r\n                                          field,\r\n                                          i\r\n                                        )}\r\n                                      >\r\n                                        <i className=\"fa fa-floppy-o\"></i>\r\n                                      </button>\r\n                                    </span>\r\n                                  )}\r\n                                </div>\r\n                              </td>\r\n                            );\r\n                          })}\r\n\r\n                          {i === selectedLands.length - 1 ? (\r\n                            <td>\r\n                              <button\r\n                                className=\" btn btn-danger \"\r\n                                onClick={this.remove.bind(this, e)}\r\n                              >\r\n                                حذف\r\n                              </button>\r\n                            </td>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(addedParcelsIdentifyComponnent);\r\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AAYA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAgFA;AA6EA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAQA;AAQA;AAEA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAOA;AAQA;AACA;AACA;AAAA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAUA;AACA;AACA;AACA;AAQA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AA8CA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AAoBA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAiBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AAAA;AACA;AAIA;AACA;AAGA;AAEA;AACA;AAIA;AAAA;AACA;AAIA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAzzBA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AAWA;AACA;AACA;AAGA;AAMA;AAKA;AAKA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAiQA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAwXA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAUA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AAIA;AACA;AACA;AAAA;AAQA;AAAA;AAKA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAiBA;AACA;AAAA;AAEA;AACA;AAAA;AAaA;AACA;AAAA;AAAA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAAA;AACA;AAKA;AAEA;AAAA;AAOA;AAKA;AACA;AAAA;AAUA;AASA;AACA;AACA;;;;A","sourceRoot":""}
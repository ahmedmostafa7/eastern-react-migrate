{"version":3,"file":"27.min.js","sources":["webpack:///./src/app/components/inputs/fields/list/mapping.js","webpack:///./src/app/components/inputs/fields/list/table/head/index.js","webpack:///./src/app/components/inputs/fields/list/table/head/types/index.js","webpack:///./src/app/components/inputs/fields/list/table/index.js","webpack:///./src/app/components/inputs/fields/list/table/row/index.js","webpack:///./src/app/components/inputs/fields/list/table/row/types/index.js"],"sourcesContent":["import { get } from \"lodash\";\r\n\r\nexport const mapStateToProps = ({ wizard: {mainObject, currentModule}, selectors }, ownProps) => {\r\n    const { moduleName, ux_pattern, pageSize: propsPageSize = 20 } = ownProps;\r\n    const { pagination = {} } = get(selectors, moduleName, {});\r\n    let { pageSize = propsPageSize, currentPage = 1, totalPages = 0, count = propsPageSize } = pagination\r\n    let allData = get(selectors, `${moduleName}.data`, ownProps.data || []);\r\n    let data = null;\r\n    let failed = false;\r\n    if (ux_pattern === 'pagination') {\r\n        const firstIndex = (currentPage - 1) * pageSize;\r\n        data = allData.slice(firstIndex, firstIndex + pageSize).filter(d => d != undefined || d != null)\r\n        let arrayLength = currentPage == totalPages ? (count - firstIndex) : pageSize\r\n        if (data.length < arrayLength && arrayLength <= pageSize) {\r\n            failed = true;\r\n        }\r\n    }\r\n    return {\r\n        selectors,\r\n        ...get(selectors, moduleName, {}),\r\n        pagination: {\r\n            ...get(selectors, `${moduleName}.links`, {}),\r\n            failed\r\n        },\r\n        data: data || allData,\r\n        mainObject,\r\n        currentModule\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n    return {\r\n        setValueLabelKeys: (label_key, value_key) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.label_key`,\r\n                data: label_key\r\n            });\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.value_key`,\r\n                data: value_key\r\n            });\r\n        },\r\n        setSelector: (moduleName, data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}`,\r\n                data\r\n            });\r\n        },\r\n        setData: (data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.data`,\r\n                data\r\n            })\r\n        },\r\n        editData: (index, data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.data[${index}]`,\r\n                data\r\n            })\r\n        },\r\n        addToData: (data, index, operation) => {\r\n            dispatch({\r\n                type: 'insertInArraySelectors',\r\n                path: `${moduleName}.data`,\r\n                operation,\r\n                index,\r\n                data\r\n            })\r\n        },\r\n        removeFromData: (index) => {\r\n            dispatch({\r\n                type: 'removeSelectors',\r\n                path: `${moduleName}.data`,\r\n                index\r\n            })\r\n        },\r\n        setCurrentPage: (pageNum) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.currentPage`,\r\n                data: pageNum\r\n            })\r\n        },\r\n        setPageSize: (pageSize) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.pageSize`,\r\n                data: pageSize\r\n            })\r\n        },\r\n        setTotalPages: (totalPages) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.totalPages`,\r\n                data: totalPages\r\n            })\r\n        },\r\n        setItemsCount: (itemsCount) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.count`,\r\n                data: itemsCount\r\n            })\r\n        },\r\n        setNextUrl: (nextUrl) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.nextLink`,\r\n                data: nextUrl\r\n            })\r\n        },\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport * as heads from './types';\r\nimport {get} from 'lodash'\r\nimport {translate} from 'react-i18next';\r\nclass Head extends Component {\r\n    render() {\r\n        const {head, t} = this.props;\r\n        const HeadComponent = get(heads, head.type, heads.label)\r\n        return (\r\n            <th>\r\n                <HeadComponent head={t(head.head || head)} />\r\n            </th>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withTranslation(\"labels\")(Head)\r\n","import {lazy} from 'react'\r\n\r\nexport const label = lazy(()=>import('./label'))","import React, { Component } from \"react\";\r\nimport { map, pick, isEmpty } from \"lodash\";\r\nimport Head from \"./head\";\r\nimport Row from \"./row\";\r\nimport { FormSection } from \"redux-form\";\r\nimport { last } from \"lodash\";\r\nimport { connect } from \"react-redux\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"../mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"list\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    if (props.init_data) {\r\n      props.init_data(props.values, props);\r\n    }\r\n  }\r\n  renderHeads = () => {\r\n    const { fields } = this.props;\r\n    return (\r\n      <thead>\r\n        {map(fields, (d, key) => (\r\n          <Head head={d.head} key={key}></Head>\r\n        ))}\r\n      </thead>\r\n    );\r\n  };\r\n  renderRow = (d, key) => {\r\n    const { colums, fields = colums, input } = this.props;\r\n    const picking = [\"change\", \"touch\", \"untouch\", \"values\", \"index\"];\r\n    const mainProps = pick(this.props, picking);\r\n    const name = last(input.name.split(\".\"));\r\n    //console.log(name, d.main_id, key)\r\n\r\n    return (\r\n      <FormSection name={`${name}.${(d && d.main_id) || key}`}>\r\n        <tr>\r\n          {map(fields, (f, k) => (\r\n            <Row\r\n              key={\"\" + key + k}\r\n              {...mainProps}\r\n              mainProps={pick(this.props, picking)}\r\n              data={d}\r\n              select={f.name || k}\r\n              mainValues={input.value}\r\n              field={f}\r\n            />\r\n          ))}\r\n        </tr>\r\n      </FormSection>\r\n    );\r\n  };\r\n  renderBody = () => {\r\n    const { input } = this.props;\r\n    return map(input.value, this.renderRow);\r\n  };\r\n  render() {\r\n    const { input } = this.props;\r\n    if (isEmpty(input.value)) {\r\n      return <></>;\r\n    }\r\n    return (\r\n      <table className=\"table input-list-table table-bordered\">\r\n        {this.renderHeads()}\r\n        <tbody>{this.renderBody()}</tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, appMapDispatchToProps)(withTranslation(\"labels\")(index));\r\n","import React, { Component } from \"react\";\r\nimport { get } from \"lodash\";\r\nimport * as Cells from \"./types\";\r\nimport { apply_field_permission } from \"app/helpers/functions/apply_permissions\";\r\nimport {\r\n  checkImage,\r\n  convertToArabic,\r\n  localizeNumber,\r\n} from \"../../../../../inputs/fields/identify/Component/common/common_func\";\r\n\r\nexport default class Row extends Component {\r\n  render() {\r\n    const { field, data, select, ...props } = this.props;\r\n    const MainComponent = get(Cells, field.type, Cells.label);\r\n    const d =\r\n      (this.props.field?.init_data &&\r\n        this.props.field?.init_data(get(data, select), this.props)) ||\r\n      get(data, select);\r\n    const perm = apply_field_permission(data, field, this.props);\r\n    //console.log(d, select);\r\n    \r\n    return (\r\n      <td>\r\n        {perm &&\r\n          (([\"image\"].indexOf(field.type) != -1 &&\r\n            checkImage(this.props, d, { width: \"100px\" })) || (\r\n            <MainComponent\r\n              d={convertToArabic(d)}\r\n              row={data}\r\n              field={{ ...field, name: select }}\r\n              {...props}\r\n            />\r\n          ))}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n","import {lazy} from 'react'\r\n\r\nexport const label = lazy(()=>import('./label'))\r\nexport const input = lazy(()=>import('./input'))\r\nexport const actions = lazy(()=>import('./actions'))\r\nexport const image = lazy(()=>import('./image'))"],"mappings":";;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACrHA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AAEA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAMA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAMA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AA1CA;AACA;AACA;AACA;AAwCA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AC7EA;AAEA;AACA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"69.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/SuggestParcel/fields.js","webpack:///./src/app/components/inputs/fields/identify/Component/SuggestParcel/index.js"],"sourcesContent":["\r\nimport { SubAttachementUrl } from 'configFiles/config';\r\nimport{host} from 'configFiles/config'\r\n\r\nexport default [\r\n    {\r\n        name:\"file_upload\",\r\n        label:\"مرفق الرفع المساحى\",\r\n        hideLabel: true,\r\n              field: \"simpleUploader\",\r\n              uploadUrl: `${host}/uploadMultifiles`,\r\n              fileType: \"image/*,.pdf\",\r\n              multiple: true,\r\n      \r\n    },\r\n   \r\n]","import React, { Component } from \"react\";\r\nimport { Tabs, message } from \"antd\";\r\nconst { TabPane } = Tabs;\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { toArabicWord } from \"number-to-arabic-words/dist/index-node.js\";\r\nimport { post } from \"axios\";\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  getPolygons,\r\n  addGraphicToLayer,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  project,\r\n  addParcelNo,\r\n  zoomToLayer,\r\n  resizeMap,\r\n  computePointDirection,\r\n  convertToArabic,\r\n  reformatNumLetters,\r\n} from \"../common/common_func\";\r\nimport uploadField from \"./fields\";\r\nimport { Form, Button, Alert, Select } from \"antd\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport RenderField from \"app/components/inputs\";\r\nimport { apply_permissions, serverFieldMapper } from \"app/helpers/functions\";\r\n\r\nimport fileUploaderComponent from \"../../../fileUploader\";\r\nimport { workFlowUrl } from \"config\";\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport { mapUrl } from \"../mapviewer/config/map\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { get, isEqual, map, memoize } from \"lodash\";\r\nimport { querySetting } from \"../IdentifyComponnentCoord/Helpers\";\r\nimport { timeout } from \"d3\";\r\nimport { json } from \"d3\";\r\nimport { host } from \"../../../../../../../imports/config\";\r\nimport { apply_field_permission } from \"../../../../../../helpers/functions\";\r\nconst { Option } = Select;\r\nconst tabsCm = [\r\n  { title: \"1\", key: \"1\" },\r\n  { title: \"2\", key: \"2\" },\r\n];\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n    id: `item-${k + offset}`,\r\n    content: `item ${k + offset}`,\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: \"2px\",\r\n  fontSize: \"20px\",\r\n  marginRight: \"13px\",\r\n  float: \"right\",\r\n  // change background colour if dragging\r\n  background: \"#E0E0E0\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nconst dragStyle = {\r\n  float: \"right\",\r\n  marginRight: \"13px\",\r\n  backgroundColor: \"#E0E0E0\",\r\n  padding: \"2px\",\r\n};\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  //background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  padding: grid,\r\n  width: \"100%\",\r\n  height: \"60px\",\r\n});\r\n\r\nconst itemContainerNorth = {\r\n  borderTop: \"13px solid #008DFF\",\r\n  margin: \"auto\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerWeast = {\r\n  borderLeft: \"13px solid red\",\r\n  height: \"auto\",\r\n  margin: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerEmpty = {\r\n  height: \"auto\",\r\n  margin: \"35px 88px auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerEast = {\r\n  borderRight: \"13px solid #8A8A8A\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerSouth = {\r\n  borderBottom: \"13px solid #09F869\",\r\n  margin: \"auto\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\nclass SuggestParcelFiled extends Component {\r\n  props = {};\r\n  self = null;\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(props);\r\n    this.props = props;\r\n    this.fields = uploadField.map((f) => serverFieldMapper(f));\r\n    this.elec_fields = map(\r\n      {\r\n        electricRoom: {\r\n          name: \"electricRoom\",\r\n          label: \"تشمل غرفة كهرباء\",\r\n          field: \"checkbox\",\r\n          // init_data: (props) => {\r\n          //\r\n          //   if (props.input.value) {\r\n          //     props.input.onChange(false);\r\n          //   }\r\n          // },\r\n        },\r\n        electricArea: {\r\n          name: \"electricArea\",\r\n          digits: true,\r\n          maxLength: 6,\r\n          field: \"number\",\r\n          label: \"مساحة غرفة الكهرباء\",\r\n          permission: { show_match_value: { electricRoom: true } },\r\n        },\r\n        electricPosition: {\r\n          name: \"electricPosition\",\r\n          label: \"مكان غرفة الكهرباء\",\r\n          field: \"text\",\r\n          permission: { show_match_value: { electricRoom: true } },\r\n        },\r\n      },\r\n      (value, key) => ({\r\n        name: key,\r\n        ...serverFieldMapper(value),\r\n      })\r\n    );\r\n    this.neighbors =\r\n      this.props.mainObject &&\r\n      this.props.mainObject?.landData?.landData?.lands?.temp.parcelDis;\r\n    this.neighbors =\r\n      this.neighbors &&\r\n      this.neighbors.filter((f) => {\r\n        return (\r\n          this.props.mainObject?.landData?.landData?.lands?.parcels[0]\r\n            .attributes.PARCEL_PLAN_NO != f.attributes.PARCEL_PLAN_NO\r\n        );\r\n      });\r\n\r\n    debugger;\r\n    let { boundsFields, boundsOnly } = this.props;\r\n    if (boundsOnly && this.props.input?.value?.polygons) {\r\n      this.props.input.value.polygons.forEach((e) => {\r\n        Object.values(boundsFields).forEach((r) => {\r\n          if (!e[r[1].name]) {\r\n            if (r[1].name != \"west\") {\r\n              e[r[1].name] = reformatNumLetters(\r\n                toArabicWord(\r\n                  e.data.find((d) => d.name == r[1].name)?.totalLength\r\n                ),\r\n                \"متر\"\r\n              );\r\n            } else {\r\n              e[r[1].name] = reformatNumLetters(\r\n                toArabicWord(\r\n                  e.data.find((d) => d.name == \"weast\")?.totalLength\r\n                ),\r\n                \"متر\"\r\n              );\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }\r\n    this.cadData =\r\n      (this.props.input.value &&\r\n        this.props.input.value.temp &&\r\n        this.props?.input?.value?.temp?.cadData) ||\r\n      undefined;\r\n    this.Polygons = this.props.input.value.polygons || [];\r\n    this.state = {\r\n      polygons: this.Polygons || [],\r\n      activeKey: \"1\",\r\n      mapLoaded: false,\r\n      serviceVal: null,\r\n      serviceSubTypeVal: null,\r\n      servicesSubTypes: [],\r\n      bufferDistance: null,\r\n      servicesTypes: [],\r\n      resultServices: [],\r\n      lands: [],\r\n      weastBoundries: [],\r\n      northBoundries: [],\r\n      eastBoundries: [],\r\n      southBoundries: [],\r\n    };\r\n    this.baseState = this.state;\r\n    this.isLoaded = true;\r\n  }\r\n\r\n  electric_fields = memoize((values) => {\r\n    return this.elec_fields.filter((field) =>\r\n      apply_field_permission(values, field, this.props)\r\n    );\r\n  });\r\n\r\n  /**\r\n   * A semi-generic way to handle multiple lists. Matches\r\n   * the IDs of the droppable container to the names of the\r\n   * source arrays stored in the state.\r\n   */\r\n  id2List = {\r\n    droppable_North: \"northBoundries\",\r\n    droppable_South: \"southBoundries\",\r\n    droppable_East: \"eastBoundries\",\r\n    droppable_Weast: \"weastBoundries\",\r\n  };\r\n\r\n  getList = (id) => this.state[this.id2List[id]];\r\n\r\n  onDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const items = reorder(\r\n        this.getList(source.droppableId),\r\n        source.index,\r\n        destination.index\r\n      );\r\n\r\n      let state = { items };\r\n\r\n      if (source.droppableId === \"droppable_South\") {\r\n        state = { southBoundries: items };\r\n      }\r\n      if (source.droppableId === \"droppable_North\") {\r\n        state = { northBoundries: items };\r\n      }\r\n      if (source.droppableId === \"droppable_East\") {\r\n        state = { eastBoundries: items };\r\n      }\r\n      if (source.droppableId === \"droppable_Weast\") {\r\n        state = { weastBoundries: items };\r\n      }\r\n\r\n      this.setState(state);\r\n    } else {\r\n      const result = move(\r\n        this.getList(source.droppableId),\r\n        this.getList(destination.droppableId),\r\n        source,\r\n        destination\r\n      );\r\n\r\n      if (result.droppable_North) {\r\n        this.Polygons[+this.state.activeKey - 1].data[0].data =\r\n          result.droppable_North.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n      if (result.droppable_Weast) {\r\n        this.Polygons[+this.state.activeKey - 1].data[3].data =\r\n          result.droppable_Weast.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n      if (result.droppable_South) {\r\n        this.Polygons[+this.state.activeKey - 1].data[4].data =\r\n          result.droppable_South.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n      if (result.droppable_East) {\r\n        this.Polygons[+this.state.activeKey - 1].data[1].data =\r\n          result.droppable_East.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n\r\n      this.dropSuccess();\r\n      this.calculateLines();\r\n\r\n      this.setState({\r\n        northBoundries: result.droppable_North || this.state.northBoundries,\r\n        southBoundries: result.droppable_South || this.state.southBoundries,\r\n        eastBoundries: result.droppable_East || this.state.eastBoundries,\r\n        weastBoundries: result.droppable_Weast || this.state.weastBoundries,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    getInfo().then((res) => {\r\n      // ////\r\n      this.LayerID = res;\r\n    });\r\n  }\r\n\r\n  dragLength(event) {\r\n    console.log(event);\r\n    this.map.getLayer(\"editlengthGraphicLayer\").remove(event.graphic);\r\n    addParcelNo(\r\n      event.mapPoint,\r\n      this.map,\r\n      \"\" + event.graphic.attributes[\"text\"],\r\n      \"editlengthGraphicLayer\",\r\n      35,\r\n      null,\r\n      event.graphic.attributes[\"angle\"],\r\n      null,\r\n      {\r\n        text: event.graphic.attributes[\"text\"],\r\n        angle: event.graphic.attributes[\"angle\"],\r\n      }\r\n    );\r\n  }\r\n\r\n  moveBoundries() {\r\n    window.onDragLengthLayer = [];\r\n    window.onDragLengthLayer.push(this.dragLength.bind(this));\r\n    this.map.disablePan();\r\n  }\r\n\r\n  mapLoaded = (map) => {\r\n    this.map = map;\r\n\r\n    this.props.setMap(map);\r\n    this.moveBoundries();\r\n\r\n    clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n    if (\r\n      this.props.input &&\r\n      this.props.input.value &&\r\n      this.props.input.value.polygons\r\n    ) {\r\n      setTimeout(() => {\r\n        this.props.input.value.polygons.forEach((f) => {\r\n          if (f.polygon) {\r\n            f.polygon = new esri.geometry.Polygon(f.polygon);\r\n\r\n            if (\r\n              f.parcel_name != \"الزائده التنظيميه\" &&\r\n              f.parcel_name != \"الزائدة\" &&\r\n              f.parcel_name != \"حدود المعاملة \"\r\n            ) {\r\n              addParcelNo(\r\n                f.polygon.getExtent().getCenter(),\r\n                this.map,\r\n                f.parcel_name + \"\",\r\n                \"ParcelPlanNoGraphicLayer\",\r\n                14,\r\n                [0, 0, 0]\r\n              );\r\n            }\r\n          }\r\n        });\r\n\r\n        this.neighbors &&\r\n          this.neighbors.forEach((f) => {\r\n            f.geometry = new esri.geometry.Polygon(f.geometry);\r\n            addParcelNo(\r\n              f.geometry.getExtent().getCenter(),\r\n              this.map,\r\n              f.attributes.PARCEL_PLAN_NO + \"\",\r\n              \"ParcelPlanNoGraphicLayer\",\r\n              14,\r\n              [0, 0, 0]\r\n            );\r\n          });\r\n      }, 200);\r\n    }\r\n\r\n    if (\r\n      this.cadData &&\r\n      !(\r\n        this.props.input &&\r\n        this.props.input.value &&\r\n        this.props.input.value.polygons\r\n      )\r\n    ) {\r\n      this.drawFeatures(this.cadData);\r\n    } else if (\r\n      this.props.input &&\r\n      this.props.input.value &&\r\n      this.props.input.value.polygons\r\n    ) {\r\n      this.drawPolygons();\r\n    }\r\n\r\n    this.props.setCurrentMap(map);\r\n  };\r\n\r\n  isPointOrArc(point, polygonIndex, cadFeatures) {\r\n    var value = false;\r\n\r\n    var points = cadFeatures[polygonIndex];\r\n    for (var i = 0; i < points.length; i++) {\r\n      if (points[i][0] == point.x && points[i][1] == point.y) {\r\n        value = true;\r\n        break;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n\r\n  getLineLength(boundryFeaturesLen, point1, point2, isArc) {\r\n    return (\r\n      isArc &&\r\n      boundryFeaturesLen.find((d) => {\r\n        return (\r\n          (d.points[0].x.toFixed(4) == point1.x.toFixed(4) &&\r\n            d.points[0].y.toFixed(4) == point1.y.toFixed(4) &&\r\n            d.points[1].x.toFixed(4) == point2.x.toFixed(4) &&\r\n            d.points[1].y.toFixed(4) == point2.y.toFixed(4)) ||\r\n          (d.points[0].x.toFixed(4) == point2.x.toFixed(4) &&\r\n            d.points[0].y.toFixed(4) == point2.y.toFixed(4) &&\r\n            d.points[1].x.toFixed(4) == point1.x.toFixed(4) &&\r\n            d.points[1].y.toFixed(4) == point1.y.toFixed(4))\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getPacrelNoAngle(parcel) {\r\n    var xMin;\r\n    var xMax = 0;\r\n    var yMin;\r\n    var yMax = 0;\r\n\r\n    parcel.geometry.rings[0].forEach(function (point) {\r\n      if (point[0] > xMax) xMax = point[0];\r\n\r\n      if (!xMin || point[0] < xMin) xMin = point[0];\r\n\r\n      if (point[1] > yMax) yMax = point[1];\r\n\r\n      if (!yMin || point[1] < yMin) yMin = point[1];\r\n    });\r\n\r\n    return yMax - yMin > xMax - xMin ? 60 : -15;\r\n  }\r\n\r\n  // convertToArabic(num) {\r\n  //   if (num) {\r\n  //     var id = [\"۰\", \"۱\", \"۲\", \"۳\", \"٤\", \"٥\", \"٦\", \"۷\", \"۸\", \"۹\"];\r\n  //     return num.replace(/[0-9]/g, function (w) {\r\n  //       return id[+w];\r\n  //     });\r\n  //   } else {\r\n  //     return \"\";\r\n  //   }\r\n  // }\r\n\r\n  calculateLines() {\r\n    this.Polygons.filter((p) => {\r\n      return p.layerName?.toLowerCase() != \"notPlus\"?.toLowerCase();\r\n    }).forEach((polygon) => {\r\n      polygon.data.forEach((lines) => {\r\n        lines.totalLength = 0;\r\n        lines.data.forEach((line) => {\r\n          if (!line.hide) lines.totalLength += line.text;\r\n        });\r\n        lines.totalLength = lines.totalLength.toFixed(2); //Math.floor(parseFloat(lines.totalLength) * 100) / 100;\r\n        //if((lines.totalLength+'').split('.')[1][1] == '9')\r\n        //  lines.totalLength = lines.totalLength.toFixed(2)\r\n      });\r\n    });\r\n  }\r\n\r\n  dropSuccess(Polyline) {\r\n    clearGraphicFromLayer(this.map, \"boundriesDirection\");\r\n    //clearGraphicLayer(\"PacrelNoGraphicLayer\", $scope.map);\r\n\r\n    var count = 0;\r\n\r\n    //var oldData = JSON.parse(JSON.stringify(this.layerParcels));\r\n\r\n    this.layerParcels = [];\r\n\r\n    //sortLines(sug.Polygons);\r\n\r\n    this.Polygons.filter((p) => {\r\n      return p.layerName?.toLowerCase() != \"notPlus\"?.toLowerCase();\r\n    }).forEach((polygon, key) => {\r\n      count++;\r\n      var parcelNumber = key + 1;\r\n\r\n      /*if (oldData[key]) {\r\n            polygon.corners = JSON.parse(JSON.stringify((oldData[key].corners)));\r\n        }\r\n        else\r\n            polygon.corners = [];*/\r\n\r\n      this.layerParcels.push(JSON.parse(JSON.stringify(polygon.polygon)));\r\n      this.layerParcels[this.layerParcels.length - 1].lines = [];\r\n      this.layerParcels[this.layerParcels.length - 1].corners = [];\r\n\r\n      polygon.data.forEach((boundry) => {\r\n        var lineDirection;\r\n        if (boundry.name != \"main\") {\r\n          var color = [0, 0, 255];\r\n\r\n          if (boundry.name == \"north\") {\r\n            color = [0, 141, 255];\r\n            lineDirection = 1;\r\n          } else if (boundry.name == \"east\") {\r\n            color = [117, 114, 114];\r\n            lineDirection = 2;\r\n          } else if (boundry.name == \"weast\") {\r\n            color = [255, 0, 0];\r\n            lineDirection = 4;\r\n          } else if (boundry.name == \"south\") {\r\n            color = [0, 255, 0];\r\n            lineDirection = 3;\r\n          }\r\n\r\n          boundry.data.forEach((line) => {\r\n            if (line.lines) {\r\n              line.lines.forEach((innerLine) => {\r\n                innerLine.color = color;\r\n                innerLine.polygonNum = count;\r\n                innerLine.lineDirection = lineDirection;\r\n\r\n                var polyline = new esri.geometry.Polyline(innerLine);\r\n\r\n                this.layerParcels[this.layerParcels.length - 1].lines.push(\r\n                  polyline\r\n                );\r\n\r\n                addGraphicToLayer(\r\n                  polyline,\r\n                  this.map,\r\n                  \"boundriesDirection\",\r\n                  color\r\n                );\r\n              });\r\n            }\r\n\r\n            line.color = color;\r\n            line.polygonNum = count;\r\n            line.lineDirection = lineDirection;\r\n\r\n            var polyline = new esri.geometry.Polyline(line);\r\n\r\n            var point1 = {};\r\n            point1.x = line.paths[0][0][0];\r\n            point1.y = line.paths[0][0][1];\r\n\r\n            point1.x = Number(point1.x.toPrecision(12));\r\n            point1.y = Number(point1.y.toPrecision(12));\r\n\r\n            var latlng = esri.geometry.xyToLngLat(point1.x, point1.y);\r\n            point1.lat = latlng[0];\r\n            point1.lng = latlng[1];\r\n\r\n            var point2 = {};\r\n            point2.x = line.paths[0][1][0];\r\n            point2.y = line.paths[0][1][1];\r\n\r\n            point2.x = Number(point2.x.toPrecision(12));\r\n            point2.y = Number(point2.y.toPrecision(12));\r\n\r\n            latlng = esri.geometry.xyToLngLat(point2.x, point2.y);\r\n            point2.lat = latlng[0];\r\n            point2.lng = latlng[1];\r\n\r\n            /*var fromCornerIndex = sug.getCornersIndex(polygon.corners, point1);\r\n                    if (fromCornerIndex == -1) {\r\n                        polygon.corners.push(point1);\r\n                        fromCornerIndex = polygon.corners.length;\r\n                    }\r\n                    var toCornerIndex = sug.getCornersIndex(polygon.corners, point2);\r\n                    if (toCornerIndex == -1) {\r\n                        polygon.corners.push(point2);\r\n                        toCornerIndex = polygon.corners.length;\r\n                    }*/\r\n\r\n            //line.from = fromCornerIndex;\r\n            //line.to = toCornerIndex;\r\n            line.BOUNDARY_NO = line.from;\r\n\r\n            var polyline1 = new esri.geometry.Polyline(line);\r\n\r\n            this.layerParcels[this.layerParcels.length - 1].lines.push(\r\n              polyline\r\n            );\r\n\r\n            var attr = {\r\n              parcelNumber: parcelNumber,\r\n            };\r\n\r\n            addGraphicToLayer(\r\n              polyline1,\r\n              this.map,\r\n              \"boundriesDirection\",\r\n              color,\r\n              null,\r\n              null,\r\n              null,\r\n              attr\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n  getSuggestLine(Polyline) {\r\n    this.Polygons.filter((p) => {\r\n      return p.layerName?.toLowerCase() != \"notPlus\"?.toLowerCase();\r\n    }).forEach(function (polygon) {\r\n      var polygonCenterPoint = polygon.polygon.getExtent().getCenter();\r\n      var polyg = new esri.geometry.Polygon(polygon.polygon);\r\n      polygon.data[2].data.forEach(function (boundry, key) {\r\n        // var line = new Polyline(boundry);\r\n        // var centerPointofLine = line.getExtent().getCenter();\r\n\r\n        // var diffrenceInXWithMaxPoint = Math.abs(\r\n        //   centerPointofLine.x - polygon.maxPoint.x\r\n        // );\r\n        // var diffrenceWithPolygonCenterPoint = Math.abs(\r\n        //   centerPointofLine.x - polygonCenterPoint.x\r\n        // );\r\n\r\n        // //east\r\n        // if (diffrenceInXWithMaxPoint < diffrenceWithPolygonCenterPoint) {\r\n        //   polygon.data[1].data.push(boundry);\r\n        // } else {\r\n        //   var diffrenceInXWithMinPoint = Math.abs(\r\n        //     centerPointofLine.x - polygon.minPoint.x\r\n        //   );\r\n        //   if (diffrenceInXWithMinPoint < diffrenceWithPolygonCenterPoint) {\r\n        //     polygon.data[3].data.push(boundry);\r\n        //   } else if (centerPointofLine.y > polygonCenterPoint.y) {\r\n        //     polygon.data[0].data.push(boundry);\r\n        //   } else {\r\n        //     polygon.data[4].data.push(boundry);\r\n        //   }\r\n        // }\r\n        let direction = computePointDirection(\r\n          polygon,\r\n          boundry.paths[0][0],\r\n          boundry.paths[0][1],\r\n          polyg\r\n        );\r\n        if (direction.direction == \"east\") {\r\n          polygon.data[1].data.push(boundry);\r\n        } else {\r\n          if (direction.direction == \"west\") {\r\n            polygon.data[3].data.push(boundry);\r\n          } else if (direction.direction == \"north\") {\r\n            polygon.data[0].data.push(boundry);\r\n          } else if (direction.direction == \"south\") {\r\n            polygon.data[4].data.push(boundry);\r\n          }\r\n        }\r\n      });\r\n\r\n      polygon.data[2].data = [];\r\n    });\r\n\r\n    this.dropSuccess(Polyline);\r\n    this.calculateLines();\r\n  }\r\n\r\n  settoStore(polygons) {\r\n    this.props.input.onChange({\r\n      polygons: polygons,\r\n      temp: {\r\n        //map: this.map,\r\n        cadData: this.cadData,\r\n        // shtfa_northeast: this.state[\"shtfa_northeast\"] || 0,\r\n        // shtfa_northweast: this.state[\"shtfa_northweast\"] || 0,\r\n        // shtfa_southeast: this.state[\"shtfa_southeast\"] || 0,\r\n        // shtfa_southweast: this.state[\"shtfa_southweast\"] || 0,\r\n      },\r\n    });\r\n  }\r\n\r\n  resetStore() {\r\n    this.props.input.onChange({\r\n      polygons: [],\r\n      temp: {\r\n        //map: this.map,\r\n        cadData: null,\r\n        // shtfa_northeast: 0,\r\n        // shtfa_northweast: 0,\r\n        // shtfa_southeast: 0,\r\n        // shtfa_southweast: 0,\r\n      },\r\n    });\r\n\r\n    this.setState({\r\n      polygons: [],\r\n      // shtfa_northeast: \"\",\r\n      // shtfa_northweast: \"\",\r\n      // shtfa_southeast: \"\",\r\n      // shtfa_southweast: \"\",\r\n    });\r\n  }\r\n\r\n  drawLengths(polygons) {\r\n    this.Polygons.filter((p) => {\r\n      return p.layerName?.toLowerCase() != \"notPlus\"?.toLowerCase();\r\n    }).forEach((elem, key) => {\r\n      elem.data.forEach((item) => {\r\n        item.data.forEach((boundry) => {\r\n          var attr = {\r\n            text: convertToArabic(boundry.text.toFixed(2)),\r\n            angle: null,\r\n          };\r\n          console.log(boundry);\r\n          addParcelNo(\r\n            new esri.geometry.Point(boundry.centroid),\r\n            this.map,\r\n            \"\" + convertToArabic(boundry.text.toFixed(2)) + \"\",\r\n            \"editlengthGraphicLayer\",\r\n            30,\r\n            null,\r\n            null,\r\n            null,\r\n            attr\r\n          );\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  drawPolygons(polygons) {\r\n    this.Polygons = this.props.input.value.polygons;\r\n\r\n    /*this.polygons = this.polygons.sort((a,b)=> {\r\n      return (a.layerName > b.layerName) ? 1 : ((b.layerName > a.layerName) ? -1 : 0);} );\r\n*/\r\n    console.log(this.Polygons);\r\n    if (!this.props.boundsOnly) {\r\n      this.Polygons.filter((p) => {\r\n        return p.layerName?.toLowerCase() != \"notPlus\"?.toLowerCase();\r\n      }).forEach((elem, key) => {\r\n        elem.polygon = new esri.geometry.Polygon(elem.polygon);\r\n        elem.polygon.type = \"polygon\";\r\n        console.log(elem.polygon);\r\n        if (elem.polygon.layer?.toLowerCase() == \"boundry\"?.toLowerCase()) {\r\n          addGraphicToLayer(\r\n            elem.polygon,\r\n            this.map,\r\n            \"addedParclGraphicLayer\",\r\n            [0, 0, 255, 0.8],\r\n            null,\r\n            true\r\n          );\r\n        } else {\r\n          addGraphicToLayer(\r\n            elem.polygon,\r\n            this.map,\r\n            \"addedParclGraphicLayer\",\r\n            [0, 255, 0, 0.8],\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            true\r\n          );\r\n        }\r\n      });\r\n\r\n      this.dropSuccess();\r\n    }\r\n    this.setState({\r\n      polygons: this.Polygons,\r\n      weastBoundries: this.Polygons[0].data[3].data.map((item, i) => {\r\n        return {\r\n          id: `item-${\"weast_\" + i}`,\r\n          content: item.text.toFixed(2),\r\n          data: item,\r\n        };\r\n      }),\r\n      northBoundries: this.Polygons[0].data[0].data.map((item, i) => {\r\n        return {\r\n          id: `item-${\"north_\" + i}`,\r\n          content: item.text.toFixed(2),\r\n          data: item,\r\n        };\r\n      }),\r\n      eastBoundries: this.Polygons[0].data[1].data.map((item, i) => {\r\n        return {\r\n          id: `item-${\"east_\" + i}`,\r\n          content: item.text.toFixed(2),\r\n          data: item,\r\n        };\r\n      }),\r\n      southBoundries: this.Polygons[0].data[4].data.map((item, i) => {\r\n        return {\r\n          id: `item-${\"south_\" + i}`,\r\n          content: item.text.toFixed(2),\r\n          data: item,\r\n        };\r\n      }),\r\n    });\r\n    if (!this.props.boundsOnly) {\r\n      this.drawLengths();\r\n\r\n      this.settoStore(this.Polygons);\r\n\r\n      setTimeout(() => {\r\n        zoomToLayer(\"addedParclGraphicLayer\", this.map, 8);\r\n      }, 200);\r\n    } else {\r\n      this.settoStore(this.Polygons);\r\n    }\r\n    //resizeMap(this.map);\r\n  }\r\n\r\n  drawFeatures(features) {\r\n    LoadModules([\r\n      \"esri/geometry/Point\",\r\n      \"esri/geometry/Polyline\",\r\n      \"esri/geometry/Polygon\",\r\n      \"esri/geometry/mathUtils\",\r\n      \"esri/SpatialReference\",\r\n    ]).then(([Point, Polyline, Polygon, mathUtils, SpatialReference]) => {\r\n      clearGraphicFromLayer(this.map, \"highlightBoundriesGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"boundriesGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"boundriesDirection\");\r\n      clearGraphicFromLayer(this.map, \"pictureGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelUnNamedGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"detailedGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n      this.layerParcels = [];\r\n      let pointsLength = [];\r\n\r\n      this.Polygons = [];\r\n\r\n      let lineFeatures = [];\r\n      if (features[0].lineFeatures) {\r\n        //draw details\r\n        features[0].lineFeatures.forEach((line, appartNumber) => {\r\n          var polyline = new Polyline(line);\r\n          lineFeatures.push(polyline);\r\n          addGraphicToLayer(\r\n            polyline,\r\n            this.map,\r\n            \"detailedGraphicLayer\",\r\n            [0, 0, 255, 0.5],\r\n            null,\r\n            null,\r\n            null\r\n          );\r\n        });\r\n      }\r\n\r\n      let tempFeatures = features[0].shapeFeatures.reverse();\r\n\r\n      if (tempFeatures[0].layer != features[0].layer) {\r\n        features[0].shapeFeatures = tempFeatures;\r\n        features[0].cadFeatures = features[0].cadFeatures.reverse();\r\n      }\r\n\r\n      getPolygons(\r\n        features[0].shapeFeatures,\r\n        (polygon, esriModules, elem, key) => {\r\n          this.Polygons.push({\r\n            parcelName: \"\",\r\n            area: -1,\r\n            data: [\r\n              { name: \"north\", data: [], totalLength: 0 },\r\n              { name: \"east\", data: [], totalLength: 0 },\r\n              { name: \"main\", data: [], totalLength: 0 },\r\n              { name: \"weast\", data: [], totalLength: 0 },\r\n              { name: \"south\", data: [], totalLength: 0 },\r\n            ],\r\n          });\r\n          this.Polygons[key].parcelName = \"\";\r\n          if (elem.layer?.toLowerCase() == \"plus\"?.toLowerCase()) {\r\n            this.Polygons[key].parcel_name = \"الزائده التنظيميه\";\r\n            this.Polygons[key].layerName = \"plus\";\r\n          } else if (elem.layer?.toLowerCase() == \"boundry\"?.toLowerCase()) {\r\n            this.Polygons[key].parcel_name = \"أرض رقم \";\r\n            this.Polygons[key].layerName = \"boundry\";\r\n          } else if (\r\n            elem.layer?.toLowerCase() == \"full_boundry\"?.toLowerCase()\r\n          ) {\r\n            this.Polygons[key].parcel_name = \"حدود المعاملة \";\r\n            this.Polygons[key].layerName = \"full_boundry\";\r\n          }\r\n\r\n          this.Polygons[key].PARCEL_SPATIAL_ID = \"\";\r\n          this.Polygons[key].area = elem.area;\r\n          if (!this.Polygons[key].parcel_area_desc) {\r\n            this.state[\"parcel_area_desc\" + key] = this.Polygons[\r\n              key\r\n            ].parcel_area_desc = reformatNumLetters(\r\n              toArabicWord(this.Polygons[key].area.toFixed(2)),\r\n              \"متر مربع\"\r\n            );\r\n          } else {\r\n            this.state[\"parcel_area_desc\" + key] =\r\n              this.Polygons[key].parcel_area_desc;\r\n          }\r\n          this.Polygons[key].parcelNameHidden = \"\";\r\n\r\n          this.Polygons[key].notify = polygon.notify;\r\n          this.Polygons[key].polygon = polygon;\r\n          this.Polygons[key].min;\r\n          this.Polygons[key].active = false;\r\n          this.Polygons[key].max = 0;\r\n          this.Polygons[key].maxPointLineLen;\r\n          this.Polygons[key].minPointLineLen;\r\n          this.Polygons[key].minLineLen;\r\n\r\n          if (polygon.rings.length > 0) {\r\n            var arcLength = 0;\r\n            var arcPoints = [];\r\n            var arcLines = [];\r\n\r\n            for (var j = 0, n = polygon.rings[0].length - 1; j < n; j++) {\r\n              var point1 = new Point(\r\n                polygon.rings[0][j][0],\r\n                polygon.rings[0][j][1],\r\n                new SpatialReference({ wkid: polygon.spatialReference })\r\n              );\r\n              var point2 = new Point(\r\n                polygon.rings[0][j + 1][0],\r\n                polygon.rings[0][j + 1][1],\r\n                new SpatialReference({ wkid: polygon.spatialReference })\r\n              );\r\n\r\n              var length = mathUtils.getLength(point1, point2);\r\n              //length = Number(parseFloat(length).toFixed(2));\r\n\r\n              if (point1.x > this.Polygons[key].max) {\r\n                this.Polygons[key].max = point1.x;\r\n                this.Polygons[key].maxPoint = point1;\r\n              }\r\n\r\n              if (\r\n                !this.Polygons[key].min ||\r\n                point1.x < this.Polygons[key].min\r\n              ) {\r\n                this.Polygons[key].min = point1.x;\r\n                this.Polygons[key].minPoint = point1;\r\n              }\r\n\r\n              if (point2.x > this.Polygons[key].max) {\r\n                this.Polygons[key].max = point2.x;\r\n                this.Polygons[key].maxPoint = point2;\r\n              }\r\n\r\n              if (\r\n                !this.Polygons[key].min ||\r\n                point2.x < this.Polygons[key].min\r\n              ) {\r\n                this.Polygons[key].min = point2.x;\r\n                this.Polygons[key].minPoint = point2;\r\n              }\r\n\r\n              var path = {\r\n                paths: [[polygon.rings[0][j], polygon.rings[0][j + 1]]],\r\n                text: length,\r\n                spatialReference: polygon.spatialReference,\r\n              };\r\n\r\n              if (\r\n                !(\r\n                  this.isPointOrArc(point1, key, features[0].cadFeatures) &&\r\n                  this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n                )\r\n              ) {\r\n                if (this.isPointOrArc(point2, key, features[0].cadFeatures)) {\r\n                  //\r\n                  arcLength += length;\r\n                  arcPoints.push(point1);\r\n                  path = new Polyline(path);\r\n                  path.centroid = path.getExtent().getCenter();\r\n                  arcLines.push(new Polyline(path));\r\n                  path.text = arcLength || length;\r\n\r\n                  if (\r\n                    features[0].boundryFeaturesLen &&\r\n                    features[0].boundryFeaturesLen.length &&\r\n                    features[0].boundryFeaturesLen.length > 0\r\n                  ) {\r\n                    //\r\n                    var line = this.getLineLength(\r\n                      features[0].boundryFeaturesLen,\r\n                      arcPoints[0],\r\n                      point2,\r\n                      features[0].isArc\r\n                    );\r\n                    if (line) path.text = line.length;\r\n                  }\r\n\r\n                  length = path.text;\r\n                  path.lines = arcLines;\r\n                  arcLines = [];\r\n                  arcLength = 0;\r\n                  this.Polygons[key].data[2].data.push(path);\r\n                  this.Polygons[key].data[2].data[\r\n                    this.Polygons[key].data[2].data.length - 1\r\n                  ].centroid = path.getExtent().getCenter();\r\n                } else {\r\n                  path.hide = true;\r\n                  arcLength += length;\r\n                  arcPoints.push(point1);\r\n                  path = new Polyline(path);\r\n                  let polyline = new Polyline(path);\r\n                  path.centroid = polyline.getExtent().getCenter();\r\n                  arcLines.push(new Polyline(path));\r\n                }\r\n              }\r\n              if (\r\n                this.isPointOrArc(point1, key, features[0].cadFeatures) &&\r\n                this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n              ) {\r\n                if (\r\n                  features[0].boundryFeaturesLen &&\r\n                  features[0].boundryFeaturesLen.length &&\r\n                  features[0].boundryFeaturesLen.length > 0\r\n                ) {\r\n                  //\r\n                  let line = this.getLineLength(\r\n                    features[0].boundryFeaturesLen,\r\n                    point1,\r\n                    point2,\r\n                    features[0].isArc\r\n                  );\r\n\r\n                  if (line) path.text = line.length;\r\n\r\n                  length = path.text;\r\n                }\r\n                this.Polygons[key].data[2].data.push(path);\r\n              }\r\n\r\n              let polyline1 = new Polyline(path);\r\n\r\n              if (\r\n                !this.Polygons[key].minLineLen ||\r\n                this.Polygons[key].minLineLen > length\r\n              )\r\n                this.Polygons[key].minLineLen = length;\r\n\r\n              var pt = polyline1.getExtent().getCenter();\r\n\r\n              if (\r\n                !(\r\n                  this.isPointOrArc(point1, key, features[0].cadFeatures) &&\r\n                  this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n                )\r\n              ) {\r\n                if (this.isPointOrArc(point2, key, features[0].cadFeatures)) {\r\n                  if (arcPoints.length)\r\n                    pt = arcPoints[Math.floor(arcPoints.length / 2)];\r\n                }\r\n              }\r\n\r\n              if (\r\n                this.isPointOrArc(point1, key, features[0].cadFeatures) &&\r\n                this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n              ) {\r\n                this.Polygons[key].data[2].data[\r\n                  this.Polygons[key].data[2].data.length - 1\r\n                ].centroid = pt;\r\n              }\r\n\r\n              if (polygon.layer?.toLowerCase() == \"boundry\"?.toLowerCase()) {\r\n                addGraphicToLayer(\r\n                  polyline1,\r\n                  this.map,\r\n                  \"boundriesGraphicLayer\",\r\n                  [0, 0, 255, 0.3]\r\n                );\r\n              } else {\r\n                addGraphicToLayer(\r\n                  polyline1,\r\n                  this.map,\r\n                  \"boundriesGraphicLayer\",\r\n                  [0, 255, 0, 1]\r\n                );\r\n              }\r\n\r\n              if (pt.length) {\r\n                pt.x = pt[0];\r\n                pt.y = pt[1];\r\n              }\r\n\r\n              let lineLengthFont = 30;\r\n\r\n              var attr = {\r\n                text: convertToArabic(length.toFixed(2)),\r\n                angle: this.getPacrelNoAngle({ geometry: polygon }),\r\n              };\r\n\r\n              // because there were similarity between points in fraction part 123.4567 , 123.4512\r\n              if (\r\n                !(\r\n                  pointsLength.indexOf(\r\n                    pt.x.toFixed(4) + \",\" + pt.y.toFixed(4)\r\n                  ) > -1\r\n                )\r\n              ) {\r\n                if (\r\n                  this.isPointOrArc(point1, key, features[0].cadFeatures) &&\r\n                  this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n                ) {\r\n                  pointsLength.push(pt.x.toFixed(4) + \",\" + pt.y.toFixed(4));\r\n\r\n                  //if(this.Polygons[key].layerName != \"plus\")\r\n                  //{\r\n                  addParcelNo(\r\n                    pt,\r\n                    this.map,\r\n                    \"\" + convertToArabic(length.toFixed(2)) + \"\",\r\n                    \"editlengthGraphicLayer\",\r\n                    lineLengthFont,\r\n                    null,\r\n                    this.getPacrelNoAngle({ geometry: polygon }),\r\n                    null,\r\n                    attr\r\n                  );\r\n                  //}\r\n                } else if (\r\n                  this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n                ) {\r\n                  if (arcPoints.length)\r\n                    pt = arcPoints[Math.floor(arcPoints.length / 2)];\r\n\r\n                  //if(this.Polygons[key].layerName != \"plus\")\r\n                  //{\r\n                  addParcelNo(\r\n                    pt,\r\n                    this.map,\r\n                    \"\" + convertToArabic(length.toFixed(2)) + \"\",\r\n                    \"editlengthGraphicLayer\",\r\n                    lineLengthFont,\r\n                    null,\r\n                    this.getPacrelNoAngle({ geometry: polygon }),\r\n                    null,\r\n                    attr\r\n                  );\r\n                  //}\r\n                }\r\n              }\r\n\r\n              if (this.isPointOrArc(point2, key, features[0].cadFeatures)) {\r\n                arcPoints = [];\r\n              }\r\n            }\r\n\r\n            if (\r\n              this.Polygons[key].layerName?.toLowerCase() ==\r\n              \"plus\"?.toLowerCase()\r\n            ) {\r\n              addGraphicToLayer(\r\n                polygon,\r\n                this.map,\r\n                \"addedParclGraphicLayer\",\r\n                [0, 0, 255, 0.8],\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                true\r\n              );\r\n            } else {\r\n              addGraphicToLayer(\r\n                polygon,\r\n                this.map,\r\n                \"addedParclGraphicLayer\",\r\n                [0, 0, 255, 0.8],\r\n                null,\r\n                true\r\n              );\r\n            }\r\n          }\r\n        }\r\n      );\r\n\r\n      setTimeout(() => {\r\n        // sug.getSuggestLine();\r\n        clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n\r\n        //console.log(this.Polygons);\r\n\r\n        var isPlus = this.Polygons.find((p) => {\r\n          return p.polygon.layer?.toLowerCase() == \"plus\"?.toLowerCase();\r\n        });\r\n\r\n        if (!isPlus) {\r\n          this.Polygons.push({ layerName: \"notPlus\", parcel_name: \"الزائدة\" });\r\n        }\r\n\r\n        this.Polygons.filter((p) => {\r\n          return p.layerName?.toLowerCase() != \"notPlus\"?.toLowerCase();\r\n        }).forEach((elem, key) => {\r\n          if (elem.polygon.layer?.toLowerCase() == \"boundry\"?.toLowerCase()) {\r\n            addGraphicToLayer(\r\n              elem.polygon,\r\n              this.map,\r\n              \"addedParclGraphicLayer\",\r\n              [0, 0, 255, 0.8],\r\n              null,\r\n              true\r\n            );\r\n          } else if (\r\n            elem.polygon.layer?.toLowerCase() == \"plus\"?.toLowerCase()\r\n          ) {\r\n            addGraphicToLayer(\r\n              elem.polygon,\r\n              this.map,\r\n              \"addedParclGraphicLayer\",\r\n              [0, 255, 0, 0.8],\r\n              null,\r\n              null,\r\n              null,\r\n              null,\r\n              null,\r\n              null,\r\n              true\r\n            );\r\n          }\r\n        });\r\n\r\n        // setTimeout(() => {\r\n        //   this.neighbors.forEach((f) => {\r\n        //     f.geometry = new esri.geometry.Polygon(f.geometry);\r\n        //     addParcelNo(\r\n        //       f.geometry.getExtent().getCenter(),\r\n        //       this.map,\r\n        //       f.attributes.PARCEL_PLAN_NO + \"\",\r\n        //       \"ParcelPlanNoGraphicLayer\",\r\n        //       14,\r\n        //       [0, 0, 0]\r\n        //     );\r\n        //   });\r\n        // }, 200);\r\n\r\n        console.log(this.Polygons);\r\n\r\n        this.getSuggestLine(Polyline);\r\n\r\n        zoomToLayer(\"boundriesGraphicLayer\", this.map, 8);\r\n\r\n        //resizeMap(this.map);\r\n\r\n        setTimeout(() => {\r\n          if (this.state[\"north_Desc0\"] && !this.newCadUploaded) {\r\n            this.newCadUploaded = false;\r\n            this.Polygons.forEach((polygon, key) => {\r\n              polygon.north_Desc = this.state[\"north_Desc\" + key];\r\n              polygon.weast_Desc = this.state[\"weast_Desc\" + key];\r\n              polygon.south_Desc = this.state[\"south_Desc\" + key];\r\n              polygon.east_Desc = this.state[\"east_Desc\" + key];\r\n\r\n              polygon.parcel_name = this.state[\"parcel_Name\" + key];\r\n              if (!this.state[\"parcel_area_desc\" + key]) {\r\n                polygon.parcel_area_desc = this.state[\r\n                  \"parcel_area_desc\" + key\r\n                ] = reformatNumLetters(\r\n                  toArabicWord(polygon.area.toFixed(2)),\r\n                  \"متر مربع\"\r\n                );\r\n              } else {\r\n                polygon.parcel_area_desc = this.state[\"parcel_area_desc\" + key];\r\n              }\r\n              if (this.state[\"shtfa_northeast\" + key]) {\r\n                polygon.shtfa_northeast = this.state[\"shtfa_northeast\" + key];\r\n              }\r\n              if (this.state[\"shtfa_northweast\" + key]) {\r\n                polygon.shtfa_northweast = this.state[\"shtfa_northweast\" + key];\r\n              }\r\n              if (this.state[\"shtfa_southeast\" + key]) {\r\n                polygon.shtfa_southeast = this.state[\"shtfa_southeast\" + key];\r\n              }\r\n              if (this.state[\"shtfa_southweast\" + key]) {\r\n                polygon.shtfa_southweast = this.state[\"shtfa_southweast\" + key];\r\n              }\r\n            });\r\n          } else {\r\n            this.Polygons.forEach((polygon, key) => {\r\n              this.setState({\r\n                // parcel_area_desc0: \"\",\r\n                // parcel_area_desc1: \"\",\r\n                // parcel_area_desc2: \"\",\r\n                // parcel_area_0: \"\",\r\n                // parcel_area_1: \"\",\r\n                // parcel_area_2: \"\",\r\n                // parcel_Name0: \"\",\r\n                // parcel_Name1: \"\",\r\n                // parcel_Name2: \"\",\r\n                //[\"parcel_area_desc\" + key]: \"\",\r\n                [\"parcel_area_\" + key]: \"\",\r\n                [\"parcel_Name\" + key]: \"\",\r\n                [\"north_Desc\" + key]: \"\",\r\n                [\"weast_Desc\" + key]: \"\",\r\n                [\"south_Desc\" + key]: \"\",\r\n                [\"east_Desc\" + key]: \"\",\r\n              });\r\n            });\r\n          }\r\n\r\n          this.settoStore(this.Polygons);\r\n        }, 1000);\r\n\r\n        this.setState({\r\n          polygons: this.Polygons,\r\n          weastBoundries: this.Polygons[0].data[3].data.map((item, i) => {\r\n            return {\r\n              id: `item-${\"weast_\" + i}`,\r\n              content: item.text.toFixed(2),\r\n              data: item,\r\n            };\r\n          }),\r\n          northBoundries: this.Polygons[0].data[0].data.map((item, i) => {\r\n            return {\r\n              id: `item-${\"north_\" + i}`,\r\n              content: item.text.toFixed(2),\r\n              data: item,\r\n            };\r\n          }),\r\n          eastBoundries: this.Polygons[0].data[1].data.map((item, i) => {\r\n            return {\r\n              id: `item-${\"east_\" + i}`,\r\n              content: item.text.toFixed(2),\r\n              data: item,\r\n            };\r\n          }),\r\n          southBoundries: this.Polygons[0].data[4].data.map((item, i) => {\r\n            return {\r\n              id: `item-${\"south_\" + i}`,\r\n              content: item.text.toFixed(2),\r\n              data: item,\r\n            };\r\n          }),\r\n        });\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  resetAll() {\r\n    this.setState(this.baseState);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { input } = this.props;\r\n\r\n    let self = this;\r\n    if (input.value && input.value != \"\" && input.value.justInvoked) {\r\n      input.value.justInvoked = false;\r\n      let response = input.value.cadData;\r\n      if (response) {\r\n        if (\r\n          !response[0].shapeFeatures.find((feature) => {\r\n            return feature.layer?.toLowerCase() == \"boundry\"?.toLowerCase();\r\n          })\r\n          // ||\r\n          // !response[0].shapeFeatures.find((feature) => {\r\n          //   return (\r\n          //     feature.layer?.toLowerCase() == \"PLUS\"?.toLowerCase()\r\n          //      ||\r\n          //     feature.layer?.toLowerCase() == \"NOTPLUS\"?.toLowerCase()\r\n          //   );\r\n          // })\r\n        ) {\r\n          message.error(\"الكاد المرفق غير مطابق للمواصفات\");\r\n          return;\r\n        }\r\n\r\n        if (\r\n          response[0].shapeFeatures.filter((feature) => {\r\n            return (\r\n              feature.layer?.toLowerCase() == \"boundry\"?.toLowerCase() &&\r\n              feature.notify != \"mapview.parcels.NOTIFY_INTERSECT\"\r\n            );\r\n          }).length > 0\r\n        ) {\r\n          message.error(\"هذة الأرض  خارج حدود الأراضي المختارة\");\r\n          return;\r\n        } else {\r\n          clearGraphicFromLayer(self.map, \"ParcelPlanNoGraphicLayer\");\r\n          //self.resetAll();\r\n          self.setState({ polygons: [] });\r\n          self.Polygons = [];\r\n          self.newCadUploaded = true;\r\n          self.drawFeatures(response);\r\n        }\r\n      } else {\r\n        if (this?.map?.graphicsLayerIds) {\r\n          this.map.graphicsLayerIds.forEach(\r\n            function (layerName, index) {\r\n              clearGraphicFromLayer(this.map, layerName);\r\n            }.bind(this)\r\n          );\r\n        }\r\n\r\n        this.map?.setExtent(\r\n          new esri.geometry.Extent({\r\n            xmin: 351074.79384063353,\r\n            ymin: 2908411.351837893,\r\n            xmax: 461736.99433170113,\r\n            ymax: 2947768.2013849253,\r\n            spatialReference: {\r\n              wkid: 32639,\r\n            },\r\n          })\r\n        );\r\n\r\n        this.resetStore();\r\n      }\r\n    } else if (this.isLoaded) {\r\n      if (\r\n        this.props.input &&\r\n        this.props.input.value &&\r\n        this.props.input.value.polygons\r\n      ) {\r\n        this.isLoaded = false;\r\n        this.props.input.value.polygons.forEach((polygon, key) => {\r\n          this.state[\"north_Desc\" + key] = polygon.north_Desc;\r\n          this.state[\"weast_Desc\" + key] = polygon.weast_Desc;\r\n          this.state[\"south_Desc\" + key] = polygon.south_Desc;\r\n          this.state[\"east_Desc\" + key] = polygon.east_Desc;\r\n\r\n          this.state[\"parcel_Name\" + key] = polygon.parcel_name;\r\n\r\n          if (!polygon.parcel_area_desc) {\r\n            this.state[\"parcel_area_desc\" + key] = polygon.parcel_area_desc =\r\n              reformatNumLetters(\r\n                toArabicWord(polygon.area.toFixed(2)),\r\n                \"متر مربع\"\r\n              );\r\n          } else {\r\n            this.state[\"parcel_area_desc\" + key] = polygon.parcel_area_desc;\r\n          }\r\n\r\n          if (polygon.layerName?.toLowerCase() == \"notPlus\"?.toLowerCase()) {\r\n            this.state[\"parcel_area_\" + key] = polygon.area;\r\n          }\r\n\r\n          if (\r\n            this.props?.input?.value?.temp?.shtfa_northeast ||\r\n            polygon.shtfa_northeast\r\n          ) {\r\n            this.state[\"shtfa_northeast\" + key] =\r\n              polygon.shtfa_northeast ||\r\n              this.props?.input?.value?.temp?.shtfa_northeast;\r\n          }\r\n          if (\r\n            this.props?.input?.value?.temp?.shtfa_northweast ||\r\n            polygon.shtfa_northweast\r\n          ) {\r\n            this.state[\"shtfa_northweast\" + key] =\r\n              polygon.shtfa_northweast ||\r\n              this.props?.input?.value?.temp?.shtfa_northweast;\r\n          }\r\n          if (\r\n            this.props?.input?.value?.temp?.shtfa_southeast ||\r\n            polygon.shtfa_southeast\r\n          ) {\r\n            this.state[\"shtfa_southeast\" + key] =\r\n              polygon.shtfa_southeast ||\r\n              this.props?.input?.value?.temp?.shtfa_southeast;\r\n          }\r\n          if (\r\n            this.props?.input?.value?.temp?.shtfa_southweast ||\r\n            polygon.shtfa_southweast\r\n          ) {\r\n            this.state[\"shtfa_southweast\" + key] =\r\n              polygon.shtfa_southweast ||\r\n              this.props?.input?.value?.temp?.shtfa_southweast;\r\n          }\r\n        });\r\n\r\n        if (this.props.boundsOnly) {\r\n          this.drawPolygons(this.props.input.value.polygons);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // handleChange(e) {\r\n  //   //console.log(e.target.files[0])\r\n  //   var reader = new FileReader();\r\n  //   let self = this;\r\n  //   reader.readAsDataURL(e.target.files[0]);\r\n  //   reader.onload = () => {\r\n  //     //console.log(reader.result);\r\n\r\n  //   };\r\n  //   reader.onerror = function (error) {\r\n  //     console.log(\"Error: \", error);\r\n  //   };\r\n  // }\r\n  onChange = (activeKey) => {\r\n    if (this.Polygons[+activeKey - 1].data && !this.props.boundsOnly) {\r\n      this.setState({\r\n        activeKey,\r\n        weastBoundries: this.Polygons[+activeKey - 1].data[3].data.map(\r\n          (item, i) => {\r\n            return {\r\n              id: `item-${\"weast_\" + i}`,\r\n              content: item.text.toFixed(2),\r\n              data: item,\r\n            };\r\n          }\r\n        ),\r\n        northBoundries: this.Polygons[+activeKey - 1].data[0].data.map(\r\n          (item, i) => {\r\n            return {\r\n              id: `item-${\"north_\" + i}`,\r\n              content: item.text.toFixed(2),\r\n\r\n              data: item,\r\n            };\r\n          }\r\n        ),\r\n        eastBoundries: this.Polygons[+activeKey - 1].data[1].data.map(\r\n          (item, i) => {\r\n            return {\r\n              id: `item-${\"east_\" + i}`,\r\n              content: item.text.toFixed(2),\r\n\r\n              data: item,\r\n            };\r\n          }\r\n        ),\r\n        southBoundries: this.Polygons[+activeKey - 1].data[4].data.map(\r\n          (item, i) => {\r\n            return {\r\n              id: `item-${\"south_\" + i}`,\r\n              content: item.text.toFixed(2),\r\n\r\n              data: item,\r\n            };\r\n          }\r\n        ),\r\n      });\r\n    } else {\r\n      this.setState({ activeKey });\r\n    }\r\n  };\r\n\r\n  updateNorth_Desc = (polygon, key, evt) => {\r\n    polygon.north_Desc = evt.target.value;\r\n\r\n    console.log(polygon);\r\n    this.setState({\r\n      [\"north_Desc\" + key]: evt.target.value,\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  updateSouth_Desc = (polygon, key, evt) => {\r\n    polygon.south_Desc = evt.target.value;\r\n    console.log(polygon);\r\n    this.setState({\r\n      [\"south_Desc\" + key]: evt.target.value,\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  updateBound = (polygon, name, evt) => {\r\n    polygon[name] = evt.target.value;\r\n    this.settoStore(this.state.polygons);\r\n    this.setState({ polygons: this.state.polygons });\r\n  };\r\n\r\n  updateEast_Desc = (polygon, key, evt) => {\r\n    polygon.east_Desc = evt.target.value;\r\n    console.log(polygon);\r\n    this.setState({\r\n      [\"east_Desc\" + key]: evt.target.value,\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  updateInputValue = (polygon, key, index, evt) => {\r\n    if (polygon) {\r\n      polygon[key] = evt.target.value;\r\n    }\r\n\r\n    this.settoStore(this.state.polygons);\r\n\r\n    this.setState({ [key + index]: evt.target.value });\r\n  };\r\n\r\n  updateParcel = (polygon, key, evt) => {\r\n    polygon.parcel_name = evt.target.value;\r\n    console.log(polygon);\r\n    this.setState({\r\n      [\"parcel_Name\" + key]: evt.target.value,\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n\r\n    clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n    setTimeout(() => {\r\n      this.state.polygons.forEach((f) => {\r\n        if (f.polygon) {\r\n          if (\r\n            f.parcel_name != \"الزائده التنظيميه\" &&\r\n            f.parcel_name != \"الزائدة\" &&\r\n            f.parcel_name != \"حدود المعاملة \"\r\n          ) {\r\n            addParcelNo(\r\n              f.polygon.getExtent().getCenter(),\r\n              this.map,\r\n              f.parcel_name + \"\",\r\n              \"ParcelPlanNoGraphicLayer\",\r\n              14,\r\n              [0, 0, 0]\r\n            );\r\n          }\r\n        }\r\n      });\r\n\r\n      this.neighbors.forEach((f) => {\r\n        f.geometry = new esri.geometry.Polygon(f.geometry);\r\n        addParcelNo(\r\n          f.geometry.getExtent().getCenter(),\r\n          this.map,\r\n          f.attributes.PARCEL_PLAN_NO + \"\",\r\n          \"ParcelPlanNoGraphicLayer\",\r\n          14,\r\n          [0, 0, 0]\r\n        );\r\n      });\r\n    }, 200);\r\n  };\r\n\r\n  updateParcelDesc = (polygon, key, evt) => {\r\n    polygon.parcel_area_desc = evt.target.value;\r\n\r\n    this.setState({\r\n      [\"parcel_area_desc\" + key]: evt.target.value,\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  updateParcelArea = (polygon, key, evt) => {\r\n    polygon.area = evt.target.value;\r\n\r\n    this.setState({\r\n      [\"parcel_area_\" + key]: evt.target.value,\r\n      [\"parcel_area_desc\" + key]: reformatNumLetters(\r\n        toArabicWord(evt.target.value),\r\n        \"متر مربع\"\r\n      ),\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  render() {\r\n    const { mapLoaded, polygons } = this.state;\r\n    const { mainObject, boundsFields } = this.props;\r\n    let parcels = mainObject?.landData?.landData?.lands?.parcels;\r\n    return (\r\n      <div>\r\n        {/* <label for=\"id\" className=\"btn\">\r\n          اختر ملف\r\n        </label>\r\n        {/* <input id=\"files\" style=\"visibility:hidden;\" type=\"file\">}\r\n        <input\r\n          id=\"id\"\r\n          type=\"file\"\r\n          style={{ visibility: \"hidden\" }}\r\n          onChange={this.handleChange.bind(this)}\r\n          data-buttonText=\"ff\"\r\n        /> */}\r\n        {!this.props.boundsOnly && (\r\n          <>\r\n            <div>\r\n              <MapBtnsComponent {...this.props}></MapBtnsComponent>\r\n            </div>\r\n\r\n            <div>\r\n              <MapComponent\r\n                mapload={this.mapLoaded.bind(this)}\r\n                {...this.props}\r\n              ></MapComponent>\r\n\r\n              {mapLoaded}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {polygons.length > 0 && (\r\n          <Tabs\r\n            style={{ marginTop: \"30px\" }}\r\n            tabPosition=\"top\"\r\n            type=\"card\"\r\n            activeKey={this.state.activeKey}\r\n            onChange={this.onChange}\r\n          >\r\n            {polygons.map((polygon, key) => {\r\n              return (\r\n                <TabPane\r\n                  tab={convertToArabic(polygon.parcel_name)}\r\n                  key={key + 1}\r\n                >\r\n                  <div key={key}>\r\n                    {polygon.layerName?.toLowerCase() !=\r\n                      \"notPlus\"?.toLowerCase() && (\r\n                      <div>مساحة الأرض : {polygon.area.toFixed(2)} م2</div>\r\n                    )}\r\n\r\n                    {polygon.layerName?.toLowerCase() !=\r\n                      \"notPlus\"?.toLowerCase() && (\r\n                      <DragDropContext onDragEnd={this.onDragEnd}>\r\n                        <div style={itemContainerNorth}>\r\n                          <p style={{ textAlign: \"center\", fontSize: \"18px\" }}>\r\n                            الشمال\r\n                          </p>\r\n\r\n                          {boundsFields.north.map((field) => (\r\n                            <input\r\n                              {...field}\r\n                              className=\"ant-input\"\r\n                              placeholder={field.placeholder}\r\n                              required={\r\n                                polygon.layerName?.toLowerCase() !=\r\n                                \"plus\"?.toLowerCase()\r\n                              }\r\n                              value={polygon[field.name]}\r\n                              onChange={this.updateBound.bind(\r\n                                this,\r\n                                polygon,\r\n                                field.name\r\n                              )}\r\n                            />\r\n                          ))}\r\n\r\n                          {!this.props.boundsOnly && (\r\n                            <Droppable droppableId=\"droppable_North\">\r\n                              {(provided, snapshot) => (\r\n                                <div\r\n                                  ref={provided.innerRef}\r\n                                  style={getListStyle(snapshot.isDraggingOver)}\r\n                                >\r\n                                  {this.state.northBoundries.map(\r\n                                    (item, index) => (\r\n                                      <Draggable\r\n                                        key={item.id}\r\n                                        draggableId={item.id}\r\n                                        index={index}\r\n                                      >\r\n                                        {(provided, snapshot) => (\r\n                                          <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                              snapshot.isDragging,\r\n                                              provided.draggableProps.style\r\n                                            )}\r\n                                          >\r\n                                            {item.content}\r\n                                          </div>\r\n                                        )}\r\n                                      </Draggable>\r\n                                    )\r\n                                  )}\r\n                                  {provided.placeholder}\r\n                                </div>\r\n                              )}\r\n                            </Droppable>\r\n                          )}\r\n                          <p style={{ textAlign: \"left\", fontSize: \"20px\" }}>\r\n                            طول الحد : {polygon.data[0].totalLength}\r\n                          </p>\r\n                        </div>\r\n\r\n                        <div style={{ display: \"flex\" }}>\r\n                          <div style={itemContainerEast}>\r\n                            <p\r\n                              style={{ textAlign: \"center\", fontSize: \"18px\" }}\r\n                            >\r\n                              الشرق\r\n                            </p>\r\n\r\n                            {boundsFields.east.map((field) => (\r\n                              <input\r\n                                {...field}\r\n                                className=\"ant-input\"\r\n                                placeholder={field.placeholder}\r\n                                required={\r\n                                  polygon.layerName?.toLowerCase() !=\r\n                                  \"plus\"?.toLowerCase()\r\n                                }\r\n                                value={polygon[field.name]}\r\n                                onChange={this.updateBound.bind(\r\n                                  this,\r\n                                  polygon,\r\n                                  field.name\r\n                                )}\r\n                              />\r\n                            ))}\r\n\r\n                            {!this.props.boundsOnly && (\r\n                              <Droppable droppableId=\"droppable_East\">\r\n                                {(provided, snapshot) => (\r\n                                  <div\r\n                                    ref={provided.innerRef}\r\n                                    style={getListStyle(\r\n                                      snapshot.isDraggingOver\r\n                                    )}\r\n                                  >\r\n                                    {this.state.eastBoundries.map(\r\n                                      (item, index) => (\r\n                                        <Draggable\r\n                                          key={item.id}\r\n                                          draggableId={item.id}\r\n                                          index={index}\r\n                                        >\r\n                                          {(provided, snapshot) => (\r\n                                            <div\r\n                                              ref={provided.innerRef}\r\n                                              {...provided.draggableProps}\r\n                                              {...provided.dragHandleProps}\r\n                                              style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                              )}\r\n                                            >\r\n                                              {item.content}\r\n                                            </div>\r\n                                          )}\r\n                                        </Draggable>\r\n                                      )\r\n                                    )}\r\n                                    {provided.placeholder}\r\n                                  </div>\r\n                                )}\r\n                              </Droppable>\r\n                            )}\r\n                            <p style={{ textAlign: \"left\", fontSize: \"20px\" }}>\r\n                              طول الحد : {polygon.data[1].totalLength}\r\n                            </p>\r\n                          </div>\r\n\r\n                          <div style={itemContainerEmpty}> </div>\r\n                          <div style={itemContainerWeast}>\r\n                            <p\r\n                              style={{ textAlign: \"center\", fontSize: \"18px\" }}\r\n                            >\r\n                              الغرب\r\n                            </p>\r\n\r\n                            {boundsFields.west.map((field) => (\r\n                              <input\r\n                                {...field}\r\n                                className=\"ant-input\"\r\n                                placeholder={field.placeholder}\r\n                                required={\r\n                                  polygon.layerName?.toLowerCase() !=\r\n                                  \"plus\"?.toLowerCase()\r\n                                }\r\n                                value={polygon[field.name]}\r\n                                onChange={this.updateBound.bind(\r\n                                  this,\r\n                                  polygon,\r\n                                  field.name\r\n                                )}\r\n                              />\r\n                            ))}\r\n\r\n                            {!this.props.boundsOnly && (\r\n                              <Droppable droppableId=\"droppable_Weast\">\r\n                                {(provided, snapshot) => (\r\n                                  <div\r\n                                    ref={provided.innerRef}\r\n                                    style={getListStyle(\r\n                                      snapshot.isDraggingOver\r\n                                    )}\r\n                                  >\r\n                                    {this.state.weastBoundries.map(\r\n                                      (item, index) => (\r\n                                        <Draggable\r\n                                          key={item.id}\r\n                                          draggableId={item.id}\r\n                                          index={index}\r\n                                        >\r\n                                          {(provided, snapshot) => (\r\n                                            <div\r\n                                              ref={provided.innerRef}\r\n                                              {...provided.draggableProps}\r\n                                              {...provided.dragHandleProps}\r\n                                              style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                              )}\r\n                                            >\r\n                                              {item.content}\r\n                                            </div>\r\n                                          )}\r\n                                        </Draggable>\r\n                                      )\r\n                                    )}\r\n                                    {provided.placeholder}\r\n                                  </div>\r\n                                )}\r\n                              </Droppable>\r\n                            )}\r\n\r\n                            <p style={{ textAlign: \"left\", fontSize: \"20px\" }}>\r\n                              طول الحد : {polygon.data[3].totalLength}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div style={itemContainerSouth}>\r\n                          <p style={{ textAlign: \"center\", fontSize: \"18px\" }}>\r\n                            الجنوب\r\n                          </p>\r\n\r\n                          {boundsFields.south.map((field) => (\r\n                            <input\r\n                              {...field}\r\n                              className=\"ant-input\"\r\n                              placeholder={field.placeholder}\r\n                              required={\r\n                                polygon.layerName?.toLowerCase() !=\r\n                                \"plus\"?.toLowerCase()\r\n                              }\r\n                              value={polygon[field.name]}\r\n                              onChange={this.updateBound.bind(\r\n                                this,\r\n                                polygon,\r\n                                field.name\r\n                              )}\r\n                            />\r\n                          ))}\r\n\r\n                          {!this.props.boundsOnly && (\r\n                            <Droppable droppableId=\"droppable_South\">\r\n                              {(provided, snapshot) => (\r\n                                <div\r\n                                  ref={provided.innerRef}\r\n                                  style={getListStyle(snapshot.isDraggingOver)}\r\n                                >\r\n                                  {this.state.southBoundries &&\r\n                                    this.state.southBoundries.map(\r\n                                      (item, index) => (\r\n                                        <Draggable\r\n                                          key={item.id}\r\n                                          draggableId={item.id}\r\n                                          index={index}\r\n                                        >\r\n                                          {(provided, snapshot) => (\r\n                                            <div\r\n                                              ref={provided.innerRef}\r\n                                              {...provided.draggableProps}\r\n                                              {...provided.dragHandleProps}\r\n                                              style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                              )}\r\n                                            >\r\n                                              {item.content}\r\n                                            </div>\r\n                                          )}\r\n                                        </Draggable>\r\n                                      )\r\n                                    )}\r\n                                  {provided.placeholder}\r\n                                </div>\r\n                              )}\r\n                            </Droppable>\r\n                          )}\r\n                          <p style={{ textAlign: \"left\", fontSize: \"20px\" }}>\r\n                            طول الحد : {polygon.data[4].totalLength}\r\n                          </p>\r\n                        </div>\r\n                      </DragDropContext>\r\n                    )}\r\n                  </div>\r\n                  {!this.props.boundsOnly && (\r\n                    <>\r\n                      <div className=\"col-xs-12\">\r\n                        <div>\r\n                          {polygon.layerName?.toLowerCase() !=\r\n                            \"plus\"?.toLowerCase() &&\r\n                            polygon.layerName?.toLowerCase() !=\r\n                              \"notPlus\"?.toLowerCase() &&\r\n                            polygon.layerName?.toLowerCase() !=\r\n                              \"full_boundry\"?.toLowerCase() && (\r\n                              // <input\r\n                              //   className=\"ant-input\"\r\n                              //   placeholder=\"رقم الأرض\"\r\n                              //   style={{\r\n                              //     width: \"450px\",\r\n                              //     float: \"left\",\r\n                              //     marginTop: \"50px\",\r\n                              //     fontSize: \"18px\",\r\n                              //     height: \"50px\",\r\n                              //     marginLeft: \"20px\",\r\n                              //   }}\r\n                              //   required={true}\r\n                              //   value={this.state[\"parcel_Name\" + key]}\r\n                              //   onChange={this.updateParcel.bind(this, polygon, key)}\r\n                              // />\r\n                              <Select\r\n                                getPopupContainer={(trigger) =>\r\n                                  trigger.parentNode\r\n                                }\r\n                                name=\"parcel_Name\"\r\n                                onChange={(val) => {\r\n                                  this.updateParcel(polygon, key, {\r\n                                    target: {\r\n                                      value: val,\r\n                                      name: \"parcel_Name\",\r\n                                    },\r\n                                  });\r\n                                }}\r\n                                placeholder=\"رقم قطعة الارض\"\r\n                                value={this.state[`parcel_Name${key}`]}\r\n                                style={{\r\n                                  width: \"450px\",\r\n                                  float: \"left\",\r\n                                  marginTop: \"50px\",\r\n                                  fontSize: \"18px\",\r\n                                  height: \"50px\",\r\n                                  marginLeft: \"20px\",\r\n                                }}\r\n                              >\r\n                                {parcels?.map((e, i) => {\r\n                                  return (\r\n                                    <Option\r\n                                      key={e.attributes.PARCEL_SPATIAL_ID}\r\n                                      value={e.attributes.PARCEL_PLAN_NO}\r\n                                    >\r\n                                      {convertToArabic(\r\n                                        e.attributes.PARCEL_PLAN_NO\r\n                                      )}\r\n                                    </Option>\r\n                                  );\r\n                                })}\r\n                              </Select>\r\n                            )}\r\n\r\n                          <input\r\n                            className=\"ant-input\"\r\n                            placeholder=\"المساحة بالحروف\"\r\n                            style={{\r\n                              width: \"450px\",\r\n                              float: \"left\",\r\n                              marginTop: \"50px\",\r\n                              fontSize: \"18px\",\r\n                              height: \"50px\",\r\n                              marginLeft: \"20px\",\r\n                            }}\r\n                            required={true}\r\n                            value={this.state[\"parcel_area_desc\" + key]}\r\n                            onChange={this.updateParcelDesc.bind(\r\n                              this,\r\n                              polygon,\r\n                              key\r\n                            )}\r\n                          />\r\n\r\n                          {polygon.layerName?.toLowerCase() ==\r\n                            \"notPlus\"?.toLowerCase() && (\r\n                            <input\r\n                              className=\"ant-input\"\r\n                              type=\"number\"\r\n                              placeholder=\"المساحة بالأرقام\"\r\n                              style={{\r\n                                width: \"450px\",\r\n                                float: \"left\",\r\n                                marginTop: \"50px\",\r\n                                fontSize: \"18px\",\r\n                                height: \"50px\",\r\n                                marginLeft: \"20px\",\r\n                              }}\r\n                              required={true}\r\n                              value={this.state[\"parcel_area_\" + key]}\r\n                              onChange={this.updateParcelArea.bind(\r\n                                this,\r\n                                polygon,\r\n                                key\r\n                              )}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                  {!this.props.boundsOnly && (\r\n                    <>\r\n                      <div className=\"col-xs-12\">\r\n                        <div>\r\n                          <h1 className=\"titleSelectedParcel\">شطفات الأرض</h1>\r\n\r\n                          <table\r\n                            className=\"table table-bordered tb-edit\"\r\n                            style={{ border: \"1px solid #e1dbdb\" }}\r\n                          >\r\n                            <tr>\r\n                              <td style={{ padding: \"8px\" }}>الأتجاة</td>\r\n                              <td style={{ padding: \"8px\" }}>شمال / شرق</td>\r\n                              <td style={{ padding: \"8px\" }}>شمال / غرب</td>\r\n                              <td style={{ padding: \"8px\" }}>جنوب / شرق</td>\r\n                              <td style={{ padding: \"8px\" }}>جنوب / غرب</td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>الشطفة</td>\r\n                              <td style={{ paddingLeft: \"20px\" }}>\r\n                                <input\r\n                                  className=\"ant-input\"\r\n                                  placeholder=\"طول الشطفة\"\r\n                                  style={{}}\r\n                                  type=\"number\"\r\n                                  step=\"0.01\"\r\n                                  value={this.state[\"shtfa_northeast\" + key]}\r\n                                  onChange={this.updateInputValue.bind(\r\n                                    this,\r\n                                    polygon,\r\n                                    \"shtfa_northeast\",\r\n                                    key\r\n                                  )}\r\n                                />\r\n                              </td>\r\n                              <td style={{ paddingLeft: \"20px\" }}>\r\n                                <input\r\n                                  className=\"ant-input\"\r\n                                  placeholder=\"طول الشطفة\"\r\n                                  style={{}}\r\n                                  type=\"number\"\r\n                                  step=\"0.01\"\r\n                                  value={this.state[\"shtfa_northweast\" + key]}\r\n                                  onChange={this.updateInputValue.bind(\r\n                                    this,\r\n                                    polygon,\r\n                                    \"shtfa_northweast\",\r\n                                    key\r\n                                  )}\r\n                                />\r\n                              </td>\r\n                              <td style={{ paddingLeft: \"20px\" }}>\r\n                                <input\r\n                                  className=\"ant-input\"\r\n                                  placeholder=\"طول الشطفة\"\r\n                                  style={{}}\r\n                                  type=\"number\"\r\n                                  step=\"0.01\"\r\n                                  value={this.state[\"shtfa_southeast\" + key]}\r\n                                  onChange={this.updateInputValue.bind(\r\n                                    this,\r\n                                    polygon,\r\n                                    \"shtfa_southeast\",\r\n                                    key\r\n                                  )}\r\n                                />\r\n                              </td>\r\n                              <td style={{ paddingLeft: \"20px\" }}>\r\n                                <input\r\n                                  className=\"ant-input\"\r\n                                  placeholder=\"طول الشطفة\"\r\n                                  style={{}}\r\n                                  type=\"number\"\r\n                                  step=\"0.01\"\r\n                                  value={this.state[\"shtfa_southweast\" + key]}\r\n                                  onChange={this.updateInputValue.bind(\r\n                                    this,\r\n                                    polygon,\r\n                                    \"shtfa_southweast\",\r\n                                    key\r\n                                  )}\r\n                                />\r\n                              </td>\r\n                            </tr>\r\n                          </table>\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                  {!this.props.boundsOnly &&\r\n                    this.state.activeKey == key + 1 && (\r\n                      <div class=\"col-xs-12\">\r\n                        <Form>\r\n                          {this.elec_fields.map((field) => {\r\n                            return (\r\n                              (!field.permission ||\r\n                                (field.permission &&\r\n                                  apply_field_permission(\r\n                                    polygon,\r\n                                    field,\r\n                                    this.props\r\n                                  ))) && (\r\n                                <>\r\n                                  <>\r\n                                    {(field.field != \"checkbox\" &&\r\n                                      field.label) ||\r\n                                      \"\"}\r\n                                  </>\r\n                                  <input\r\n                                    className=\"ant-input\"\r\n                                    key={field.name + key}\r\n                                    name={field.name}\r\n                                    type={field.field}\r\n                                    required={true}\r\n                                    placeholder={field.label}\r\n                                    onChange={(event, val, props) => {\r\n                                      if (event?.target?.name) {\r\n                                        polygon[event?.target?.name] =\r\n                                          field.field == \"checkbox\"\r\n                                            ? event?.target?.checked\r\n                                            : event?.target?.value;\r\n                                        this.settoStore(polygons);\r\n                                        this.setState({ polygons });\r\n                                      }\r\n                                    }}\r\n                                    value={polygon[field.name]}\r\n                                    checked={polygon[field.name]}\r\n                                  />\r\n                                  {field.field == \"checkbox\" && (\r\n                                    <p style={{ marginTop: \"-20px\" }}>\r\n                                      {field.label || \"\"}\r\n                                    </p>\r\n                                  )}\r\n                                </>\r\n                              )\r\n                            );\r\n                          })}\r\n                        </Form>\r\n                      </div>\r\n                    )}\r\n                </TabPane>\r\n              );\r\n            })}\r\n          </Tabs>\r\n        )}\r\n\r\n        {polygons.find((p) => {\r\n          return (\r\n            p.layerName?.toLowerCase() == \"plus\"?.toLowerCase() && p.area > 100\r\n          );\r\n        }) && (\r\n          <Form style={{ direction: \"rtl\", marginTop: \"10px\" }}>\r\n            {this.fields.map((field) => {\r\n              return (\r\n                <Field\r\n                  key={field.name}\r\n                  name={field.name}\r\n                  component={RenderField}\r\n                  {...field}\r\n                />\r\n              );\r\n            })}\r\n          </Form>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SuggestParcelFiled);\r\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAiuGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAmCA;AAEA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AAKA;AAQA;AACA;AACA;AAEA;AAEA;AACA;AAQA;AACA;AACA;AAEA;AAQA;AACA;AAKA;AACA;AAEA;AACA;AAwkhDA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAIA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAMA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAUA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAwaaA;AACA;AAQA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAQA;AAGA;AAaoLA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAqBA;AAAA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAGA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AAAA;AAGA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAIA;AAAA;AAGA;AAGA;AAaA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAGA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AAAA;AAGA;AACA;AAEA;AAKA;AACA;AACA;AAAA;AAIA;AAAA;AAGA;AAGA;AAaA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAGA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AAAA;AAGA;AACA;AAEA;AAKA;AACA;AACA;AAAA;AAIA;AAAA;AAGA;AAGA;AAcA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAGA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AAAA;AAGA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AAIA;AAAA;AAGA;AAGA;AAaA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AASA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAWA;AAAA;AAGA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAOA;AAMA;AAIA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAIA;AAKA;AACA;AACA;;;;A","sourceRoot":""}
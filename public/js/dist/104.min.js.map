{"version":3,"file":"104.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/farzIdentifyComponnent/index.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { esriRequest } from \"../common/esri_request\";\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  addParcelNo,\r\n  convertToArabic,\r\n  getPacrelNoAngle,\r\n  drawLength,\r\n  convertToEnglish,\r\n  map_object,\r\n  delete_null_object,\r\n  checkParcelAdjacents,\r\n  localizeNumber,\r\n  uploadGISFile,\r\n  validation,\r\n} from \"../common/common_func\";\r\nimport {\r\n  getParcels,\r\n  onBlockChange,\r\n  onLandParcelChange,\r\n  onMunChange,\r\n  onPlaneChange,\r\n  onSearch,\r\n  onSubNameChange,\r\n  onSubTypeChange,\r\n} from \"../common\";\r\nimport store from \"reducers\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { geometryServiceUrl, mapUrl } from \"../mapviewer/config/map\";\r\nimport { Select, Button, Form, message } from \"antd\";\r\n// import \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nimport { StickyContainer, Sticky } from \"react-sticky\";\r\nvar uniqid = require(\"uniqid\");\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n  reject,\r\n} from \"lodash\";\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport axios from \"axios\";\r\nimport { host } from \"config\";\r\nconst { Option } = Select;\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"lands\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\n\r\nclass farzIdentifyComponnent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.PlanNum = [];\r\n    this.planId = null;\r\n    this.parcelTs = [];\r\n    this.selectedLandsT =\r\n      (props?.input?.value?.temp?.parcelDis && [\r\n        { features: props?.input?.value?.temp?.parcelDis },\r\n      ]) ||\r\n      [];\r\n    this.selectedLands = [];\r\n    this.selectionMode = false;\r\n\r\n    this.parcel_fields_headers = this.props.parcel_fields_headers || [\r\n      \"رقم الأرض\",\r\n      \"المساحة (م۲)\",\r\n      \"رقم المخطط\",\r\n      \"رقم البلك\",\r\n      \"الحي\",\r\n      \"نوع التقسيم\",\r\n      \"اسم التقسيم\",\r\n      \"رمز الإستخدام\",\r\n    ];\r\n    this.parcel_fields = this.props.parcel_fields || [\r\n      { name: \"PARCEL_PLAN_NO\", editable: false, type: \"text\" },\r\n      {\r\n        name: \"PARCEL_AREA\",\r\n        editable: (!this.props.isView && true) || false,\r\n        type: \"number\",\r\n      },\r\n      {\r\n        name: \"PLAN_NO\",\r\n        editable: (!this.props.isView && true) || false,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        name: \"PARCEL_BLOCK_NO\",\r\n        editable: (!this.props.isView && true) || false,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        name: \"DISTRICT_NAME\",\r\n        editable: (!this.props.isView && true) || false,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        name: \"SUBDIVISION_TYPE\",\r\n        editable: (!this.props.isView && true) || false,\r\n        type: \"select\",\r\n      },\r\n      {\r\n        name: \"SUBDIVISION_DESCRIPTION\",\r\n        editable: (!this.props.isView && true) || false,\r\n        type: \"text\",\r\n      },\r\n      { name: \"USING_SYMBOL\", editable: false },\r\n    ];\r\n\r\n    this.checkUnitNumberAvailability(\r\n      [...((props.input && props.input.value.parcels) || [])],\r\n      props?.input?.value?.temp?.mun\r\n    );\r\n\r\n    this.parcelDataFields = {};\r\n\r\n    if (\r\n      ([22, 23].indexOf(props.currentModule.id) != -1 ||\r\n        [1928].indexOf(props.currentModule.record.workflow_id) != -1) &&\r\n      props.is_parcel_type\r\n    ) {\r\n      this.parcelDataFields[\"parcel_type\"] = {\r\n        label: \"عبارة عن\",\r\n        placeholder: \"من فضلك اخل نوع الأرض\",\r\n        type: \"text\",\r\n        name: \"parcel_type\",\r\n        required: true,\r\n        // label: \"عبارة عن\",\r\n        // placeholder: \"من فضلك اخل نوع الأرض\",\r\n        // type: \"input\",\r\n        // field: \"select\",\r\n        // className: \"select_flex\",\r\n        // name: \"parcel_type\",\r\n        // data: [\r\n        //   { label: \"أرض فضاء\", value: \"أرض فضاء\" },\r\n        //   { label: \"مبنى سكني\", value: \"مبنى سكني\" },\r\n        //   { label: \"ورشة\", value: \"ورشة\" },\r\n        //   { label: \"أخرى\", value: \"أخرى\" },\r\n        // ],\r\n        // required: true,\r\n      };\r\n    }\r\n    this.parcelDataFields[\"north_length\"] = {\r\n      label: \"طول الحد الشمالي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الشمالي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"north_length\",\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"north_desc\"] = {\r\n      label: \"وصف الحد الشمالي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشمالي\",\r\n      type: \"text\",\r\n      name: \"north_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"south_length\"] = {\r\n      label: \"طول الحد الجنوبي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الجنوبي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"south_length\",\r\n      required: true,\r\n    };\r\n    (this.parcelDataFields[\"south_desc\"] = {\r\n      label: \"وصف الحد الجنوبي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الجنوبي\",\r\n      type: \"text\",\r\n      name: \"south_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    }),\r\n      (this.parcelDataFields[\"east_length\"] = {\r\n        label: \"طول الحد الشرقي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الشرقي (م)\",\r\n        field: \"inputNumber\",\r\n        name: \"east_length\",\r\n        required: true,\r\n      });\r\n    this.parcelDataFields[\"east_desc\"] = {\r\n      label: \"وصف الحد الشرقي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشرقي\",\r\n      type: \"text\",\r\n      name: \"east_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"west_length\"] = {\r\n      label: \"طول الحد الغربي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الغربي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"west_length\",\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"west_desc\"] = {\r\n      label: \"وصف الحد الغربي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الغربي\",\r\n      type: \"text\",\r\n      name: \"west_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n\r\n    map_object(props.input && props.input.value.parcels);\r\n\r\n    this.state = {\r\n      boundariesBtnIsVisible:\r\n        this.props.boundariesBtnIsVisible != undefined\r\n          ? this.props.boundariesBtnIsVisible\r\n          : true,\r\n      mapLoaded: false,\r\n      munval:\r\n        (props.input && props.input.value.temp && props.input.value.temp.mun) ||\r\n        undefined,\r\n      planeval:\r\n        this.props.mainObject?.landData?.landData?.PLAN_NO ||\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.plan) ||\r\n        undefined,\r\n      subTypeval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.subTypeval) ||\r\n        undefined,\r\n      subNameval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.subNameval) ||\r\n        undefined,\r\n      blockval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.blockval) ||\r\n        undefined,\r\n      selectedLands: (props.input && props.input.value.parcels) || [],\r\n      parcelval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.parcelval) ||\r\n        undefined,\r\n      blockNum: [],\r\n      subDivNames: [],\r\n      subDivType: [],\r\n      MunicipalityNames: [],\r\n      PlanNum: [],\r\n      // blockNum:\r\n      //   (props.input.value.lists && props.input.value.lists.blockNum) || [],\r\n      conditions: (props.input && props.input.value.conditions) || undefined,\r\n      planSersh: null,\r\n      // subDivNames:\r\n      //   (props.input.value.lists && props.input.value.lists.subDivNames) || [],\r\n      // subDivType:\r\n      //   (props.input.value.lists && props.input.value.lists.subDivType) || [],\r\n      parcelNum: this.props?.input?.value?.temp?.parcelDis || [],\r\n      parcelNumS: [],\r\n      // MunicipalityNames:\r\n      //   (props.input.value.lists &&\r\n      //     props.input.value.lists.MunicipalityNames) ||\r\n      //   [],\r\n      requestTypes: [\r\n        { code: 1, name: \"فرز\", key: \"\" },\r\n        { code: 2, name: \"دمج\", key: \"\" },\r\n        //{ code: 3, name: \"تقسيم\", key: \"\" },\r\n      ],\r\n      // PlanNum:\r\n      //   (props.input.value.lists && props.input.value.lists.PlanNum) || [],\r\n      parcelId: null,\r\n      mapExtend: null,\r\n      parcelSearch: null,\r\n      poly: null,\r\n      selectedRequestType:\r\n        props?.input?.value?.selectedRequestType ||\r\n        ([2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n          -1 &&\r\n          1) ||\r\n        props?.mainObject?.landData?.requestType ||\r\n        \"\",\r\n      parcelData: props.input.value.parcelData || {},\r\n      landsData: {},\r\n      domainLists: props.input.value.domainLists || {},\r\n      city_name: props?.input?.value?.temp?.city_name,\r\n    };\r\n\r\n    this.isloaded = true;\r\n  }\r\n  LayerID = [];\r\n\r\n  UpdateSubmissionDataObject = () => {\r\n    const { parcelData } = this.state;\r\n    var fields = { ...parcelData.fields };\r\n    Object.keys(fields).map((key, index) => {\r\n      parcelData[key] = fields[key].value;\r\n    });\r\n    this.state.landsData = {\r\n      ...this.props.input.value,\r\n      parcels: [...this.state.selectedLands],\r\n      parcelData: { ...parcelData },\r\n      domainLists: { ...this.state.domainLists },\r\n      // lists: {\r\n      //   firstParcels: [...this.state.parcelNum],\r\n      //   subDivNames: [...this.state.subDivNames],\r\n      //   MunicipalityNames: [...this.state.MunicipalityNames],\r\n      //   subDivType: [...this.state.subDivType],\r\n      //   PlanNum: [...this.state.PlanNum],\r\n      //   blockNum: [...this.state.blockNum],\r\n      // },\r\n      selectedRequestType: (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n      [1928].indexOf(this.props?.currentModule?.record?.workflow_id) != -1) &&\r\n      [2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n        -1 &&\r\n      this.state.selectedRequestType) ||\r\n    ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n      \"فرد\") ||\r\n    ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n      \"اصدار الكروكي (المواطن)\") ||\r\n    3\r\n    };\r\n\r\n    this.state.landsData[\"selectedRequestType\"] =\r\n      (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n        [1928].indexOf(this.props?.currentModule?.record?.workflow_id) != -1) &&\r\n        [2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n          -1 &&\r\n        this.state.selectedRequestType) ||\r\n      ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"فرد\") ||\r\n      ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"اصدار الكروكي (المواطن)\") ||\r\n      3;\r\n    this.setState({ parcelData: parcelData }, () => {\r\n      this.setToStore();\r\n    });\r\n  };\r\n\r\n  parcelQueryTask = (value) => {\r\n    this.setState({\r\n      selectedLands: [],\r\n      selectedLandsT: [],\r\n      parcelId: null,\r\n      parcelNum: [],\r\n      parcelData: {},\r\n      selectedRequestType: value,\r\n    });\r\n    esriRequest(mapUrl + \"/\" + this.LayerID[\"Landbase_Parcel\"]).then(\r\n      (response) => {\r\n        let { domainLists } = this.state;\r\n        domainLists.usingSymbols = [];\r\n        domainLists.districtNames = [];\r\n        domainLists.SUB_MUNICIPALITY_NAME_Domains = [];\r\n        domainLists.cityNames = [];\r\n        response.fields.forEach(function (val) {\r\n          //;\r\n          if (val.name === \"USING_SYMBOL\") {\r\n            // list.push(val.domain);\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              // ////\r\n              domainLists.usingSymbols.push(domain);\r\n            });\r\n          } else if (val.name === \"DISTRICT_NAME\") {\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              // ////\r\n              domainLists.districtNames.push(domain);\r\n            });\r\n          } else if (val.name === \"SUB_MUNICIPALITY_NAME\") {\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              // ////\r\n              domainLists.SUB_MUNICIPALITY_NAME_Domains.push(domain);\r\n            });\r\n          } else if (val.name === \"CITY_NAME\") {\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              domainLists.cityNames.push(domain);\r\n            });\r\n          }\r\n        });\r\n        this.DrawGraph();\r\n        this.UpdateSubmissionDataObject();\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (\r\n      // this.props.mainObject &&\r\n      // this.props.mainObject.landData &&\r\n      this.isloaded\r\n    ) {\r\n      window.filterUrl = mapUrl;\r\n      getInfo().then((res) => {\r\n        this.LayerID = res;\r\n        getParcels(this, null, \"\", {returnDistinctValues: true}, [\"MUNICIPALITY_NAME\"]).then((features) => {\r\n          \r\n          getFeatureDomainName(features, this.LayerID.Landbase_Parcel).then(\r\n            (features) => {\r\n              \r\n              this.setState(\r\n                {\r\n                  MunicipalityNames: features.filter(r => r.attributes.MUNICIPALITY_NAME).map((r) => {\r\n                      \r\n                      return {\r\n                        code: r.attributes.MUNICIPALITY_NAME_Code,\r\n                        name: r.attributes.MUNICIPALITY_NAME,\r\n                      };\r\n                    }),\r\n                  allParcels: features,\r\n                },\r\n              () => {\r\n                \r\n                this.loadLists = true;\r\n                if (this.state.munval) {\r\n                  onMunChange(this, this.state.munval, () => {\r\n                    onPlaneChange(this, this.state.planeval, () => {\r\n                      onSubTypeChange(this, this.state.subTypeval, () => {\r\n                        onSubNameChange(this, this.state.subNameval, () => {\r\n                          onBlockChange(this, this.state.blockval, () => {\r\n                            onLandParcelChange(\r\n                              this,\r\n                              this.state.parcelval,\r\n                              () => {}\r\n                            );\r\n                          });\r\n                        });\r\n                      });\r\n                    });\r\n                  });\r\n                }\r\n                this.loadLists = false;\r\n              }\r\n            );\r\n          }\r\n        );\r\n      });\r\n        esriRequest(mapUrl + \"/\" + this.LayerID.Subdivision).then(\r\n          (response) => {\r\n            if (this.parcel_fields[5]) {\r\n              this.parcel_fields[5].options =\r\n                response.fields[7].domain.codedValues;\r\n            }\r\n            this.setState({\r\n              subDivType: response.fields[7].domain.codedValues,\r\n            });\r\n            //this.forceUpdate();\r\n          }\r\n        );\r\n      });\r\n    \r\n      this.isloaded = false;\r\n    }\r\n  }\r\n\r\n  resetFields = () => {\r\n    this.props.onChange([]);\r\n    this.setState({ selectedLands: [], selectedLandsT: [] });\r\n  };\r\n\r\n  resetGraphics = () => {\r\n    this.state[\"selectedLands\"] = [];\r\n    this.state[\"selectedLandsT\"] = [];\r\n    this.parcelData = {};\r\n    this.DrawGraph();\r\n  };\r\n\r\n  // onMunChange = (e, callback) => {\r\n  //   //\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   if (!callback) {\r\n  //     this.setState({\r\n  //       munval: e,\r\n  //       planeval: undefined,\r\n  //       subTypeval: undefined,\r\n  //       subNameval: undefined,\r\n  //       blockval: undefined,\r\n  //       parcelval: undefined,\r\n  //       // selectedLands: [],\r\n  //       // selectedLandsT: [],\r\n  //       PlanNum: [],\r\n  //       blockNum: [],\r\n  //       subDivNames: [],\r\n  //       //subDivType: [],\r\n  //       parcelId: null,\r\n  //       parcelNum: [],\r\n  //       parcelData: {},\r\n  //     });\r\n  //   }\r\n  //   this.planId = null;\r\n  //   if (e) {\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Municipality_Boundary,\r\n  //         `MUNICIPALITY_NAME='${e}'`,\r\n  //         true,\r\n  //         [\"*\"]\r\n  //       ),\r\n  //       callbackResult: (res) => {\r\n  //         this.pol = res.features[0];\r\n  //         highlightFeature(this.pol, this.map, {\r\n  //           layerName: \"SelectGraphicLayer\",\r\n  //           isZoom: true,\r\n  //           isHiglightSymbol: true,\r\n  //           highlighColor: [0, 0, 0, 0.25],\r\n  //         });\r\n  //         this.setState({ city_name: this.pol?.attributes?.CITY_NAME_A || \"\" });\r\n  //       },\r\n  //     });\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Plan_Data,\r\n  //         `MUNICIPALITY_NAME='${e}'`,\r\n  //         false,\r\n  //         [\"PLAN_SPATIAL_ID\", \"PLAN_NO\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         this.setState({\r\n  //           PlanNum: res.features.map((e, i) => {\r\n  //             return {\r\n  //               ...e,\r\n  //               i: uniqid(),\r\n  //             };\r\n  //           }),\r\n  //         });\r\n  //       },\r\n  //     });\r\n  //   }\r\n  //   this.resetGraphics();\r\n  //   if (callback) {\r\n  //     callback();\r\n  //   }\r\n  // };\r\n\r\n  // onPlaneChange = (f, callback) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n\r\n  //   var planSpatialId = this.state.PlanNum.filter((m) => m.i == f)?.[0]?.attributes\r\n  //     ?.PLAN_SPATIAL_ID;\r\n  //   if (!callback) {\r\n  //     this.setState({\r\n  //       plan_no: this.state.PlanNum.filter((m) => m.i == f)?.[0]?.attributes\r\n  //         ?.PLAN_NO,\r\n  //       planeval: f,\r\n  //       subTypeval: undefined,\r\n  //       subNameval: undefined,\r\n  //       blockval: undefined,\r\n  //       parcelval: undefined,\r\n  //       blockNum: [],\r\n  //       subDivNames: [],\r\n  //       // subDivType: [],\r\n  //       parcelId: null,\r\n  //       parcelNum: [],\r\n  //       parcelData: {},\r\n  //       // selectedLands: [],\r\n  //       // selectedLandsT: [],\r\n  //     });\r\n  //   }\r\n  //   if (f) {\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Plan_Data,\r\n  //         `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //         true,\r\n  //         [\"MUNICIPALITY_NAME\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         this.pol = res.features[0];\r\n  //         highlightFeature(res.features[0], this.map, {\r\n  //           layerName: \"SelectGraphicLayer\",\r\n  //           isZoom: true,\r\n  //           isHiglightSymbol: true,\r\n  //           highlighColor: [0, 0, 0, 0.25],\r\n  //         });\r\n  //         this.planId = planSpatialId;\r\n  //       },\r\n  //     });\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Survey_Block,\r\n  //         `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //         false,\r\n  //         [\"BLOCK_NO\", \"BLOCK_SPATIAL_ID\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         // var blocks = [];\r\n  //         // if (res.features) {\r\n  //         //   res.features.forEach((feature, index) => {\r\n  //         //     if (feature.attributes.Block_NO) {\r\n  //         //       blocks.splice(0, 0, feature);\r\n  //         //     }\r\n  //         //   });\r\n  //         // }\r\n  //         // this.setState({ blockNum: blocks });\r\n  //         this.setState({ blockNum: res.features });\r\n  //       },\r\n  //     });\r\n\r\n  //     this.getParcelsWithinBufferedArea(\r\n  //       this.state.PlanNum.filter((m) => m.i == f)[0],\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`\r\n  //     ).then((res) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     });\r\n  //   }\r\n  //   this.resetGraphics();\r\n  //   if (callback) {\r\n  //     callback();\r\n  //   }\r\n  // };\r\n\r\n  // onSubTypeChange = (e, callback) => {\r\n  //   this.onPlaneChange(this.state.planeval);\r\n  //   if (!callback) {\r\n  //     this.setState({\r\n  //       subType_name: this.state.subDivType.filter((m) => m.code == e)[0].name,\r\n  //       subTypeval: e,\r\n  //     });\r\n  //   }\r\n\r\n  //   if (e) {\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Subdivision,\r\n  //         `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${this.planId}`,\r\n  //         false,\r\n  //         [\"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_SPATIAL_ID\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         this.setState({ subDivNames: res.features });\r\n  //       },\r\n  //     });\r\n  //   }\r\n\r\n  //   if (callback) {\r\n  //     callback();\r\n  //   }\r\n\r\n  //   // this.onSubNameChange(this.state.subNameval);\r\n  //   // this.DrawGraph();\r\n  // };\r\n\r\n  // onSubNameChange = (value, callback) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   var selectedSubDivName = this.state.subDivNames.filter(\r\n  //     (m) =>\r\n  //       m.attributes.SUBDIVISION_SPATIAL_ID == value ||\r\n  //       m.attributes.SUBDIVISION_DESCRIPTION == value\r\n  //   )[0];\r\n  //   //if (selectedSubDivName) {\r\n  //   var e = selectedSubDivName?.attributes?.SUBDIVISION_SPATIAL_ID;\r\n  //   if (!callback) {\r\n  //     this.setState({\r\n  //       subName_name: selectedSubDivName?.attributes?.SUBDIVISION_DESCRIPTION,\r\n  //       subNameval: e,\r\n  //       blockval: undefined,\r\n  //       parcelval: undefined,\r\n  //       parcelNum: [],\r\n  //       parcelId: null,\r\n  //     });\r\n  //   }\r\n  //   if (value) {\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Subdivision,\r\n  //         `SUBDIVISION_SPATIAL_ID=${e}`,\r\n  //         true,\r\n  //         [\"SUBDIVISION_SPATIAL_ID\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         if (res) {\r\n  //           this.pol = res.features[0];\r\n  //           highlightFeature(res.features[0], this.map, {\r\n  //             layerName: \"SelectGraphicLayer\",\r\n  //             isZoom: true,\r\n  //             isHiglightSymbol: true,\r\n  //             highlighColor: [0, 0, 0, 0.25],\r\n  //           });\r\n  //         }\r\n  //       },\r\n  //     });\r\n\r\n  //     this.getParcelsWithinBufferedArea(\r\n  //       selectedSubDivName,\r\n  //       `SUBDIVISION_SPATIAL_ID=${e}`\r\n  //     ).then((res) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     });\r\n  //   }\r\n  //   this.resetGraphics();\r\n  //   if (callback) {\r\n  //     callback();\r\n  //   }\r\n  //   //}\r\n  // };\r\n\r\n  // onBlockChange = (e, callback) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   if (!callback) {\r\n  //     this.setState({\r\n  //       block_no: this.state.blockNum.filter(\r\n  //         (m) => m.attributes.BLOCK_SPATIAL_ID == e\r\n  //       )?.[0]?.attributes?.BLOCK_NO,\r\n  //       blockval: e,\r\n  //       parcelval: undefined,\r\n  //       parcelId: null,\r\n  //       parcelNum: [],\r\n  //       // selectedLands: [],\r\n  //       // selectedLandsT: [],\r\n  //     });\r\n  //   }\r\n\r\n  //   if (e) {\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Survey_Block,\r\n  //         `BLOCK_SPATIAL_ID=${e}`,\r\n  //         true,\r\n  //         [\"BLOCK_SPATIAL_ID\"]\r\n  //       ),\r\n  //       returnGeometry: true,\r\n  //       callbackResult: (res) => {\r\n  //         this.pol = res.features[0];\r\n  //         highlightFeature(res.features[0], this.map, {\r\n  //           layerName: \"SelectGraphicLayer\",\r\n  //           isZoom: true,\r\n  //           isHiglightSymbol: true,\r\n  //           highlighColor: [0, 0, 0, 0.25],\r\n  //         });\r\n  //       },\r\n  //     });\r\n\r\n  //     this.getParcelsWithinBufferedArea(\r\n  //       this.state.blockNum.filter(\r\n  //         (m) => m.attributes.BLOCK_SPATIAL_ID == e\r\n  //       )[0],\r\n  //       `BLOCK_SPATIAL_ID=${e}`\r\n  //     ).then((res) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     });\r\n  //   }\r\n\r\n  //   this.resetGraphics();\r\n\r\n  //   if (callback) {\r\n  //     callback();\r\n  //   }\r\n  // };\r\n\r\n  // onLandParcelChange = (f, callback) => {\r\n  //   if (!this.state.selectedLands.length) {\r\n  //     var e = this.state.parcelNum.filter((m) => m.i === f)?.[0]?.attributes\r\n  //       ?.PARCEL_SPATIAL_ID;\r\n  //     if (!callback) {\r\n  //       this.setState({ parcelId: e, parcelval: f });\r\n  //     }\r\n  //     this.RolBackPol = this.pol;\r\n  //     this.RolBackParcelNum = this.state.parcelNum;\r\n\r\n  //     if (f) {\r\n  //       this.getParcelsWithinBufferedArea(\r\n  //         this.RolBackPol,\r\n  //         `PARCEL_SPATIAL_ID='${e}'`\r\n  //       ).then((res) => {\r\n  //         this.selectedLandsT = [];\r\n  //         highlightFeature(res.features[0], this.map, {\r\n  //           layerName: \"SelectGraphicLayer\",\r\n  //           strokeColor: [0, 0, 0],\r\n  //           highlightWidth: 3,\r\n  //           isHighlighPolygonBorder: true,\r\n  //           isZoom: true,\r\n  //           zoomFactor: 10,\r\n  //         });\r\n  //       });\r\n  //       // queryTask({\r\n  //       //   ...querySetting(\r\n  //       //     this.LayerID.Landbase_Parcel,\r\n  //       //     `PARCEL_SPATIAL_ID='${e}'`,\r\n  //       //     true,\r\n  //       //     [\"PARCEL_SPATIAL_ID\"]\r\n  //       //   ),\r\n  //       //   callbackResult: (res) => {\r\n  //       //     this.selectedLandsT = [];\r\n  //       //     highlightFeature(res.features[0], this.map, {\r\n  //       //       layerName: \"SelectGraphicLayer\",\r\n  //       //       strokeColor: [0, 0, 0],\r\n  //       //       highlightWidth: 3,\r\n  //       //       isHighlighPolygonBorder: true,\r\n  //       //       isZoom: true,\r\n  //       //       zoomFactor: 10,\r\n  //       //     });\r\n  //       //   },\r\n  //       // });\r\n  //     }\r\n  //   } else {\r\n  //     // clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n  //     var prevParcelId = this.state.parcelId;\r\n  //     var g = this.state.parcelNum.filter((m) => m.i == f)[0];\r\n  //     this.state[\"parcelId\"] = g.attributes.PARCEL_SPATIAL_ID;\r\n  //     //this.setState({ parcelId: g.attributes.PARCEL_SPATIAL_ID });\r\n\r\n  //     this.LandHoverOff(\r\n  //       this.map\r\n  //         .getLayer(\"SelectGraphicLayer\")\r\n  //         .graphics.find(\r\n  //           (prevGraphic) =>\r\n  //             prevGraphic.attributes.PARCEL_SPATIAL_ID == prevParcelId\r\n  //         )\r\n  //     );\r\n  //     // if (\r\n  //     //   this.state.selectedLands.map(\r\n  //     //     ((land) =>\r\n  //     //       land.attributes.OBJECTID ==\r\n  //     //       this.state.parcelval.attributes.OBJECTID).length == 0\r\n  //     //   )\r\n  //     // ) {\r\n  //     //   highlightFeature([this.state.parcelval], this.map, {\r\n  //     //     layerName: \"SelectGraphicLayer\",\r\n  //     //     noclear: true,\r\n  //     //     isZoom: false,\r\n  //     //     isHiglightSymbol: true,\r\n  //     //     highlighColor: [0, 255, 0, 0.5],\r\n  //     //     attr: true,\r\n  //     //   });\r\n  //     // }\r\n  //     // // highlightFeature(g, this.map, {\r\n  //     // //   layerName: \"SelectGraphicLayer\",\r\n  //     // //   strokeColor: [0, 0, 0],\r\n  //     // //   isHighlighPolygonBorder: true,\r\n  //     // //   highlightWidth: 3,\r\n  //     // // });\r\n\r\n  //     this.setState({ parcelval: f });\r\n\r\n  //   }\r\n\r\n  //   if (callback) {\r\n  //     callback();\r\n  //   }\r\n  // };\r\n\r\n  addParcelToSelect = (feature) => {\r\n    return new Promise((resolve, reject) => {\r\n      //if (this.state.selectedLands && this.state.selectedLands.length > 0) {\r\n      this.getParcelsWithinBufferedArea(\r\n        feature,\r\n        \"PARCEL_PLAN_NO is not null\",\r\n        true\r\n      ).then((res) => {\r\n        getFeatureDomainName(res.features, this.LayerID.Landbase_Parcel).then(\r\n          (r) => {\r\n            res.features = r.map((e, i) => {\r\n              return {\r\n                ...e,\r\n                i: uniqid(),\r\n              };\r\n            });\r\n\r\n            if (\r\n              [20, 21].indexOf(this.props?.currentModule?.record.app_id) ==\r\n                -1 &&\r\n              [2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n                -1\r\n            ) {\r\n              validation(feature, this.props).then(\r\n                () => {\r\n                  return resolve(res);\r\n                },\r\n                () => {\r\n                  return reject();\r\n                }\r\n              );\r\n            } else {\r\n              return resolve(res);\r\n            }\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  getParcelsWithinBufferedArea = (feature, where, isToIntersect = false, outFields, moreSettings) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (isToIntersect) {\r\n        intersectQueryTask({\r\n          outFields: [\"*\"],\r\n          distance:\r\n            ([20, 21].indexOf(this.props?.currentModule?.record.app_id) == -1 &&\r\n              20) ||\r\n            50,\r\n          geometry: new esri.geometry.Polygon(feature.geometry),\r\n          url: mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n          where: where,\r\n          callbackResult: (res) => {\r\n            getFeatureDomainName(\r\n              res.features,\r\n              this.LayerID.Landbase_Parcel\r\n            ).then((r) => {\r\n              res.features = r;\r\n              return resolve(res);\r\n            });\r\n          },\r\n        });\r\n      } else {\r\n        queryTask({\r\n          ...querySetting(this.LayerID.Landbase_Parcel, where, false, !outFields && [\r\n            \"PARCEL_SPATIAL_ID\",\r\n            \"PARCEL_PLAN_NO\",\r\n          ] || [...outFields]),\r\n          returnGeometry: true,\r\n          callbackResult: (res) => {\r\n            return resolve(res);\r\n          },\r\n          ...moreSettings\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  DrawGraph = () => {\r\n    if (!this.state.selectedLands.length) {\r\n      this.map.graphics.clear();\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      //this.onSubNameChange(this.state.subNameval);\r\n      this.setToStore(null);\r\n    } else {\r\n      this.parcelDis = selectDis(this.selectedLandsT);\r\n      console.log(this.parcelDis);\r\n      this.setAdjacentToStore(this.parcelDis);\r\n      this.setState({ parcelNum: this.parcelDis });\r\n\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      drawLength(this.map, this.state.selectedLands);\r\n\r\n      this.parcelDis\r\n        .filter(\r\n          (element) =>\r\n            !this.state.selectedLands.find(\r\n              (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n            )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"PacrelNoGraphicLayer\",\r\n            20,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n\r\n      highlightFeature(\r\n        this.parcelDis.filter((element) =>\r\n          this.state.selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectGraphicLayer\",\r\n          noclear: true,\r\n          attr: { isParcel: true },\r\n          isZoom: true,\r\n          isHighlighPolygonBorder: true,\r\n          zoomFactor: 10,\r\n        }\r\n      );\r\n\r\n      this.parcelDis\r\n        .filter((element) =>\r\n          this.state.selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"PacrelNoGraphicLayer\",\r\n            20,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  replaceAll(str, find, replace) {\r\n    return str.replace(new RegExp(find, \"g\"), replace);\r\n  }\r\n\r\n  mapLoaded = (map) => {\r\n    this.map = map;\r\n    this.props.setMap(map);\r\n    if (\r\n      this.props.input &&\r\n      this.props.input.value &&\r\n      this.props.input.value.parcels &&\r\n      this.props.input.value.temp\r\n    ) {\r\n      highlightFeature(this.props.input.value.parcels, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: true,\r\n        attr: { isParcel: true },\r\n        isHighlighPolygonBorder: true,\r\n        zoomFactor: 10,\r\n      });\r\n\r\n      if (!this.props?.input?.value?.mapGraphics?.length) {\r\n        setTimeout(() => {\r\n          this.props.input.value.parcels.forEach((f) => {\r\n            f.geometry = new esri.geometry.Polygon(f.geometry);\r\n            addParcelNo(\r\n              f.geometry.getExtent().getCenter(),\r\n              this.map,\r\n              f.attributes.PARCEL_PLAN_NO + \"\",\r\n              \"PacrelNoGraphicLayer\",\r\n              20,\r\n              [0, 0, 0]\r\n            );\r\n          });\r\n\r\n          drawLength(this.map, this.props.input.value.parcels);\r\n          if (this.props.input.value?.temp?.parcelDis?.length) {\r\n            this.props.input.value.temp.parcelDis\r\n              .filter(\r\n                (element) =>\r\n                  !this.props.input.value.parcels.find(\r\n                    (i) =>\r\n                      i.attributes.PARCEL_SPATIAL_ID ===\r\n                      element.attributes.PARCEL_SPATIAL_ID\r\n                  )\r\n              )\r\n              .forEach((f) => {\r\n                if (!f.geometry.getExtent) {\r\n                  f.geometry = new esri.geometry.Polygon(f.geometry);\r\n                }\r\n                addParcelNo(\r\n                  f.geometry.getExtent().getCenter(),\r\n                  this.map,\r\n                  f.attributes.PARCEL_PLAN_NO + \"\",\r\n                  \"PacrelNoGraphicLayer\",\r\n                  20,\r\n                  [0, 0, 0]\r\n                );\r\n              });\r\n\r\n            console.log(this.props.input.value.temp.parcelDis);\r\n            this.setState({\r\n              parcelSearch: null,\r\n              parcelNum: this.props.input.value.temp.parcelDis,\r\n            });\r\n          } else if (this.props.input?.value?.parcels?.length) {\r\n            checkParcelAdjacents(this.props.input?.value?.parcels);\r\n          }\r\n        }, 500);\r\n      }\r\n\r\n      const {\r\n        input: { value },\r\n      } = this.props;\r\n      this.state.landsData = {\r\n        ...value,\r\n        conditions: this.state.conditions,\r\n        temp: {\r\n          //map: this.map,\r\n          mun: this.props.input.value.temp.mun,\r\n          plan:\r\n            this.props.mainObject?.landData?.landData?.PLAN_NO ||\r\n            this.props.input.value.temp.plan,\r\n          subTypeval: this.props.input.value.temp.subTypeval,\r\n          subNameval: this.props.input.value.temp.subNameval,\r\n          parcelDis: this.props.input.value.temp.parcelDis,\r\n          blockval: this.props.input.value.temp.blockval,\r\n          parcelval: this.props.input.value.temp.parcelval,\r\n          subname: this.props.input.value.temp.subname,\r\n          block_no: this.props.input.value.temp.block_no,\r\n          city_name: this.props.input.value.temp.city_name,\r\n        },\r\n        parcels: [...this.props.input.value.parcels],\r\n        parcelData: { ...this.props.input.value.parcelData },\r\n        domainLists: { ...this.state.domainLists },\r\n        // lists: {\r\n        //   firstParcels: [...this.state.parcelNum],\r\n        //   subDivNames: [...this.state.subDivNames],\r\n        //   MunicipalityNames: [...this.state.MunicipalityNames],\r\n        //   subDivType: [...this.state.subDivType],\r\n        //   PlanNum: [...this.state.PlanNum],\r\n        //   blockNum: [...this.state.blockNum],\r\n        // },\r\n      };\r\n\r\n      this.state.landsData[\"selectedRequestType\"] =\r\n        (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n          [1928].indexOf(this.props?.currentModule?.record?.workflow_id) !=\r\n            -1) &&\r\n          [2190, 2191].indexOf(\r\n            this.props?.currentModule?.record?.workflow_id\r\n          ) == -1 &&\r\n          this.state.selectedRequestType) ||\r\n        ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n          \"فرد\") ||\r\n        ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n          \"اصدار الكروكي (المواطن)\") ||\r\n        3;\r\n\r\n      this.props.input.onChange({ ...this.state.landsData });\r\n    }\r\n    this.setState({ mapLoaded: true });\r\n\r\n    this.props.setCurrentMap(map);\r\n    //this.props.setMapLayers(mapLayers);\r\n    store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n  };\r\n\r\n  setValue = (item, event) => {\r\n    item.value = event.target.value;\r\n\r\n    this.UpdateSubmissionDataObject();\r\n  };\r\n\r\n  OnParcelSelect = () => {\r\n    this.setState({ parcelval: undefined });\r\n    clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n\r\n    if (\r\n      !this.state.selectedLands.filter((e) => e.id === this.state.parcelId)\r\n        .length\r\n    ) {\r\n      // [\"PARCEL_AREA\", \"PARCEL_MAIN_LUSE\", \"PARCEL_LAT_COORD\", \"PARCEL_LONG_COORD\", \"PLAN_NO\", \"PARCEL_PLAN_NO\", \"USING_SYMBOL\", \"PARCEL_BLOCK_NO\", \"DISTRICT_NAME\", \"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_TYPE\", \"PARCEL_SPATIAL_ID\", \"MUNICIPALITY_NAME\"]\r\n\r\n      queryTask({\r\n        ...querySetting(\r\n          this.LayerID.Landbase_Parcel,\r\n          `PARCEL_SPATIAL_ID =${this.state.parcelId}`,\r\n          true,\r\n          [\"*\"]\r\n        ),\r\n        callbackResult: (res) => {\r\n          if (\r\n            this.state.selectedLands &&\r\n            this.state.selectedLands.length == 0\r\n          ) {\r\n            queryTask({\r\n              ...querySetting(\r\n                this.LayerID.Tbl_Parcel_Conditions,\r\n                `USING_SYMBOL_CODE ='${res.features[0].attributes.USING_SYMBOL}'`,\r\n                false,\r\n                [\r\n                  \"SLIDE_AREA\",\r\n                  \"MIN_FROT_OFFSET\",\r\n                  \"BUILDING_RATIO\",\r\n                  \"FRONT_OFFSET\",\r\n                  \"SIDE_OFFSET\",\r\n                  \"BACK_OFFSET\",\r\n                  \"FLOORS\",\r\n                  \"FLOOR_HEIGHT\",\r\n                  \"FAR\",\r\n                  \"ADD_FLOOR\",\r\n                ]\r\n              ),\r\n              callbackResult: (condition) => {\r\n                this.setState({\r\n                  conditions: condition.features,\r\n                });\r\n                getFeatureDomainName(\r\n                  res.features,\r\n                  this.LayerID.Landbase_Parcel\r\n                ).then((r) => {\r\n                  this.addParcelToSelect(r[0]).then(\r\n                    (res) => {\r\n                      this.setToStore(r);\r\n                      this.setState({\r\n                        parcelId: null,\r\n                        parcelNum: res.features,\r\n                      });\r\n                      this.selectedLandsT.push(res);\r\n                      this.DrawGraph();\r\n                    },\r\n                    () => {\r\n                      this.state.selectedLands.pop();\r\n                      this.setToStore();\r\n                    }\r\n                  );\r\n                });\r\n              },\r\n            });\r\n          } else {\r\n            getFeatureDomainName(\r\n              res.features,\r\n              this.LayerID.Landbase_Parcel\r\n            ).then((r) => {\r\n              this.addParcelToSelect(r[0]).then(\r\n                (res) => {\r\n                  this.setToStore(r);\r\n                  this.setState({\r\n                    parcelId: null,\r\n                    parcelNum: res.features,\r\n                  });\r\n                  this.selectedLandsT.push(res);\r\n                  this.DrawGraph();\r\n                },\r\n                () => {\r\n                  this.state.selectedLands.pop();\r\n                  this.setToStore();\r\n                }\r\n              );\r\n            });\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  setToStore = (r) => {\r\n    const {\r\n      input: { value },\r\n    } = this.props;\r\n    this.state.landsData = {\r\n      ...value,\r\n      mapGraphics: [],\r\n      conditions: this.state.conditions,\r\n      parcelData: { ...this.state.parcelData },\r\n      temp: {\r\n        //map: this.map,\r\n        // ...value,\r\n        mun: this.state.munval,\r\n        plan: this.state.planeval,\r\n        subTypeval: this.state.subTypeval,\r\n        subNameval: this.state.subNameval,\r\n        subname: this.state.subName_name,\r\n        parcelDis: this.parcelDis || this.RolBackParcelNum,\r\n        block_no: this.state.block_no,\r\n        blockval: this.state.blockval,\r\n        parcelval: this.state.parcelval,\r\n        city_name: this.state.city_name,\r\n      },\r\n      domainLists: { ...this.state.domainLists },\r\n      // lists: {\r\n      //   firstParcels: [...this.state.parcelNum],\r\n      //   subDivNames: [...this.state.subDivNames],\r\n      //   MunicipalityNames: [...this.state.MunicipalityNames],\r\n      //   subDivType: [...this.state.subDivType],\r\n      //   PlanNum: [...this.state.PlanNum],\r\n      //   blockNum: [...this.state.blockNum],\r\n      // },\r\n    };\r\n\r\n    if (r) {\r\n      r[0].attributes.PARCEL_AREA = \"\";\r\n      this.state.selectedLands.push({\r\n        geometry: r[0].geometry,\r\n        attributes: r[0].attributes,\r\n        id: this.state.parcelId,\r\n      });\r\n\r\n      map_object(this.state.selectedLands);\r\n\r\n      this[\"edit_PARCEL_AREA\" + (this.state.selectedLands.length - 1)] =\r\n        r[0].attributes.PARCEL_AREA;\r\n      this[\"edit_PARCEL_BLOCK_NO\" + (this.state.selectedLands.length - 1)] =\r\n        r[0].attributes.PARCEL_BLOCK_NO;\r\n      this[\"edit_DISTRICT_NAME\" + (this.state.selectedLands.length - 1)] =\r\n        r[0].attributes.DISTRICT_NAME;\r\n      this[\"edit_SUBDIVISION_TYPE\" + (this.state.selectedLands.length - 1)] =\r\n        r[0].attributes.SUBDIVISION_TYPE;\r\n      this[\r\n        \"edit_SUBDIVISION_DESCRIPTION\" + (this.state.selectedLands.length - 1)\r\n      ] = r[0].attributes.SUBDIVISION_DESCRIPTION;\r\n    }\r\n\r\n    this.checkUnitNumberAvailability(\r\n      [...this.state.selectedLands],\r\n      this.state.munval\r\n    );\r\n    this.state.landsData[\"parcels\"] = [...this.state.selectedLands];\r\n\r\n    this.state.landsData[\"selectedRequestType\"] =\r\n      (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n        [1928].indexOf(this.props?.currentModule?.record?.workflow_id) != -1) &&\r\n        [2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n          -1 &&\r\n        this.state.selectedRequestType) ||\r\n      ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"فرد\") ||\r\n      ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"اصدار الكروكي (المواطن)\") ||\r\n      3;\r\n\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n  };\r\n\r\n  setAdjacentToStore = (r) => {\r\n    let store_value = this.props.input.value;\r\n    store_value.temp.parcelDis = r;\r\n    this.props.input.onChange(store_value);\r\n  };\r\n\r\n  checkUnitNumberAvailability = (selectedLands, munval) => {\r\n    if (\r\n      [10501, 10506, 10513].indexOf(munval) != -1 &&\r\n      selectedLands.find(\r\n        (parcel) => parcel.attributes.USING_SYMBOL_Code == \"س1-أ\"\r\n      ) != undefined &&\r\n      [1].indexOf(this.props?.currentModule?.record.app_id) != -1\r\n    ) {\r\n      this.parcel_fields_headers = (!this.parcel_fields_headers.find(\r\n        (f) => f == \"عدد الوحدات\"\r\n      ) && [...this.parcel_fields_headers, \"عدد الوحدات\"]) || [\r\n        ...this.parcel_fields_headers,\r\n      ];\r\n      this.parcel_fields = (!this.parcel_fields.find(\r\n        (f) => f.name == \"UNITS_NUMBER\"\r\n      ) && [\r\n        ...this.parcel_fields,\r\n        {\r\n          name: \"UNITS_NUMBER\",\r\n          editable: false,\r\n          dependsOn: \"USING_SYMBOL_Code\",\r\n          value: \"س1-أ\",\r\n        },\r\n      ]) || [...this.parcel_fields];\r\n    }\r\n  };\r\n\r\n  LandHoverOn = (f) => {\r\n    if (\r\n      !this.state.selectedLands.length &&\r\n      [1].indexOf(this.props?.currentModule?.record.app_id) != -1\r\n    ) {\r\n      return;\r\n    }\r\n    var fitleredGraphics = this.map\r\n      .getLayer(\"SelectGraphicLayer\")\r\n      .graphics.filter((graphic) => {\r\n        return graphic?.attributes?.OBJECTID != f?.attributes?.OBJECTID;\r\n      });\r\n\r\n    fitleredGraphics = [\r\n      ...new Map(\r\n        fitleredGraphics.map((item) => [\r\n          item?.[\"attributes\"]?.[\"OBJECTID\"],\r\n          item,\r\n        ])\r\n      ).values(),\r\n    ];\r\n\r\n    clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    fitleredGraphics.forEach((graphic) => {\r\n      this.map.getLayer(\"SelectGraphicLayer\").add(graphic);\r\n    });\r\n\r\n    highlightFeature([f], this.map, {\r\n      layerName: \"SelectGraphicLayer\",\r\n      noclear: true,\r\n      isZoom: false,\r\n      isHiglightSymbol: false,\r\n      attr: true,\r\n    });\r\n  };\r\n\r\n  LandHoverOff = (f) => {\r\n    if (\r\n      !this.state.selectedLands.length &&\r\n      [1].indexOf(this.props?.currentModule?.record.app_id) != -1\r\n    ) {\r\n      return;\r\n    }\r\n    if (f && f?.attributes?.PARCEL_SPATIAL_ID != this.state?.parcelId) {\r\n      highlightFeature([f], this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: false,\r\n        isHiglightSymbol: true,\r\n        highlighColor: [0, 255, 0, 0.5],\r\n        attr: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  remove = (item) => {\r\n    let { mainObject } = this.props;\r\n    if (mainObject && mainObject.waseka) {\r\n      delete mainObject.waseka;\r\n    }\r\n    this.state.parcelData = {};\r\n    this.state.selectedLands.pop(item);\r\n    //this.props.input.value.parcels = slice(this.props.input.value.parcels, 0, -1)\r\n    // this.props.input.onChange([...values])\r\n    if (this.state.selectedLandsT) {\r\n      this.state.selectedLandsT.pop(item);\r\n    }\r\n    this.DrawGraph();\r\n    this.UpdateSubmissionDataObject();\r\n  };\r\n\r\n  saveEdit(id, name, i) {\r\n    let findParcel = this.props.input.value.parcels.find((p) => {\r\n      return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n    });\r\n    findParcel.attributes[name] =\r\n      this[\"edit_\" + name + i] || findParcel.attributes[name];\r\n    let selectLand = this.state.selectedLands.find((p) => {\r\n      return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n    });\r\n    selectLand.attributes[name] =\r\n      this[\"edit_\" + name + i] || selectLand.attributes[name];\r\n\r\n    this.setState(\r\n      {\r\n        [name + \"_isEdit_\" + i]: false,\r\n        selectedLands: [...this.state.selectedLands],\r\n      },\r\n      () => {\r\n        this.UpdateSubmissionDataObject();\r\n      }\r\n    );\r\n  }\r\n\r\n  openPopup = (scope) => {\r\n    var fields = this.parcelDataFields;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...scope.state.parcelData },\r\n          ok(values) {\r\n            scope.state[\"parcelData\"] = values;\r\n            scope.UpdateSubmissionDataObject();\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  myChangeHandler = (name, i, e, event) => {\r\n    this[\"edit_\" + name + i] = event.target.value;\r\n    e.attributes[name] = event.target.value;\r\n    //e.attributes['PARCEL_AREA'] = event.target.value;\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  selectOnchange = (name, i, e, value) => {\r\n    this[\"edit_\" + name + i] = value;\r\n    e.attributes[name] = value;\r\n    //e.attributes['PARCEL_AREA'] = event.target.value;\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  showEditBtn = (name, value) => {\r\n    if (name == \"USING_SYMBOL\") {\r\n      return value == null;\r\n    } else {\r\n      return (\r\n        [\r\n          \"PARCEL_AREA\",\r\n          \"PARCEL_BLOCK_NO\",\r\n          \"DISTRICT_NAME\",\r\n          \"SUBDIVISION_TYPE\",\r\n          \"SUBDIVISION_DESCRIPTION\",\r\n        ].indexOf(name) > -1\r\n      );\r\n    }\r\n  };\r\n\r\n  enableEdit = (name, i) => {\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  exportCad = () => {\r\n    console.log(this.state.selectedLands);\r\n\r\n    var polygons = this.state.selectedLands;\r\n    var cadPolygons = [];\r\n\r\n    polygons.forEach((polygon) => {\r\n      delete polygon.geometry.cache;\r\n      var jsonParcel = {\r\n        geometry: polygon.geometry,\r\n        attributes: {\r\n          Layer: \"floor\",\r\n          Color: 1,\r\n          LyrColor: 1,\r\n        },\r\n      };\r\n      cadPolygons.push(jsonParcel);\r\n    });\r\n\r\n    var jsonParcel = {\r\n      attributes: {\r\n        Layer: \"plus\",\r\n        Color: 2,\r\n        LyrColor: 2,\r\n      },\r\n    };\r\n    uploadGISFile(\r\n      `${window.restServicesPath}/ExportGeoDataToCAD/GPServer/ExportGeoDataToCAD`,\r\n      {\r\n        ParcelsToExport: JSON.stringify(cadPolygons), //`[${featuresList.join(\", \")}]` ,\r\n      },\r\n      (data) => {\r\n        //store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n        data.value.split(\",\").forEach((item) => {\r\n          //setTimeout(() => {\r\n\r\n          var file_path =\r\n            window.filesHost +\r\n            \"/\" +\r\n            item.replaceAll(/\\s/g, \"\").replaceAll(\"\\\\\", \"/\");\r\n          var a = document.createElement(\"A\");\r\n          a.href = file_path;\r\n          a.download = file_path.substr(file_path.lastIndexOf(\"/\") + 1);\r\n          document.body.appendChild(a);\r\n          a.click();\r\n          document.body.removeChild(a);\r\n          //}, 1000);\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      parcelData,\r\n      selectedLands,\r\n      MunicipalityNames,\r\n      subDivType,\r\n      subDivNames,\r\n      subNameval,\r\n      blockNum,\r\n      blockval,\r\n      PlanNum,\r\n      mapLoaded,\r\n      planeval,\r\n      parcelSearch,\r\n      parcelNum,\r\n      parcelval,\r\n      conditions,\r\n      requestTypes,\r\n      selectedRequestType,\r\n      boundariesBtnIsVisible,\r\n    } = this.state;\r\n\r\n    const { t, fullMapWidth } = this.props;\r\n\r\n    var parcelBtnDisabled = false; // this.props?.currentModule?.record?.workflow_id\r\n    if (\r\n      ([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n        [1928].indexOf(this.props?.currentModule?.record?.workflow_id) != -1) &&\r\n      [2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n        -1 &&\r\n      selectedRequestType == 1 &&\r\n      selectedLands.length > 0\r\n    ) {\r\n      parcelBtnDisabled = true;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className={!fullMapWidth ? \"content-section implementation\" : \"\"}>\r\n          <div\r\n            style={\r\n              (!this.props.isView && {\r\n                display: \"flex\",\r\n                marginTop: \"35px\",\r\n              }) || {\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }\r\n            }\r\n          >\r\n            {(mapLoaded && !this.props.isView && (\r\n              <div \r\n                style={{\r\n                  direction: \"ltr\",\r\n                }}\r\n              >\r\n                {([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n                  [1928].indexOf(\r\n                    this.props?.currentModule?.record?.workflow_id\r\n                  ) != -1) &&\r\n                  [2190, 2191].indexOf(\r\n                    this.props?.currentModule?.record?.workflow_id\r\n                  ) == -1 && (\r\n                    <Select\r\n                      getPopupContainer={(trigger) => trigger.parentNode}\r\n                      autoFocus\r\n                      onChange={this.parcelQueryTask.bind(this)}\r\n                      showSearch\r\n                      value={this.state.selectedRequestType}\r\n                      placeholder=\"اختر نوع المعاملة\"\r\n                      optionFilterProp=\"children\"\r\n                      filterOption={(input, option) => {\r\n                        if (option.props.children) {\r\n                          return (\r\n                            option.props.children.find((i) => {\r\n                              return i && i.indexOf(input.trim().toLowerCase()) >= 0;\r\n                            }) != null\r\n                          );\r\n                        } else {\r\n                          return false;\r\n                        }\r\n                      }}\r\n                    >\r\n                      {requestTypes.map((e) => (\r\n                        <Option key={e.code} value={e.code}>\r\n                          {e.name}{\" \"}\r\n                        </Option>\r\n                      ))}\r\n                    </Select>\r\n                  )}\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onChange={(val) => {\r\n                    onMunChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  value={this.state.munval}\r\n                  placeholder=\"اختر اسم البلديه\"\r\n                  disabled={!this.state.MunicipalityNames?.length}\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children.find((i) => {\r\n                          return i && i.indexOf(input.trim().toLowerCase()) >= 0;\r\n                        }) != null\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                >\r\n                  {MunicipalityNames?.map((e) => (\r\n                    <Option key={e.code} value={e.code}>\r\n                      {e.name}{\" \"}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n\r\n                <Select\r\n                  onChange={(val) => {\r\n                    onPlaneChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  disabled={!PlanNum.length}\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children\r\n                          ?.indexOf(convertToArabic(input)) != -1\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                  value={planeval}\r\n                  placeholder=\"رقم المخطط\"\r\n                  notFoundContent=\"not found\"\r\n                >\r\n                  {PlanNum\r\n                  //.slice(0, 100)\r\n                  .map((d, i) => {\r\n                    return (\r\n                      <Option key={i} value={d.i}>\r\n                        {convertToArabic(d.attributes.PLAN_NO)}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onChange={(val) => {\r\n                    onSubTypeChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  disabled={!subDivType.length}\r\n                  value={this.state.subTypeval}\r\n                  placeholder={\"نوع التقسيم\"}\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children\r\n                          ?.indexOf(convertToArabic(input)) != -1\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                >\r\n                  {subDivType\r\n                  //.slice(0, 100)\r\n                  .map((e, i) => (\r\n                    <Option key={i} value={e.code}>\r\n                      {\" \"}\r\n                      {e.name}{\" \"}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onChange={(val) => {\r\n                    onSubNameChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  disabled={!subDivNames.length}\r\n                  placeholder=\"اسم التقسيم\"\r\n                  value={subNameval}\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children\r\n                          ?.indexOf(convertToArabic(input)) != -1\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                >\r\n                  {subDivNames\r\n                  //.slice(0, 100)\r\n                  .map((e, i) => (\r\n                    <Option key={i} value={e.attributes.SUBDIVISION_SPATIAL_ID}>\r\n                      {\" \"}\r\n                      {e.attributes.SUBDIVISION_DESCRIPTION}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onChange={(val) => {\r\n                    onBlockChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  disabled={!blockNum.length}\r\n                  value={blockval}\r\n                  placeholder=\"رقم البلك\"\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children\r\n                          ?.indexOf(convertToArabic(input)) != -1\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                >\r\n                  {blockNum\r\n                  //.slice(0, 100)\r\n                  .map((e, i) => (\r\n                    <Option key={i} value={e.attributes.BLOCK_SPATIAL_ID}>\r\n                      {convertToArabic(e.attributes.BLOCK_NO)}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n                <Select\r\n                  // onBlur={() => {\r\n                  //   clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n                  // }}\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onFocus={() => {\r\n                    //clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n                    if (!this.state[\"parcelId\"]) {\r\n                      highlightFeature(\r\n                        parcelNum.filter((e, i) => {\r\n                          if (parcelSearch) {\r\n                            if (this.state.selectedLands.length) {\r\n                              return !this.state.selectedLands.find(\r\n                                (tt) =>\r\n                                  tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                  e.attributes.PARCEL_SPATIAL_ID\r\n                              );\r\n                            } else {\r\n                              return (\r\n                                e.attributes.PARCEL_PLAN_NO &&\r\n                                e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                                  parcelSearch.toLowerCase()\r\n                                ) >= 0\r\n                              );\r\n                            }\r\n                          } else {\r\n                            if (selectedLands.length) {\r\n                              return (\r\n                                !selectedLands.find(\r\n                                  (tt) =>\r\n                                    tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                    e.attributes.PARCEL_SPATIAL_ID\r\n                                ) && e.attributes.PARCEL_PLAN_NO\r\n                              );\r\n                            } else {\r\n                              return e.attributes.PARCEL_PLAN_NO;\r\n                            }\r\n                          }\r\n                        }),\r\n                        // .slice(0, 100),\r\n                        this.map,\r\n                        {\r\n                          layerName: \"SelectGraphicLayer\",\r\n                          noclear: false,\r\n                          isZoom: false,\r\n                          isHiglightSymbol: true,\r\n                          highlighColor: [0, 255, 0, 0.5],\r\n                          attr: true,\r\n                        }\r\n                      );\r\n                    }\r\n                  }}\r\n                  onChange={(val) => {\r\n                    onLandParcelChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  disabled={parcelNum && !parcelNum.length}\r\n                  onSearch={(e) => {\r\n                    this.setState({ parcelSearch: e });\r\n                    onSearch(this, e);\r\n                  }}\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children\r\n                          ?.indexOf(convertToArabic(input)) != -1\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                  value={parcelval}\r\n                  placeholder=\"رقم قطعة الارض\"\r\n                >\r\n                  {parcelNum &&\r\n                    parcelNum\r\n                      .filter((e, i) => {\r\n                        if (parcelSearch) {\r\n                          if (this.state.selectedLands.length) {\r\n                            return !this.state.selectedLands.find(\r\n                              (tt) =>\r\n                                tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                e.attributes.PARCEL_SPATIAL_ID\r\n                            );\r\n                          } else {\r\n                            return (\r\n                              e.attributes.PARCEL_PLAN_NO &&\r\n                              e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                                parcelSearch.toLowerCase()\r\n                              ) >= 0\r\n                            );\r\n                          }\r\n                        } else {\r\n                          if (selectedLands.length) {\r\n                            return (\r\n                              !selectedLands.find(\r\n                                (tt) =>\r\n                                  tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                  e.attributes.PARCEL_SPATIAL_ID\r\n                              ) && e.attributes.PARCEL_PLAN_NO\r\n                            );\r\n                          } else {\r\n                            return e.attributes.PARCEL_PLAN_NO;\r\n                          }\r\n                        }\r\n                      })\r\n                      .slice(0, 100)\r\n                      .map((e, i) => {\r\n                        return (\r\n                          <Option\r\n                            onMouseEnter={this.LandHoverOn.bind(this, e)}\r\n                            onMouseLeave={this.LandHoverOff.bind(this, e)}\r\n                            key={e.attributes.PARCEL_SPATIAL_ID}\r\n                            value={e.i}\r\n                          >\r\n                            {localizeNumber(e.attributes.PARCEL_PLAN_NO)}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                </Select>\r\n\r\n                <Button\r\n                  className=\"add-gis\"\r\n                  disabled={!this.state.parcelId || parcelBtnDisabled}\r\n                  onClick={this.OnParcelSelect}\r\n                >\r\n                  إضافة الأرض\r\n                </Button>\r\n              </div>\r\n            )) ||\r\n              (this.props?.isExportCad && (\r\n                <div\r\n                  style={{\r\n                    direction: \"ltr\",\r\n                  }}\r\n                >\r\n                  <Button className=\"add-gis\" onClick={this.exportCad}>\r\n                    استخراج ملف كاد\r\n                  </Button>\r\n                </div>\r\n              ))}\r\n          </div>\r\n          <div>\r\n            {/* <div className=\"btn-fixed\">\r\n              <MapBtnsComponent {...this.props}></MapBtnsComponent>\r\n            </div> */}\r\n            <StickyContainer style={{ direction: \"ltr\" }}>\r\n              <Sticky bottomOffset={80}>\r\n                {({ style }) => (\r\n                  <MapBtnsComponent\r\n                    style={style}\r\n                    {...this.props}\r\n                  ></MapBtnsComponent>\r\n                )}\r\n              </Sticky>\r\n            </StickyContainer>\r\n            <div>\r\n              <MapComponent\r\n                mapload={this.mapLoaded.bind(this)}\r\n                {...this.props}\r\n              ></MapComponent>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {mapLoaded && (\r\n          <div style={{ gridColumn: \"1/3\" }}>\r\n            {selectedLands && selectedLands.length > 0 && (\r\n              <div>\r\n                <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n\r\n                <table\r\n                  className=\"table table-bordered\"\r\n                  style={{ marginTop: \"1%\" }}\r\n                >\r\n                  <thead>\r\n                    <tr>\r\n                      {this.parcel_fields_headers.map((field_header, k) => {\r\n                        return <th>{field_header}</th>;\r\n                      })}\r\n                      <th> خيارات</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {selectedLands.map((e, i) => {\r\n                      return (\r\n                        <tr key={i}>\r\n                          {this.parcel_fields.map((field, k) => {\r\n                            return (\r\n                              ((!field.dependsOn ||\r\n                                (field.dependsOn &&\r\n                                  e.attributes[field.dependsOn] ==\r\n                                    field.value)) && (\r\n                                <td key={k}>\r\n                                  <div>\r\n                                    {field.editable ? (\r\n                                      !this.state[\r\n                                        field.name + \"_isEdit_\" + i\r\n                                      ] ? (\r\n                                        <span>\r\n                                          <span>\r\n                                            {localizeNumber(\r\n                                              e.attributes[field.name] || \"\"\r\n                                            )}\r\n                                          </span>\r\n                                          {this.showEditBtn(\r\n                                            field.name,\r\n                                            e.attributes[field.name]\r\n                                          ) && (\r\n                                            <span>\r\n                                              <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                  marginRight: e.attributes[\r\n                                                    field.name\r\n                                                  ]\r\n                                                    ? \"20px\"\r\n                                                    : \"0px\",\r\n                                                }}\r\n                                                onClick={this.enableEdit.bind(\r\n                                                  this,\r\n                                                  field.name,\r\n                                                  i\r\n                                                )}\r\n                                              >\r\n                                                <i className=\"fas fa-edit\"></i>\r\n                                              </button>\r\n                                            </span>\r\n                                          )}\r\n                                        </span>\r\n                                      ) : (\r\n                                        <span\r\n                                          style={{\r\n                                            display: \"grid\",\r\n                                            gridTemplateColumns: \"1fr auto\",\r\n                                          }}\r\n                                        >\r\n                                          {field.type != \"select\" && (\r\n                                            <input\r\n                                              key={i}\r\n                                              className=\"form-control\"\r\n                                              type={field.type}\r\n                                              step=\"any\"\r\n                                              value={e.attributes[field.name]}\r\n                                              onChange={this.myChangeHandler.bind(\r\n                                                this,\r\n                                                field.name,\r\n                                                i,\r\n                                                e\r\n                                              )}\r\n                                            />\r\n                                          )}\r\n                                          {field.type == \"select\" && (\r\n                                            <Select\r\n                                              value={e.attributes[field.name]}\r\n                                              onChange={this.selectOnchange.bind(\r\n                                                this,\r\n                                                field.name,\r\n                                                i,\r\n                                                e\r\n                                              )}\r\n                                              placeholder=\"نوع التقسيم\"\r\n                                              optionFilterProp=\"children\"\r\n                                              filterOption={(input, option) =>\r\n                                                convertToEnglish(\r\n                                                  option.props.children\r\n                                                )\r\n                                                  ?.toLowerCase()\r\n                                                  ?.indexOf(\r\n                                                    input.toLowerCase()\r\n                                                  ) >= 0\r\n                                              }\r\n                                            >\r\n                                              {field?.options?.map((e, i) => (\r\n                                                <Option key={i} value={e.name}>\r\n                                                  {convertToArabic(e.name)}\r\n                                                </Option>\r\n                                              ))}\r\n                                            </Select>\r\n                                          )}\r\n                                          <button\r\n                                            className=\"btn\"\r\n                                            style={{ marginRight: \"20px\" }}\r\n                                            onClick={this.saveEdit.bind(\r\n                                              this,\r\n                                              e.attributes.PARCEL_SPATIAL_ID,\r\n                                              field.name,\r\n                                              i\r\n                                            )}\r\n                                          >\r\n                                            <i className=\"fa fa-floppy-o\"></i>\r\n                                          </button>\r\n                                        </span>\r\n                                      )\r\n                                    ) : (\r\n                                      <span>\r\n                                        <span>\r\n                                          {localizeNumber(\r\n                                            e.attributes[field.name] || \"\"\r\n                                          )}\r\n                                        </span>\r\n                                      </span>\r\n                                    )}\r\n                                  </div>\r\n                                </td>\r\n                              )) || <td></td>\r\n                            );\r\n                          })}\r\n\r\n                          {!this.props.isView &&\r\n                          i === selectedLands.length - 1 ? (\r\n                            <td>\r\n                              {boundariesBtnIsVisible && (\r\n                                <button\r\n                                  className=\"btn follow\"\r\n                                  style={{ margin: \"0px 5px\" }}\r\n                                  onClick={() => {\r\n                                    this.openPopup(this);\r\n                                  }}\r\n                                >\r\n                                  حدود و أبعاد الأرض\r\n                                </button>\r\n                              )}\r\n                              <button\r\n                                className=\"btn btn-danger\"\r\n                                onClick={this.remove.bind(this, e)}\r\n                              >\r\n                                حذف\r\n                              </button>\r\n                            </td>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(withTranslation(\"labels\")(farzIdentifyComponnent));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAmBA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAewcA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAMA;AACA;AAIA;AACA;AAigGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AA2jBA;AACA;AACA;AAykBA;AACA;AACA;AAKA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAOA;AACA;AAGA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AACA;AAKA;AAEA;AAAA;AAiBA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAMA;AACA;AAAA;AAUA;AASA;AACA;AACA;;;;A","sourceRoot":""}
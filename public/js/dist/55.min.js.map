{"version":3,"file":"55.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/propertyCheckIdentifyComponnent/ArchiveModal/ArchiveModal.js","webpack:///./src/app/components/inputs/fields/identify/Component/propertyCheckIdentifyComponnent/PdfViewer/PdfViewer.js","webpack:///./src/app/components/inputs/fields/identify/Component/propertyCheckIdentifyComponnent/index.js"],"sourcesContent":["import React from \"react\";\r\nimport { Modal } from \"antd\";\r\n// import ImageCarousel from \"../../../components/ImageCarousel/ImageCarousel\";\r\n// import ImageViewer from \"../../../components/ImageViewer/ImageViewer\";\r\n\r\nfunction ArchiveModal(props) {\r\n\r\n  const handleOk = async () => { };\r\n\r\n  return <>\r\n    <Modal\r\n      className=\"archiveGalleryModal\"\r\n      visible={props.isOpen}\r\n      onOk={handleOk}\r\n      onCancel={props.closeModal}\r\n      style={{width: \"75% !important\"}}\r\n      closable={true}\r\n      //   title={'الصور المؤرشفة'}\r\n      //    confirmLoading\r\n      cancelText=\"إلغاء\"\r\n    //okText={'حسناً'}\r\n    >\r\n\r\n      {/* <ImageCarousel {...props} /> */}\r\n      {props.children}\r\n    </Modal></>;\r\n}\r\n\r\nexport default ArchiveModal;\r\n","import React from \"react\";\r\nimport { EyeOutlined, DownloadOutlined } from '@ant-design/icons'\r\nimport axios from \"axios\";\r\n\r\nfunction PdfViewer(props) {\r\n  const handleDowloadViewArchiveFile = (payload, type) => {\r\n    console.log(payload);\r\n    let token = localStorage.token;\r\n    let fileId = payload.fileId ? payload.fileId.replaceAll('}', '').replaceAll('{', '') : '';\r\n    let requestURL = \"https://webgis.eamana.gov.sa/GISAPIV2\" + `/GetCorrespondenceAttachment?fileId=${fileId}&fileName=${payload.fileName}&fileType=${payload.fileType}`;\r\n    axios\r\n      .get(requestURL,\r\n        {\r\n          headers: {\r\n\r\n            Authorization: `Bearer ${token}`\r\n          }, responseType: 'blob'\r\n        })\r\n      .then((res) => {\r\n        if (type === 'view') window.open(URL.createObjectURL(res.data));\r\n        else {\r\n          let url = window.URL.createObjectURL(res.data)\r\n          let a = document.createElement('a')\r\n          a.href = url\r\n          a.download = payload.fileName;\r\n          a.click()\r\n          a.remove()\r\n          setTimeout(() => window.URL.revokeObjectURL(url), 100)\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  return <>\r\n\r\n    <h2 className=\"text-center\">\r\n      {props.title}\r\n    </h2>\r\n    <div style={{ display: 'flex', flexWrap: 'wrap', height: '30rem', overflowY: 'scroll', columnGap: '2rem', justifyContent: 'center' }}>\r\n      {props?.data?.length\r\n        ? props?.data?.map(\r\n          (item, idx) => (\r\n            <div key={\"gArch\" + idx} style={{ display: 'flex', flexDirection: 'column', justifyContent: 'start', margin: '0 3rem' }}>\r\n              <div class=\"ant-image css-nnuwmp\" style={{ width: '100px' }}>\r\n                <img class=\"ant-image-img css-nnuwmp\" alt=\"thumbnail\" src=\"images/adobeicon.png\" width=\"100\" />\r\n                <div class=\"ant-image-mask\">\r\n                  <div class=\"ant-image-mask-info\" onClick={() => handleDowloadViewArchiveFile(item, 'view')} style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <span role=\"img\" aria-label=\"eye\" title={\"عرض\"} class=\"anticon anticon-eye\">\r\n                      <EyeOutlined />\r\n                    </span>\r\n                    {/* {t('view')} */}\r\n                  </div>\r\n                  <div class=\"ant-image-mask-info\" onClick={() => handleDowloadViewArchiveFile(item, 'download')} style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <span role=\"img\" aria-label=\"eye\" title={\"تحميل\"} class=\"anticon anticon-eye\">\r\n                      <DownloadOutlined />\r\n                    </span>\r\n                    {/* {t('download')} */}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <span className=\"text-center\" style={{ width: '100px', textWrap: 'wrap' }}>\r\n                {item.fileName}\r\n              </span>\r\n            </div>)) : \"لا توجد صور للعرض\"}\r\n    </div>\r\n  </>\r\n\r\n    ;\r\n}\r\n\r\nexport default PdfViewer;\r\n","import React, { Component } from \"react\";\r\nimport { esriRequest } from \"../common/esri_request\";\r\n\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  addParcelNo,\r\n  convertToEnglish,\r\n  localizeNumber,\r\n  convertToArabic,\r\n  resetMapData,\r\n  resizeMap,\r\n  project,\r\n} from \"../common/common_func\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faMapPin,\r\n  faSearchPlus,\r\n  faTrash,\r\n  faArrowsAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport applyFilters from \"main_helpers/functions/filters\";\r\nimport {\r\n  geometryServiceUrl,\r\n  propetryCheckMapUrl,\r\n} from \"../mapviewer/config/map\";\r\nimport {\r\n  Select,\r\n  Button,\r\n  Form,\r\n  message,\r\n  InputNumber,\r\n  Tooltip,\r\n  Icon,\r\n  Divider,\r\n} from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nvar uniqid = require(\"uniqid\");\r\nimport { StickyContainer, Sticky } from \"react-sticky\";\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n  isEmpty,\r\n  omit,\r\n} from \"lodash\";\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport axios from \"axios\";\r\nimport ArchiveModal from \"./ArchiveModal/ArchiveModal\";\r\nimport PdfViewer from \"./PdfViewer/PdfViewer\";\r\nimport { workFlowUrl } from \"../../../../../../../imports/config\";\r\nimport {\r\n  getParcels,\r\n  onBlockChange,\r\n  onDistrictChange,\r\n  onLandParcelChange,\r\n  onMunChange,\r\n  onPlaneChange,\r\n  onSearch,\r\n  onSubNameChange,\r\n  onSubTypeChange,\r\n} from \"../common/filters_objects\";\r\n\r\nconst { Option } = Select;\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"serviceLands\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\nclass propertyCheckIdentifyComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.isLoaded = true;\r\n    this.PlanNum = [];\r\n    this.planId = null;\r\n    this.parcelTs = [];\r\n    this.selectedLandsT = [];\r\n    this.selectedLands = [];\r\n    this.selectionMode = false;\r\n    this.parcel_fields = [\r\n      \"PARCEL_PLAN_NO\",\r\n      \"PARCEL_AREA\",\r\n      //\"PARCEL_BLOCK_NO\",\r\n      \"DISTRICT_NAME\",\r\n      //\"SUBDIVISION_TYPE\",\r\n      //\"SUBDIVISION_DESCRIPTION\",\r\n      //\"USING_SYMBOL\",\r\n    ];\r\n    this.parcelData = {\r\n      label: \"حدود الموقع حسب الصك\",\r\n      className: \"parcelInfo\",\r\n      type: \"inputs\",\r\n      required: true,\r\n      fields: {\r\n        north_length: {\r\n          label: \"طول الحد الشمالي\",\r\n          value: 0,\r\n          required: true,\r\n        },\r\n        // north_length_text: {\r\n        //   label: \"طول الحد الشمالي بالأحرف\",\r\n        //   value: 0,\r\n        //   required: true,\r\n        // },\r\n        north_desc: {\r\n          label: \"وصف الحد الشمالي\",\r\n          value: \"\",\r\n          required: true,\r\n        },\r\n        south_length: {\r\n          label: \"طول الحد الجنوبي\",\r\n          value: 0,\r\n          required: true,\r\n        },\r\n        // south_length_text: {\r\n        //   label: \"طول الحد الجنوبي بالأحرف\",\r\n        //   value: 0,\r\n        //   required: true,\r\n        // },\r\n        south_desc: {\r\n          label: \"وصف الحد الجنوبي\",\r\n          value: \"\",\r\n          required: true,\r\n        },\r\n        east_length: {\r\n          label: \"طول الحد الشرقي\",\r\n          value: 0,\r\n          required: true,\r\n        },\r\n        // east_length_text: {\r\n        //   label: \"طول الحد الشرقي بالأحرف\",\r\n        //   value: 0,\r\n        //   required: true,\r\n        // },\r\n        east_desc: {\r\n          label: \"وصف الحد الشرقي\",\r\n          value: \"\",\r\n          required: true,\r\n        },\r\n        west_length: {\r\n          label: \"طول الحد الغربي\",\r\n          value: 0,\r\n          required: true,\r\n        },\r\n        // west_length_text: {\r\n        //   label: \"طول الحد الغربي بالأحرف\",\r\n        //   value: 0,\r\n        //   required: true,\r\n        // },\r\n        west_desc: {\r\n          label: \"وصف الحد الغربي\",\r\n          value: \"\",\r\n          required: true,\r\n        },\r\n      },\r\n    };\r\n\r\n    let serviceParcel;\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n    console.log(values);\r\n    //;\r\n    // if (values.landData?.landData_type == 2) {\r\n    //   //;\r\n    serviceParcel = props.input?.value?.parcels?.find((parcel) => {\r\n      return (\r\n        parcel.munval?.code == props.input.value?.temp?.mun &&\r\n        parcel.districtval?.code == props.input.value?.temp?.districtval &&\r\n        parcel.subNameval?.code == props.input.value?.temp?.subname &&\r\n        parcel.blockval?.code == props.input.value?.temp?.block\r\n      );\r\n    });\r\n    //}\r\n\r\n    this.state = {\r\n      mapLoaded: false,\r\n      SUBMISSIONNO: null,\r\n      munval:\r\n        serviceParcel?.munval?.code ||\r\n        props.input.value?.temp?.mun ||\r\n        undefined,\r\n      districtval:\r\n        serviceParcel?.districtval?.code ||\r\n        props.input.value?.temp?.districtval ||\r\n        undefined,\r\n      subTypeval:\r\n        serviceParcel?.subTypeval?.code ||\r\n        props.input.value?.temp?.subtype ||\r\n        undefined,\r\n      subType_name:\r\n        serviceParcel?.subTypeval?.name ||\r\n        props.input.value?.temp?.subtype ||\r\n        undefined,\r\n      subNameval:\r\n        serviceParcel?.subNameval?.code ||\r\n        props.input.value?.temp?.subname ||\r\n        undefined,\r\n      subName_name:\r\n        serviceParcel?.subNameval?.name ||\r\n        props.input.value?.temp?.subname ||\r\n        undefined,\r\n      blockval:\r\n        serviceParcel?.blockval?.code ||\r\n        props.input.value?.temp?.block ||\r\n        undefined,\r\n      block_no:\r\n        serviceParcel?.blockval?.name ||\r\n        props.input.value?.temp?.block ||\r\n        undefined,\r\n      serviceData: props.input?.value?.parcels || [],\r\n      parcelval: props.input.value?.temp?.parcel || undefined,\r\n      blockNum: serviceParcel?.blockNum || [],\r\n      subDivNames: serviceParcel?.subDivNames || [],\r\n      subDivType: serviceParcel?.subDivType || [],\r\n      parcelNum: serviceParcel?.parcelNum || [],\r\n      MunicipalityNames: [],\r\n      Districts: [],\r\n      PlanNum: serviceParcel?.PlanNum || [],\r\n      parcelId: null,\r\n      mapExtend: null,\r\n      parcelSearch: null,\r\n      poly: null,\r\n      landsData: {},\r\n      isFirstStep: props?.currentModule?.id == 104,\r\n    };\r\n  }\r\n  LayerID = [];\r\n\r\n  convertToArabic(num) {\r\n    if (num) {\r\n      var id = [\"۰\", \"۱\", \"۲\", \"۳\", \"٤\", \"٥\", \"٦\", \"۷\", \"۸\", \"۹\"];\r\n      return num.replace(/[0-9]/g, function (w) {\r\n        return id[+w];\r\n      });\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  replaceAll(str, find, replace) {\r\n    return str.replace(new RegExp(find, \"g\"), replace);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const {\r\n      input,\r\n      mainObject,\r\n      currentModule: { id },\r\n    } = this.props;\r\n    if (input.value.isReset) {\r\n      input.value.isReset = false;\r\n      this.resetFields();\r\n\r\n      this.draw?.deactivate();\r\n      this.map.enableMapNavigation();\r\n    }\r\n  }\r\n\r\n  checkDrawAvailability = () => {\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n    if (values?.landData?.landData_type == 2) {\r\n      if (!this.draw) {\r\n        this.draw = window.Draw(this.map, { showTooltips: true });\r\n        this.draw.activate(esri.toolbars.Draw.POLYGON);\r\n        this.map.disableMapNavigation();\r\n        var symbol_pin = new esri.symbol.SimpleFillSymbol(\r\n          esri.symbol.SimpleFillSymbol.STYLE_NULL,\r\n          new esri.symbol.SimpleLineSymbol(\r\n            esri.symbol.SimpleFillSymbol.STYLE_SOLID,\r\n            new esri.Color([0, 0, 0]),\r\n            3\r\n          ),\r\n          new esri.Color([0, 0, 0])\r\n        );\r\n        this.draw.on(\"draw-complete\", (evt) => {\r\n          if (\r\n            (this.props.currentModule.app_id == 27 ||\r\n              this.props.currentModule.record.app_id == 27) &&\r\n            this.state.serviceData.length\r\n          ) {\r\n            return;\r\n          }\r\n          let id = uniqid();\r\n          let layer = this.map.getLayer(\"SelectGraphicLayer\");\r\n          var graphic = new esri.Graphic(evt.geometry, symbol_pin, {\r\n            PARCEL_PLAN_NO: \"\",\r\n            PARCEL_AREA: \"\",\r\n            PARCEL_BLOCK_NO: \"\",\r\n            DISTRICT_NAME: this.state.districtval.name || \"\",\r\n            SUBDIVISION_TYPE: \"\",\r\n            SUBDIVISION_DESCRIPTION: \"\",\r\n            USING_SYMBOL: \"\",\r\n            ID: id,\r\n            MUNICIPALITY_NAME: this.state.munval.code,\r\n          });\r\n          layer.add(graphic);\r\n          this.RolBackPol = this.pol;\r\n          this.setToStore([graphic], values?.landData?.landData_type);\r\n        });\r\n      } else {\r\n        this.draw.activate(esri.toolbars.Draw.POLYGON);\r\n      }\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    const {\r\n      currentModule: { id },\r\n    } = this.props;\r\n    if (window.isAkarApp) {\r\n      console.log(\"window\", window);\r\n      this.parcel_fields = [\r\n        \"PARCEL_PLAN_NO\",\r\n        \"PARCEL_AREA\",\r\n        //\"PARCEL_BLOCK_NO\",\r\n        \"DISTRICT_NAME\",\r\n        //\"SUBDIVISION_TYPE\",\r\n        //\"SUBDIVISION_DESCRIPTION\",\r\n        //\"USING_SYMBOL\",\r\n      ];\r\n    }\r\n    getInfo(propetryCheckMapUrl).then((res) => {\r\n      this.LayerID = res;\r\n      window.filterUrl = propetryCheckMapUrl;\r\n      getParcels(this, null, \"\", { returnDistinctValues: true }, [\r\n        \"MUNICIPALITY_NAME\",\r\n      ]).then((features) => {\r\n        \r\n        getFeatureDomainName(features, this.LayerID.Landbase_Parcel).then(\r\n          (features) => {\r\n            \r\n            let fcs = features\r\n              .filter((r) => r.attributes.MUNICIPALITY_NAME)\r\n              .map((r) => {\r\n                \r\n                return {\r\n                  code: r.attributes.MUNICIPALITY_NAME_Code,\r\n                  name: r.attributes.MUNICIPALITY_NAME,\r\n                };\r\n              });\r\n            this.setState(\r\n              {\r\n                MunicipalityNames: fcs,\r\n              },\r\n              () => {\r\n                this.loadLists = true;\r\n                \r\n                if (this.state.munval) {\r\n                  onMunChange(this, this.state.munval, () => {\r\n                    onDistrictChange(this, this.state.districtval, () => {\r\n                      onSubTypeChange(this, this.state.subTypeval, () => {\r\n                        onSubNameChange(this, this.state.subNameval, () => {\r\n                          onBlockChange(this, this.state.blockval, () => {\r\n                            onLandParcelChange(\r\n                              this,\r\n                              this.state.parcelval,\r\n                              () => {}\r\n                            );\r\n                          });\r\n                        });\r\n                      });\r\n                    });\r\n                  });\r\n                }\r\n                this.loadLists = false;\r\n              }\r\n            );\r\n          }\r\n        );\r\n      });\r\n      // queryTask({\r\n      //   url: propetryCheckMapUrl + \"/\" + this.LayerID.UnplannedParcels,\r\n      //   where: \"1=1\",\r\n      //   outFields: [\"MUNICIPALITY_NAME\"],\r\n      //   returnDistinctValues: true,\r\n      //   returnGeometry: false,\r\n      //   callbackResult: ({ features }) => {\r\n      //     getFeatureDomainName(\r\n      //       features,\r\n      //       this.LayerID.UnplannedParcels,\r\n      //       false,\r\n      //       propetryCheckMapUrl\r\n      //     ).then((res) => {\r\n      //       this.setState({\r\n      //         MunicipalityNames: res.map((r) => {\r\n      //           return {\r\n      //             code: r.attributes.MUNICIPALITY_NAME_Code,\r\n      //             name: r.attributes.MUNICIPALITY_NAME,\r\n      //           };\r\n      //         }),\r\n      //       });\r\n      //     });\r\n      //   },\r\n      // });\r\n    });\r\n  }\r\n\r\n  // onDistrictChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n  //   const {\r\n  //     values,\r\n  //     currentModule: { id },\r\n  //   } = this.props;\r\n  //   this.setState({\r\n  //     districtval: e,\r\n  //     parcelval: undefined,\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //     parcelData: this.parcelData,\r\n  //     plan_no: undefined,\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     url: propetryCheckMapUrl + \"/\" + this.LayerID.District_Boundary,\r\n  //     where: `DISTRICT_NAME ='${e}'`,\r\n  //     outFields: [\"DISTRICT_NAME\"],\r\n  //     returnGeometry: true,\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //     },\r\n  //   });\r\n\r\n  //   this.getServiceParcels(null, e, null, null);\r\n  // };\r\n\r\n  // onMunChange = (e) => {\r\n  //   //\r\n\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n  //   let serviceDataItem =\r\n  //     this.state.serviceData?.find(\r\n  //       (item) =>\r\n  //         item.munval?.code == e &&\r\n  //         item.districtval?.code == undefined &&\r\n  //         item.subNameval?.code == undefined &&\r\n  //         item.blockval?.code == undefined\r\n  //     ) || {};\r\n  //   const {\r\n  //     values,\r\n  //     currentModule: { id },\r\n  //   } = this.props;\r\n  //   this.setState({\r\n  //     munval: e,\r\n  //     districtval: undefined,\r\n  //     parcelval: undefined,\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //     parcelData: this.parcelData,\r\n  //     plan_no: undefined,\r\n  //   });\r\n  //   this.planId = null;\r\n\r\n  //   queryTask({\r\n  //     url: propetryCheckMapUrl + \"/\" + this.LayerID.Municipality_Boundary,\r\n  //     where: `MUNICIPALITY_NAME='${e}'`,\r\n  //     outFields: [\"MUNICIPALITY_NAME\"],\r\n  //     returnGeometry: true,\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //     },\r\n  //   });\r\n  //   this.GetDistrictByMunID(e);\r\n  //   this.getServiceParcels(e, null, null, null);\r\n  // };\r\n\r\n  // GetDistrictByMunID = (e) => {\r\n  //   queryTask({\r\n  //     url: propetryCheckMapUrl + \"/\" + this.LayerID.UnplannedParcels,\r\n  //     where: `MUNICIPALITY_NAME='${e}'`,\r\n  //     outFields: [\"DISTRICT_NAME\"],\r\n  //     returnDistinctValues: true,\r\n  //     returnGeometry: false,\r\n  //     callbackResult: ({ features }) => {\r\n  //       getFeatureDomainName(\r\n  //         features,\r\n  //         this.LayerID.UnplannedParcels,\r\n  //         false,\r\n  //         propetryCheckMapUrl\r\n  //       ).then((res) => {\r\n  //         this.setState({\r\n  //           Districts: res.map((r) => {\r\n  //             return {\r\n  //               code: r.attributes.DISTRICT_NAME_Code,\r\n  //               name: r.attributes.DISTRICT_NAME,\r\n  //             };\r\n  //           }),\r\n  //         });\r\n  //       });\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  // GetPlansByMunID = (e) => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Plan_Data,\r\n  //         `MUNICIPALITY_NAME='${e}'`,\r\n  //         false,\r\n  //         [\"PLAN_SPATIAL_ID\", \"PLAN_NO\"]\r\n  //       ),\r\n  //       callbackResult: (res) => {\r\n  //         let plans = res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i: uniqid(),\r\n  //           };\r\n  //         });\r\n  //         this.setState({\r\n  //           PlanNum: plans,\r\n  //         });\r\n  //         return resolve(plans);\r\n  //       },\r\n  //     });\r\n  //   });\r\n  // };\r\n\r\n  resetFields = () => {\r\n    resetMapData(this.map);\r\n    onMunChange(this, undefined);\r\n    this.props.input.onChange({});\r\n    this.setState({ serviceData: [] });\r\n  };\r\n\r\n  getServiceParcels = (munval, districtval, subNameval, blockval) => {\r\n    var district = this.state.Districts.find((m) => m.code == districtval);\r\n\r\n    let whereStr = ``;\r\n    whereStr +=\r\n      (munval &&\r\n        ` ${\r\n          whereStr ? \" AND \" : \" \"\r\n        }MUNICIPALITY_NAME='${munval}' AND SUBMISSIONNO IS NULL`) ||\r\n      \"\";\r\n    whereStr +=\r\n      (district &&\r\n        ` ${whereStr ? \" AND \" : \" \"}DISTRICT_NAME='${\r\n          district.code\r\n        }' AND PARCEL_PLAN_NO IS NOT NULL AND SUBMISSIONNO IS NULL`) ||\r\n      \"\";\r\n    /*whereStr +=\r\n      (subNameval &&\r\n        ` ${whereStr ? \" AND \" : \" \"}SUBDIVISION_SPATIAL_ID=${subNameval}`) ||\r\n      \"\";\r\n    whereStr +=\r\n      (blockval &&\r\n        ` ${whereStr ? \" AND \" : \" \"}BLOCK_SPATIAL_ID=${blockval}`) ||\r\n      \"\";*/\r\n\r\n    queryTask({\r\n      url: propetryCheckMapUrl + \"/\" + this.LayerID.UnplannedParcels,\r\n      where: `${whereStr}`,\r\n      outFields: [\"*\"],\r\n      returnGeometry: true,\r\n      callbackResult: (res) => {\r\n        let mun = this.state.MunicipalityNames?.filter(\r\n          (e) => e?.code == munval\r\n        ).map((e) => ({ code: e.code, name: e.name }))[0];\r\n        let district = this.state.Districts.filter(\r\n          (d, i) => d.code == districtval\r\n        )?.[0];\r\n        let block = this.state.blockNum\r\n          .filter((block) => block?.attributes?.BLOCK_SPATIAL_ID == blockval)\r\n          ?.map((e) => ({\r\n            code: e?.attributes?.BLOCK_SPATIAL_ID,\r\n            name: e?.attributes?.BLOCK_NO,\r\n          }))[0];\r\n        let subName = this.state.subDivNames\r\n          .filter((e, i) => e.attributes.SUBDIVISION_SPATIAL_ID == subNameval)\r\n          .map((e) => ({\r\n            code: e.attributes.SUBDIVISION_SPATIAL_ID,\r\n            name: e.attributes.SUBDIVISION_DESCRIPTION,\r\n          }))[0];\r\n\r\n        let index = this.state.serviceData.findIndex(\r\n          (serviceDataItem) =>\r\n            serviceDataItem.munval?.code == munval &&\r\n            serviceDataItem.districtval?.code == districtval &&\r\n            serviceDataItem.subNameval?.code == subNameval &&\r\n            serviceDataItem.blockval?.code == blockval\r\n        );\r\n\r\n        //;\r\n        if (\r\n          index == -1 &&\r\n          res.features.filter(\r\n            (parcel) => parcel.attributes.PARCEL_PLAN_NO != null\r\n          ).length &&\r\n          this.state.parcelId\r\n        ) {\r\n          this.setState({\r\n            parcelSearch: null,\r\n            parcelNum: res.features.map((e, i) => {\r\n              return {\r\n                ...e,\r\n                i,\r\n              };\r\n            }),\r\n            serviceData: [\r\n              ...this.state.serviceData,\r\n              {\r\n                munval: mun,\r\n                districtval: district,\r\n                subNameval: subName,\r\n                blockval: block,\r\n                selectedLands: [],\r\n                selectedLandsT: [],\r\n                parcelNum: res.features.map((e, i) => {\r\n                  return {\r\n                    ...e,\r\n                    i,\r\n                  };\r\n                }),\r\n                noOfAvailableServiceParcels: res.features?.length || 0,\r\n              },\r\n            ],\r\n          });\r\n        } else {\r\n          this.setState({\r\n            parcelSearch: null,\r\n            parcelNum: res.features.map((e, i) => {\r\n              return {\r\n                ...e,\r\n                i,\r\n              };\r\n            }),\r\n          });\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n  // GetBlocksByPlanID = (planSpatialId) => {\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Survey_Block,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       false,\r\n  //       [\"*\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       console.log(res.features);\r\n  //       let blocks = [];\r\n  //       res.features.forEach((feature) => {\r\n  //         if (feature.attributes.BLOCK_NO) {\r\n  //           blocks.push(feature);\r\n  //         }\r\n  //       });\r\n  //       this.setState({ blockNum: blocks });\r\n  //     },\r\n  //   });\r\n  // };\r\n  // onSubTypeChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n  //   let serviceDataItem =\r\n  //     this.state.serviceData?.find(\r\n  //       (item) =>\r\n  //         item.munval?.code == this.state.munval &&\r\n  //         item.districtval?.code == this.state.districtval &&\r\n  //         item.subTypeval?.code == e &&\r\n  //         item.blockval?.code == undefined\r\n  //     ) || {};\r\n  //   this.setState({\r\n  //     subType_name: this.state.subDivType.filter((m) => m?.code == e)[0].name,\r\n  //     subTypeval: e,\r\n  //     subNameval: undefined,\r\n  //     subName_name: undefined,\r\n  //     blockval: undefined,\r\n  //     block_no: undefined,\r\n  //     parcelval: undefined,\r\n  //   });\r\n  //   this.getSubNamesBySubType(e);\r\n  // };\r\n\r\n  // getSubNamesBySubType = (e) => {\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Subdivision,\r\n  //       `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${this.planId}`,\r\n  //       false,\r\n  //       [\"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({ subDivNames: res.features });\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  // onSubNameChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n  //   let serviceDataItem =\r\n  //     this.state.serviceData?.find(\r\n  //       (item) =>\r\n  //         item.munval?.code == this.state.munval &&\r\n  //         item.districtval?.code == this.state.districtval &&\r\n  //         item.subNameval?.code == e &&\r\n  //         item.blockval?.code == undefined\r\n  //     ) || {};\r\n\r\n  //   const {\r\n  //     values,\r\n  //     currentModule: { id },\r\n  //   } = this.props;\r\n\r\n  //   this.setState({\r\n  //     subName_name: this.state.subDivNames.filter(\r\n  //       (m) => m.attributes.SUBDIVISION_SPATIAL_ID == e\r\n  //     )?.[0]?.attributes?.SUBDIVISION_DESCRIPTION,\r\n  //     subNameval: e,\r\n  //     blockval: undefined,\r\n  //     block_no: undefined,\r\n  //     parcelval: undefined,\r\n  //     parcelNum: [],\r\n  //     parcelId: null,\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Subdivision,\r\n  //       `SUBDIVISION_SPATIAL_ID=${e}`,\r\n  //       true,\r\n  //       [\"SUBDIVISION_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //     },\r\n  //   });\r\n  //   this.getServiceParcels(this.state.munval, this.state.districtval, e, null);\r\n  // };\r\n\r\n  // onBlockChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n  //   let serviceDataItem =\r\n  //     this.state.serviceData?.find(\r\n  //       (item) =>\r\n  //         item.munval?.code == this.state.munval &&\r\n  //         item.districtval?.code == this.state.districtval &&\r\n  //         item.subNameval?.code == this.state.subNameval &&\r\n  //         item.blockval?.code == e\r\n  //     ) || {};\r\n\r\n  //   const {\r\n  //     values,\r\n  //     currentModule: { id },\r\n  //   } = this.props;\r\n\r\n  //   this.setState({\r\n  //     block_no: this.state.blockNum.filter(\r\n  //       (m) => m.attributes.BLOCK_SPATIAL_ID == e\r\n  //     )?.[0]?.attributes?.BLOCK_NO,\r\n  //     blockval: e,\r\n  //     parcelval: undefined,\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Survey_Block,\r\n  //       `BLOCK_SPATIAL_ID=${e}`,\r\n  //       true,\r\n  //       [\"BLOCK_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //     },\r\n  //   });\r\n\r\n  //   this.getServiceParcels(\r\n  //     this.state.munval,\r\n  //     this.state.districtval,\r\n  //     this.state.subNameval,\r\n  //     e\r\n  //   );\r\n  // };\r\n\r\n  // onLandParcelChange = (f) => {\r\n  //   //;\r\n  //   let serviceDataItem = this.state.serviceData?.find(\r\n  //     (item) =>\r\n  //       item.munval?.code == this.state.munval &&\r\n  //       item.districtval?.code == this.state.districtval &&\r\n  //       item.subNameval?.code == this.state.subNameval &&\r\n  //       item.blockval?.code == this.state.blockval\r\n  //   );\r\n  //   let selectedLands = serviceDataItem?.selectedLands || [];\r\n\r\n  //   var e = (serviceDataItem?.parcelNum || this.state.parcelNum)?.filter(\r\n  //     (m) => m.i === f\r\n  //   )?.[0]?.attributes?.PARCEL_SPATIAL_ID;\r\n\r\n  //   var s = (serviceDataItem?.parcelNum || this.state.parcelNum)?.filter(\r\n  //     (m) => m.i === f\r\n  //   )?.[0]?.attributes?.SUBMISSIONNO;\r\n\r\n  //   this.setState({\r\n  //     parcelId: e,\r\n  //     parcelval: f,\r\n  //     SUBMISSIONNO: s,\r\n  //   });\r\n  //   this.RolBackPol = this.pol;\r\n  //   this.RolBackParcelNum =\r\n  //     serviceDataItem?.parcelNum || this.state.parcelNum || [];\r\n\r\n  //   queryTask({\r\n  //     url: propetryCheckMapUrl + \"/\" + this.LayerID.UnplannedParcels,\r\n  //     where: `PARCEL_SPATIAL_ID='${e}'`,\r\n  //     outFields: [\"PARCEL_SPATIAL_ID\"],\r\n  //     returnGeometry: true,\r\n  //     callbackResult: (res) => {\r\n  //       if (serviceDataItem && !selectedLands.length) {\r\n  //         serviceDataItem.selectedLandsT = [];\r\n  //       }\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         strokeColor: [0, 0, 0],\r\n  //         highlightWidth: 3,\r\n  //         isHighlighPolygonBorder: true,\r\n  //         isZoom: true,\r\n  //         zoomFactor: 50,\r\n  //       });\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  onLandParcelChangeById = (f, serviceDataItem) => {\r\n    //;\r\n\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n    clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n    if (serviceDataItem.landData_type == 1) {\r\n      this.setState({\r\n        parcelId: f,\r\n      });\r\n      this.RolBackPol = this.pol;\r\n      this.RolBackParcelNum = serviceDataItem?.parcelNum || [];\r\n      queryTask({\r\n        ...querySetting(\r\n          this.LayerID.UnplannedParcels,\r\n          `PARCEL_SPATIAL_ID='${f}'`,\r\n          true,\r\n          [\"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"]\r\n        ),\r\n        returnGeometry: true,\r\n        callbackResult: (res) => {\r\n          if (serviceDataItem && !selectedLands.length) {\r\n            serviceDataItem.selectedLandsT = [];\r\n          }\r\n\r\n          highlightFeature(res.features[0], this.map, {\r\n            layerName: \"SelectGraphicLayer\",\r\n            strokeColor: [0, 0, 0],\r\n            highlightWidth: 3,\r\n            isHighlighPolygonBorder: true,\r\n            isZoom: true,\r\n            zoomFactor: 50,\r\n          });\r\n          addParcelNo(\r\n            new esri.geometry.Polygon(res.features[0].geometry)\r\n              .getExtent()\r\n              .getCenter(),\r\n            this.map,\r\n            res.features[0].attributes.PARCEL_PLAN_NO + \"\",\r\n            \"ParcelPlanNoGraphicLayer\",\r\n            14,\r\n            [0, 0, 0]\r\n          );\r\n        },\r\n      });\r\n    } else {\r\n      let polygon = new esri.geometry.Polygon(\r\n        serviceDataItem?.selectedLands?.find((land) => land.id == f)?.geometry\r\n      );\r\n      highlightFeature(polygon, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        strokeColor: [0, 0, 0],\r\n        highlightWidth: 3,\r\n        isHighlighPolygonBorder: true,\r\n        isZoom: true,\r\n        zoomFactor: 50,\r\n      });\r\n      addParcelNo(\r\n        polygon.getExtent().getCenter(),\r\n        this.map,\r\n        serviceDataItem?.selectedLands?.find((land) => land.id == f)?.attributes\r\n          ?.PARCEL_PLAN_NO + \"\",\r\n        \"ParcelPlanNoGraphicLayer\",\r\n        14,\r\n        [0, 0, 0]\r\n      );\r\n    }\r\n  };\r\n\r\n  addParcelToSelect = () => {\r\n    let selectedLands =\r\n      this.props.mainObject?.landData?.landData?.lands?.parcels[0].parcelNum;\r\n    if (selectedLands && selectedLands.length > 0) {\r\n      this.setState({\r\n        parcelId: selectedLands[selectedLands.length - 1]?.attributes.OBJECTID,\r\n      });\r\n\r\n      intersectQueryTask({\r\n        outFields: [\r\n          \"SUBMISSIONNO\",\r\n          \"PARCEL_PLAN_NO\",\r\n          \"PARCEL_SPATIAL_ID\",\r\n          \"OBJECTID\",\r\n        ],\r\n        geometry: new esri.geometry.Polygon(\r\n          selectedLands[selectedLands.length - 1].geometry\r\n        ),\r\n        url: propetryCheckMapUrl + \"/\" + this.LayerID.UnplannedParcels,\r\n        where:\r\n          \"PARCEL_PLAN_NO is not null AND SUBMISSIONNO IS NOT NULL AND OBJECTID <> \" +\r\n          selectedLands[selectedLands.length - 1]?.attributes.OBJECTID,\r\n        callbackResult: (res) => {\r\n          res.features = res.features.map((e, i) => {\r\n            return {\r\n              ...e,\r\n              i: uniqid(),\r\n            };\r\n          });\r\n\r\n          this.setState({\r\n            parcelSearch: null,\r\n            parcelNum: res.features.map((e, i) => {\r\n              return {\r\n                ...e,\r\n                i,\r\n              };\r\n            }),\r\n          });\r\n\r\n          this.state.serviceData[0].parcelNum = res.features.map((e, i) => {\r\n            return {\r\n              ...e,\r\n              i,\r\n            };\r\n          });\r\n        },\r\n        distance: 30,\r\n      });\r\n      //this.DrawGraph();\r\n    }\r\n  };\r\n\r\n  DrawGraph = (serviceDataItem) => {\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n    if (!selectedLands.length) {\r\n      this.map.graphics.clear();\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      highlightFeature(\r\n        serviceDataItem.RolBackPol || this.RolBackPol,\r\n        this.map,\r\n        {\r\n          layerName: \"SelectGraphicLayer\",\r\n          isZoom: true,\r\n          isHiglightSymbol: true,\r\n          highlighColor: [255, 0, 0, 0.25],\r\n        }\r\n      );\r\n\r\n      this.setState({\r\n        parcelSearch: null,\r\n        parcelNum: this.RolBackParcelNum,\r\n        parcelval: undefined,\r\n      });\r\n    } else {\r\n      this.parcelDis = selectDis(serviceDataItem?.selectedLandsT || []);\r\n      console.log(this.parcelDis);\r\n      this.setAdjacentToStore(this.parcelDis);\r\n      this.setState({ parcelSearch: null }); //, parcelNum: this.parcelDis\r\n\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n      highlightFeature(\r\n        this.parcelDis.filter(\r\n          (element) =>\r\n            !selectedLands.find(\r\n              (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n            )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectLandsGraphicLayer\",\r\n          noclear: false,\r\n          isZoom: false,\r\n          isHiglightSymbol: true,\r\n          highlighColor: [0, 255, 0, 0.5],\r\n          zoomFactor: 50,\r\n        }\r\n      );\r\n\r\n      this.parcelDis\r\n        .filter(\r\n          (element) =>\r\n            !selectedLands.find(\r\n              (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n            )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"ParcelPlanNoGraphicLayer\",\r\n            14,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n\r\n      highlightFeature(\r\n        this.parcelDis.filter((element) =>\r\n          selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectLandsGraphicLayer\",\r\n          noclear: true,\r\n          attr: { isParcel: true },\r\n          isZoom: true,\r\n          isHighlighPolygonBorder: true,\r\n          zoomFactor: 50,\r\n        }\r\n      );\r\n\r\n      this.parcelDis\r\n        .filter((element) =>\r\n          selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"ParcelPlanNoGraphicLayer\",\r\n            14,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  mapload = (map) => {\r\n    this.map = map;\r\n\r\n    if (!this.state.isFirstStep) {\r\n      this.map.on(\"click\", (evt) => {\r\n        intersectQueryTask({\r\n          outFields: [\r\n            \"SUBMISSIONNO\",\r\n            \"PARCEL_PLAN_NO\",\r\n            \"PARCEL_SPATIAL_ID\",\r\n            \"OBJECTID\",\r\n          ],\r\n          geometry: evt.mapPoint,\r\n          url: propetryCheckMapUrl + \"/\" + this.LayerID.UnplannedParcels,\r\n          callbackResult: (res) => {\r\n            if (res.features.length)\r\n              this.openArchive(res.features[0].attributes.SUBMISSIONNO);\r\n          },\r\n        });\r\n      });\r\n\r\n      setTimeout(() => {\r\n        if (\r\n          this.props?.mainObject?.data_msa7y?.msa7yData?.cadDetails\r\n            ?.suggestionsParcels\r\n        ) {\r\n          var polygonZoom = new esri.geometry.Polygon(\r\n            this.props.mainObject.data_msa7y.msa7yData.cadDetails.suggestionsParcels[0].polygon\r\n          );\r\n\r\n          project([polygonZoom], this.map.spatialReference.wkid, (res) => {\r\n            highlightFeature({ geometry: res[0] }, this.map, {\r\n              layerName: \"SelectLandsGraphicLayer\",\r\n              strokeColor: [0, 0, 0],\r\n              highlightWidth: 3,\r\n              isHighlighPolygonBorder: true,\r\n              isZoom: true,\r\n              zoomFactor: 50,\r\n            });\r\n          });\r\n        }\r\n      }, 500);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      if (this.state?.serviceData?.length) {\r\n        if (this.state?.serviceData?.[0]?.selectedLands?.length) {\r\n          this.highlight(\r\n            this.state?.serviceData?.[0]?.selectedLands?.[0],\r\n            this.state?.serviceData?.[0],\r\n            null\r\n          );\r\n        } else if (this.state?.serviceData?.[0]?.currentExtent) {\r\n          this.highlight(\r\n            this.state?.serviceData?.[0]?.currentExtent,\r\n            this.state?.serviceData?.[0],\r\n            null\r\n          );\r\n        }\r\n      }\r\n    }, 1500);\r\n\r\n    resizeMap(map);\r\n\r\n    this.setState({ mapLoaded: true });\r\n    this.props.setCurrentMap(map);\r\n\r\n    if (!this.state.isFirstStep) this.addParcelToSelect();\r\n  };\r\n\r\n  myChangeHandler = (name, mainIndex, i, event) => {\r\n    //;\r\n    this[\"edit_\" + name + \"_\" + mainIndex + \"_\" + i] = event.target.value;\r\n  };\r\n\r\n  enableEdit(name, mainIndex, i) {\r\n    this.setState({ [name + \"_isEdit_\" + mainIndex + \"_\" + i]: true });\r\n  }\r\n\r\n  showEditBtn(name, value) {\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n    if (values?.landData?.landData_type == 1 && name == \"USING_SYMBOL\") {\r\n      return value == null;\r\n    } else {\r\n      let defaultArr = [\r\n        \"PARCEL_AREA\",\r\n        \"PARCEL_BLOCK_NO\",\r\n        \"DISTRICT_NAME\",\r\n        \"SUBDIVISION_TYPE\",\r\n        \"SUBDIVISION_DESCRIPTION\",\r\n        \"Natural_Area\",\r\n      ];\r\n\r\n      return (\r\n        [\r\n          ...defaultArr,\r\n          ...Object.keys(\r\n            omit(\r\n              _.reduce(this.parcel_fields, (a, b) => ({ ...a, [b]: b }), {}),\r\n              (values?.landData?.landData_type == 1 && this.parcel_fields) ||\r\n                defaultArr\r\n            )\r\n          ),\r\n        ].indexOf(name) > -1\r\n      );\r\n    }\r\n  }\r\n\r\n  saveEdit(id, name, mainIndex, i) {\r\n    let serviceDataItem = this.state.serviceData[mainIndex];\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n    let findParcel = selectedLands[i];\r\n    findParcel.attributes[name] =\r\n      this[\"edit_\" + name + \"_\" + mainIndex + \"_\" + i] ||\r\n      findParcel.attributes[name];\r\n    let selectLand = selectedLands.find((p) => {\r\n      return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n    });\r\n    selectLand.attributes[name] =\r\n      this[\"edit_\" + name + \"_\" + mainIndex + \"_\" + i] ||\r\n      selectLand.attributes[name];\r\n    this.state.landsData = {\r\n      ...this.props.input.value,\r\n      parcels: [...this.state.serviceData],\r\n    };\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n    this.setState({\r\n      [name + \"_isEdit_\" + mainIndex + \"_\" + i]: false,\r\n      serviceData: [...this.state.serviceData],\r\n    });\r\n  }\r\n\r\n  validation = (item) => {\r\n    const { t } = this.props;\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .post(\r\n          host +\r\n            \"/IsHasSubmission/\" +\r\n            item.attributes.PARCEL_SPATIAL_ID +\r\n            \"/\" +\r\n            (this.props.currentModule.record.id || 0),\r\n          {\r\n            PARCEL_PLAN_NO: item.attributes.PARCEL_PLAN_NO,\r\n            PARCEL_BLOCK_NO: item.attributes.PARCEL_BLOCK_NO,\r\n            PLAN_NO: item.attributes.PLAN_NO,\r\n          }\r\n        )\r\n        .then(\r\n          (data) => {\r\n            if (data.status == 204 || item.attributes.IS_EDITED_Code != 1) {\r\n              return resolve();\r\n            } else {\r\n              window.notifySystem(\r\n                \"warning\",\r\n                t(\"messages:global.PARCELSWARNING\")\r\n              );\r\n              return reject();\r\n            }\r\n          },\r\n          (err) => {\r\n            window.notifySystem(\r\n              \"warning\",\r\n              t(\r\n                `messages:${\r\n                  err.msg ||\r\n                  (err &&\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.msg)\r\n                }`\r\n              )\r\n            );\r\n            return reject();\r\n          }\r\n        );\r\n      // if (item.attributes.IS_EDITED_Code != 1) {\r\n      //   return resolve();\r\n      // } else {\r\n      //   window.notifySystem(\"warning\", t(\"messages:PARCELSWARNING\"));\r\n      //   return reject();\r\n      // }\r\n    });\r\n  };\r\n\r\n  OnParcelSelect = () => {\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n    if (\r\n      (this.props.currentModule.app_id == 27 ||\r\n        this.props.currentModule.record.app_id == 27) &&\r\n      this.state.serviceData.length\r\n    ) {\r\n      return;\r\n    }\r\n    this.setState({ parcelval: undefined });\r\n    //clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    //clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n    let serviceDataItem = this.state.serviceData?.find(\r\n      (item) =>\r\n        item.munval?.code == this.state.munval &&\r\n        item.districtval?.code == this.state.districtval &&\r\n        item.subNameval?.code == this.state.subNameval &&\r\n        item.blockval?.code == this.state.blockval\r\n    );\r\n\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n    if (!selectedLands.filter((e) => e.id === this.state.parcelId).length) {\r\n      queryTask({\r\n        url: propetryCheckMapUrl + \"/\" + this.LayerID.UnplannedParcels,\r\n        where: `PARCEL_SPATIAL_ID =${this.state.parcelId}`,\r\n        returnGeometry: true,\r\n        outFields: [\"*\"],\r\n        callbackResult: (res) => {\r\n          //this.validation(res.features[0]).then((result) => {\r\n\r\n          getFeatureDomainName(\r\n            res.features,\r\n            this.LayerID.UnplannedParcels,\r\n            false,\r\n            propetryCheckMapUrl\r\n          ).then((r) => {\r\n            // intersectQueryTask({\r\n            //   outFields: [\"SRVC_SUBTYPE\"],\r\n            //   geometry: new esri.geometry.Polygon(r[0].geometry),\r\n            //   url: mapUrl + \"/\" + this.LayerID.Service_Data,\r\n            //   callbackResult: (serviceRes) => {\r\n            //     //\r\n            //     getFeatureDomainName(\r\n            //       serviceRes.features,\r\n            //       this.LayerID.Service_Data\r\n            //     ).then((serviceDomainsRes) => {\r\n            //       r[0].attributes = {\r\n            //         ...r[0].attributes,\r\n            //         SRVC_SUBTYPE:\r\n            //           (serviceDomainsRes.length &&\r\n            //             serviceDomainsRes[0].attributes.SRVC_SUBTYPE) ||\r\n            //           null,\r\n            //         SRVC_SUBTYPE_Code:\r\n            //           (serviceDomainsRes.length &&\r\n            //             serviceDomainsRes[0].attributes.SRVC_SUBTYPE_Code) ||\r\n            //           null,\r\n            //       };\r\n            //       //\r\n            //       this.setToStore(r, this.props.values?.landData_type);\r\n            //       this.addParcelToSelect();\r\n            //     });\r\n            //   },\r\n            // });\r\n            this.setToStore(r, values?.landData?.landData_type);\r\n\r\n            clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n            addParcelNo(\r\n              r[0].geometry.getExtent().getCenter(),\r\n              this.map,\r\n              r[0].attributes.PARCEL_PLAN_NO + \"\",\r\n              \"ParcelPlanNoGraphicLayer\",\r\n              20,\r\n              [0, 0, 0]\r\n            );\r\n\r\n            //this.DrawGraph();\r\n            //this.addParcelToSelect();\r\n          });\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  setToStore = (r, landData_type) => {\r\n    let index = this.state.serviceData?.findIndex(\r\n      (item) =>\r\n        item.munval?.code == this.state.munval &&\r\n        item.districtval?.code == this.state.districtval &&\r\n        item.subNameval?.code == this.state.subNameval &&\r\n        item.blockval?.code == this.state.blockval\r\n    );\r\n    const {\r\n      input: { value },\r\n    } = this.props;\r\n\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n    let mun = this.state.MunicipalityNames?.filter(\r\n      (e) => e?.code == this.state.munval\r\n    ).map((e) => ({ code: e.code, name: e.name }))[0];\r\n    let district = this.state.Districts.filter(\r\n      (d, i) => d.code == this.state.districtval\r\n    )?.[0];\r\n    let block = this.state.blockNum\r\n      .filter(\r\n        (block) => block?.attributes?.BLOCK_SPATIAL_ID == this.state.blockval\r\n      )\r\n      ?.map((e) => ({\r\n        code: e?.attributes?.BLOCK_SPATIAL_ID,\r\n        name: e?.attributes?.BLOCK_NO,\r\n      }))[0];\r\n    let subName = this.state.subDivNames\r\n      .filter(\r\n        (e, i) => e.attributes.SUBDIVISION_SPATIAL_ID == this.state.subNameval\r\n      )\r\n      .map((e) => ({\r\n        code: e.attributes.SUBDIVISION_SPATIAL_ID,\r\n        name: e.attributes.SUBDIVISION_DESCRIPTION,\r\n      }))[0];\r\n\r\n    let subType = this.state.subDivType\r\n      .filter((e, i) => e.code == this.state.subTypeval)\r\n      .map((e) => ({\r\n        code: e.code,\r\n        name: e.name,\r\n      }))[0];\r\n\r\n    if (r /* && landData_type == 1*/) {\r\n      if (index != -1) {\r\n        this.state.serviceData[index].selectedLands = [\r\n          ...this.state.serviceData[index].selectedLands,\r\n          {\r\n            attributes: r[0].attributes,\r\n            id: this.state.parcelId,\r\n            geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n          },\r\n        ];\r\n      } else {\r\n        this.state.serviceData.push({\r\n          munval: mun,\r\n          districtval: district,\r\n          subNameval: subName,\r\n          blockval: block,\r\n          subTypeval: subType,\r\n          landData_type: values?.landData?.landData_type,\r\n          PlanNum: this.state.PlanNum,\r\n          parcelNum: this.state?.parcelNum || [],\r\n          blockNum: this.state?.blockNum || [],\r\n          subDivNames: this.state?.subDivNames || [],\r\n          subDivType: this.state?.subDivType || [],\r\n          RolBackPol: this.pol,\r\n          selectedLands: [\r\n            {\r\n              attributes: r[0].attributes,\r\n              id: this.state.parcelId,\r\n              geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n              symbol: r[0].symbol,\r\n            },\r\n          ],\r\n          selectedLandsT: [],\r\n        });\r\n      }\r\n    } else if (r && landData_type == 2) {\r\n      //;\r\n      if (index != -1) {\r\n        if (r?.[0] != undefined) {\r\n          this.state.serviceData[index].selectedLands =\r\n            (!this.state.serviceData[index].selectedLands.length && [\r\n              {\r\n                attributes: r[0].attributes,\r\n                id: this.state.parcelId || uniqid(),\r\n                geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n              },\r\n            ]) || [\r\n              ...this.state.serviceData[index].selectedLands,\r\n              {\r\n                attributes: r[0].attributes,\r\n                id: this.state.parcelId || uniqid(),\r\n                geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n              },\r\n            ] ||\r\n            [];\r\n        }\r\n      } else {\r\n        this.state.serviceData.push({\r\n          munval: mun,\r\n          districtval: district,\r\n          subNameval: subName,\r\n          blockval: block,\r\n          subTypeval: subType,\r\n          landData_type: values?.landData?.landData_type,\r\n          currentExtent: r.currentExtent || this.pol,\r\n          noOfAvailableServiceParcels: this.state?.parcelNum?.length || 0,\r\n          PlanNum: this.state.PlanNum,\r\n          parcelNum: this.state?.parcelNum || [],\r\n          blockNum: this.state?.blockNum || [],\r\n          subDivNames: this.state?.subDivNames || [],\r\n          subDivType: this.state?.subDivType || [],\r\n          RolBackPol: this.pol,\r\n          selectedLands:\r\n            (r?.[0] != undefined && [\r\n              {\r\n                attributes: r[0].attributes,\r\n                id: this.state.parcelId || uniqid(),\r\n                geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n                symbol: r[0].symbol,\r\n              },\r\n            ]) ||\r\n            [],\r\n          selectedLandsT: [],\r\n        });\r\n      }\r\n    }\r\n\r\n    //;\r\n    this.state.landsData = {\r\n      ...value,\r\n      mapGraphics: [],\r\n      submission_data: { ...this.state.submission_data },\r\n      temp: {\r\n        mun: this.state.munval,\r\n        districtval: this.state.districtval,\r\n        subtype: this.state.subType_name,\r\n        subname: this.state.subName_name,\r\n        parcelDis: this.RolBackParcelNum,\r\n        block: this.state.block_no,\r\n        parcel: this.state.parcelval,\r\n      },\r\n      parcels: [...this.state.serviceData],\r\n    };\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n    this.setState({ serviceData: [...this.state.serviceData] });\r\n  };\r\n\r\n  setAdjacentToStore = (r) => {\r\n    let store = this.props.input.value;\r\n    store.temp.parcelDis = r;\r\n    this.props.input.onChange(store);\r\n  };\r\n\r\n  LandHoverOn = (f) => {\r\n    let serviceDataItem = this.state.serviceData?.find(\r\n      (item) =>\r\n        item.munval?.code == this.state.munval &&\r\n        item.districtval?.code == this.state.districtval &&\r\n        item.subNameval?.code == this.state.subNameval &&\r\n        item.blockval?.code == this.state.blockval\r\n    );\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n    if (selectedLands.length) {\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      var parcel = serviceDataItem?.parcelNum?.filter((m) => m.i == f.key)[0];\r\n      highlightFeature(parcel, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        strokeColor: [0, 0, 0],\r\n        isHighlighPolygonBorder: true,\r\n        highlightWidth: 3,\r\n      });\r\n    }\r\n  };\r\n\r\n  LandHoverOff = (f) => {\r\n    let serviceDataItem = this.state.serviceData?.find(\r\n      (item) =>\r\n        item.munval?.code == this.state.munval &&\r\n        item.districtval?.code == this.state.districtval &&\r\n        item.subNameval?.code == this.state.subNameval &&\r\n        item.blockval?.code == this.state.blockval\r\n    );\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n    if (selectedLands.length) {\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    }\r\n  };\r\n\r\n  remove = (mainIndex, index) => {\r\n    const {\r\n      input: { value },\r\n    } = this.props;\r\n    this.setState({\r\n      munval: this.state.serviceData[mainIndex]?.munval?.code || undefined,\r\n      districtval:\r\n        this.state.serviceData[mainIndex]?.districtval?.code || undefined,\r\n      subTypeval:\r\n        this.state.serviceData[mainIndex]?.subTypeval?.code || undefined,\r\n      subNameval:\r\n        this.state.serviceData[mainIndex]?.subNameval?.code || undefined,\r\n      blockval: this.state.serviceData[mainIndex]?.blockval?.code || undefined,\r\n      parcelId:\r\n        this.state.serviceData[mainIndex]?.selectedLands[index]?.attributes\r\n          ?.ID || undefined,\r\n      PlanNum: this.state.serviceData[mainIndex]?.PlanNum || [],\r\n      blockNum: this.state.serviceData[mainIndex]?.blockNum || [],\r\n      subDivNames: this.state.serviceData[mainIndex]?.subDivNames || [],\r\n      subDivType: this.state.serviceData[mainIndex]?.subDivType || [],\r\n      parcelNum: this.state.serviceData[mainIndex]?.parcelNum || [],\r\n    });\r\n    let landData_type = this.state.serviceData[mainIndex].landData_type;\r\n    if (landData_type == 2) {\r\n      this.removeGraphicByProperty(\r\n        this.map.getLayer(\"SelectGraphicLayer\"),\r\n        \"ID\",\r\n        (index != -1 &&\r\n          this.state.serviceData[mainIndex]?.selectedLands[index]?.attributes\r\n            ?.ID) ||\r\n          null\r\n      );\r\n    }\r\n    if (index != -1) {\r\n      this.state.serviceData[mainIndex].selectedLands.splice(index, 1);\r\n      if (!this.state.serviceData[mainIndex].selectedLands.length) {\r\n        clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n        clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n        onMunChange(this, this.state.serviceData[mainIndex].munval.code);\r\n        this.state.serviceData.splice(mainIndex, 1);\r\n      } else if (landData_type == 1) {\r\n        let length = this.state.serviceData[mainIndex].selectedLands.length;\r\n        this.doHighlightOrZoom(\r\n          this.state.serviceData[mainIndex].selectedLands[length - 1],\r\n          this.state.serviceData[mainIndex],\r\n          false\r\n        );\r\n        this.DrawGraph(this.state.serviceData[mainIndex]);\r\n      }\r\n    } else {\r\n      this.state.serviceData[mainIndex].selectedLands = [];\r\n      this.DrawGraph(this.state.serviceData[mainIndex]);\r\n      this.state.serviceData.splice(mainIndex, 1);\r\n    }\r\n\r\n    // if (this.state.serviceDataT?.length) {\r\n    //   this.state.serviceDataT.pop(item);\r\n    // }\r\n\r\n    this.state.landsData = {\r\n      ...value,\r\n      mapGraphics: [],\r\n      submission_data: { ...this.state.submission_data },\r\n      temp: {\r\n        mun: this.state.munval,\r\n        districtval: this.state.districtval,\r\n        subtype: this.state.subType_name,\r\n        subname: this.state.subName_name,\r\n        parcelDis: this.RolBackParcelNum,\r\n        block: this.state.block_no,\r\n        parcel: this.state.parcelval,\r\n      },\r\n      parcels: [...this.state.serviceData],\r\n    };\r\n\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n    this.setState({ serviceData: [...this.state.serviceData] });\r\n  };\r\n\r\n  openArchiveMessage = () => {\r\n    message.info(\"من فضلك قم باختيار قطعة الأرض المراد عرض الأرشيف الخاص بها\");\r\n  };\r\n\r\n  openArchive = (parcel) => {\r\n    let url = `https://webgis.eamana.gov.sa/GISAPIV2/GetCorrespondenceInfo?displayNo=${parcel}`;\r\n    axios\r\n      .get(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let archiveData = res.data;\r\n        this.setState({ archiveDataModal: archiveData });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        //notificationMessage(\"حدث خطأ أثناء استرجاع البيانات\", 5);\r\n      });\r\n  };\r\n\r\n  openPopup = (mainIndex, index) => {\r\n    //;\r\n    var fields = this.parcelData.fields;\r\n    let thisScope = this;\r\n    const vals = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: {\r\n            ...this.state.serviceData[mainIndex].selectedLands[index]\r\n              .parcelData,\r\n          },\r\n          ok(values) {\r\n            thisScope.state.serviceData[mainIndex].selectedLands[\r\n              index\r\n            ].parcelData = values;\r\n            thisScope.setToStore(null, vals.landData.landData_type);\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  zoom = (e, serviceDataItem, evt) => {\r\n    this.doHighlightOrZoom(e, serviceDataItem, false);\r\n  };\r\n\r\n  removeGraphicByProperty = (graphicLayer, graphicPropertyName, value) => {\r\n    graphicLayer.graphics\r\n      .filter((graphic) => {\r\n        return (\r\n          !value ||\r\n          (value &&\r\n            graphic.attributes &&\r\n            graphic.attributes[graphicPropertyName] == value)\r\n        );\r\n      })\r\n      ?.forEach((graphic) => {\r\n        graphicLayer.remove(graphic);\r\n      });\r\n  };\r\n\r\n  doHighlightOrZoom = (e, serviceDataItem, isHighlight) => {\r\n    //;\r\n    const {\r\n      currentModule: { id },\r\n    } = this.props;\r\n    clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n    highlightFeature(e, this.map, {\r\n      layerName: \"SelectLandsGraphicLayer\",\r\n      noclear: false,\r\n      isZoom: true,\r\n      isHiglightSymbol: isHighlight,\r\n      highlighColor: [0, 255, 0, 0.5],\r\n      zoomFactor: 50,\r\n    });\r\n\r\n    //;\r\n    this.setState({\r\n      munval: serviceDataItem?.munval?.code || undefined,\r\n      districtval: serviceDataItem?.districtval?.code || undefined,\r\n      subTypeval: serviceDataItem?.subTypeval?.code || undefined,\r\n      subNameval: serviceDataItem?.subNameval?.code || undefined,\r\n      blockval: serviceDataItem?.blockval?.code || undefined,\r\n      parcelId: e?.id || undefined,\r\n      PlanNum: serviceDataItem?.PlanNum || [],\r\n      blockNum: serviceDataItem?.blockNum || [],\r\n      subDivNames: serviceDataItem?.subDivNames || [],\r\n      subDivType: serviceDataItem?.subDivType || [],\r\n      parcelNum: serviceDataItem?.parcelNum || [],\r\n    });\r\n\r\n    if (serviceDataItem?.selectedLands.length) {\r\n      this.onLandParcelChangeById(e?.id, serviceDataItem);\r\n    } else {\r\n      this.state.parcelId = null;\r\n      this.getServiceParcels(\r\n        serviceDataItem?.munval?.code,\r\n        serviceDataItem?.districtval?.code,\r\n        serviceDataItem?.subNameval?.code,\r\n        serviceDataItem?.blockval?.code\r\n      );\r\n    }\r\n  };\r\n\r\n  highlight = (e, serviceDataItem, evt) => {\r\n    this.doHighlightOrZoom(e, serviceDataItem, true);\r\n  };\r\n\r\n  closeArchiveModal = () => {\r\n    this.setState({ archiveDataModal: null });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      parcelData,\r\n      serviceData,\r\n      MunicipalityNames,\r\n      subDivType,\r\n      subDivNames,\r\n      subNameval,\r\n      blockNum,\r\n      blockval,\r\n      PlanNum,\r\n      mapLoaded,\r\n      districtval,\r\n      parcelSearch,\r\n      parcelNum,\r\n      parcelval,\r\n      Districts,\r\n      isFirstStep,\r\n      archiveDataModal,\r\n    } = this.state;\r\n    let serviceDataItem =\r\n      serviceData?.find(\r\n        (item) =>\r\n          item.munval?.code == this.state.munval &&\r\n          item.districtval?.code == this.state.districtval &&\r\n          item.subNameval?.code == this.state.subNameval &&\r\n          item.blockval?.code == this.state.blockval\r\n      ) || {};\r\n    const {\r\n      fullMapWidth,\r\n      //values,\r\n      currentModule: { id },\r\n      t,\r\n    } = this.props;\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        {archiveDataModal && (\r\n          <ArchiveModal\r\n            isOpen={true}\r\n            galleryData={archiveDataModal}\r\n            closeModal={() => this.closeArchiveModal()}\r\n          >\r\n            <PdfViewer\r\n              isOpen={true}\r\n              data={archiveDataModal}\r\n              closeModal={() => this.closeArchiveModal()}\r\n              title={\"أرشيف الأراضي الخام\"}\r\n            />\r\n          </ArchiveModal>\r\n        )}\r\n\r\n        <StickyContainer style={{ direction: \"ltr\" }}>\r\n          <Sticky bottomOffset={80}>\r\n            {({ style }) => (\r\n              <MapBtnsComponent\r\n                style={style}\r\n                {...this.props}\r\n              ></MapBtnsComponent>\r\n            )}\r\n          </Sticky>\r\n        </StickyContainer>\r\n        {/* <div className=\"btn-fixed\">\r\n          <MapBtnsComponent {...this.props}></MapBtnsComponent>\r\n        </div> */}\r\n\r\n        <div className={!fullMapWidth ? \"content-section implementation\" : \"\"}>\r\n          {mapLoaded && (\r\n            <div style={{ padding: \"10px\" }}>\r\n              {isFirstStep && (\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onChange={(val) => {\r\n                    onMunChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  value={this.state.munval}\r\n                  placeholder=\"اختر اسم البلديه\"\r\n                  disabled={\r\n                    !this.state.MunicipalityNames.length || !isFirstStep\r\n                  }\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children.find((i) => {\r\n                          return (\r\n                            i && i.indexOf(input.trim().toLowerCase()) >= 0\r\n                          );\r\n                        }) != null\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                >\r\n                  {MunicipalityNames?.map((e) => (\r\n                    <Option key={e.code} value={e.code}>\r\n                      {e.name}{\" \"}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              )}\r\n\r\n              {isFirstStep && (\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onChange={(val) => {\r\n                    onDistrictChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  value={this.state.districtval}\r\n                  placeholder=\"اختر اسم الحي\"\r\n                  disabled={!this.state.Districts.length || !isFirstStep}\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) => {\r\n                    if (option.props.children) {\r\n                      return (\r\n                        option.props.children.find((i) => {\r\n                          return (\r\n                            i && i.indexOf(input.trim().toLowerCase()) >= 0\r\n                          );\r\n                        }) != null\r\n                      );\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  }}\r\n                >\r\n                  {Districts\r\n                  //.slice(0, 100)\r\n                  .map((e) => (\r\n                    <Option key={e.code} value={e.code}>\r\n                      {e.name}{\" \"}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              )}\r\n\r\n              {\r\n                <>\r\n                  {isFirstStep && (\r\n                    <Select\r\n                      getPopupContainer={(trigger) => trigger.parentNode}\r\n                      autoFocus\r\n                      onChange={(val) => {\r\n                        onLandParcelChange(this, val);\r\n                      }}\r\n                      showSearch\r\n                      disabled={\r\n                        parcelNum &&\r\n                        !parcelNum.filter(\r\n                          (parcel) => parcel.attributes.PARCEL_PLAN_NO != null\r\n                        ).length\r\n                      }\r\n                      onSearch={(e) => {\r\n                        this.setState({ parcelSearch: e });\r\n                        onSearch(this, e);\r\n                      }}\r\n                      filterOption={(input, option) => {\r\n                        if (option.props.children) {\r\n                          return (\r\n                            option.props.children?.indexOf(\r\n                              convertToArabic(input)\r\n                            ) != -1\r\n                          );\r\n                        } else {\r\n                          return false;\r\n                        }\r\n                      }}\r\n                      value={parcelval}\r\n                      placeholder={\r\n                        isFirstStep\r\n                          ? \"رقم قطعة الارض\"\r\n                          : \"رقم قطعة الأرض المجاورة\"\r\n                      }\r\n                    >\r\n                      {parcelNum &&\r\n                        parcelNum\r\n                          .filter((e, i) => {\r\n                            if (parcelSearch) {\r\n                              if (serviceDataItem?.selectedLands?.length) {\r\n                                return !serviceDataItem?.selectedLands?.find(\r\n                                  (tt) =>\r\n                                    tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                    e.attributes.PARCEL_SPATIAL_ID\r\n                                );\r\n                              } else {\r\n                                return (\r\n                                  e.attributes.PARCEL_PLAN_NO &&\r\n                                  e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                                    parcelSearch.toLowerCase()\r\n                                  ) >= 0\r\n                                );\r\n                              }\r\n                            } else {\r\n                              if (serviceDataItem?.selectedLands?.length) {\r\n                                return (\r\n                                  !serviceDataItem?.selectedLands?.find(\r\n                                    (tt) =>\r\n                                      tt.attributes.PARCEL_PLAN_NO ==\r\n                                      e.attributes.PARCEL_PLAN_NO\r\n                                  ) && e.attributes.PARCEL_PLAN_NO\r\n                                );\r\n                              } else {\r\n                                return e.attributes.PARCEL_PLAN_NO;\r\n                              }\r\n                            }\r\n                          })\r\n                          .slice(0, 100)\r\n                          .map((e, i) => {\r\n                            return (\r\n                              <Option\r\n                                onMouseEnter={this.LandHoverOn}\r\n                                onMouseLeave={this.LandHoverOff}\r\n                                key={e.attributes.PARCEL_SPATIAL_ID}\r\n                                value={e.i}\r\n                              >\r\n                                {localizeNumber(e.attributes.PARCEL_PLAN_NO)}\r\n                              </Option>\r\n                            );\r\n                          })}\r\n                    </Select>\r\n                  )}\r\n\r\n                  {isFirstStep ? (\r\n                    <Button\r\n                      className=\"add-gis\"\r\n                      disabled={\r\n                        this.state.parcelId === null || serviceData.length > 0\r\n                      }\r\n                      onClick={this.OnParcelSelect}\r\n                    >\r\n                      إضافة الارض\r\n                    </Button>\r\n                  ) : (\r\n                    <Button\r\n                      className=\"add-gis\"\r\n                      style={{ padding: \"5px\" }}\r\n                      onClick={this.openArchiveMessage.bind(\r\n                        this,\r\n                        this.state.SUBMISSIONNO\r\n                      )}\r\n                    >\r\n                      أرشيف الأراضي الخام\r\n                    </Button>\r\n                  )}\r\n                </>\r\n              }\r\n            </div>\r\n          )}\r\n\r\n          <MapComponent\r\n            mapload={this.mapload.bind(this)}\r\n            {...this.props}\r\n          ></MapComponent>\r\n        </div>\r\n        {mapLoaded && isFirstStep && (\r\n          <div style={{ gridColumn: \"1/3\" }}>\r\n            {serviceData && serviceData.length > 0 && (\r\n              <div>\r\n                <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n\r\n                <table\r\n                  className=\"table table-bordered\"\r\n                  style={{ marginTop: \"1%\" }}\r\n                >\r\n                  <tbody>\r\n                    {serviceData.map((serviceDataItem, mainIndex) => {\r\n                      return (\r\n                        serviceDataItem?.selectedLands?.length > 0 && (\r\n                          <>\r\n                            <tr key={mainIndex}>\r\n                              <td>البلدية</td>\r\n                              <td>{serviceDataItem?.munval?.name}</td>\r\n                              {serviceDataItem?.districtval?.name && (\r\n                                <>\r\n                                  <td>الحي</td>\r\n                                  <td>\r\n                                    {convertToArabic(\r\n                                      serviceDataItem?.districtval?.name\r\n                                    )}\r\n                                  </td>\r\n                                </>\r\n                              )}\r\n                              {serviceDataItem?.subNameval?.name && (\r\n                                <>\r\n                                  <td>التقسيم</td>\r\n                                  <td>\r\n                                    {convertToArabic(\r\n                                      serviceDataItem?.subNameval?.name\r\n                                    )}\r\n                                  </td>\r\n                                </>\r\n                              )}\r\n                              {serviceDataItem?.blockval?.name && (\r\n                                <>\r\n                                  <td>البلك</td>\r\n                                  <td>\r\n                                    {convertToArabic(\r\n                                      serviceDataItem?.blockval?.name\r\n                                    )}\r\n                                  </td>\r\n                                </>\r\n                              )}\r\n                              {serviceDataItem.landData_type == 2 && (\r\n                                <td>\r\n                                  <span\r\n                                    key={mainIndex}\r\n                                    className=\"toolsBtnStyle center\"\r\n                                    style={{\r\n                                      width: \"100%\",\r\n                                      position: \"relative\",\r\n                                      display: \"flex\",\r\n                                    }}\r\n                                  >\r\n                                    {serviceDataItem.currentExtent &&\r\n                                      !serviceDataItem?.selectedLands\r\n                                        ?.length && (\r\n                                        // <button\r\n                                        //   className=\" btn btn-primary \"\r\n                                        //   onClick={this.zoom.bind(\r\n                                        //     this,\r\n                                        //     serviceDataItem.currentExtent,\r\n                                        //     serviceDataItem\r\n                                        //   )}\r\n                                        // >\r\n                                        //   اختيار\r\n                                        // </button>\r\n                                        <>\r\n                                          <Tooltip\r\n                                            placement=\"bottom\"\r\n                                            title={t(`actions:Zoom`)}\r\n                                          >\r\n                                            <span\r\n                                              style={{\r\n                                                cursor: \"pointer\",\r\n                                              }}\r\n                                              onClick={this.zoom.bind(\r\n                                                this,\r\n                                                serviceDataItem.currentExtent,\r\n                                                serviceDataItem\r\n                                              )}\r\n                                            >\r\n                                              <FontAwesomeIcon\r\n                                                icon={faSearchPlus}\r\n                                                size={\"1x\"}\r\n                                              />\r\n                                            </span>\r\n                                            {/* </a> */}\r\n                                          </Tooltip>\r\n                                          <Divider type=\"vertical\" />\r\n                                        </>\r\n                                      )}\r\n                                    {isFirstStep && (\r\n                                      <>\r\n                                        <Tooltip\r\n                                          placement=\"bottom\"\r\n                                          title={t(`actions:Delete`)}\r\n                                        >\r\n                                          <span\r\n                                            style={{\r\n                                              cursor: \"pointer\",\r\n                                            }}\r\n                                            onClick={this.remove.bind(\r\n                                              this,\r\n                                              mainIndex,\r\n                                              -1\r\n                                            )}\r\n                                          >\r\n                                            <FontAwesomeIcon\r\n                                              icon={faTrash}\r\n                                              size={\"1x\"}\r\n                                            />\r\n                                          </span>\r\n                                        </Tooltip>\r\n                                        <Divider type=\"vertical\" />\r\n                                      </>\r\n                                    )}\r\n                                  </span>\r\n                                </td>\r\n                              )}\r\n                            </tr>\r\n                            {(this.props.currentModule.app_id == 27 ||\r\n                              this.props.currentModule.record.app_id == 27) && (\r\n                              <tr>\r\n                                <td>وصف الأرض</td>\r\n                                {isFirstStep ? (\r\n                                  <td colSpan={\"100%\"}>\r\n                                    <input\r\n                                      key={0}\r\n                                      maxLength={500}\r\n                                      className=\"form-control\"\r\n                                      type=\"text\"\r\n                                      defaultValue={\r\n                                        this[\r\n                                          \"edit_\" +\r\n                                            \"PARCEL_DESCRIPTION\" +\r\n                                            \"_\" +\r\n                                            mainIndex +\r\n                                            \"_\" +\r\n                                            0\r\n                                        ] ||\r\n                                        serviceDataItem?.selectedLands?.[0]\r\n                                          ?.attributes[\"PARCEL_DESCRIPTION\"] ||\r\n                                        \"\"\r\n                                      }\r\n                                      onChange={(event) => {\r\n                                        this.myChangeHandler(\r\n                                          \"PARCEL_DESCRIPTION\",\r\n                                          mainIndex,\r\n                                          0,\r\n                                          event\r\n                                        );\r\n                                        this.saveEdit(\r\n                                          serviceDataItem?.selectedLands?.[0]\r\n                                            ?.id,\r\n                                          \"PARCEL_DESCRIPTION\",\r\n                                          mainIndex,\r\n                                          0\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                  </td>\r\n                                ) : (\r\n                                  <td colSpan={\"100%\"}>\r\n                                    {\r\n                                      serviceDataItem?.selectedLands?.[0]\r\n                                        ?.attributes[\"PARCEL_DESCRIPTION\"]\r\n                                    }\r\n                                  </td>\r\n                                )}\r\n                              </tr>\r\n                            )}\r\n                            {serviceDataItem?.selectedLands?.length > 0 && (\r\n                              <tr>\r\n                                <td colSpan={\"100%\"}>\r\n                                  <table\r\n                                    className=\"table table-bordered\"\r\n                                    style={{ marginTop: \"1%\" }}\r\n                                  >\r\n                                    <thead>\r\n                                      <tr>\r\n                                        <th>رقم القطعه</th>\r\n                                        <th>المساحة من الصك م٢</th>\r\n                                        {/*<th>رقم البلك</th>*/}\r\n                                        <th>الحي</th>\r\n                                        {/*<th>نوع التقسيم</th>\r\n                                        <th>اسم التقسيم</th>*/}\r\n                                        {/*<th>رمز الاستخدام</th>*/}\r\n                                        <th> خيارات</th>\r\n                                      </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                      {serviceDataItem.selectedLands.map(\r\n                                        (e, i) => {\r\n                                          return (\r\n                                            <tr key={i}>\r\n                                              {this.parcel_fields.map(\r\n                                                (field, k) => {\r\n                                                  return (\r\n                                                    <td key={k}>\r\n                                                      <div>\r\n                                                        {!this.state[\r\n                                                          field +\r\n                                                            \"_isEdit_\" +\r\n                                                            mainIndex +\r\n                                                            \"_\" +\r\n                                                            i\r\n                                                        ] ? (\r\n                                                          <span>\r\n                                                            <span>\r\n                                                              {convertToArabic(\r\n                                                                e.attributes[\r\n                                                                  field\r\n                                                                ] || \"غير متوفر\"\r\n                                                              )}\r\n                                                            </span>\r\n                                                            {isFirstStep &&\r\n                                                              this.showEditBtn(\r\n                                                                field,\r\n                                                                e.attributes[\r\n                                                                  field\r\n                                                                ]\r\n                                                              ) && (\r\n                                                                <span>\r\n                                                                  <button\r\n                                                                    className=\"btn\"\r\n                                                                    style={{\r\n                                                                      marginRight:\r\n                                                                        \"20px\",\r\n                                                                    }}\r\n                                                                    onClick={this.enableEdit.bind(\r\n                                                                      this,\r\n                                                                      field,\r\n                                                                      mainIndex,\r\n                                                                      i\r\n                                                                    )}\r\n                                                                  >\r\n                                                                    <i className=\"fas fa-edit\"></i>\r\n                                                                  </button>\r\n                                                                </span>\r\n                                                              )}\r\n                                                          </span>\r\n                                                        ) : (\r\n                                                          <span\r\n                                                            style={{\r\n                                                              display: \"grid\",\r\n                                                              gridTemplateColumns:\r\n                                                                \"1fr auto\",\r\n                                                            }}\r\n                                                          >\r\n                                                            <input\r\n                                                              key={i}\r\n                                                              className=\"form-control\"\r\n                                                              type=\"text\"\r\n                                                              defaultValue={\r\n                                                                this[\r\n                                                                  \"edit_\" +\r\n                                                                    field +\r\n                                                                    \"_\" +\r\n                                                                    mainIndex +\r\n                                                                    \"_\" +\r\n                                                                    i\r\n                                                                ] ||\r\n                                                                e.attributes[\r\n                                                                  field\r\n                                                                ] ||\r\n                                                                \"غير متوفر\"\r\n                                                              }\r\n                                                              onChange={this.myChangeHandler.bind(\r\n                                                                this,\r\n                                                                field,\r\n                                                                mainIndex,\r\n                                                                i\r\n                                                              )}\r\n                                                            />\r\n                                                            <button\r\n                                                              className=\"btn\"\r\n                                                              style={{\r\n                                                                marginRight:\r\n                                                                  \"20px\",\r\n                                                              }}\r\n                                                              onClick={this.saveEdit.bind(\r\n                                                                this,\r\n                                                                e.id,\r\n                                                                field,\r\n                                                                mainIndex,\r\n                                                                i\r\n                                                              )}\r\n                                                            >\r\n                                                              <i className=\"fa fa-floppy-o\"></i>\r\n                                                            </button>\r\n                                                          </span>\r\n                                                        )}\r\n                                                      </div>\r\n                                                    </td>\r\n                                                  );\r\n                                                }\r\n                                              )}\r\n                                              <td>\r\n                                                <span\r\n                                                  key={i}\r\n                                                  className=\"toolsBtnStyle center\"\r\n                                                  style={{\r\n                                                    width: \"100%\",\r\n                                                    position: \"relative\",\r\n                                                    display: \"flex\",\r\n                                                    justifyContent: \"center\",\r\n                                                  }}\r\n                                                >\r\n                                                  {\r\n                                                    <>\r\n                                                      {isFirstStep && (\r\n                                                        <button\r\n                                                          className=\"btn follow\"\r\n                                                          onClick={this.openPopup.bind(\r\n                                                            this,\r\n                                                            mainIndex,\r\n                                                            i\r\n                                                          )}\r\n                                                        >\r\n                                                          حدود و أبعاد الأرض\r\n                                                        </button>\r\n                                                      )}\r\n                                                      <Divider type=\"vertical\" />\r\n                                                      {!isFirstStep && (\r\n                                                        <button\r\n                                                          className=\"btn follow\"\r\n                                                          onClick={this.openArchive.bind(\r\n                                                            this,\r\n                                                            e\r\n                                                          )}\r\n                                                        >\r\n                                                          أرشيف الأراضي الخام\r\n                                                        </button>\r\n                                                      )}\r\n                                                      <Divider type=\"vertical\" />\r\n                                                    </>\r\n                                                  }\r\n                                                  <Tooltip\r\n                                                    placement=\"bottom\"\r\n                                                    title={t(`actions:Zoom`)}\r\n                                                  >\r\n                                                    <span\r\n                                                      style={{\r\n                                                        cursor: \"pointer\",\r\n                                                      }}\r\n                                                      onClick={this.highlight.bind(\r\n                                                        this,\r\n                                                        e,\r\n                                                        serviceDataItem\r\n                                                      )}\r\n                                                    >\r\n                                                      <FontAwesomeIcon\r\n                                                        icon={faSearchPlus}\r\n                                                        size={\"1x\"}\r\n                                                      />\r\n                                                    </span>\r\n                                                    {/* </a> */}\r\n                                                  </Tooltip>\r\n                                                  <Divider type=\"vertical\" />\r\n                                                  {isFirstStep && (\r\n                                                    <>\r\n                                                      <Tooltip\r\n                                                        placement=\"bottom\"\r\n                                                        title={t(\r\n                                                          `actions:Delete`\r\n                                                        )}\r\n                                                      >\r\n                                                        <span\r\n                                                          style={{\r\n                                                            cursor: \"pointer\",\r\n                                                          }}\r\n                                                          onClick={this.remove.bind(\r\n                                                            this,\r\n                                                            mainIndex,\r\n                                                            i\r\n                                                          )}\r\n                                                        >\r\n                                                          <FontAwesomeIcon\r\n                                                            icon={faTrash}\r\n                                                            size={\"1x\"}\r\n                                                          />\r\n                                                        </span>\r\n                                                      </Tooltip>\r\n\r\n                                                      <Divider type=\"vertical\" />\r\n                                                    </>\r\n                                                  )}\r\n                                                </span>\r\n                                              </td>\r\n                                            </tr>\r\n                                          );\r\n                                        }\r\n                                      )}\r\n                                    </tbody>\r\n                                  </table>\r\n                                </td>\r\n                              </tr>\r\n                            )}\r\n                          </>\r\n                        )\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(propertyCheckIdentifyComponent);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAEA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AAEA;AAeA;AACA;AAMA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AA6JA;AAgtpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAmDA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA4vBA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AASA;AAKA;AAAA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AA2hoCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AAKA;AAAA;AAMA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AAIA;AAAA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAaA;AAAA;AACA;AAMA;AAOA;AAAA;AAIA;AAAA;AAWA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAiBA;AACA;AAAA;AAGA;AACA;AAAA;AA0BA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AAAA;AAOA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAcA;AAKA;AAGA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AAAA;AAOA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AAIA;AAKA;AAAA;AAGA;AACA;AAGA;AAKA;AAAA;AAIA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AAKA;AAAA;AAIA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AAKA;AAAA;AAOA;AAUA;AASA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"102.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/IdentifyComponnentCoord/index.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { esriRequest } from \"../common/esri_request\";\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  project,\r\n  addParcelNo,\r\n  convertToEnglish,\r\n  localizeNumber,\r\n  convertToArabic,\r\n  resetMapData,\r\n} from \"../common/common_func\";\r\nimport applyFilters from \"main_helpers/functions/filters\";\r\nimport axios from \"axios\";\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport { mapUrl } from \"../mapviewer/config/map\";\r\nimport { Select, Button, Form, message } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nvar uniqid = require(\"uniqid\");\r\nimport { StickyContainer, Sticky } from \"react-sticky\";\r\nimport { slice, isEqual } from \"lodash\";\r\nimport { getParcels, onBlockChange, onLandParcelChange, onMunChange, onPlaneChange, onSearch, onSubNameChange, onSubTypeChange } from \"../common\";\r\nconst { Option } = Select;\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"lands\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\n\r\nclass IdentifyComponnentCoord extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.PlanNum = [];\r\n    this.cateogry = null;\r\n    this.planId = null;\r\n    this.parcelTs = [];\r\n    this.selectedLandsT = [];\r\n    this.selectedLands = [];\r\n    this.selectionMode = false;\r\n\r\n    this.parcel_fields = [\r\n      \"PARCEL_PLAN_NO\",\r\n      \"PARCEL_AREA\",\r\n      \"PARCEL_BLOCK_NO\",\r\n      \"DISTRICT_NAME\",\r\n      \"SUBDIVISION_TYPE\",\r\n      \"SUBDIVISION_DESCRIPTION\",\r\n      \"USING_SYMBOL\",\r\n    ];\r\n    this.parcelDataFields = {};\r\n    this.parcelDataFields[\"north_length\"] = {\r\n      label: \"طول الحد الشمالي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الشمالي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"north_length\",\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"north_desc\"] = {\r\n      label: \"وصف الحد الشمالي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشمالي\",\r\n      type: \"text\",\r\n      name: \"north_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"south_length\"] = {\r\n      label: \"طول الحد الجنوبي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الجنوبي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"south_length\",\r\n      required: true,\r\n    };\r\n    (this.parcelDataFields[\"south_desc\"] = {\r\n      label: \"وصف الحد الجنوبي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الجنوبي\",\r\n      type: \"text\",\r\n      name: \"south_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    }),\r\n      (this.parcelDataFields[\"east_length\"] = {\r\n        label: \"طول الحد الشرقي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الشرقي (م)\",\r\n        field: \"inputNumber\",\r\n        name: \"east_length\",\r\n        required: true,\r\n      });\r\n    this.parcelDataFields[\"east_desc\"] = {\r\n      label: \"وصف الحد الشرقي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشرقي\",\r\n      type: \"text\",\r\n      name: \"east_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"west_length\"] = {\r\n      label: \"طول الحد الغربي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الغربي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"west_length\",\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"west_desc\"] = {\r\n      label: \"وصف الحد الغربي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الغربي\",\r\n      type: \"text\",\r\n      name: \"west_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.polygonPoints = [];\r\n\r\n    this.state = {\r\n      mapLoaded: false,\r\n      radioValue: 1,\r\n      munval: props.input.value?.temp?.mun || undefined,\r\n      planeval: props.input.value?.temp?.plan || undefined,\r\n      subTypeval: props.input.value?.temp?.subtype || undefined,\r\n      subNameval: props.input.value?.temp?.subname || undefined,\r\n      blockval: props.input.value?.temp?.block || undefined,\r\n      selectedLands: props.input.value.parcels || [],\r\n      parcelData: props.input.value.parcelData || {},\r\n      parcelval: props.input.value?.temp?.parcel || undefined,\r\n      blockNum: [],\r\n      conditions: props.input.value.conditions || undefined,\r\n      coordinateParcel: props.input.value?.temp?.coordinateParcel,\r\n      planSersh: null,\r\n      subDivNames: [],\r\n      subDivType: [],\r\n      parcelNum: props.input.value?.temp?.parcelNum || [],\r\n      parcelNumS: [],\r\n      MunicipalityNames: [],\r\n      PlanNum: [],\r\n      parcelId: null,\r\n      mapExtend: null,\r\n      parcelSearch: null,\r\n      poly: null,\r\n      polygonPoints: [],\r\n      x: \"\",\r\n      y: \"\",\r\n      selectedLands: props.input.value?.parcels || []\r\n    };\r\n  }\r\n  LayerID = [];\r\n\r\n  handleDelete(index) {\r\n    this.polygonPoints.splice(index, 1);\r\n    this.setState({ polygonPoints: this.polygonPoints });\r\n    this.setState({ state: this.state });\r\n  }\r\n\r\n  componentDidMount() {\r\n    getInfo().then((res) => {\r\n      //\r\n      this.LayerID = res;\r\n      getParcels(this, null, \"\", {returnDistinctValues: true}, [\"MUNICIPALITY_NAME\"]).then((features) => {\r\n        \r\n        getFeatureDomainName(features, this.LayerID.Landbase_Parcel).then(\r\n          (features) => {\r\n            \r\n            this.setState(\r\n              {\r\n                MunicipalityNames: features.filter(r => r.attributes.MUNICIPALITY_NAME).map((r) => {\r\n                    \r\n                    return {\r\n                      code: r.attributes.MUNICIPALITY_NAME_Code,\r\n                      name: r.attributes.MUNICIPALITY_NAME,\r\n                    };\r\n                  }),\r\n                allParcels: features,\r\n              },\r\n            () => {\r\n              \r\n              this.loadLists = true;\r\n              if (this.state.munval) {\r\n                onMunChange(this, this.state.munval, () => {\r\n                  onPlaneChange(this, this.state.planeval, () => {\r\n                    onSubTypeChange(this, this.state.subTypeval, () => {\r\n                      onSubNameChange(this, this.state.subNameval, () => {\r\n                        onBlockChange(this, this.state.blockval, () => {\r\n                          onLandParcelChange(\r\n                            this,\r\n                            this.state.parcelval,\r\n                            () => {}\r\n                          );\r\n                        });\r\n                      });\r\n                    });\r\n                  });\r\n                });\r\n              }\r\n              this.loadLists = false;\r\n            }\r\n          );\r\n        }\r\n      );\r\n    });\r\n      // esriRequest(mapUrl + \"/\" + this.LayerID.Municipality_Boundary).then(\r\n      //   (response) => {\r\n      //     this.setState({\r\n      //       MunicipalityNames:\r\n      //         response.types[0].domains.MUNICIPALITY_NAME.codedValues,\r\n      //     });\r\n      //   }\r\n      // );\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const {\r\n      input,\r\n      mainObject,\r\n      currentModule: { id },\r\n    } = this.props;\r\n    if (input.value.isReset) {\r\n      input.value.isReset = false;\r\n      this.resetFields();\r\n      this.map.enableMapNavigation();\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log(\"coords\", nextProps);\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n\r\n    if (this.state.radioValue != values?.landData?.ParcelChooseType)\r\n      this.setState({ radioValue: values?.landData?.ParcelChooseType });\r\n\r\n    return !isEqual(\r\n      { state: this.state, props: this.props },\r\n      { props: nextProps, state: nextState }\r\n    );\r\n  }\r\n\r\n  openPopup = (scope) => {\r\n    var fields = this.parcelDataFields;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...scope.state.parcelData },\r\n          ok(values) {\r\n            scope.state[\"parcelData\"] = values;\r\n            scope.setToStore();\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  // onMunChange = (e) => {\r\n  //   //\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   this.setState({\r\n  //     munval: e,\r\n  //     requiredMun: true,\r\n  //     planeval: undefined,\r\n  //     subTypeval: undefined,\r\n  //     subNameval: undefined,\r\n  //     blockval: undefined,\r\n  //     parcelval: undefined,\r\n  //     selectedLands: [],\r\n  //     parcelData: {},\r\n  //     selectedLandsT: [],\r\n  //     PlanNum: [],\r\n  //     blockNum: [],\r\n  //     subDivNames: [],\r\n  //     subDivType: [],\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //   });\r\n  //   this.planId = null;\r\n\r\n  //   axios\r\n  //     .get(\r\n  //       window.workFlowUrl +\r\n  //         \"/utilityType/\" +\r\n  //         this.props.mainObject.serviceSubmissionType.submission\r\n  //           .utilitytype_id +\r\n  //         \"/utilityClass?municipalityCode=\" +\r\n  //         e\r\n  //     )\r\n  //     .then((response) => {\r\n  //       this.cateogry = response.data;\r\n  //     });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Municipality_Boundary,\r\n  //       `MUNICIPALITY_NAME='${e}'`,\r\n  //       true,\r\n  //       [\"MUNICIPALITY_NAME\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //     },\r\n  //   });\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Plan_Data,\r\n  //       `MUNICIPALITY_NAME='${e}'`,\r\n  //       false,\r\n  //       [\"PLAN_SPATIAL_ID\", \"PLAN_NO\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({\r\n  //         PlanNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i: uniqid(),\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  resetFields = () => {\r\n    resetMapData(this.map);\r\n    onMunChange(this, undefined);\r\n    this.props.input.onChange({});\r\n    this.setState({\r\n      selectedLands: [],\r\n      selectedLandsT: [],\r\n      parcelData: {},\r\n      polygonPoints: [],\r\n      x: \"\",\r\n      y: \"\",\r\n      parcel_area: \"\",\r\n      parcel_desc: \"\",\r\n      coordinateParcel: null,\r\n      conditions: [],\r\n    });\r\n  };\r\n\r\n  // onPlaneChange = (f) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n\r\n  //   var planSpatialId = this.state.PlanNum.filter((m) => m.i == f)?.[0]?.attributes\r\n  //     ?.PLAN_SPATIAL_ID;\r\n  //   this.setState({\r\n  //     plan_no: this.state.PlanNum.filter((m) => m.i == f)?.[0]?.attributes?.PLAN_NO,\r\n  //     planeval: f,\r\n  //     subTypeval: undefined,\r\n  //     subNameval: undefined,\r\n  //     blockval: undefined,\r\n  //     parcelval: undefined,\r\n  //     blockNum: [],\r\n  //     subDivNames: [],\r\n  //     subDivType: [],\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Plan_Data,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       true,\r\n  //       [\"MUNICIPALITY_NAME\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //       this.planId = planSpatialId;\r\n  //     },\r\n  //   });\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Survey_Block,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       false,\r\n  //       [\"BLOCK_NO\", \"BLOCK_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({ blockNum: res.features });\r\n  //     },\r\n  //   });\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Landbase_Parcel,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       false,\r\n  //       [\"PARCEL_MAIN_LUSE\", \"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     },\r\n  //   });\r\n  //   esriRequest(mapUrl + \"/\" + this.LayerID.Subdivision).then((response) => {\r\n  //     this.setState({ subDivType: response.fields[7].domain.codedValues });\r\n  //   });\r\n  // };\r\n  // onSubTypeChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   this.setState({\r\n  //     subType_name: this.state.subDivType.filter((m) => m.code == e)[0].name,\r\n  //     subTypeval: e,\r\n  //     subNameval: undefined,\r\n  //     blockval: undefined,\r\n  //     parcelval: undefined,\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Subdivision,\r\n  //       `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${this.planId}`,\r\n  //       false,\r\n  //       [\"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({ subDivNames: res.features });\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  // onSubNameChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   this.setState({\r\n  //     subName_name: this.state.subDivNames.filter(\r\n  //       (m) => m.attributes.SUBDIVISION_SPATIAL_ID == e\r\n  //     )?.[0]?.attributes?.SUBDIVISION_DESCRIPTION,\r\n  //     subNameval: e,\r\n  //     blockval: undefined,\r\n  //     parcelval: undefined,\r\n  //     parcelNum: [],\r\n  //     parcelId: null,\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Subdivision,\r\n  //       `SUBDIVISION_SPATIAL_ID=${e}`,\r\n  //       true,\r\n  //       [\"SUBDIVISION_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //     },\r\n  //   });\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Landbase_Parcel,\r\n  //       `SUBDIVISION_SPATIAL_ID=${e}`,\r\n  //       false,\r\n  //       [\"PARCEL_MAIN_LUSE\", \"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  // onBlockChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   this.setState({\r\n  //     block_no: this.state.blockNum.filter(\r\n  //       (m) => m.attributes.BLOCK_SPATIAL_ID == e\r\n  //     )?.[0]?.attributes?.BLOCK_NO,\r\n  //     blockval: e,\r\n  //     parcelval: undefined,\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Survey_Block,\r\n  //       `BLOCK_SPATIAL_ID=${e}`,\r\n  //       true,\r\n  //       [\"BLOCK_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //     },\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Landbase_Parcel,\r\n  //       `BLOCK_SPATIAL_ID=${e}`,\r\n  //       false,\r\n  //       [\"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  // onLandParcelChange = (f) => {\r\n  //   if (!this.state.selectedLands.length) {\r\n  //     var e = this.state.parcelNum.filter((m) => m.i === f)?.[0]?.attributes\r\n  //       ?.PARCEL_SPATIAL_ID;\r\n  //     this.setState({ parcelId: e, parcelval: f });\r\n  //     this.RolBackPol = this.pol;\r\n  //     this.RolBackParcelNum = this.state.parcelNum;\r\n\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Landbase_Parcel,\r\n  //         `PARCEL_SPATIAL_ID='${e}'`,\r\n  //         true,\r\n  //         [\"PARCEL_SPATIAL_ID\"]\r\n  //       ),\r\n  //       callbackResult: (res) => {\r\n  //         this.selectedLandsT = [];\r\n  //         highlightFeature(res.features[0], this.map, {\r\n  //           layerName: \"SelectGraphicLayer\",\r\n  //           strokeColor: [0, 0, 0],\r\n  //           highlightWidth: 3,\r\n  //           isHighlighPolygonBorder: true,\r\n  //           isZoom: true,\r\n  //           zoomFactor: 50,\r\n  //         });\r\n  //       },\r\n  //     });\r\n  //   } else {\r\n  //     var g = this.state.parcelNum.filter((m) => m.i == f)[0];\r\n  //     this.setState({ parcelId: g.attributes.PARCEL_SPATIAL_ID });\r\n  //     highlightFeature(g, this.map, {\r\n  //       layerName: \"SelectGraphicLayer\",\r\n  //       strokeColor: [0, 0, 0],\r\n  //       isHighlighPolygonBorder: true,\r\n  //       highlightWidth: 3,\r\n  //     });\r\n  //     this.setState({ parcelval: f });\r\n  //   }\r\n  // };\r\n\r\n  addParcelToSelect = () => {\r\n    if (this.state.selectedLands && this.state.selectedLands.length > 0) {\r\n      this.setState({\r\n        parcelId:\r\n          this.state.selectedLands[this.state.selectedLands.length - 1].id,\r\n      });\r\n\r\n      intersectQueryTask({\r\n        outFields: [\r\n          \"MUNICIPALITY_NAME\",\r\n          \"PARCEL_MAIN_LUSE\",\r\n          \"PARCEL_AREA\",\r\n          \"PARCEL_LAT_COORD\",\r\n          \"PARCEL_LONG_COORD\",\r\n          \"PLAN_NO\",\r\n          \"PARCEL_PLAN_NO\",\r\n          \"USING_SYMBOL\",\r\n          \"PARCEL_SPATIAL_ID\",\r\n        ],\r\n        geometry:\r\n          this.state.selectedLands[this.state.selectedLands.length - 1]\r\n            .geometry,\r\n        url: mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n        where: \"PARCEL_PLAN_NO is not null\",\r\n        callbackResult: (res) => {\r\n          getFeatureDomainName(res.features, this.LayerID.Landbase_Parcel).then(\r\n            (r) => {\r\n              res.features = res.features.map((e, i) => {\r\n                return {\r\n                  ...e,\r\n                  i: uniqid(),\r\n                };\r\n              });\r\n              this.selectedLandsT.push(res);\r\n              this.DrawGraph();\r\n            }\r\n          );\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  DrawGraph = (isclick) => {\r\n    if (!this.state.selectedLands.length && !isclick) {\r\n      this.map.graphics.clear();\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n\r\n      highlightFeature(this.RolBackPol, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        isZoom: true,\r\n        isHiglightSymbol: true,\r\n        highlighColor: [255, 0, 0, 0.25],\r\n      });\r\n\r\n      this.setState({\r\n        parcelSearch: null,\r\n        parcelNum: this.RolBackParcelNum,\r\n        parcelval: undefined,\r\n      });\r\n    } else {\r\n      this.parcelDis = selectDis(this.selectedLandsT);\r\n      this.setState({ parcelSearch: null, parcelNum: this.parcelDis });\r\n\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n      highlightFeature(\r\n        this.parcelDis.filter(\r\n          (element) =>\r\n            !this.state.selectedLands.find(\r\n              (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n            )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectLandsGraphicLayer\",\r\n          noclear: false,\r\n          isZoom: false,\r\n          isHiglightSymbol: true,\r\n          highlighColor: [0, 255, 0, 0.5],\r\n          zoomFactor: 50,\r\n        }\r\n      );\r\n\r\n      /*this.parcelDis.filter(element => !this.state.selectedLands.find(i => i.id === element.attributes.PARCEL_SPATIAL_ID)).forEach((f)=>{\r\n\r\n        addParcelNo( f.geometry.getExtent().getCenter() , this.map ,f.attributes.PARCEL_PLAN_NO+'', \"ParcelPlanNoGraphicLayer\",14,[0,0,0])\r\n\r\n      })*/\r\n\r\n      highlightFeature(\r\n        this.parcelDis.filter((element) =>\r\n          this.state.selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectLandsGraphicLayer\",\r\n          noclear: true,\r\n          attr: { isParcel: true },\r\n          isZoom: true,\r\n          isHighlighPolygonBorder: true,\r\n          zoomFactor: 50,\r\n        }\r\n      );\r\n\r\n      /*this.parcelDis.filter(element => this.state.selectedLands.find(i => i.id === element.attributes.PARCEL_SPATIAL_ID)).forEach((f)=>{\r\n\r\n        addParcelNo( f.geometry.getExtent().getCenter() , this.map ,f.attributes.PARCEL_PLAN_NO+'', \"ParcelPlanNoGraphicLayer\",14,[0,0,0])\r\n\r\n      })*/\r\n    }\r\n  };\r\n\r\n  mapLoaded = (map) => {\r\n    this.map = map;\r\n    if (\r\n      this.props.input &&\r\n      this.props.input.value &&\r\n      this.props.input.value.parcels\r\n    ) {\r\n      highlightFeature(this.props.input.value.parcels, this.map, {\r\n        layerName: \"SelectLandsGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: true,\r\n        attr: { isParcel: true },\r\n        isHighlighPolygonBorder: true,\r\n        zoomFactor: 50,\r\n      });\r\n\r\n      const {\r\n        input: { value },\r\n      } = this.props;\r\n      this.props.input.onChange({\r\n        ...value,\r\n        conditions: this.state.conditions,\r\n        temp: {\r\n          map: this.map,\r\n          mun: this.props.input.value?.temp?.mun,\r\n          plan: this.props.input.value?.temp?.plan,\r\n          subtype: this.props.input.value?.temp?.subtype,\r\n          subname: this.props.input.value?.temp?.subname,\r\n          block: this.props.input.value?.temp?.block,\r\n          parcel: this.props.input.value?.temp?.parcel,\r\n          coordinateParcel: this.props.input.value?.coordinateParcel,\r\n          parcelNum: this.props.input.value?.temp?.parcelNum,\r\n        },\r\n        parcels: [...this.props.input.value?.parcels],\r\n        parcelData: { ...this.props.input.value?.parcelData },\r\n      });\r\n    }\r\n    this.setState({ mapLoaded: true });\r\n\r\n    this.map.on(\"click\", (geo) => {\r\n      intersectQueryTask({\r\n        outFields: [\r\n          \"MUNICIPALITY_NAME\",\r\n          \"PARCEL_MAIN_LUSE\",\r\n          \"PARCEL_AREA\",\r\n          \"PARCEL_LAT_COORD\",\r\n          \"PARCEL_LONG_COORD\",\r\n          \"PLAN_NO\",\r\n          \"PARCEL_PLAN_NO\",\r\n          \"USING_SYMBOL\",\r\n          \"PARCEL_SPATIAL_ID\",\r\n        ],\r\n        geometry: geo.mapPoint,\r\n        url: mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n        where: \"PARCEL_PLAN_NO is not null\",\r\n        callbackResult: (res) => {\r\n          if (res.features.length > 0) {\r\n            axios\r\n              .get(\r\n                window.workFlowUrl +\r\n                  \"/utilityType/\" +\r\n                  this.props.mainObject.serviceSubmissionType.submission\r\n                    .utilitytype_id +\r\n                  \"/utilityClass?municipalityCode=\" +\r\n                  res.features[0].attributes.MUNICIPALITY_NAME\r\n              )\r\n              .then((response) => {\r\n                this.cateogry = response.data;\r\n              });\r\n            this.setState({\r\n              munval: res.features[0].attributes.MUNICIPALITY_NAME,\r\n            });\r\n            getFeatureDomainName(\r\n              res.features,\r\n              this.LayerID.Landbase_Parcel\r\n            ).then((r) => {\r\n              this.setState({\r\n                parcelSearch: null,\r\n                parcelNum: res.features.map((e, i) => {\r\n                  return {\r\n                    ...e,\r\n                    i,\r\n                  };\r\n                }),\r\n              });\r\n\r\n              res.features = res.features.map((e, i) => {\r\n                return {\r\n                  ...e,\r\n                  i,\r\n                };\r\n              });\r\n\r\n              if (\r\n                this.selectedLandsT.length == 0 ||\r\n                this.selectedLands.length == 0\r\n              ) {\r\n                this.selectedLandsT.push(res);\r\n                this.DrawGraph(true);\r\n                this.onLandParcelChange(0);\r\n              }\r\n            });\r\n          }\r\n        },\r\n      });\r\n    });\r\n\r\n    this.props.setCurrentMap(map);\r\n  };\r\n\r\n  myChangeHandler = (name, event) => {\r\n    this[\"edit_\" + name] = event.target.value;\r\n  };\r\n\r\n  enableEdit(name, i) {\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  }\r\n\r\n  showEditBtn(name, value) {\r\n    if (name == \"USING_SYMBOL\") {\r\n      return value == null;\r\n    } else {\r\n      return (\r\n        [\r\n          \"PARCEL_AREA\",\r\n          \"PARCEL_BLOCK_NO\",\r\n          \"DISTRICT_NAME\",\r\n          \"SUBDIVISION_TYPE\",\r\n          \"SUBDIVISION_DESCRIPTION\",\r\n        ].indexOf(name) > -1\r\n      );\r\n    }\r\n  }\r\n\r\n  saveEdit(id, name, i) {\r\n    let findParcel = this.props.input.value.parcels.find((p) => {\r\n      return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n    });\r\n    if (this[\"edit_\" + name]) {\r\n      findParcel.attributes[name] = this[\"edit_\" + name];\r\n      let selectLand = this.state.selectedLands.find((p) => {\r\n        return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n      });\r\n\r\n      selectLand.attributes[name] = this[\"edit_\" + name];\r\n      this.props.input.onChange({\r\n        ...this.props.input.value,\r\n        parcels: [...this.props.input.value.parcels],\r\n        parcelData: { ...this.props.input.value.parcelData },\r\n      });\r\n      this.setState({\r\n        [name + \"_isEdit_\" + i]: false,\r\n        selectedLands: [...this.state.selectedLands],\r\n        parcelData: { ...this.state.parcelData },\r\n      });\r\n    } else {\r\n      this.setState({\r\n        [name + \"_isEdit_\" + i]: false,\r\n        parcelData: { ...this.state.parcelData },\r\n      });\r\n    }\r\n  }\r\n\r\n  OnParcelSelect = () => {\r\n    this.setState({ parcelval: undefined });\r\n    clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n\r\n    if (\r\n      !this.state.selectedLands.filter((e) => e.id === this.state.parcelId)\r\n        .length\r\n    ) {\r\n      queryTask({\r\n        ...querySetting(\r\n          this.LayerID.Landbase_Parcel,\r\n          `PARCEL_SPATIAL_ID =${this.state.parcelId}`,\r\n          true,\r\n          [\r\n            \"PARCEL_AREA\",\r\n            \"PARCEL_MAIN_LUSE\",\r\n            \"PARCEL_LAT_COORD\",\r\n            \"PARCEL_LONG_COORD\",\r\n            \"PLAN_NO\",\r\n            \"PARCEL_PLAN_NO\",\r\n            \"USING_SYMBOL\",\r\n            \"PARCEL_BLOCK_NO\",\r\n            \"DISTRICT_NAME\",\r\n            \"SUBDIVISION_DESCRIPTION\",\r\n            \"PARCEL_MAIN_LUSE\",\r\n            \"SUBDIVISION_TYPE\",\r\n            \"MUNICIPALITY_NAME\",\r\n            \"PARCEL_SPATIAL_ID\",\r\n          ]\r\n        ),\r\n        callbackResult: (res) => {\r\n          if (\r\n            this.state.selectedLands &&\r\n            this.state.selectedLands.length == 0\r\n          ) {\r\n            queryTask({\r\n              ...querySetting(\r\n                this.LayerID.Tbl_Parcel_Conditions,\r\n                `USING_SYMBOL_CODE ='${res.features[0].attributes.USING_SYMBOL}'`,\r\n                false,\r\n                [\r\n                  \"SLIDE_AREA\",\r\n                  \"MIN_FROT_OFFSET\",\r\n                  \"BUILDING_RATIO\",\r\n                  \"FRONT_OFFSET\",\r\n                  \"SIDE_OFFSET\",\r\n                  \"BACK_OFFSET\",\r\n                  \"FLOORS\",\r\n                  \"FLOOR_HEIGHT\",\r\n                  \"FAR\",\r\n                  \"ADD_FLOOR\",\r\n                ]\r\n              ),\r\n              callbackResult: (condition) => {\r\n                this.setState({\r\n                  conditions: condition.features,\r\n                });\r\n                getFeatureDomainName(\r\n                  res.features,\r\n                  this.LayerID.Landbase_Parcel\r\n                ).then((r) => {\r\n                  this.setToStore(r);\r\n                  this.addParcelToSelect();\r\n                });\r\n              },\r\n            });\r\n          } else {\r\n            getFeatureDomainName(\r\n              res.features,\r\n              this.LayerID.Landbase_Parcel\r\n            ).then((r) => {\r\n              this.setToStore(r);\r\n              this.addParcelToSelect();\r\n              this.setState({ state: this.state });\r\n            });\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  setToStore = (r) => {\r\n    console.log(this.state.coordinateParcel);\r\n    let data;\r\n    if (r) {\r\n      r[0].attributes.category = this.cateogry;\r\n      const {\r\n        input: { value },\r\n      } = this.props;\r\n      data = {\r\n        ...value,\r\n        mapGraphics: [],\r\n        conditions: this.state.conditions,\r\n        temp: {\r\n          map: this.map,\r\n          mun: this.state.munval,\r\n          plan: this.state.plan_no,\r\n          subtype: this.state.subType_name,\r\n          subname: this.state.subName_name,\r\n          block: this.state.block_no,\r\n          parcel: this.state.parcelval,\r\n          coordinateParcel: this.state.coordinateParcel,\r\n          parcelNum: this.parcelDis,\r\n        },\r\n        parcels: [\r\n          ...this.state.selectedLands,\r\n          {\r\n            attributes: r[0].attributes,\r\n            id: this.state.parcelId,\r\n            geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n          },\r\n        ],\r\n        parcelData: { ...this.state.parcelData },\r\n      };\r\n\r\n      if (this.state.radioValue == 1)\r\n        this.state.selectedLands.push({\r\n          geometry: r[0].geometry,\r\n          attributes: r[0].attributes,\r\n          id: this.state.parcelId,\r\n        });\r\n    } else {\r\n      const {\r\n        input: { value },\r\n      } = this.props;\r\n      data = {\r\n        ...value,\r\n        conditions: this.state.conditions,\r\n        temp: {\r\n          map: this.map,\r\n          mun: this.state.munval,\r\n          plan: this.state.plan_no,\r\n          subtype: this.state.subType_name,\r\n          subname: this.state.subName_name,\r\n          block: this.state.block_no,\r\n          parcel: this.state.parcelval,\r\n          coordinateParcel: this.state.coordinateParcel,\r\n          parcelNum: this.parcelDis,\r\n        },\r\n        parcels: [...this.state.selectedLands],\r\n        parcelData: { ...this.state.parcelData },\r\n      };\r\n    }\r\n\r\n    this.props.input.onChange({ ...data });\r\n  };\r\n\r\n  LandHoverOn = (f) => {\r\n    if (this.state.selectedLands.length) {\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      var parcel = this.state.parcelNum.filter((m) => m.i == f.key)[0];\r\n      highlightFeature(parcel, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        strokeColor: [0, 0, 0],\r\n        isHighlighPolygonBorder: true,\r\n        highlightWidth: 3,\r\n      });\r\n    }\r\n  };\r\n\r\n  LandHoverOff = (f) => {\r\n    if (this.state.selectedLands.length) {\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    }\r\n  };\r\n\r\n  remove = (item) => {\r\n    this.state.selectedLands.pop(item);\r\n    if (this.state.selectedLands == 0) {\r\n      this.state.parcelData = {};\r\n    }\r\n    this.setToStore();\r\n    if (this.state.selectedLandsT) {\r\n      this.state.selectedLandsT.pop(item);\r\n    }\r\n\r\n    this.DrawGraph();\r\n\r\n    this.setState({\r\n      selectedLands: [...this.state.selectedLands],\r\n      parcelData: this.state.parcelData,\r\n    });\r\n  };\r\n\r\n  addPoint() {\r\n    LoadModules([\"esri/geometry/Point\"]).then(([Point]) => {\r\n      let point = new Point({\r\n        x: parseFloat(this.state.x),\r\n        y: parseFloat(this.state.y),\r\n        spatialReference: { wkid: 4326 },\r\n      });\r\n\r\n      document.getElementById(\"coorForm\").reset();\r\n\r\n      this.polygonPoints = this.polygonPoints || [];\r\n      this.polygonPoints.push(point);\r\n\r\n      this.setState({ polygonPoints: this.polygonPoints, x: null, y: null });\r\n    });\r\n  }\r\n\r\n  zoomtopoint() {\r\n    LoadModules([\"esri/geometry/Polygon\", \"esri/geometry/Point\"]).then(\r\n      ([Polygon, Point]) => {\r\n        if (!this.state.munval) {\r\n          this.setState({ requiredMun: true });\r\n          return;\r\n        }\r\n        this.props.setLoading(true);\r\n        this.polygonPoints.push(this.polygonPoints[0]);\r\n        project(this.polygonPoints, 32639, (t) => {\r\n          let polygon = new Polygon({\r\n            rings: [\r\n              t.map((polygon) => {\r\n                return [polygon.x, polygon.y];\r\n              }),\r\n            ],\r\n            spatialReference: this.map.spatialReference,\r\n          });\r\n\r\n          intersectQueryTask({\r\n            outFields: [\r\n              \"MUNICIPALITY_NAME\",\r\n              \"PARCEL_MAIN_LUSE\",\r\n              \"PARCEL_AREA\",\r\n              \"PARCEL_LAT_COORD\",\r\n              \"PARCEL_LONG_COORD\",\r\n              \"PLAN_NO\",\r\n              \"PARCEL_PLAN_NO\",\r\n              \"USING_SYMBOL\",\r\n              \"PARCEL_SPATIAL_ID\",\r\n            ],\r\n            geometry: polygon,\r\n            url: mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n            callbackResult: (res) => {\r\n              if (res.features && res.features.length == 0) {\r\n                highlightFeature([{ geometry: polygon }], this.map, {\r\n                  layerName: \"SelectGraphicLayer\",\r\n                  isZoom: true,\r\n                  zoomFactor: 10,\r\n                  isHighlighPolygonBorder: true,\r\n                  highlighColor: [0, 255, 255, 0.7],\r\n                });\r\n\r\n                this.setState({\r\n                  requiredMun: false,\r\n                  coordinateParcel: {\r\n                    geometry: polygon,\r\n                    attributes: {\r\n                      MUNICIPALITY_NAME_Code: this.state.munval,\r\n                      PARCEL_PLAN_NO: this.state.parcel_desc,\r\n                      PARCEL_AREA: this.state.parcel_area,\r\n                      MUNICIPALITY_NAME: this.state.MunicipalityNames?.find(\r\n                        (x) => {\r\n                          return x.code == this.state.munval;\r\n                        }\r\n                      ).name,\r\n                    },\r\n                  },\r\n                });\r\n\r\n                this.setToStore([\r\n                  {\r\n                    geometry: polygon,\r\n                    attributes: {\r\n                      MUNICIPALITY_NAME_Code: this.state.munval,\r\n                      PARCEL_PLAN_NO: this.state.parcel_desc,\r\n                      PARCEL_AREA: this.state.parcel_area,\r\n                      MUNICIPALITY_NAME: this.state.MunicipalityNames?.find(\r\n                        (x) => {\r\n                          return x.code == this.state.munval;\r\n                        }\r\n                      ).name,\r\n                    },\r\n                  },\r\n                ]);\r\n\r\n                this.props.setLoading(false);\r\n              } else {\r\n                message.error(\r\n                  \"الأرض المختارة تتقاطع مع أرض بخارطة الأساس . يمكنك اختيار الارض بالضغط على الخريطة لاضافتها\"\r\n                );\r\n                this.props.setLoading(false);\r\n              }\r\n            },\r\n          });\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  convertToArabic(num) {\r\n    if (num) {\r\n      var id = [\"۰\", \"۱\", \"۲\", \"۳\", \"٤\", \"٥\", \"٦\", \"۷\", \"۸\", \"۹\"];\r\n      return num.replace(/[0-9]/g, function (w) {\r\n        return id[+w];\r\n      });\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  replaceAll(str, find, replace) {\r\n    return str.replace(new RegExp(find, \"g\"), replace);\r\n  }\r\n\r\n  updateDescValue = (evt) => {\r\n    this.setState({\r\n      parcel_desc: evt.target.value,\r\n    });\r\n  };\r\n  updateareaValue = (evt) => {\r\n    this.setState({\r\n      parcel_area: evt.target.value,\r\n    });\r\n  };\r\n\r\n  updateYValue = (evt) => {\r\n    this.setState({\r\n      y: evt.target.value,\r\n    });\r\n  };\r\n  updateXValue = (evt) => {\r\n    this.setState({\r\n      x: evt.target.value,\r\n    });\r\n  };\r\n\r\n  removeCoordinateParcel() {\r\n    this.setState({ coordinateParcel: null });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      selectedLands,\r\n      MunicipalityNames,\r\n      subDivType,\r\n      subDivNames,\r\n      subNameval,\r\n      blockNum,\r\n      blockval,\r\n      PlanNum,\r\n      mapLoaded,\r\n      planeval,\r\n      parcelSearch,\r\n      parcelNum,\r\n      parcelval,\r\n      conditions,\r\n      radioValue,\r\n      coordinateParcel,\r\n    } = this.state;\r\n    const { fullMapWidth } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <StickyContainer style={{ direction: \"ltr\" }}>\r\n          <Sticky bottomOffset={80}>\r\n            {({ style }) => (\r\n              <MapBtnsComponent\r\n                style={style}\r\n                {...this.props}\r\n              ></MapBtnsComponent>\r\n            )}\r\n          </Sticky>\r\n        </StickyContainer>\r\n        <div className={\"content-section implementation\"}>\r\n          {mapLoaded && (\r\n            <div style={{ padding: \"10px\" }}>\r\n              {radioValue == 2 ? (\r\n                <div>\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onChange={(val) => {\r\n                      onMunChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    value={this.state.munval}\r\n                    placeholder=\"اختر اسم البلديه\"\r\n                    disabled={!this.state.MunicipalityNames?.length}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) => {\r\n                      if (option.props.children) {\r\n                        return (\r\n                          option.props.children.find((i) => {\r\n                            return i && i.indexOf(input.trim().toLowerCase()) >= 0;\r\n                          }) != null\r\n                        );\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    }}\r\n                  >\r\n                    {MunicipalityNames?.map((e) => (\r\n                      <Option key={e.code} value={e.code}>\r\n                        {e.name}{\" \"}\r\n                      </Option>\r\n                    ))}\r\n                  </Select>\r\n\r\n                  <Form\r\n                    id=\"coorForm\"\r\n                    className=\"top1\"\r\n                    style={{ direction: \"rtl\", padding: \"5px\" }}\r\n                  >\r\n                    <div>\r\n                      <label>وصف الأرض</label>\r\n                      <input\r\n                        className=\"ant-input\"\r\n                        type=\"text\"\r\n                        placeholder=\"وصف الأرض\"\r\n                        required={true}\r\n                        value={this.state.parcel_desc}\r\n                        onChange={this.updateDescValue}\r\n                      />\r\n\r\n                      <label>مساحة الأرض</label>\r\n                      <input\r\n                        className=\"ant-input\"\r\n                        type=\"text\"\r\n                        placeholder=\"مساحة الأرض\"\r\n                        required={true}\r\n                        value={this.state.parcel_area}\r\n                        onChange={this.updateareaValue}\r\n                      />\r\n\r\n                      <label>دوائر العرض</label>\r\n                      <input\r\n                        className=\"ant-input\"\r\n                        type=\"number\"\r\n                        placeholder=\"ex 26.424895\"\r\n                        required={true}\r\n                        value={this.state.y}\r\n                        onChange={this.updateYValue}\r\n                      />\r\n\r\n                      <label style={{ marginTop: \"15px\" }}>خط الطول</label>\r\n                      <input\r\n                        className=\"ant-input\"\r\n                        type=\"number\"\r\n                        placeholder=\"ex 50.067738\"\r\n                        required={true}\r\n                        value={this.state.x}\r\n                        onChange={this.updateXValue}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"grid\",\r\n                        gridGap: \"10px\",\r\n                        marginTop: \"20px\",\r\n                      }}\r\n                    >\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-warning\"\r\n                        onClick={this.addPoint.bind(this)}\r\n                      >\r\n                        {\" \"}\r\n                        إضافة النقطة\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        disabled={\r\n                          this.state.polygonPoints.length < 3 ||\r\n                          coordinateParcel ||\r\n                          !this.state.requiredMun\r\n                        }\r\n                        className=\"btn btn-success\"\r\n                        onClick={this.zoomtopoint.bind(this)}\r\n                      >\r\n                        {\" \"}\r\n                        إضافة الأرض\r\n                      </button>\r\n                    </div>\r\n                    {this.state.polygonPoints.length > 0 && (\r\n                      <div style={{ marginTop: \"20px\" }}>\r\n                        <table>\r\n                          <thead>\r\n                            <th>دوائر العرض</th>\r\n                            <th>خطوط الطول</th>\r\n                          </thead>\r\n                          <tbody>\r\n                            {this.state.polygonPoints.map((point, k) => {\r\n                              return (\r\n                                <tr key={k}>\r\n                                  <td>{point.y}</td>\r\n                                  <td>{point.x}</td>\r\n                                  <td>\r\n                                    <button\r\n                                      type=\"button\"\r\n                                      className=\" btn btn-danger \"\r\n                                      onClick={this.handleDelete.bind(this, k)}\r\n                                    >\r\n                                      حذف\r\n                                    </button>\r\n                                  </td>\r\n                                </tr>\r\n                              );\r\n                            })}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )}\r\n                  </Form>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onChange={(val) => {\r\n                      onMunChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    value={this.state.munval}\r\n                    placeholder=\"اختر اسم البلديه\"\r\n                    disabled={!this.state.MunicipalityNames?.length}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) => {\r\n                      if (option.props.children) {\r\n                        return (\r\n                          option.props.children.find((i) => {\r\n                            return i && i.indexOf(input.trim().toLowerCase()) >= 0;\r\n                          }) != null\r\n                        );\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    }}\r\n                  >\r\n                    {MunicipalityNames?.map((e) => (\r\n                      <Option key={e.code} value={e.code}>\r\n                        {e.name}{\" \"}\r\n                      </Option>\r\n                    ))}\r\n                  </Select>\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    onChange={(val) => {\r\n                      onPlaneChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    autoFocus\r\n                    disabled={!PlanNum.length}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) => {\r\n                      if (option.props.children) {\r\n                        return (\r\n                          option.props.children\r\n                            ?.toLowerCase()\r\n                            ?.indexOf(convertToArabic(input)) != -1\r\n                        );\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    }}\r\n                    value={planeval}\r\n                    placeholder=\"رقم المخطط\"\r\n                    notFoundContent=\"not found\"\r\n                  >\r\n                    {PlanNum\r\n                    //.slice(0, 100)\r\n                    .map((d, i) => {\r\n                      return (\r\n                        <Option key={i} value={d.i}>\r\n                          {localizeNumber(d.attributes.PLAN_NO)}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onChange={(val) => {\r\n                      onSubTypeChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    disabled={!subDivType.length}\r\n                    value={this.state.subTypeval}\r\n                    placeholder={\"نوع التقسيم\"}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) => {\r\n                      if (option.props.children) {\r\n                        return (\r\n                          option.props.children\r\n                            ?.indexOf(convertToArabic(input)) != -1\r\n                        );\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    }}\r\n                  >\r\n                    {subDivType\r\n                    //.slice(0, 100)\r\n                    .map((e, i) => (\r\n                      <Option key={i} value={e.code}>\r\n                        {\" \"}\r\n                        {e.name}{\" \"}\r\n                      </Option>\r\n                    ))}\r\n                  </Select>\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onChange={(val) => {\r\n                      onSubNameChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    disabled={!subDivNames.length}\r\n                    placeholder=\"اسم التقسيم\"\r\n                    value={subNameval}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) =>\r\n                      option.props.children\r\n                        ?.toLowerCase()\r\n                        ?.indexOf(convertToArabic(input)) != -1\r\n                    }\r\n                  >\r\n                    {subDivNames\r\n                    //.slice(0, 100)\r\n                    .map((e, i) => (\r\n                      <Option\r\n                        key={i}\r\n                        value={e.attributes.SUBDIVISION_SPATIAL_ID}\r\n                      >\r\n                        {\" \"}\r\n                        {e.attributes.SUBDIVISION_DESCRIPTION}\r\n                      </Option>\r\n                    ))}\r\n                  </Select>\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onChange={(val) => {\r\n                      onBlockChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    disabled={!blockNum.length}\r\n                    value={blockval}\r\n                    placeholder=\"رقم البلك\"\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) =>\r\n                      option.props.children\r\n                        ?.indexOf(convertToArabic(input || \"\")) != -1\r\n                    }\r\n                  >\r\n                    {blockNum\r\n                    //.slice(0, 100)\r\n                    .map((e, i) => (\r\n                      <Option key={i} value={e.attributes.BLOCK_SPATIAL_ID}>\r\n                        {localizeNumber(e.attributes.BLOCK_SPATIAL_ID)}\r\n                      </Option>\r\n                    ))}\r\n                  </Select>\r\n\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onChange={(val) => {\r\n                      onLandParcelChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    disabled={parcelNum && !parcelNum.length}\r\n                    filterOption={(input, option) => {\r\n                      if (option.props.children) {\r\n                        return (\r\n                          option.props.children\r\n                            ?.indexOf(convertToArabic(input)) != -1\r\n                        );\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    }}\r\n                    onSearch={(e) => {\r\n                      this.setState({ parcelSearch: e });\r\n                      onSearch(this, e);\r\n                    }}\r\n                    value={parcelval}\r\n                    placeholder=\"رقم قطعة الارض\"\r\n                  >\r\n                    {parcelNum &&\r\n                      parcelNum\r\n                        .filter((e, i) => {\r\n                          if (parcelSearch) {\r\n                            if (this.state.selectedLands.length) {\r\n                              return !this.state.selectedLands.find(\r\n                                (tt) =>\r\n                                  tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                  e.attributes.PARCEL_SPATIAL_ID\r\n                              );\r\n                            } else {\r\n                              return (\r\n                                e.attributes.PARCEL_PLAN_NO &&\r\n                                e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                                  parcelSearch.toLowerCase()\r\n                                ) >= 0\r\n                              );\r\n                            }\r\n                          } else {\r\n                            if (selectedLands.length) {\r\n                              return (\r\n                                !selectedLands.find(\r\n                                  (tt) =>\r\n                                    tt.attributes.PARCEL_PLAN_NO ==\r\n                                    e.attributes.PARCEL_PLAN_NO\r\n                                ) && e.attributes.PARCEL_PLAN_NO\r\n                              );\r\n                            } else {\r\n                              return e.attributes.PARCEL_PLAN_NO;\r\n                            }\r\n                          }\r\n                        })\r\n                        .slice(0, 100)\r\n                        .map((e, i) => {\r\n                          return (\r\n                            <Option\r\n                              onMouseEnter={this.LandHoverOn}\r\n                              onMouseLeave={this.LandHoverOff}\r\n                              key={e.attributes.PARCEL_SPATIAL_ID}\r\n                              value={e.i}\r\n                            >\r\n                              {localizeNumber(e.attributes.PARCEL_PLAN_NO)}\r\n                            </Option>\r\n                          );\r\n                        })}\r\n                  </Select>\r\n                  {this.state.selectedLands.length > 0 && (\r\n                    <label style={{ marginTop: 10, marginBottom: 10 }}>\r\n                      لاختيار الاراضى المجاورة. يرجى الاختيار من قائمة رقم قطعة\r\n                      الأرض\r\n                    </label>\r\n                  )}\r\n                  <Button\r\n                    className=\"add-gis\"\r\n                    disabled={this.state.parcelId === null}\r\n                    onClick={this.OnParcelSelect}\r\n                  >\r\n                    إضافة الأرض\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          <MapComponent\r\n            mapload={this.mapLoaded.bind(this)}\r\n            {...this.props}\r\n          ></MapComponent>\r\n        </div>\r\n        {mapLoaded && (\r\n          <div style={{ gridColumn: \"1/3\" }}>\r\n            {coordinateParcel && radioValue == 2 && (\r\n              <div>\r\n                <table\r\n                  className=\"table table-bordered\"\r\n                  style={{ marginTop: \"1%\" }}\r\n                >\r\n                  <thead>\r\n                    <th>اسم البلدية</th>\r\n                    <th>وصف الأرض</th>\r\n                    <th>مساحة الأرض</th>\r\n                    <th>الإجراءات</th>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>{coordinateParcel.attributes.MUNICIPALITY_NAME}</td>\r\n                      <td>{coordinateParcel.attributes.PARCEL_PLAN_NO}</td>\r\n                      <td>{coordinateParcel.attributes.PARCEL_AREA}</td>\r\n                      <td>\r\n                        <button\r\n                          className=\" btn btn-danger \"\r\n                          onClick={this.removeCoordinateParcel.bind(this)}\r\n                        >\r\n                          حذف\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n\r\n            {selectedLands && selectedLands.length > 0 && radioValue == 1 && (\r\n              <div>\r\n                <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n\r\n                <table\r\n                  className=\"table table-bordered\"\r\n                  style={{ marginTop: \"1%\" }}\r\n                >\r\n                  <thead>\r\n                    <tr>\r\n                      <th>رقم القطعه</th>\r\n                      <th>المساحه م2</th>\r\n                      <th>رقم البلك</th>\r\n                      <th>الحي</th>\r\n                      <th>نوع التقسيم</th>\r\n                      <th>اسم التقسيم</th>\r\n                      <th>رمز الاستخدام</th>\r\n                      <th> خيارات</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {selectedLands.map((e, i) => {\r\n                      return (\r\n                        <tr key={i}>\r\n                          {this.parcel_fields.map((field, k) => {\r\n                            return (\r\n                              <td key={k}>\r\n                                <div>\r\n                                  {!this.state[field + \"_isEdit_\" + i] ? (\r\n                                    <span>\r\n                                      <span>\r\n                                        {e.attributes[field] || \"غير متوفر\"}\r\n                                      </span>\r\n                                      {this.showEditBtn(\r\n                                        field,\r\n                                        e.attributes[field]\r\n                                      ) && (\r\n                                        <span>\r\n                                          <button\r\n                                            className=\"btn\"\r\n                                            style={{ marginRight: \"20px\" }}\r\n                                            onClick={this.enableEdit.bind(\r\n                                              this,\r\n                                              field,\r\n                                              i\r\n                                            )}\r\n                                          >\r\n                                            <i className=\"fas fa-edit\"></i>\r\n                                          </button>\r\n                                        </span>\r\n                                      )}\r\n                                    </span>\r\n                                  ) : (\r\n                                    <span\r\n                                      style={{\r\n                                        display: \"grid\",\r\n                                        gridTemplateColumns: \"1fr auto\",\r\n                                      }}\r\n                                    >\r\n                                      <input\r\n                                        key={i}\r\n                                        className=\"form-control\"\r\n                                        type=\"text\"\r\n                                        onChange={this.myChangeHandler.bind(\r\n                                          this,\r\n                                          field\r\n                                        )}\r\n                                      />\r\n                                      <button\r\n                                        className=\"btn\"\r\n                                        style={{ marginRight: \"20px\" }}\r\n                                        onClick={this.saveEdit.bind(\r\n                                          this,\r\n                                          e.id,\r\n                                          field,\r\n                                          i\r\n                                        )}\r\n                                      >\r\n                                        <i className=\"fa fa-floppy-o\"></i>\r\n                                      </button>\r\n                                    </span>\r\n                                  )}\r\n                                </div>\r\n                              </td>\r\n                            );\r\n                          })}\r\n\r\n                          {i === selectedLands.length - 1 ? (\r\n                            <td>\r\n                              <button\r\n                                className=\"btn follow\"\r\n                                style={{ margin: \"0px 5px\" }}\r\n                                onClick={() => {\r\n                                  this.openPopup(this);\r\n                                }}\r\n                              >\r\n                                حدود و أبعاد الأرض\r\n                              </button>\r\n                              <button\r\n                                className=\"bn btn btn-danger \"\r\n                                onClick={this.remove.bind(this, e)}\r\n                              >\r\n                                حذف\r\n                              </button>\r\n                            </td>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n\r\n                {false && conditions && (\r\n                  <div>\r\n                    {\" \"}\r\n                    <h1 className=\"titleSelectedParcel\">الاشتراطات</h1>\r\n                    <table\r\n                      className=\"table table-bordered\"\r\n                      style={{ marginTop: \"1%\" }}\r\n                    >\r\n                      <thead>\r\n                        <tr>\r\n                          <th>مساحة القسيمة (م2)</th>\r\n                          <th>الحد الأدنى للواجهة (م)</th>\r\n                          <th>نسبة البناء</th>\r\n                          <th>إرتداد الواجهة (م)</th>\r\n                          <th>ارتداد الجوانب (م)</th>\r\n                          <th>ارتداد خلفي (م)</th>\r\n                          <th>عدد الطوابق (م)</th>\r\n                          <th>ارتفاع الطابق (م)</th>\r\n                          <th>معامل كتلة البناء FAR</th>\r\n                          <th>يمكن اضافة دور</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {conditions.map((e, i) => {\r\n                          return (\r\n                            <tr key={i}>\r\n                              <td>{e.attributes.SLIDE_AREA}</td>\r\n                              <td>{e.attributes.MIN_FROT_OFFSET}</td>\r\n                              <td>{e.attributes.BUILDING_RATIO}</td>\r\n                              <td>{e.attributes.FRONT_OFFSET}</td>\r\n                              <td>{e.attributes.SIDE_OFFSET}</td>\r\n                              <td>{e.attributes.BACK_OFFSET}</td>\r\n                              <td>{e.attributes.FLOORS}</td>\r\n                              <td>{e.attributes.FLOOR_HEIGHT}</td>\r\n                              <td>{e.attributes.FAR}</td>\r\n                              <td>{e.attributes.ADD_FLOOR}</td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(IdentifyComponnentCoord);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAgoDA;AAAA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AAqBA;AACA;AAIA;AACA;AAiBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AA6HA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AApoikBA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA2LA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAWA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAwBA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAMA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAMA;AACA;AAKA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAOA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAGA;AAAA;AAGA;AACA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AAGA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AASA;AAAA;AAKA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAeA;AACA;AAAA;AAaA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAgBA;AACA;AAAA;AAEA;AACA;AAAA;AAaA;AACA;AAAA;AAAA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAAA;AACA;AAKA;AAEA;AAAA;AAOA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAAA;AAUA,sCA0CA;AAWA;AACA;AACA;;;;A","sourceRoot":""}
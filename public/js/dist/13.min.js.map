{"version":3,"file":"13.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/planDataStyle.css","webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/Entity/PlanEntity.js","webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/Helpers.js","webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/planDataStyle.css?51c2","webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/plansData_new.js","webpack:///./src/app/components/inputs/fields/label/index.js","webpack:///./src/app/components/inputs/fields/label/mapping.js","webpack:///./src/app/components/inputs/fields/label/typeofData/boolean.js","webpack:///./src/app/components/inputs/fields/label/typeofData/date.js","webpack:///./src/app/components/inputs/fields/label/typeofData/index.js","webpack:///./src/app/components/inputs/fields/label/typeofData/number.js","webpack:///./src/app/components/inputs/fields/label/typeofData/object.js","webpack:///./src/app/components/inputs/fields/label/typeofData/string.js"],"sourcesContent":["exports = module.exports = require(\"../../../../../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".usingsymbolStyle {\\r\\n    background: green;\\r\\n    color: white;\\r\\n    text-align: center;\\r\\n    padding: 15px;\\r\\n    margin-top: 15px;\\r\\n    margin-bottom: 15px;\\r\\n    font-size: 18px;\\r\\n}\\r\\n\\r\\n\\r\\n\", \"\"]);\n\n","import axios from \"axios\";\r\nimport { fetchData } from \"../../../../../../../helpers/apiMethods\";\r\nimport {\r\n  HasArabicCharacters,\r\n  IdentifyTask,\r\n  addGraphicToLayer,\r\n  addParcelNo,\r\n  calculateSchemanticProportions,\r\n  checkOverlappingFeaturesWithLayer,\r\n  checkUploadedLayersFullyContainedByBoundry,\r\n  computeLineAngle,\r\n  computePointDirection,\r\n  computeStreetAngle,\r\n  convertToArabic,\r\n  getColorFromCadIndex,\r\n  getFieldDomain,\r\n  getInfo,\r\n  getLayer,\r\n  getLengthDirectionByCentroid,\r\n  getLengthOffset,\r\n  getLineLength,\r\n  getPolygons,\r\n  getUsingSymbol,\r\n  intersectQueryTask,\r\n  isPointOrArc,\r\n  loadCurrentPlan,\r\n  project,\r\n  queryTask,\r\n  queryTask_updated,\r\n  resizeMap,\r\n  reverse,\r\n  zoomToLayer,\r\n} from \"../../common/common_func\";\r\nimport { LoadModules } from \"../../common/esri_loader\";\r\nimport { esriRequest } from \"../../common/esri_request\";\r\nimport { geometryServiceUrl, mapUrl } from \"../../mapviewer/config/map\";\r\nimport { isEmpty } from \"lodash\";\r\n\r\nArray.prototype.sum = (prop) => {\r\n  if (!this) return;\r\n  var total = 0;\r\n  for (var y = 0, _len = this.length; y < _len; y++) {\r\n    prop = prop.replace(/\\[(\\w+)\\]/g, \".$1\");\r\n    prop = prop.replace(/^\\./, \"\");\r\n    var a = prop.split(\".\");\r\n    var data = JSON.parse(JSON.stringify(this[y]));\r\n\r\n    for (var i = 0, n = a.length; i < n; ++i) {\r\n      var k = a[i];\r\n      if (k in data) {\r\n        data = data[k];\r\n      } else {\r\n        return 0;\r\n      }\r\n    }\r\n\r\n    total += data;\r\n  }\r\n  return total;\r\n};\r\n\r\nexport class PlanEntity {\r\n  constructor(props, plan) {\r\n    const {\r\n      mainObject: { currentStepId },\r\n      currentModule: {\r\n        record: { CurrentStep },\r\n      },\r\n    } = props;\r\n    let _props = props;\r\n    if (plan?.selectedCAD == \"firstCAD\" || plan?.selectedCAD == \"perfectCad\")\r\n      this.selectedCAD = \"perfectCad\";\r\n    else if (\r\n      plan?.selectedCAD == \"secondCAD\" ||\r\n      plan?.selectedCAD == \"secondCad\"\r\n    )\r\n      this.selectedCAD = \"secondCad\";\r\n    else if (plan?.selectedCAD == \"thirdCAD\" || plan?.selectedCAD == \"thirdCad\")\r\n      this.selectedCAD = \"thirdCad\";\r\n    this.selectedCADIndex = this?.selectedCAD\r\n      ? this?.selectedCAD == \"perfectCad\"\r\n        ? 0\r\n        : this?.selectedCAD == \"secondCad\"\r\n        ? 1\r\n        : 2\r\n      : -1;\r\n    this.layers =\r\n      (plan?.layers?.length && plan.layers) ||\r\n      _props.values?.mapviewer?.mapGraphics ||\r\n      [];\r\n    this.pageSize = _props?.pageSize || 15;\r\n    this.isInvestalIncluded = plan?.isInvestalIncluded || false;\r\n    this.statisticsParcels = plan?.statisticsParcels || [];\r\n    this.enableDownlaodCad = plan?.enableDownlaodCad || false;\r\n    this.planDescription = plan?.planDescription || \"\";\r\n    this.streets = plan?.streets || [];\r\n    this.detailsParcelTypes = plan?.detailsParcelTypes || [];\r\n    this.uplodedFeatures = plan?.uplodedFeatures || [];\r\n    this.streetsAnnotation = plan?.streetsAnnotation || [];\r\n    this.serviceSubType = plan?.serviceSubType || {};\r\n    this.serviceType = plan?.serviceType || {};\r\n    this.planUsingSymbol = plan?.planUsingSymbol || \"\";\r\n    this.hide_details =\r\n      plan?.hide_details || (this.statisticsParcels.length > 0 ? false : true);\r\n    this.servicesTypes = plan?.servicesTypes || [];\r\n    this.servicesSubTypes = plan?.servicesSubTypes || [];\r\n    this.TotalParcelArea = plan?.TotalParcelArea || 0;\r\n    this.current_step = (CurrentStep && CurrentStep.id) || currentStepId;\r\n    //this.totalParcelPage = plan?.totalParcelPage || 0;\r\n    //this.totalInvestalParcelPage = plan?.totalInvestalParcelPage || 0;\r\n    //this.totalStreetPage = plan?.totalStreetPage || 0;\r\n    this.minParcelIndex = plan?.minParcelIndex || 0;\r\n    this.maxParcelIndex = plan?.maxParcelIndex || 1 * this.pageSize;\r\n    this.minInvestalParcelIndex = plan?.minInvestalParcelIndex || 0;\r\n    this.maxInvestalParcelIndex =\r\n      plan?.maxInvestalParcelIndex || 1 * this.pageSize;\r\n\r\n    this.minStreetIndex = plan?.minStreetIndex || 0;\r\n    this.maxStreetIndex = plan?.maxStreetIndex || 1 * this.pageSize;\r\n    this.bufferDistance = plan?.bufferDistance || 5;\r\n\r\n    this.totalParcelPage =\r\n      plan?.uplodedFeatures?.[\r\n        plan?.selectedCADIndex || 0\r\n      ]?.shapeFeatures?.landbase?.filter((parcel) => parcel.is_cut != 2)\r\n        ?.length / this.pageSize || 0;\r\n    this.totalInvestalParcelPage =\r\n      plan?.uplodedFeatures?.[\r\n        plan?.selectedCADIndex || 0\r\n      ]?.shapeFeatures?.landbase?.filter((parcel) => parcel.is_cut == 2)\r\n        ?.length / this.pageSize || 0;\r\n    this.totalStreetPage =\r\n      (plan?.streets && plan?.streets.length / this.pageSize) || 0;\r\n\r\n    this.servicesLayer = _.filter(\r\n      window?.mapInfo?.info?.$layers?.layers || [],\r\n      (d) => {\r\n        return d.name == \"Serivces_Data\" || d.name == \"Service_Data\";\r\n      }\r\n    )[0];\r\n\r\n    if (\r\n      !plan?.buildingCondition?.length &&\r\n      !_props?.mainObject?.buildingCondition?.length\r\n    ) {\r\n      this.setBuildingCondition(_props).then((response) => {\r\n        \r\n        this.buildingCondition = response;\r\n      });\r\n    } else {\r\n      this.buildingCondition =\r\n        plan?.buildingCondition || _props?.mainObject?.buildingCondition;\r\n    }\r\n\r\n    this.tempParcels = plan?.uplodedFeatures?.[\r\n      plan?.selectedCADIndex || 0\r\n    ]?.shapeFeatures.landbase.filter(function (land) {\r\n      return (\r\n        land.typeName != \"شوارع\" &&\r\n        land.typeName != \"مواقف\" &&\r\n        land.typeName != \"ممرات مشاة\"\r\n      );\r\n    });\r\n  }\r\n  servicesLayer = {};\r\n  pageSize = 15;\r\n  domains = [];\r\n  zoomRatio = 50;\r\n  autoCadColor = [\r\n    [255, 0, 0],\r\n    [255, 255, 0],\r\n    [0, 255, 0],\r\n    [0, 255, 255],\r\n    [0, 0, 255],\r\n    [255, 0, 255],\r\n    [255, 255, 255],\r\n    [128, 128, 128],\r\n    [192, 192, 192],\r\n    [255, 0, 0],\r\n    [255, 127, 127],\r\n    [204, 0, 0],\r\n    [204, 102, 102],\r\n    [153, 0, 0],\r\n    [153, 76, 76],\r\n    [127, 0, 0],\r\n    [127, 63, 63],\r\n    [76, 0, 0],\r\n    [76, 38, 38],\r\n    [255, 63, 0],\r\n    [255, 159, 127],\r\n    [204, 51, 0],\r\n    [204, 127, 102],\r\n    [153, 38, 0],\r\n    [153, 95, 76],\r\n    [127, 31, 0],\r\n    [127, 79, 63],\r\n    [76, 19, 0],\r\n    [76, 47, 38],\r\n    [255, 127, 0],\r\n    [255, 191, 127],\r\n    [204, 102, 0],\r\n    [204, 153, 102],\r\n    [153, 76, 0],\r\n    [153, 114, 76],\r\n    [127, 63, 0],\r\n    [127, 95, 63],\r\n    [76, 38, 0],\r\n    [76, 57, 38],\r\n    [255, 191, 0],\r\n    [255, 223, 127],\r\n    [204, 153, 0],\r\n    [204, 178, 102],\r\n    [153, 114, 0],\r\n    [153, 133, 76],\r\n    [127, 95, 0],\r\n    [127, 111, 63],\r\n    [76, 57, 0],\r\n    [76, 66, 38],\r\n    [255, 255, 0],\r\n    [255, 255, 127],\r\n    [204, 204, 0],\r\n    [204, 204, 102],\r\n    [153, 153, 0],\r\n    [153, 153, 76],\r\n    [127, 127, 0],\r\n    [127, 127, 63],\r\n    [76, 76, 0],\r\n    [76, 76, 38],\r\n    [191, 255, 0],\r\n    [223, 255, 127],\r\n    [153, 204, 0],\r\n    [178, 204, 102],\r\n    [114, 153, 0],\r\n    [133, 153, 76],\r\n    [95, 127, 0],\r\n    [111, 127, 63],\r\n    [57, 76, 0],\r\n    [66, 76, 38],\r\n    [127, 255, 0],\r\n    [191, 255, 127],\r\n    [102, 204, 0],\r\n    [153, 204, 102],\r\n    [76, 153, 0],\r\n    [114, 153, 76],\r\n    [63, 127, 0],\r\n    [95, 127, 63],\r\n    [38, 76, 0],\r\n    [57, 76, 38],\r\n    [63, 255, 0],\r\n    [159, 255, 127],\r\n    [51, 204, 0],\r\n    [127, 204, 102],\r\n    [38, 153, 0],\r\n    [95, 153, 76],\r\n    [31, 127, 0],\r\n    [79, 127, 63],\r\n    [19, 76, 0],\r\n    [47, 76, 38],\r\n    [0, 255, 0],\r\n    [127, 255, 127],\r\n    [0, 204, 0],\r\n    [102, 204, 102],\r\n    [0, 153, 0],\r\n    [76, 153, 76],\r\n    [0, 127, 0],\r\n    [63, 127, 63],\r\n    [0, 76, 0],\r\n    [38, 76, 38],\r\n    [0, 255, 63],\r\n    [127, 255, 159],\r\n    [0, 204, 51],\r\n    [102, 204, 127],\r\n    [0, 153, 38],\r\n    [76, 153, 95],\r\n    [0, 127, 31],\r\n    [63, 127, 79],\r\n    [0, 76, 19],\r\n    [38, 76, 47],\r\n    [0, 255, 127],\r\n    [127, 255, 191],\r\n    [0, 204, 102],\r\n    [102, 204, 153],\r\n    [0, 153, 76],\r\n    [76, 153, 114],\r\n    [0, 127, 63],\r\n    [63, 127, 95],\r\n    [0, 76, 38],\r\n    [38, 76, 57],\r\n    [0, 255, 191],\r\n    [127, 255, 223],\r\n    [0, 204, 153],\r\n    [102, 204, 178],\r\n    [0, 153, 114],\r\n    [76, 153, 133],\r\n    [0, 127, 95],\r\n    [63, 127, 111],\r\n    [0, 76, 57],\r\n    [38, 76, 66],\r\n    [0, 255, 255],\r\n    [127, 255, 255],\r\n    [0, 204, 204],\r\n    [102, 204, 204],\r\n    [0, 153, 153],\r\n    [76, 153, 153],\r\n    [0, 127, 127],\r\n    [63, 127, 127],\r\n    [0, 76, 76],\r\n    [38, 76, 76],\r\n    [0, 191, 255],\r\n    [127, 223, 255],\r\n    [0, 153, 204],\r\n    [102, 178, 204],\r\n    [0, 114, 153],\r\n    [76, 133, 153],\r\n    [0, 95, 127],\r\n    [63, 111, 127],\r\n    [0, 57, 76],\r\n    [38, 66, 76],\r\n    [0, 127, 255],\r\n    [127, 191, 255],\r\n    [0, 102, 204],\r\n    [102, 153, 204],\r\n    [0, 76, 153],\r\n    [76, 114, 153],\r\n    [0, 63, 127],\r\n    [63, 95, 127],\r\n    [0, 38, 76],\r\n    [38, 57, 76],\r\n    [0, 63, 255],\r\n    [127, 159, 255],\r\n    [0, 51, 204],\r\n    [102, 127, 204],\r\n    [0, 38, 153],\r\n    [76, 95, 153],\r\n    [0, 31, 127],\r\n    [63, 79, 127],\r\n    [0, 19, 76],\r\n    [38, 47, 76],\r\n    [0, 0, 255],\r\n    [127, 127, 255],\r\n    [0, 0, 204],\r\n    [102, 102, 204],\r\n    [0, 0, 153],\r\n    [76, 76, 153],\r\n    [0, 0, 127],\r\n    [63, 63, 127],\r\n    [0, 0, 76],\r\n    [38, 38, 76],\r\n    [63, 0, 255],\r\n    [159, 127, 255],\r\n    [51, 0, 204],\r\n    [127, 102, 204],\r\n    [38, 0, 153],\r\n    [95, 76, 153],\r\n    [31, 0, 127],\r\n    [79, 63, 127],\r\n    [19, 0, 76],\r\n    [47, 38, 76],\r\n    [127, 0, 255],\r\n    [191, 127, 255],\r\n    [102, 0, 204],\r\n    [153, 102, 204],\r\n    [76, 0, 153],\r\n    [114, 76, 153],\r\n    [63, 0, 127],\r\n    [95, 63, 127],\r\n    [38, 0, 76],\r\n    [57, 38, 76],\r\n    [191, 0, 255],\r\n    [223, 127, 255],\r\n    [153, 0, 204],\r\n    [178, 102, 204],\r\n    [114, 0, 153],\r\n    [133, 76, 153],\r\n    [95, 0, 127],\r\n    [111, 63, 127],\r\n    [57, 0, 76],\r\n    [66, 38, 76],\r\n    [255, 0, 255],\r\n    [255, 127, 255],\r\n    [204, 0, 204],\r\n    [204, 102, 204],\r\n    [153, 0, 153],\r\n    [153, 76, 153],\r\n    [127, 0, 127],\r\n    [127, 63, 127],\r\n    [76, 0, 76],\r\n    [76, 38, 76],\r\n    [255, 0, 191],\r\n    [255, 127, 223],\r\n    [204, 0, 153],\r\n    [204, 102, 178],\r\n    [153, 0, 114],\r\n    [153, 76, 133],\r\n    [127, 0, 95],\r\n    [127, 63, 111],\r\n    [76, 0, 57],\r\n    [76, 38, 66],\r\n    [255, 0, 127],\r\n    [255, 127, 191],\r\n    [204, 0, 102],\r\n    [204, 102, 153],\r\n    [153, 0, 76],\r\n    [153, 76, 114],\r\n    [127, 0, 63],\r\n    [127, 63, 95],\r\n    [76, 0, 38],\r\n    [76, 38, 57],\r\n    [255, 0, 63],\r\n    [255, 127, 159],\r\n    [204, 0, 51],\r\n    [204, 102, 127],\r\n    [153, 0, 38],\r\n    [153, 76, 95],\r\n    [127, 0, 31],\r\n    [127, 63, 79],\r\n    [76, 0, 19],\r\n    [76, 38, 47],\r\n    [51, 51, 51],\r\n    [91, 91, 91],\r\n    [132, 132, 132],\r\n    [173, 173, 173],\r\n    [214, 214, 214],\r\n    [255, 255, 255],\r\n  ];\r\n  isInvestalIncluded = false;\r\n  statisticsParcels = [];\r\n  enableDownlaodCad = false;\r\n  planDescription = \"\";\r\n  streets = [];\r\n  detailsParcelTypes = [];\r\n  uplodedFeatures = [];\r\n  streetsAnnotation = [];\r\n  serviceSubType = {};\r\n  serviceType = {};\r\n  selectedCAD = \"\";\r\n  selectedCADIndex = 0;\r\n  planUsingSymbol = \"\";\r\n  hide_details = true;\r\n  servicesTypes = [];\r\n  servicesSubTypes = [];\r\n  TotalParcelArea = 0;\r\n  current_step = 0;\r\n  totalParcelPage = 0;\r\n  totalInvestalParcelPage = 0;\r\n  minParcelIndex = 0;\r\n  maxParcelIndex = 0;\r\n  minInvestalParcelIndex = 0;\r\n  maxInvestalParcelIndex = 0;\r\n  totalStreetPage = 0;\r\n  minStreetIndex = 0;\r\n  maxStreetIndex = 0;\r\n  bufferDistance = 5;\r\n  isWithIn = false;\r\n  hideAll = false;\r\n  plans = [];\r\n  markall = { isVisibile: true };\r\n  currentStreetPage = 1;\r\n  currentParcelPage = 1;\r\n  currentInvestalParcelPage = 1;\r\n  buildingCondition = [];\r\n  layers = [];\r\n  tempParcels = [];\r\n  #fields = {\r\n    survayParcelCutter: {\r\n      field: \"list\",\r\n      hideLabel: true,\r\n      init_data: (values, props) => {\r\n        if (!props.input.value) {\r\n          props.input.onChange([\r\n            {\r\n              direction: \"الشطفة\",\r\n              NORTH_EAST_DIRECTION: \"\",\r\n              NORTH_WEST_DIRECTION: \"\",\r\n              SOUTH_EAST_DIRECTION: \"\",\r\n              SOUTH_WEST_DIRECTION: \"\",\r\n            },\r\n          ]);\r\n        }\r\n      },\r\n      fields: {\r\n        direction: { head: \"الإتجاه\" },\r\n        NORTH_EAST_DIRECTION: {\r\n          head: \"شمال / شرق\",\r\n          type: \"input\",\r\n          placeholder: \"شمال / شرق\",\r\n          field: \"text\",\r\n          hideLabel: true,\r\n        },\r\n        NORTH_WEST_DIRECTION: {\r\n          head: \"شمال / غرب\",\r\n          type: \"input\",\r\n          placeholder: \"شمال / غرب\",\r\n          field: \"text\",\r\n          hideLabel: true,\r\n        },\r\n        SOUTH_EAST_DIRECTION: {\r\n          head: \"جنوب / شرق\",\r\n          type: \"input\",\r\n          placeholder: \"جنوب / شرق\",\r\n          field: \"text\",\r\n          hideLabel: true,\r\n        },\r\n        SOUTH_WEST_DIRECTION: {\r\n          head: \"جنوب / غرب\",\r\n          type: \"input\",\r\n          placeholder: \"جنوب / غرب\",\r\n          field: \"text\",\r\n          hideLabel: true,\r\n        },\r\n      },\r\n    },\r\n  };\r\n  #editFields = {\r\n    survayParcelCutter: {\r\n      field: \"list\",\r\n      hideLabel: true,\r\n      fields: {\r\n        direction: { head: \"الإتجاه\" },\r\n        NORTH_EAST_DIRECTION: {\r\n          head: \"شمال / شرق\",\r\n        },\r\n        NORTH_WEST_DIRECTION: {\r\n          head: \"شمال / غرب\",\r\n        },\r\n        SOUTH_EAST_DIRECTION: {\r\n          head: \"جنوب / شرق\",\r\n        },\r\n        SOUTH_WEST_DIRECTION: {\r\n          head: \"جنوب / غرب\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  checkStreetDomains = () => {\r\n    return new Promise((resolve, reject) => {\r\n      getInfo(mapUrl).then((response) => {\r\n        let StreetNamingLayerId = response[\"Street_Naming\"];\r\n        getFieldDomain(\"\", StreetNamingLayerId).then((domains) => {\r\n          resolve(domains);\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  checkServicesTypes = () => {\r\n    return new Promise((resolve, reject) => {\r\n      axios.get(`${host}/CadLayers/GetAll?pageSize=1000`).then(({ data }) => {\r\n        data.results.forEach((type) => {\r\n          type.layer_color = eval(type.layer_color);\r\n        });\r\n        resolve(data.results);\r\n      });\r\n    });\r\n  };\r\n  isValidCondition = (props, parcel) => {\r\n    const { mainObject } = props;\r\n    if (parcel.usingSymbol) {\r\n      var condition = _.find(this.buildingCondition || [], (d) => {\r\n        return d.attributes.USING_SYMBOL_CODE == parcel.usingSymbol;\r\n      });\r\n      if (condition && condition.attributes && condition.attributes.SLIDE_AREA)\r\n        return condition.attributes.SLIDE_AREA <= parcel.area;\r\n      else return true;\r\n    } else return true;\r\n  };\r\n\r\n  setBuildingCondition = (props) => {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let { mainObject } = props;\r\n        var usingSymbolObj;\r\n        if (this.uplodedFeatures) {\r\n          usingSymbolObj = _(\r\n            this?.uplodedFeatures[this.selectedCADIndex]?.shapeFeatures.landbase\r\n          )\r\n            .groupBy(\"usingSymbol\")\r\n            .value();\r\n        }\r\n        var maxCount = 0;\r\n        if (!isEmpty(usingSymbolObj)) {\r\n          Object.keys(usingSymbolObj)\r\n            .filter((d) => {\r\n              return d && d != \"undefined\";\r\n            })\r\n            .forEach((ele, key) => {\r\n              if (\r\n                ele.startsWith(\"س\") ||\r\n                ele.startsWith(\"(س\") ||\r\n                ele.startsWith(\"ص\") ||\r\n                ele.startsWith(\"ت\") ||\r\n                ele.startsWith(\"ز\") ||\r\n                ele.startsWith(\"خ\") ||\r\n                ele.startsWith(\"م-\") ||\r\n                ele.startsWith(\"ت-ج\")\r\n              ) {\r\n                if (usingSymbolObj[ele].length > maxCount) {\r\n                  maxCount = usingSymbolObj[ele].length;\r\n\r\n                  // if (ele == \"ت-3\") {\r\n                  //   ele = \"م-ت ع\";\r\n                  // }\r\n\r\n                  mainObject.selectedMaxUsingSymbolCode = ele;\r\n                  mainObject.selectedMaxUsingSymbol =\r\n                    \"منطقة \" +\r\n                    mainObject.submission_data.mostafed_data.mostafed_type +\r\n                    (ele.indexOf(\"س\") > -1 ? \"ة\" : \"\") +\r\n                    \" \" +\r\n                    ele;\r\n                }\r\n              }\r\n            });\r\n          mainObject.MaxUsingSymbolDescription =\r\n            \"يُسمح بالأستعمالات ال\" +\r\n            mainObject.submission_data.mostafed_data.mostafed_type +\r\n            \"ة\" +\r\n            \"وأستعمالاتها التبعية فى المنطقة ال\" +\r\n            mainObject.submission_data.mostafed_data.mostafed_type +\r\n            \"ة\" +\r\n            \" \" +\r\n            mainObject.selectedMaxUsingSymbol;\r\n\r\n          esriRequest(window.planMapEditing + \"MapServer/layers\").then(\r\n            (maplayers) => {\r\n              \r\n              if (window.planMapEditing) {\r\n                var layer = _.find(maplayers.tables, (d) => {\r\n                  return d.name == \"Tbl_Parcel_Conditions\";\r\n                });\r\n                if (layer && layer.id) {\r\n                  queryTask_updated(\r\n                    window.planMapEditing + \"MapServer/\" + layer.id,\r\n                    \"USING_SYMBOL_CODE='\" +\r\n                      mainObject.selectedMaxUsingSymbolCode +\r\n                      \"'\",\r\n                    [\"*\"],\r\n                    (result) => {\r\n                      \r\n                      resolve(result.features);\r\n                    }\r\n                  );\r\n                }\r\n              }\r\n            }\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n        return reject();\r\n      }\r\n    });\r\n  };\r\n\r\n  init_plan = (props, planVal, map, callback) => {\r\n    const {\r\n      currentModule: { record },\r\n    } = props;\r\n    setTimeout(() => {\r\n      if (\r\n        this.uplodedFeatures?.[planVal]?.shapeFeatures?.landbase &&\r\n        checkUploadedLayersFullyContainedByBoundry(\r\n          this.uplodedFeatures[planVal],\r\n          props.mainObject.submission_data.mostafed_data.e3adt_tanzem,\r\n          record?.request_no\r\n        )\r\n      ) {\r\n        this.drawFeatures(props, map, callback);\r\n        \r\n        loadCurrentPlan(props, map, window.loadedLayers, true);\r\n      } else {\r\n        this.isInvestalIncluded = false;\r\n        this.statisticsParcels = [];\r\n        this.enableDownlaodCad = false;\r\n        this.planDescription = \"\";\r\n        this.streets = [];\r\n        this.detailsParcelTypes = [];\r\n        this.uplodedFeatures = [];\r\n        this.streetsAnnotation = [];\r\n        this.serviceSubType = {};\r\n        this.serviceType = {};\r\n        this.selectedCAD = \"\";\r\n        this.selectedCADIndex = 0;\r\n        this.planUsingSymbol = \"\";\r\n        this.hide_details = true;\r\n        this.servicesTypes = [];\r\n        this.servicesSubTypes = [];\r\n        this.TotalParcelArea = 0;\r\n        this.current_step = 0;\r\n        this.totalParcelPage = 0;\r\n        this.totalInvestalParcelPage = 0;\r\n        this.minParcelIndex = 0;\r\n        this.maxParcelIndex = 0;\r\n        this.minInvestalParcelIndex = 0;\r\n        this.maxInvestalParcelIndex = 0;\r\n        this.totalStreetPage = 0;\r\n        this.minStreetIndex = 0;\r\n        this.maxStreetIndex = 0;\r\n      }\r\n\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  drawBuffer = (bufferDistance, map, callback) => {\r\n    if (map.getLayer(\"BufferGraphicLayer\"))\r\n      map.getLayer(\"BufferGraphicLayer\").clear();\r\n\r\n    if (bufferDistance > 0) {\r\n      LoadModules([\r\n        \"esri/tasks/GeometryService\",\r\n        \"esri/tasks/BufferParameters\",\r\n        \"esri/geometry/Polygon\",\r\n        \"esri/geometry/Circle\",\r\n      ]).then(([GeometryService, BufferParameters, Polygon, Circle]) => {\r\n        if (!this.serviceSubType) {\r\n          _.filter(\r\n            this.uplodedFeatures[this.selectedCADIndex]?.shapeFeatures\r\n              ?.landbase,\r\n            (d) => {\r\n              return d?.typeId == this.serviceType?.symbol_id;\r\n            }\r\n          ).forEach((feature) => {\r\n            if (!feature.spatialReference.wkid) {\r\n              feature.spatialReference = map.spatialReference;\r\n            }\r\n            feature = new Polygon(feature);\r\n\r\n            var circleGeometry = new Circle({\r\n              center: feature.getExtent().getCenter(),\r\n              radius: +bufferDistance,\r\n              radiusUnit: esri.Units.METERS,\r\n            });\r\n\r\n            addGraphicToLayer(\r\n              circleGeometry,\r\n              map,\r\n              \"BufferGraphicLayer\",\r\n              [0, 0, 255],\r\n              null,\r\n              false,\r\n              (response) => {\r\n                this.#addLayerFeature(map, \"BufferGraphicLayer\", response);\r\n              },\r\n              null,\r\n              null,\r\n              true,\r\n              true,\r\n              null,\r\n              false\r\n            );\r\n          });\r\n        } else {\r\n          _.filter(\r\n            this.uplodedFeatures[this.selectedCADIndex]?.shapeFeatures\r\n              ?.landbase,\r\n            (d) => {\r\n              return d.useDetails == this.serviceSubType?.symbol_id;\r\n            }\r\n          ).forEach((feature) => {\r\n            if (!feature.spatialReference.wkid) {\r\n              feature.spatialReference = map.spatialReference;\r\n            }\r\n            feature = new Polygon(feature);\r\n\r\n            var circleGeometry = new Circle({\r\n              center: feature.getExtent().getCenter(),\r\n              radius: +bufferDistance,\r\n              radiusUnit: esri.Units.METERS,\r\n            });\r\n\r\n            addGraphicToLayer(\r\n              circleGeometry,\r\n              map,\r\n              \"BufferGraphicLayer\",\r\n              [0, 0, 255],\r\n              null,\r\n              false,\r\n              (response) => {\r\n                this.#addLayerFeature(map, \"BufferGraphicLayer\", response);\r\n              },\r\n              null,\r\n              null,\r\n              true,\r\n              true,\r\n              null,\r\n              false\r\n            );\r\n          });\r\n        }\r\n\r\n        var gsvc = GeometryService(geometryServiceUrl);\r\n        var params = new BufferParameters();\r\n\r\n        var boundry = new Polygon(\r\n          this.uplodedFeatures[\r\n            this.selectedCADIndex\r\n          ]?.shapeFeatures?.boundry?.[0]\r\n        );\r\n\r\n        params.geometries = [dojo.clone(boundry)];\r\n        params.distances = [+bufferDistance];\r\n        params.unit = GeometryService.UNIT_METER;\r\n        params.outSpatialReference = map.spatialReference;\r\n\r\n        gsvc.buffer(params, (geometries) => {\r\n          var where = \"SRVC_TYPE =\" + this.serviceType?.layer_code;\r\n\r\n          if (this.serviceSubType && this.serviceSubType?.sublayer_code)\r\n            where = \"SRVC_SUBTYPE =\" + this.serviceSubType?.sublayer_code;\r\n\r\n          queryTask({\r\n            url: planMapEditing + \"MapServer/\" + this.servicesLayer?.id,\r\n            where: where,\r\n            outFields: [\"OBJECTID\"],\r\n            callbackResult: (res) => {\r\n              res.features.forEach((feature) => {\r\n                var f = new esri.geometry.Point(feature?.geometry);\r\n\r\n                if (!boundry.contains(f)) {\r\n                  var circleGeometry = new Circle({\r\n                    center: f,\r\n                    radius: +bufferDistance,\r\n                    radiusUnit: esri.Units.METERS,\r\n                  });\r\n\r\n                  addGraphicToLayer(\r\n                    circleGeometry,\r\n                    map,\r\n                    \"BufferGraphicLayer\",\r\n                    [0, 0, 255],\r\n                    null,\r\n                    false,\r\n                    (response) => {\r\n                      this.#addLayerFeature(\r\n                        map,\r\n                        \"BufferGraphicLayer\",\r\n                        response\r\n                      );\r\n                    },\r\n                    null,\r\n                    null,\r\n                    true,\r\n                    true,\r\n                    null,\r\n                    false\r\n                  );\r\n                }\r\n              });\r\n            },\r\n            callbackError: () => {\r\n              // store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n              if (callback) {\r\n                callback();\r\n              }\r\n            },\r\n            preQuery: (query, Query) => {\r\n              query.geometry = dojo.clone(geometries[0]);\r\n            },\r\n            returnGeometry: true,\r\n          });\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  compareTwoFeatures = (feature1, feature2) => {\r\n    var same = true;\r\n    if (feature1.rings[0].length == feature2.rings[0].length) {\r\n      for (var j = 0, n = feature1.rings[0].length - 1; j < n; j++) {\r\n        if (feature1.rings[0][j] != feature2.rings[0][j]) {\r\n          same = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      return same;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  computeLineAngle = (pointA, pointB, cetroid, polygon) => {\r\n    var y = pointA[1] - pointB[1];\r\n    var x = pointA[0] - pointB[0];\r\n    var line = new esri.geometry.Polyline([pointA, pointB]);\r\n    var direction = getLengthDirectionByCentroid(\r\n      [pointA, pointB],\r\n      line.getExtent().getCenter(),\r\n      polygon\r\n    );\r\n\r\n    var y = pointA[1] - pointB[1];\r\n    var x = pointA[0] - pointB[0];\r\n\r\n    return { length: Math.sqrt(x * x + y * y), direction: direction };\r\n  };\r\n\r\n  checkCADAreas = (props) => {\r\n    let valid = true;\r\n    const {\r\n      currentModule: { record },\r\n    } = props;\r\n\r\n    let msa7yArea = +_.chain(\r\n      props.mainObject.data_msa7y.msa7yData.cadDetails.suggestionsParcels\r\n    )\r\n      .reduce((a, b) => {\r\n        return a + +b.area;\r\n      }, 0)\r\n      .value()\r\n      .toFixed(2);\r\n    let landbasesArea = +_.chain(\r\n      this?.uplodedFeatures[this.selectedCADIndex]?.shapeFeatures.landbase\r\n    )\r\n      .reduce((a, b) => {\r\n        return a + +b.area;\r\n      }, 0)\r\n      .value()\r\n      .toFixed(2);\r\n    \r\n    if (\r\n      !props.mainObject.submission_data.mostafed_data.e3adt_tanzem &&\r\n      !record.request_no &&\r\n      msa7yArea != landbasesArea &&\r\n      (!window.Supporting ||\r\n        (window.Supporting && !window.Supporting.areaDifference))\r\n    ) {\r\n      window.notifySystem(\r\n        \"error\",\r\n        \"boundry لا يساوي اجمالي مساحة المخطط landbase اجمالي مساحات الرسم داخل طبقة\",\r\n        10\r\n      );\r\n      window.notifySystem(\r\n        \"error\",\r\n\r\n        convertToArabic(msa7yArea) + \" م2 \" + \":boundry اجمالي مساحة طبقة\",\r\n        10\r\n      );\r\n      window.notifySystem(\r\n        \"error\",\r\n\r\n        convertToArabic(landbasesArea) +\r\n          \" م2 \" +\r\n          \" :landbase اجمالي مساحة طبقة\",\r\n        10\r\n      );\r\n      valid = false;\r\n    }\r\n\r\n    return valid;\r\n  };\r\n\r\n  clearMapLayers = (map) => {\r\n    if (map?.graphicsLayerIds) {\r\n      map.graphicsLayerIds.forEach((layerID) => {\r\n        if (map.getLayer(layerID)) map.getLayer(layerID).clear();\r\n      });\r\n    }\r\n  };\r\n\r\n  drawfeaturesAnnotations(\r\n    props,\r\n    map,\r\n    cadLayer,\r\n    annotationLayerName,\r\n    layerCallback,\r\n    annotationCallback,\r\n    finalCallback,\r\n    boundryColor\r\n  ) {\r\n    const { mainObject } = props;\r\n    const {\r\n      mainObject: { currentStepId },\r\n      currentModule: {\r\n        record: { CurrentStep },\r\n      },\r\n    } = props;\r\n    if (cadLayer[annotationLayerName]?.length) {\r\n      cadLayer[annotationLayerName]?.forEach((cadfeature) => {\r\n        if (cadfeature.spatialReference && !cadfeature.spatialReference.wkid) {\r\n          cadfeature.spatialReference = map.spatialReference;\r\n        }\r\n\r\n        var feature = new esri.geometry.Polygon(cadfeature);\r\n\r\n        _.filter(\r\n          this.uplodedFeatures?.[this.selectedCADIndex]?.annotations,\r\n          (d) => {\r\n            return d.layer == annotationLayerName;\r\n          }\r\n        ).forEach((annotation) => {\r\n          let isContained = false;\r\n          if (\r\n            annotation?.shape?.spatialReference &&\r\n            !annotation?.shape?.spatialReference?.wkid\r\n          ) {\r\n            annotation.shape.spatialReference = map?.spatialReference;\r\n          }\r\n          if (feature.contains && feature.contains(annotation.shape)) {\r\n            cadfeature.text = annotation.text;\r\n            isContained = true;\r\n          }\r\n\r\n          if (annotationCallback) {\r\n            annotationCallback(cadfeature, annotation, isContained);\r\n          }\r\n        });\r\n\r\n        var found = [];\r\n\r\n        if (mainObject?.data_msa7y && annotationLayerName == \"boundry\") {\r\n          found = _.filter(feature.rings[0], (ring) => {\r\n            return _.find(\r\n              mainObject.data_msa7y.msa7yData.cadDetails.temp.cadResults.data[0]\r\n                .shapeFeatures[0].rings[0],\r\n              (ring2) => {\r\n                return ring2[0] == ring[0] && ring2[1] == ring[1];\r\n              }\r\n            );\r\n          });\r\n\r\n          if (\r\n            found.length !=\r\n              mainObject.data_msa7y.msa7yData.cadDetails.temp.cadResults.data[0]\r\n                .shapeFeatures[0].rings[0].length &&\r\n            CurrentStep == 2317\r\n          ) {\r\n            this.isWithIn = false;\r\n            window.notifySystem(\"error\", t(\"PLANOOUTSIDETHEBOUDRY\"));\r\n          } else {\r\n            this.isWithIn = true;\r\n            addGraphicToLayer(\r\n              feature,\r\n              map,\r\n              \"detailedGraphicLayer\",\r\n              boundryColor || [0, 0, 0],\r\n              null,\r\n              null,\r\n              (response) => {\r\n                this.#addLayerFeature(map, \"detailedGraphicLayer\", response);\r\n                resizeMap(map);\r\n              },\r\n              null,\r\n              null,\r\n              true,\r\n              null,\r\n              null,\r\n              false\r\n            );\r\n          }\r\n        } else {\r\n          addGraphicToLayer(\r\n            feature,\r\n            map,\r\n            \"detailedGraphicLayer\",\r\n            [0, 0, 0],\r\n            null,\r\n            null,\r\n            (response) => {\r\n              this.#addLayerFeature(map, \"detailedGraphicLayer\", response);\r\n              resizeMap(map);\r\n            },\r\n            null,\r\n            null,\r\n            true,\r\n            null,\r\n            null,\r\n            false\r\n          );\r\n        }\r\n\r\n        if (annotationLayerName == \"boundry\") {\r\n          cadfeature.area -=\r\n            +mainObject?.data_msa7y?.msa7yData?.cadDetails?.cuttes_area?.toFixed(\r\n              2\r\n            ) || 0;\r\n        } else if (annotationLayerName == \"landbase\") {\r\n          this.TotalParcelArea += cadfeature.area;\r\n        }\r\n\r\n        if (layerCallback) {\r\n          layerCallback(map, cadfeature);\r\n        }\r\n      });\r\n\r\n      if (this.isWithIn) {\r\n        if (finalCallback) {\r\n          finalCallback();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  readAnnotationPoints = (map, layerName, pointColor) => {\r\n    this.uplodedFeatures?.[this.selectedCADIndex]?.annotations.forEach(\r\n      (annotation) => {\r\n        annotation.shape = new esri.geometry.Point(annotation.shape);\r\n\r\n        if (annotation.layer == layerName) {\r\n          var txt = annotation.text;\r\n          if (annotation.text) {\r\n            txt = annotation.text;\r\n          }\r\n\r\n          var attr = {\r\n            text: convertToArabic(txt),\r\n            angle: -15,\r\n          };\r\n\r\n          addParcelNo(\r\n            annotation.shape,\r\n            map,\r\n            convertToArabic(txt),\r\n            \"PacrelNoGraphicLayer\",\r\n            12,\r\n            pointColor || [60, 60, 60],\r\n            -15,\r\n            { y: 0, x: 0 },\r\n            attr,\r\n            null,\r\n            (response) => {\r\n              this.#addLayerFeature(map, \"PacrelNoGraphicLayer\", response);\r\n            },\r\n            false\r\n          );\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  drawFeaturesLines = (map) => {\r\n    if (\r\n      this.uplodedFeatures?.[this.selectedCADIndex]?.lineFeatures.length > 0\r\n    ) {\r\n      this.uplodedFeatures?.[this.selectedCADIndex]?.lineFeatures.forEach(\r\n        (detail) => {\r\n          var polyline = new esri.geometry.Polyline(detail);\r\n          addGraphicToLayer(\r\n            polyline,\r\n            map,\r\n            \"detailedGraphicLayer\",\r\n            detail.color ? this.autoCadColor[detail.color - 1] : [60, 60, 60],\r\n            null,\r\n            null,\r\n            (response) => {\r\n              this.#addLayerFeature(map, \"detailedGraphicLayer\", response);\r\n              resizeMap(map);\r\n            },\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            null,\r\n            false\r\n          );\r\n        }\r\n      );\r\n    } else {\r\n      zoomToLayer(\"detailedGraphicLayer\", map, this.zoomRatio);\r\n    }\r\n  };\r\n\r\n  #getMaxTwoLinesLength = (streetsLines) => {\r\n    var largestA = streetsLines[0];\r\n    var largestB = streetsLines[1];\r\n\r\n    for (var i = 0; i < streetsLines.length; i++) {\r\n      if (streetsLines[i].text > largestA.text) {\r\n        largestB = largestA;\r\n        largestA = streetsLines[i];\r\n      } else if (\r\n        streetsLines[i].text > largestB.text &&\r\n        streetsLines[i].paths[0][0][0] != largestA.paths[0][0][0]\r\n      ) {\r\n        largestB = streetsLines[i];\r\n      }\r\n    }\r\n\r\n    return [largestA, largestB];\r\n  };\r\n\r\n  setSideCenterPoint = (map, landbase, sideName) => {\r\n    landbase[`${sideName}_center_point`] = null;\r\n    if (landbase[`${sideName}_points`].length >= 1) {\r\n      var polyline = new esri.geometry.Polyline({\r\n        paths: landbase[`${sideName}_points`],\r\n        spatialReference: map.spatialReference,\r\n      });\r\n      landbase[`${sideName}_center_point`] = polyline.getExtent().getCenter();\r\n    }\r\n  };\r\n\r\n  drawStreetsAnnotations = (map) => {\r\n    this.streetsAnnotation = [];\r\n    for (var j = 0; j < this.streetsAnnotation.length; j++) {\r\n      var extractNmber = this.streetsAnnotation[j].text.match(/[\\d\\.]+/);\r\n\r\n      if (extractNmber && extractNmber.length > 0) {\r\n        extractNmber = extractNmber[0];\r\n        this.streetsAnnotation[j].text = this.streetsAnnotation[j].text.replace(\r\n          extractNmber,\r\n          extractNmber\r\n        );\r\n      } else {\r\n        extractNmber = this.streetsAnnotation[j].text;\r\n      }\r\n\r\n      if (!this.streetsAnnotation[j].feature.spatialReference.wkid) {\r\n        this.streetsAnnotation[j].feature.spatialReference.wkid =\r\n          map.spatialReference.wkid;\r\n      }\r\n\r\n      var attr = {\r\n        text: this.streetsAnnotation[j].text,\r\n        angle: 360 - this.streetsAnnotation[j].angle,\r\n      };\r\n\r\n      addParcelNo(\r\n        this.streetsAnnotation[j].feature,\r\n        map,\r\n        this.streetsAnnotation[j].text,\r\n        \"PacrelNoGraphicLayer\",\r\n        12,\r\n        [0, 0, 0],\r\n        360 - this.streetsAnnotation[j].angle,\r\n        { y: 0, x: 0 },\r\n        attr,\r\n        true,\r\n        (response) => {\r\n          this.#addLayerFeature(map, \"PacrelNoGraphicLayer\", response);\r\n        },\r\n        false\r\n      );\r\n    }\r\n  };\r\n\r\n  setPlanUsingSymbolDesc = () => {\r\n    var maxCount = 0;\r\n    var usingSymbolObj = _(\r\n      this?.uplodedFeatures[this.selectedCADIndex]?.shapeFeatures.landbase\r\n    )\r\n      .toArray()\r\n      .groupBy(\"usingSymbol\")\r\n      .value();\r\n    Object.keys(usingSymbolObj)\r\n      .filter((d) => {\r\n        return d && d != \"undefined\";\r\n      })\r\n      .forEach((ele, key) => {\r\n        if (\r\n          ele.startsWith(\"س\") ||\r\n          ele.startsWith(\"ص\") ||\r\n          ele.startsWith(\"ت\") ||\r\n          ele.startsWith(\"ز\") ||\r\n          ele.startsWith(\"خ\") ||\r\n          ele.startsWith(\"م-\") ||\r\n          ele.startsWith(\"ت-ج\")\r\n        ) {\r\n          if (usingSymbolObj[ele].length > maxCount) {\r\n            maxCount = usingSymbolObj[ele].length;\r\n            this.planUsingSymbol = \"رمز استعمال المخطط \" + \"( \" + ele + \" )\";\r\n          }\r\n        }\r\n      });\r\n  };\r\n\r\n  drawFeatures = (props, map, callback) => {\r\n    if (!this.checkCADAreas(props)) {\r\n      return;\r\n    }\r\n    this.clearMapLayers(map);\r\n    this.isWithIn = false;\r\n\r\n    var moacount = 0;\r\n\r\n    this.bufferDistance = 0;\r\n\r\n    this.drawfeaturesAnnotations(\r\n      props,\r\n      map,\r\n      this?.uplodedFeatures[this.selectedCADIndex]?.shapeFeatures,\r\n      \"boundry\",\r\n      null,\r\n      null,\r\n      () => {\r\n        var legends = [];\r\n        var isValidCad = true;\r\n        var cadErrors = {};\r\n        var color = [0, 255, 255];\r\n        this.streetsAnnotation = [];\r\n        let maxLines = 0;\r\n        this.drawfeaturesAnnotations(\r\n          props,\r\n          map,\r\n          this?.uplodedFeatures[this.selectedCADIndex]?.shapeFeatures,\r\n          \"out_sak_boundry\"\r\n        );\r\n        this.drawFeaturesLines(map);\r\n        this.drawfeaturesAnnotations(\r\n          props,\r\n          map,\r\n          this?.uplodedFeatures[this.selectedCADIndex]?.shapeFeatures,\r\n          \"nearby_plans\",\r\n          null,\r\n          null,\r\n          () => {\r\n            this.readAnnotationPoints(map, \"nearby_plans\", [60, 60, 60]);\r\n          },\r\n          [60, 60, 60]\r\n        );\r\n\r\n        this.drawfeaturesAnnotations(\r\n          props,\r\n          map,\r\n          this?.uplodedFeatures[this.selectedCADIndex]?.shapeFeatures,\r\n          \"subdivision\",\r\n          null,\r\n          null,\r\n          null,\r\n          [0, 0, 255]\r\n        );\r\n        this.drawfeaturesAnnotations(\r\n          props,\r\n          map,\r\n          this?.uplodedFeatures[this.selectedCADIndex]?.shapeFeatures,\r\n          \"block\",\r\n          null,\r\n          null,\r\n          null,\r\n          [0, 255, 0]\r\n        );\r\n        this.drawfeaturesAnnotations(\r\n          props,\r\n          map,\r\n          this?.uplodedFeatures[this.selectedCADIndex]?.shapeFeatures,\r\n          \"landbase\",\r\n          (map, landbase) => {\r\n            if (landbase.usingSymbol == \"خ\" && landbase.typeName == \"حدائق\") {\r\n              landbase.number = landbase.number + \"م \";\r\n            } else if (landbase.usingSymbol == \"خ\") {\r\n              landbase.number = landbase.number + \"خ \";\r\n            }\r\n\r\n            landbase.north_points = [];\r\n            landbase.south_points = [];\r\n            landbase.weast_points = [];\r\n            landbase.east_points = [];\r\n            let feature = new esri.geometry.Polygon(landbase);\r\n            var min = 0;\r\n            var max = 0;\r\n            for (var j = 0, n = landbase.rings[0].length - 1; j < n; j++) {\r\n              // var info = this.computeLineAngle(\r\n              //   landbase.rings[0][j],\r\n              //   landbase.rings[0][j + 1],\r\n              //   feature.getExtent().getCenter(),\r\n              //   feature\r\n              // );\r\n\r\n              var point1 = new esri.geometry.Point(\r\n                landbase.rings[0][j][0],\r\n                landbase.rings[0][j][1]\r\n              );\r\n              var point2 = new esri.geometry.Point(\r\n                landbase.rings[0][j + 1][0],\r\n                landbase.rings[0][j + 1][1]\r\n              );\r\n\r\n              if (point1.x > max) {\r\n                max = point1.x;\r\n                landbase.maxPoint = point1;\r\n              }\r\n\r\n              if (!min || point1.x < min) {\r\n                min = point1.x;\r\n                landbase.minPoint = point1;\r\n              }\r\n\r\n              if (point2.x > max) {\r\n                max = point2.x;\r\n                landbase.maxPoint = point2;\r\n              }\r\n\r\n              if (!min || point2.x < min) {\r\n                min = point2.x;\r\n                landbase.minPoint = point2;\r\n              }\r\n              let info = computePointDirection(\r\n                landbase,\r\n                landbase.rings[0][j],\r\n                landbase.rings[0][j + 1],\r\n                landbase\r\n              );\r\n\r\n              \r\n              if (info.direction == \"north\") {\r\n                landbase.north_length =\r\n                  (landbase.north_length || 0) + info.length;\r\n                landbase.north_points.push([\r\n                  landbase.rings[0][j],\r\n                  landbase.rings[0][j + 1],\r\n                ]);\r\n              } else if (info.direction == \"south\") {\r\n                landbase.south_length =\r\n                  (landbase.south_length || 0) + info.length;\r\n                landbase.south_points.push([\r\n                  landbase.rings[0][j],\r\n                  landbase.rings[0][j + 1],\r\n                ]);\r\n              } else if (info.direction == \"east\") {\r\n                landbase.east_length =\r\n                  (landbase.east_length || 0) + info.length;\r\n                landbase.east_points.push([\r\n                  landbase.rings[0][j],\r\n                  landbase.rings[0][j + 1],\r\n                ]);\r\n              } else {\r\n                landbase.weast_length =\r\n                  (landbase.weast_length || 0) + info.length;\r\n                landbase.weast_points.push([\r\n                  landbase.rings[0][j],\r\n                  landbase.rings[0][j + 1],\r\n                ]);\r\n              }\r\n            }\r\n\r\n            this.setSideCenterPoint(map, landbase, \"weast\");\r\n            this.setSideCenterPoint(map, landbase, \"north\");\r\n            this.setSideCenterPoint(map, landbase, \"east\");\r\n            this.setSideCenterPoint(map, landbase, \"south\");\r\n\r\n            landbase.is_north_front = true;\r\n            landbase.is_south_front = true;\r\n            landbase.is_east_front = true;\r\n            landbase.is_weast_front = true;\r\n\r\n            this.tempParcels.forEach((temp_landbase) => {\r\n              if (!temp_landbase.spatialReference.wkid) {\r\n                temp_landbase.spatialReference = this.map.spatialReference;\r\n              }\r\n              for (\r\n                var j = 0, n = temp_landbase.rings[0].length - 1;\r\n                j < n;\r\n                j++\r\n              ) {\r\n                if (!this.compareTwoFeatures(landbase, temp_landbase)) {\r\n                  var path = {\r\n                    paths: [\r\n                      [\r\n                        temp_landbase.rings[0][j],\r\n                        temp_landbase.rings[0][j + 1],\r\n                      ],\r\n                    ],\r\n                    spatialReference: map.spatialReference,\r\n                  };\r\n\r\n                  var polyline = new esri.geometry.Polyline(path);\r\n                  var pt = polyline.getExtent().getCenter();\r\n\r\n                  if (\r\n                    landbase.north_center_point != null &&\r\n                    landbase.north_center_point.x == pt.x &&\r\n                    landbase.north_center_point.y == pt.y\r\n                  ) {\r\n                    landbase.is_north_front = false;\r\n                  }\r\n\r\n                  if (\r\n                    landbase.south_center_point != null &&\r\n                    landbase.south_center_point.x == pt.x &&\r\n                    landbase.south_center_point.y == pt.y\r\n                  ) {\r\n                    landbase.is_south_front = false;\r\n                  }\r\n\r\n                  if (\r\n                    landbase.east_center_point != null &&\r\n                    landbase.east_center_point.x == pt.x &&\r\n                    landbase.east_center_point.y == pt.y\r\n                  ) {\r\n                    landbase.is_east_front = false;\r\n                  }\r\n\r\n                  if (\r\n                    landbase.weast_center_point != null &&\r\n                    landbase.weast_center_point.x == pt.x &&\r\n                    landbase.weast_center_point.y == pt.y\r\n                  ) {\r\n                    landbase.is_weast_front = false;\r\n                  }\r\n                }\r\n              }\r\n            });\r\n\r\n            if (!landbase.frontLength) {\r\n              landbase.frontLength = 0;\r\n\r\n              if (landbase.is_east_front) {\r\n                landbase.frontLength = landbase.east_length;\r\n              }\r\n              if (landbase.is_north_front) {\r\n                if (landbase.north_length > landbase.frontLength)\r\n                  landbase.frontLength = landbase.north_length;\r\n              }\r\n              if (landbase.is_south_front) {\r\n                if (landbase.south_length > landbase.frontLength)\r\n                  landbase.frontLength = landbase.south_length;\r\n              }\r\n              if (landbase.is_weast_front) {\r\n                if (landbase.weast_length > landbase.frontLength)\r\n                  landbase.frontLength = landbase.weast_length;\r\n              }\r\n\r\n              landbase.frontLength = (+landbase?.frontLength)?.toFixed(2);\r\n            }\r\n\r\n            let textcolor = [255, 255, 255];\r\n\r\n            if (\r\n              landbase.usingSymbol &&\r\n              landbase.usingSymbol.indexOf(\"س\") > -1\r\n            ) {\r\n              textcolor = [0, 0, 0];\r\n            }\r\n            if (\r\n              landbase.typeName == \"مواقف\" ||\r\n              landbase.typeName == \"ممرات مشاة\"\r\n            ) {\r\n              textcolor = [0, 0, 0];\r\n              color = [255, 255, 255];\r\n            }\r\n\r\n            if (landbase.subType && landbase.subType.sublayer_description) {\r\n              var attr = {\r\n                text: landbase.subType.sublayer_description,\r\n                angle: -15,\r\n              };\r\n\r\n              addParcelNo(\r\n                feature.getExtent().getCenter(),\r\n                map,\r\n                convertToArabic(landbase.subType.sublayer_description),\r\n                \"PacrelNoGraphicLayer\",\r\n                12,\r\n                textcolor,\r\n                -15,\r\n                { y: -10, x: 0 },\r\n                attr,\r\n                null,\r\n                (response) => {\r\n                  this.#addLayerFeature(map, \"PacrelNoGraphicLayer\", response);\r\n                },\r\n                false\r\n              );\r\n            } else if (\r\n              landbase.usingSymbol &&\r\n              landbase.usingSymbol.indexOf(\"س\") < 0 &&\r\n              landbase.typeName &&\r\n              landbase.typeName.indexOf(\"شوارع\") < 0\r\n            ) {\r\n              if (\r\n                landbase.typeName == \"مواقف\" ||\r\n                landbase.typeName == \"ممرات مشاة\"\r\n              ) {\r\n                moacount++;\r\n\r\n                ang =\r\n                  360 -\r\n                  computeStreetAngle(\r\n                    maxLines[0].paths[0][0],\r\n                    maxLines[0].paths[0][1],\r\n                    feature.getExtent().getCenter()\r\n                  );\r\n\r\n                var attr = {\r\n                  text:\r\n                    landbase.typeName +\r\n                    \" \" +\r\n                    \"م\" +\r\n                    \" \" +\r\n                    (landbase.typeName != \"ممرات مشاة\" ? moacount : \"\"),\r\n                  angle: ang,\r\n                };\r\n\r\n                addParcelNo(\r\n                  feature.getExtent().getCenter(),\r\n                  map,\r\n                  convertToArabic(\r\n                    landbase.typeName +\r\n                      \" \" +\r\n                      \"م\" +\r\n                      \" \" +\r\n                      (landbase.typeName != \"ممرات مشاة\" ? moacount : \"\")\r\n                  ),\r\n                  \"PacrelNoGraphicLayer\",\r\n                  12,\r\n                  textcolor,\r\n                  ang,\r\n                  { y: 0, x: 0 },\r\n                  attr,\r\n                  null,\r\n                  (response) => {\r\n                    this.#addLayerFeature(\r\n                      map,\r\n                      \"PacrelNoGraphicLayer\",\r\n                      response\r\n                    );\r\n                  },\r\n                  false\r\n                );\r\n              } else if (landbase.typeName == \"مناطق مفتوحة\") {\r\n                var attr = {\r\n                  text: landbase.typeName + \" \" + \"م\" + \" \" + moacount,\r\n                  angle: -15,\r\n                };\r\n\r\n                addParcelNo(\r\n                  feature.getExtent().getCenter(),\r\n                  map,\r\n                  convertToArabic(\r\n                    landbase.typeName + \" \" + \"م\" + \" \" + moacount\r\n                  ),\r\n                  \"PacrelNoGraphicLayer\",\r\n                  12,\r\n                  textcolor,\r\n                  -15,\r\n                  { y: -10, x: 0 },\r\n                  attr,\r\n                  null,\r\n                  (response) => {\r\n                    this.#addLayerFeature(\r\n                      map,\r\n                      \"PacrelNoGraphicLayer\",\r\n                      response\r\n                    );\r\n                  },\r\n                  false\r\n                );\r\n              } else {\r\n                var attr = {\r\n                  text: landbase.typeName,\r\n                  angle: -15,\r\n                };\r\n\r\n                addParcelNo(\r\n                  feature.getExtent().getCenter(),\r\n                  map,\r\n                  convertToArabic(landbase.typeName),\r\n                  \"PacrelNoGraphicLayer\",\r\n                  12,\r\n                  textcolor,\r\n                  -15,\r\n                  { y: -10, x: 0 },\r\n                  attr,\r\n                  null,\r\n                  (response) => {\r\n                    this.#addLayerFeature(\r\n                      map,\r\n                      \"PacrelNoGraphicLayer\",\r\n                      response\r\n                    );\r\n                  },\r\n                  false\r\n                );\r\n              }\r\n            }\r\n            if (landbase.number) {\r\n              var ang = -15;\r\n              if (landbase.typeName == \"شوارع\") {\r\n                color = [255, 255, 255];\r\n              } else {\r\n                ang = -15;\r\n\r\n                var attr = {\r\n                  text: convertToArabic(landbase.number),\r\n                  angle: -15,\r\n                };\r\n\r\n                addParcelNo(\r\n                  feature.getExtent().getCenter(),\r\n                  map,\r\n                  convertToArabic(landbase.number),\r\n                  \"PacrelNoGraphicLayer\",\r\n                  12,\r\n                  textcolor,\r\n                  ang,\r\n                  { y: 0, x: 0 },\r\n                  attr,\r\n                  null,\r\n                  (response) => {\r\n                    this.#addLayerFeature(\r\n                      map,\r\n                      \"PacrelNoGraphicLayer\",\r\n                      response\r\n                    );\r\n                  },\r\n                  false\r\n                );\r\n              }\r\n            }\r\n\r\n            if (landbase.typeId && getLayer(\"G\" + landbase.typeId, map, 8)) {\r\n              addGraphicToLayer(\r\n                feature,\r\n                map,\r\n                \"Layer_G\" + landbase.typeId,\r\n                null,\r\n                color,\r\n                null,\r\n                (response) => {\r\n                  this.#addLayerFeature(\r\n                    map,\r\n                    \"Layer_G\" + landbase.typeId,\r\n                    response\r\n                  );\r\n                  resizeMap(map);\r\n                },\r\n                null,\r\n                null,\r\n                false,\r\n                null,\r\n                null,\r\n                false\r\n              );\r\n            } else {\r\n              addGraphicToLayer(\r\n                feature,\r\n                map,\r\n                \"detailedGraphicLayer\",\r\n                null,\r\n                color,\r\n                null,\r\n                (response) => {\r\n                  this.#addLayerFeature(map, \"detailedGraphicLayer\", response);\r\n                  resizeMap(map);\r\n                },\r\n                null,\r\n                null,\r\n                false,\r\n                null,\r\n                null,\r\n                false\r\n              );\r\n            }\r\n          },\r\n          (landbase, annotation, isContained) => {\r\n            if (isContained) {\r\n              var res = annotation.text.split(\"@\");\r\n\r\n              if (annotation.text.indexOf(\"@\") < 0 && isNaN(annotation.text)) {\r\n                this.streetsAnnotation.push({\r\n                  feature: annotation.shape,\r\n                  text: annotation.text,\r\n                  angle: annotation.angle,\r\n                });\r\n                //break;\r\n              } else {\r\n                if (\r\n                  res.length != 3 &&\r\n                  res.length == 1 &&\r\n                  (res[0] < 12 || res[0] > 29)\r\n                ) {\r\n                  cadErrors[\"parcels\"] =\r\n                    \"يجب ان تحتوى الأراضي على رقم الأرض - الاستخدام التفصيلي - رمز الاستخدام\";\r\n                  isValidCad = false;\r\n                  return;\r\n                }\r\n\r\n                landbase.north_length = 0;\r\n                landbase.south_length = 0;\r\n                landbase.weast_length = 0;\r\n                landbase.east_length = 0;\r\n\r\n                if (res.length == 1) {\r\n                  landbase.usingSymbol = res[0].replace(/ /g, \"\");\r\n                  landbase.useDetails = res[0].replace(/ /g, \"\");\r\n                } else {\r\n                  landbase.number = res[0];\r\n                  landbase.useDetails = res[1];\r\n\r\n                  if (res.length > 2) {\r\n                    landbase.usingSymbol = res[2].replace(/ /g, \"\");\r\n\r\n                    if (getUsingSymbol(res[2].replace(/ /g, \"\")))\r\n                      landbase.usingSymbolName = getUsingSymbol(\r\n                        res[2].replace(/ /g, \"\")\r\n                      ).name;\r\n                    else if (getUsingSymbol(res[2]))\r\n                      landbase.usingSymbolName = getUsingSymbol(res[2]).name;\r\n                    else {\r\n                      res.reverse();\r\n\r\n                      landbase.number = res[0];\r\n                      landbase.useDetails = res[1];\r\n                      landbase.usingSymbol = res[2].replace(/ /g, \"\");\r\n\r\n                      if (getUsingSymbol(res[2].replace(/ /g, \"\")))\r\n                        landbase.usingSymbolName = getUsingSymbol(\r\n                          res[2].replace(/ /g, \"\")\r\n                        ).name;\r\n                      else if (getUsingSymbol(res[2]))\r\n                        landbase.usingSymbolName = getUsingSymbol(res[2]).name;\r\n                      else {\r\n                        cadErrors[\"usingSymbol\"] =\r\n                          \"رمز الاستخدام غير صحيح لأرض رقم \" +\r\n                          landbase.usingSymbol;\r\n                        isValidCad = false;\r\n                        return;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n\r\n                this.servicesTypes.forEach((type) => {\r\n                  var subType = _.find(type.cad_sublayers, (d) => {\r\n                    return d.symbol_id == landbase.useDetails;\r\n                  });\r\n\r\n                  if (subType) {\r\n                    var f = legends.find((x) => {\r\n                      return x.id == type.id;\r\n                    });\r\n                    if (!f) legends.push(type);\r\n\r\n                    landbase.subType = subType;\r\n                    color = type.layer_color;\r\n\r\n                    if (!color) color = [0, 255, 255];\r\n\r\n                    landbase.typeName = type.layer_description;\r\n                    landbase.typeId = type.symbol_id;\r\n                    landbase.is_cut = type.is_cut;\r\n                    landbase.is_notfees = type.is_notfees;\r\n                  }\r\n                });\r\n\r\n                if (!landbase.subType) {\r\n                  var type = _.find(this.servicesTypes, (d) => {\r\n                    return d.symbol_id == landbase.useDetails;\r\n                  });\r\n\r\n                  if (type) {\r\n                    var f = legends.find((x) => {\r\n                      return x.id == type.id;\r\n                    });\r\n                    if (!f) legends.push(type);\r\n                    landbase.is_cut = type.is_cut;\r\n                    landbase.is_notfees = type.is_notfees;\r\n                    landbase.typeName = type.layer_description;\r\n                    landbase.typeId = type.symbol_id;\r\n                    color = type.layer_color;\r\n                    if (!color) color = [0, 255, 255];\r\n                  } else {\r\n                    if (landbase.typeId != 23 && res.length != 1) {\r\n                      cadErrors[\"useDetails\"] =\r\n                        \"الاستخدام التفصيلي غير صحيح لأرض رقم \" +\r\n                        landbase.number;\r\n                      isValidCad = false;\r\n                      return;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            if (\r\n              landbase.typeName == \"شوارع\" ||\r\n              landbase.typeName == \"مواقف\" ||\r\n              landbase.typeName == \"ممرات مشاة\"\r\n            ) {\r\n              var streetLines = [];\r\n              landbase.isHide = true;\r\n              var min = 0;\r\n              var max = 0;\r\n              for (var j = 0, n = landbase.rings[0].length - 1; j < n; j++) {\r\n                var point1 = new esri.geometry.Point(\r\n                  landbase.rings[0][j][0],\r\n                  landbase.rings[0][j][1]\r\n                );\r\n                var point2 = new esri.geometry.Point(\r\n                  landbase.rings[0][j + 1][0],\r\n                  landbase.rings[0][j + 1][1]\r\n                );\r\n\r\n                var length = esri.geometry.getLength(point1, point2);\r\n                length = Number(parseFloat(length)?.toFixed(2));\r\n                var path = {\r\n                  paths: [[landbase.rings[0][j], landbase.rings[0][j + 1]]],\r\n                  text: length,\r\n                  spatialReference: landbase.spatialReference,\r\n                };\r\n\r\n                streetLines.push(path);\r\n              }\r\n\r\n              maxLines = this.#getMaxTwoLinesLength(streetLines);\r\n              var polyline1 = new esri.geometry.Polyline(maxLines[0]);\r\n              var polyline2 = new esri.geometry.Polyline(maxLines[1]);\r\n              var ptLine1 = polyline1.getExtent().getCenter();\r\n              var ptLine2 = polyline2.getExtent().getCenter();\r\n\r\n              landbase.length = maxLines[0].text;\r\n              landbase.width = +esri.geometry\r\n                .getLength(ptLine1, ptLine2)\r\n                .toPrecision(2);\r\n              if (landbase.typeName == \"شوارع\")\r\n                landbase.number = \" م\" + landbase.width + \" ضرع عراش\";\r\n            }\r\n          },\r\n          null,\r\n          [0, 255, 0]\r\n        );\r\n\r\n        this.drawStreetsAnnotations(map);\r\n        this.setPlanUsingSymbolDesc();\r\n        //\r\n        if (\r\n          !isValidCad &&\r\n          !props.mainObject.submission_data.mostafed_data.e3adt_tanzem\r\n        ) {\r\n          this.hideAll = true;\r\n          this.hide_details = true;\r\n          Object.keys(cadErrors).forEach((f) => {\r\n            window.notifySystem(\"error\", cadErrors[f], 10);\r\n          });\r\n\r\n          this.uplodedFeatures[this.selectedCADIndex] = null;\r\n          props.change(\r\n            `plansData.image_uploader${this.selectedCADIndex + 1}`,\r\n            \"\"\r\n          );\r\n          this.plans = [];\r\n          for (var i = 0; i < this.uplodedFeatures?.length; i++) {\r\n            if (this.uplodedFeatures[i]) {\r\n              this.selectedCADIndex = i;\r\n              var currentPlan =\r\n                i == 0 ? \"perfectCad\" : i == 1 ? \"secondCad\" : \"thirdCad\";\r\n              this.selectedCAD = currentPlan;\r\n              this.plans.push(currentPlan);\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n\r\n          this.checkStreetDomains().then((domains) => {\r\n            this.domains = domains;\r\n            this.checkServicesTypes().then((serviceTypes) => {\r\n              this.servicesTypes = serviceTypes;\r\n              this.init_plan(props, this.selectedCADIndex, callback);\r\n            });\r\n          });\r\n        } else {\r\n          this.hideAll = false;\r\n          this.hide_details = false;\r\n        }\r\n\r\n        this.servicesTypes = legends;\r\n        this.servicesTypes.unshift({\r\n          cad_sublayers: null,\r\n          id: \"markall\",\r\n          is_cut: 1,\r\n          layer_code: 210,\r\n          layer_color: \"\",\r\n          layer_description: \"تحديد الكل\",\r\n          sort_id: 1000,\r\n          symbol_id: \"markall\",\r\n        });\r\n\r\n        this.streets =\r\n          (this.streets?.length && this?.streets) ||\r\n          this?.uplodedFeatures[\r\n            this.selectedCADIndex\r\n          ]?.shapeFeatures.landbase.filter((d) => {\r\n            return d.typeName == \"شوارع\";\r\n          });\r\n\r\n        this.statisticsParcels = this.updateStatisticParcels(props);\r\n        this.totalParcelPage =\r\n          this.uplodedFeatures?.[this.selectedCADIndex]?.shapeFeatures?.landbase\r\n            ?.length || 0 / this.pageSize;\r\n\r\n        this.totalInvestalParcelPage =\r\n          this.uplodedFeatures?.[\r\n            this.selectedCADIndex\r\n          ]?.shapeFeatures?.landbase?.filter((parcel) => parcel.is_cut == 2)\r\n            ?.length || 0 / this.pageSize;\r\n\r\n        this.totalStreetPage = this.streets?.length || 0 / this.pageSize;\r\n\r\n        this.enableDownlaodCad = this.uplodedFeatures?.[this.selectedCADIndex]\r\n          ?.cad_path\r\n          ? true\r\n          : false;\r\n      }\r\n    );\r\n  };\r\n\r\n  updateStatisticParcels = (props) => {\r\n    //statistics استعمالات\r\n    let statisticsParcels = [];\r\n    var pacrelTypes = _.chain(\r\n      this.uplodedFeatures?.[this.selectedCADIndex]?.shapeFeatures?.landbase\r\n    )\r\n      ?.sortBy((d) => {\r\n        var found = _.find(this.servicesTypes, (v) => {\r\n          return v.symbol_id == d.typeId;\r\n        });\r\n        return found && found.sort_id ? found.sort_id : 100;\r\n      })\r\n      ?.groupBy(\"typeName\");\r\n\r\n    this.detailsParcelTypes = pacrelTypes\r\n      ?.map((list, key) => {\r\n        return {\r\n          key: key,\r\n          usingTypeArea: _.reduce(\r\n            list,\r\n            (memo, d) => {\r\n              return memo + +d.area;\r\n            },\r\n            0\r\n          ),\r\n          value: _.chain(list)\r\n            .groupBy((d) => {\r\n              return d.subType && d.subType.sublayer_code;\r\n            })\r\n            .map((list, key) => {\r\n              return {\r\n                key: key,\r\n                value: list,\r\n                total_area: _.reduce(\r\n                  list,\r\n                  (memo, d) => {\r\n                    return memo + +d.area;\r\n                  },\r\n                  0\r\n                ),\r\n              };\r\n            })\r\n            .value(),\r\n        };\r\n      })\r\n      ?.value();\r\n    pacrelTypes = pacrelTypes?.value();\r\n    var msa7y_area = _.chain(\r\n      props.mainObject?.data_msa7y?.msa7yData?.cadDetails?.suggestionsParcels\r\n    )\r\n      ?.reduce((a, b) => {\r\n        return a + +b.area;\r\n      }, 0)\r\n      ?.value();\r\n    Object.keys(pacrelTypes)?.forEach((parcelTypeKey) => {\r\n      var area = pacrelTypes[parcelTypeKey]\r\n        .map((p) => {\r\n          return p.area;\r\n        })\r\n        .reduce((a, b) => {\r\n          return a + b;\r\n        });\r\n      statisticsParcels.push({\r\n        name: parcelTypeKey,\r\n        area: area,\r\n        is_cut: pacrelTypes[parcelTypeKey][0].is_cut,\r\n        is_notfees: pacrelTypes[parcelTypeKey][0].is_notfees,\r\n        areaPercentage:\r\n          (area /\r\n            ((props.mainObject.submission_data.mostafed_data.e3adt_tanzem &&\r\n              msa7y_area) ||\r\n              this.TotalParcelArea)) *\r\n          100,\r\n      });\r\n    });\r\n    //\r\n\r\n    calculateSchemanticProportions(\r\n      this.uplodedFeatures?.[this.selectedCADIndex],\r\n      statisticsParcels,\r\n      this.TotalParcelArea,\r\n      props.mainObject\r\n    );\r\n\r\n    return statisticsParcels;\r\n  };\r\n\r\n  dragLength = (map, event) => {\r\n    map.disableMapNavigation();\r\n    map.getLayer(\"PacrelNoGraphicLayer\").remove(event.graphic);\r\n    addParcelNo(\r\n      event.mapPoint,\r\n      map,\r\n      \"\" + event.graphic.attributes[\"text\"],\r\n      \"PacrelNoGraphicLayer\",\r\n      12,\r\n      null,\r\n      event.graphic.attributes[\"angle\"],\r\n      null,\r\n      {\r\n        text: event.graphic.attributes[\"text\"],\r\n        angle: event.graphic.attributes[\"angle\"],\r\n      },\r\n      true,\r\n      (response) => {\r\n        this.#addLayerFeature(map, \"PacrelNoGraphicLayer\", response);\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  clearBuffer = (map) => {\r\n    if (map.getLayer(\"BufferGraphicLayer\"))\r\n      map.getLayer(\"BufferGraphicLayer\").clear();\r\n  };\r\n\r\n  #addLayerFeature = (map, layerName, response) => {\r\n    let maplayerIndex = map.graphicsLayerIds.findIndex((r) => r == layerName);\r\n    let layerIndex = this.layers.findIndex((r) => r.layerName == layerName);\r\n    \r\n    if (layerIndex > -1) {\r\n      let graphicIndex = this.layers[layerIndex].graphics.findIndex((r) => {\r\n        return (\r\n          (r?.geometry?.x &&\r\n            response?.geometry?.x &&\r\n            r?.geometry?.x == response?.geometry?.x &&\r\n            r?.geometry?.y == response?.geometry?.y) ||\r\n          (r?.geometry?.rings &&\r\n            response?.geometry?.rings &&\r\n            response?.geometry?.rings[0].filter(\r\n              (t, i) =>\r\n                t[0][0] == r?.geometry?.rings[0][i][0] &&\r\n                t[0][1] == r?.geometry?.rings[0][i][1]\r\n            ).length == r?.geometry?.rings[0].length) ||\r\n          (r?.geometry?.paths &&\r\n            response?.geometry?.paths &&\r\n            response?.geometry?.paths[0].filter(\r\n              (t, i) =>\r\n                t[0][0] == r?.geometry?.paths[0][i][0] &&\r\n                t[0][1] == r?.geometry?.paths[0][i][1]\r\n            ).length == r?.geometry?.paths[0].length)\r\n        );\r\n      });\r\n\r\n      if (graphicIndex != -1) {\r\n        this.layers[layerIndex].graphics[graphicIndex] = response.toJson();\r\n      } else {\r\n        this.layers[layerIndex].graphics.push(response.toJson());\r\n      }\r\n    } else {\r\n      this.layers.splice(0, 0, {\r\n        layerIndex: maplayerIndex,\r\n        layerName: layerName,\r\n        graphics: [response.toJson()],\r\n      });\r\n    }\r\n  };\r\n\r\n  openPopup = (props, inEditMode, key, callback) => {\r\n    let scope = this;\r\n    let { selectedCADIndex, uplodedFeatures } = scope;\r\n    let selectedPlan = uplodedFeatures && uplodedFeatures[selectedCADIndex];\r\n    var fields = (inEditMode && this.#fields) || this.#editFields;\r\n\r\n    props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: {\r\n            ...selectedPlan.shapeFeatures.landbase[key],\r\n          },\r\n          ok(values) {\r\n            values.cuttes_area = 0;\r\n            if (values.survayParcelCutter.length) {\r\n              if (values.survayParcelCutter[0].NORTH_EAST_DIRECTION) {\r\n                values.cuttes_area +=\r\n                  +values.survayParcelCutter[0].NORTH_EAST_DIRECTION;\r\n              }\r\n              if (values.survayParcelCutter[0].NORTH_WEST_DIRECTION) {\r\n                values.cuttes_area +=\r\n                  +values.survayParcelCutter[0].NORTH_WEST_DIRECTION;\r\n              }\r\n              if (values.survayParcelCutter[0].SOUTH_EAST_DIRECTION) {\r\n                values.cuttes_area +=\r\n                  +values.survayParcelCutter[0].SOUTH_EAST_DIRECTION;\r\n              }\r\n              if (values.survayParcelCutter[0].SOUTH_WEST_DIRECTION) {\r\n                values.cuttes_area +=\r\n                  +values.survayParcelCutter[0].SOUTH_WEST_DIRECTION;\r\n              }\r\n            }\r\n            selectedPlan.shapeFeatures.landbase[key] = {\r\n              ...selectedPlan.shapeFeatures.landbase[key],\r\n              ...values,\r\n            };\r\n\r\n            callback();\r\n\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n}\r\n","\r\nimport { loadModules } from 'esri-loader';\r\nimport{mapUrl}from\"../mapviewer/config/map\"\r\n\r\nconst options = {\r\n    url: 'https://js.arcgis.com/3.13'\r\n};\r\n\r\nexport const selectDis=(e)=>{\r\nvar a=[];\r\n\r\ne.forEach(el => {\r\n    el.features.forEach(element=>{\r\n        if(!a.find((t=>t.attributes.PARCEL_SPATIAL_ID==element.attributes.PARCEL_SPATIAL_ID))){\r\n            a.push(element)\r\n        }\r\n    })\r\n});\r\nreturn a;\r\n}\r\n\r\nexport const DataQuery=(layerNum,QueryOptions,CallBack)=>{\r\n    loadModules([\"esri/symbols/SimpleLineSymbol\",\"esri/Color\",\"esri/layers/FeatureLayer\",\"esri/tasks/RelationshipQuery\",\"esri/tasks/QueryTask\",\"esri/tasks/query\",\"esri/request\",\"esri/geometry/Polygon\",\"esri/symbols/SimpleFillSymbol\",\"esri/graphic\"], options)\r\n    .then(([SimpleLineSymbol,Color,FeatureLayer,RQuery,QueryTask,Query,request,Polygon,SimpleFillSymbol,Graphic]) => {\r\n\r\n     var query = new Query()\r\n     var qt = new QueryTask(mapUrl+`/${layerNum}`)\r\n    QueryOptions.forEach(e=>{\r\n        query[e.name]=e.value\r\n    })\r\n     qt.execute(query,CallBack,(res)=>{console.log(res)})\r\n    })\r\n}\r\nexport const queryOption=(where,geo,outfields)=>{\r\n       return [{name:\"where\",value:where},\r\n       {name:\"returnGeometry\",value:geo},\r\n       {name:\"outFields\",value:outfields}\r\n      ]\r\n}\r\nexport const querySetting=(num,where,geo,outfields, url)=>{\r\n    \r\n    \r\n    return {\r\n        url:(url || mapUrl)+\"/\"+num,\r\n        where,\r\n        returnGeometry:geo,\r\n        outFields:outfields\r\n}\r\n\r\n}\r\nexport const DataReqest=(url,callBack)=>{\r\n    loadModules([\"esri/request\"], options)\r\n    .then(([request]) => {\r\n        request({\r\n            url: url,\r\n            content: {f:\"json\"},\r\n            handleAs: \"json\",\r\n            callbackParamName:\"callback\"\r\n        }).then(callBack);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\nvar content = require(\"!!../../../../../../../../node_modules/css-loader/dist/cjs.js!./planDataStyle.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../../../../node_modules/css-loader/dist/cjs.js!./planDataStyle.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../../../../node_modules/css-loader/dist/cjs.js!./planDataStyle.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React, { Component } from \"react\";\r\nimport { postItem, fetchData } from \"app/helpers/apiMethods\";\r\nimport {\r\n  getMap,\r\n  getIsMapLoaded,\r\n  setIsMapLoaded,\r\n} from \"main_helpers/functions/filters/state\";\r\nimport { esriRequest, getMapInfo } from \"../common/esri_request\";\r\nimport { FormSection } from \"redux-form\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport {\r\n  DrawGraphics,\r\n  createFeatureLayer,\r\n  getInfo,\r\n  queryTask,\r\n  project,\r\n  isPointOrArc,\r\n  addGraphicToLayer,\r\n  addParcelNo,\r\n  getLengthOffset,\r\n  clearGraphicFromLayer,\r\n  getCornersIndex,\r\n  sortLines,\r\n  getCornerIconPosition,\r\n  getColorFromCadIndex,\r\n  zoomToLayer,\r\n  zoomToIdentifyParcel,\r\n  IdentifyTask,\r\n  getPolygons,\r\n  HasArabicCharacters,\r\n  computeAngle,\r\n  highlightFeature,\r\n  computeStreetAngle,\r\n  convertToArabic,\r\n  getUsingSymbol,\r\n  getLayer,\r\n  queryTask_updated,\r\n  checkUploadedLayersFullyContainedByBoundry,\r\n  computeLineLength,\r\n  computeLineAngle,\r\n  rotate,\r\n  getGraphicDimensions,\r\n  getLengthDirectionByCentroid,\r\n  calculateSchemanticProportions,\r\n  resizeMap,\r\n  redrawNames,\r\n  getFieldDomain,\r\n} from \"../common/common_func\";\r\nimport applyFilters from \"main_helpers/functions/filters\";\r\nimport { layersSetting } from \"../mapviewer/config/layers\";\r\nimport { geometryServiceUrl, mapUrl } from \"../mapviewer/config/map\";\r\nimport {\r\n  Select,\r\n  Button,\r\n  Form,\r\n  message,\r\n  Checkbox,\r\n  Tabs,\r\n  Collapse,\r\n  Pagination,\r\n  Radio,\r\n} from \"antd\";\r\nconst RadioGroup = Radio.Group;\r\nconst { TabPane } = Tabs;\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nvar uniqid = require(\"uniqid\");\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n  isEmpty,\r\n} from \"lodash\";\r\nconst _ = require(\"lodash\");\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport axios from \"axios\";\r\nimport label from \"../../../label\";\r\nimport store from \"reducers\";\r\nimport \"./planDataStyle.css\";\r\nimport { Tooltip } from \"antd\";\r\nimport { PlanEntity } from \"./Entity/PlanEntity\";\r\n//import { planSubmission } from \"../../../../../wizard/modulesObjects/plan_approval/steps/final_approval_module/planSubmissionFunction\";\r\nconst Panel = Collapse.Panel;\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: \"2px\",\r\n  fontSize: \"20px\",\r\n  marginRight: \"13px\",\r\n  float: \"right\",\r\n  // change background colour if dragging\r\n  background: \"#E0E0E0\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nconst dragStyle = {\r\n  float: \"right\",\r\n  marginRight: \"13px\",\r\n  backgroundColor: \"#E0E0E0\",\r\n  padding: \"2px\",\r\n};\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  //background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  padding: grid,\r\n  width: \"100%\",\r\n  height: \"60px\",\r\n});\r\n\r\nconst itemContainerNorth = {\r\n  borderTop: \"13px solid #008DFF\",\r\n  margin: \"auto\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst sideClass = {\r\n  float: \"right\",\r\n  textAlign: \"right\",\r\n  fontSize: \"20px\",\r\n  marginLeft: \"10px\",\r\n  marginRight: \"10px\",\r\n  backgroundColor: \"#E0E0E0\",\r\n};\r\n\r\nconst itemContainerWest = {\r\n  borderLeft: \"13px solid red\",\r\n  height: \"auto\",\r\n  margin: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerEmpty = {\r\n  height: \"auto\",\r\n  margin: \"35px 88px auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerEast = {\r\n  borderRight: \"13px solid #8A8A8A\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerSouth = {\r\n  borderBottom: \"13px solid #09F869\",\r\n  margin: \"auto\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst planDescStyle = {\r\n  fontSize: \"15px\",\r\n  fontWeight: \"600\",\r\n  marginTop: \"5px\",\r\n  marginBottom: \"5px\",\r\n};\r\n\r\nconst containerDetails = {\r\n  minHeight: \"10em\",\r\n  width: \"150em\",\r\n  display: \"table-cell\",\r\n  verticalAlign: \"middle\",\r\n};\r\n\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"plansData\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\n\r\nclass plansDataComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    if (\r\n      props?.mainObject?.[`${props.currentStep}`]?.[\r\n        `${props.currentStep}Data`\r\n      ]?.[\"planDetails\"]\r\n    ) {\r\n      const {\r\n        mainObject: {\r\n          [`${props.currentStep}`]: {\r\n            [`${props.currentStep}Data`]: { planDetails },\r\n          },\r\n          data_msa7y: {\r\n            msa7yData: { cadDetails },\r\n          },\r\n        },\r\n      } = props;\r\n\r\n      this.state = {\r\n        plan: new PlanEntity(props, {\r\n          layers: planDetails.layers || [],\r\n          isInvestalIncluded: planDetails.isInvestalIncluded || false,\r\n          zoomRatio: 50,\r\n          plans: [],\r\n          polygons: [],\r\n          selectedCAD: planDetails.selectedCAD || \"\",\r\n          selectedCADIndex:\r\n            planDetails.selectedCADIndex != -1\r\n              ? planDetails.selectedCADIndex\r\n              : -1,\r\n          planDescription: cadDetails?.planDescription || \"\",\r\n          planUsingSymbol: planDetails.planUsingSymbol || \"\",\r\n          hide_details:\r\n            planDetails.hide_details != undefined &&\r\n            planDetails.hide_details != true\r\n              ? false\r\n              : true,\r\n          streets: planDetails.streets || [],\r\n\r\n          removeNoSubType: undefined,\r\n          serviceType: planDetails.serviceType || {},\r\n          servicesTypes: planDetails.servicesTypes || [],\r\n          serviceSubType: planDetails.serviceSubType || {},\r\n          servicesSubTypes: planDetails.servicesSubTypes || [],\r\n          bufferDistance: planDetails.bufferDistance || 5,\r\n          uplodedFeatures: planDetails.uplodedFeatures || [],\r\n          statisticsParcels: planDetails.statisticsParcels || [],\r\n          detailsParcelTypes: planDetails.detailsParcelTypes || [],\r\n          TotalParcelArea:\r\n            planDetails.TotalParcelArea ||\r\n            (planDetails.uplodedFeatures &&\r\n              planDetails.uplodedFeatures[\r\n                planDetails.selectedCADIndex || 0\r\n              ]?.shapeFeatures?.landbase?.reduce((a, b) => a + b.area, 0)) ||\r\n            0,\r\n          servicesLayer: {},\r\n          //cadPath: '',\r\n          streetsAnnotation: planDetails.streetsAnnotation || [],\r\n          enableDownlaodCad: props?.mainObject?.enableDownlaodCad || false,\r\n        }),\r\n      };\r\n    } else {\r\n      this.state = {\r\n        plan: new PlanEntity(props),\r\n      };\r\n    }\r\n    this.isLoaded = true;\r\n  }\r\n\r\n  resetMap = () => {\r\n    if (this?.map?.graphicsLayerIds) {\r\n      let arr = this.map.graphicsLayerIds.map((x) => x);\r\n      arr.forEach((layerName, index) => {\r\n        if (layerName.toLowerCase().indexOf(\"Layer_G\".toLowerCase()) != -1) {\r\n          this.map.removeLayer(this.map.getLayer(layerName));\r\n        } else {\r\n          clearGraphicFromLayer(this.map, layerName);\r\n        }\r\n      });\r\n    }\r\n\r\n    console.log(\"map\", map);\r\n\r\n    this.map?.setExtent(\r\n      new esri.geometry.Extent({\r\n        xmin: 351074.79384063353,\r\n        ymin: 2908411.351837893,\r\n        xmax: 461736.99433170113,\r\n        ymax: 2947768.2013849253,\r\n        spatialReference: {\r\n          wkid: 32639,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  init = function (newVal) {\r\n    this.resetMap();\r\n    const { plan } = this.state;\r\n    plan.checkStreetDomains().then((domains) => {\r\n      plan.domains = domains;\r\n      plan.checkServicesTypes().then((serviceTypes) => {\r\n        plan.servicesTypes = serviceTypes;\r\n        plan.init_plan(this.props, newVal, this.map, () => {\r\n          \r\n          this.setState(\r\n            {\r\n              plan,\r\n            },\r\n            () => {\r\n              this.setToStore();\r\n            }\r\n          );\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  onStreetChange = (key, evt) => {\r\n    let { plan } = this.state;\r\n    plan.streets[key][evt.target.name] =\r\n      evt.target.name == \"streetname\"\r\n        ? evt?.target?.value || \"\"\r\n        : evt?.target?.value;\r\n    plan.streets[key].polygon =\r\n      street.polygon || new esri.geometry.Polygon(plan.streets[key]);\r\n    plan.streets[key].position =\r\n      plan.streets[key].position ||\r\n      new esri.geometry.Polygon(plan.streets[key]).getExtent().getCenter();\r\n    this.setState(\r\n      {\r\n        plan,\r\n      },\r\n      () => {\r\n        this.setToStore();\r\n      }\r\n    );\r\n  };\r\n\r\n  drawBuffer = function (bufferDistance) {\r\n    const { plan } = this.state;\r\n    plan.drawBuffer(bufferDistance, this.map, () => {\r\n      store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n    });\r\n  };\r\n\r\n  serviceChange = function (evt) {\r\n    var item = JSON.parse(evt.target.value);\r\n    let { plan } = this.state;\r\n    plan.serviceType = item;\r\n    plan.servicesSubTypes = item.cad_sublayers;\r\n    this.setState(\r\n      {\r\n        plan,\r\n      },\r\n      () => {\r\n        this.setToStore();\r\n      }\r\n    );\r\n  };\r\n\r\n  clearBuffer = function () {\r\n    const { plan } = this.state;\r\n    plan.clearBuffer(this.map);\r\n  };\r\n\r\n  dragLength = function (event) {\r\n    const { plan } = this.state;\r\n    plan.dragLength(this.map, event);\r\n  };\r\n\r\n  moveBoundries = function () {\r\n    window.onDragLengthLayer = [];\r\n    window.onDragLengthLayer.push(this.dragLength);\r\n  };\r\n\r\n  serviceSubChange = function (evt) {\r\n    var item = JSON.parse(evt.target.value);\r\n    let { plan } = this.state;\r\n    plan.bufferDistance = +item.buffer_length;\r\n    plan.serviceSubType = item;\r\n    this.setState(\r\n      {\r\n        plan,\r\n      },\r\n      () => {\r\n        this.setToStore();\r\n      }\r\n    );\r\n  };\r\n\r\n  handleParcelChange = (page) => {\r\n    let { plan } = this.state;\r\n    plan.currentParcelPage = page;\r\n    plan.minParcelIndex = (page - 1) * plan.pageSize;\r\n    plan.maxParcelIndex = page * plan.pageSize;\r\n    this.setState(\r\n      {\r\n        plan,\r\n      },\r\n      () => {\r\n        this.setToStore();\r\n      }\r\n    );\r\n  };\r\n\r\n  handleInvestalParcelChange = (page) => {\r\n    let { plan } = this.state;\r\n    plan.currentInvestalParcelPage = page;\r\n    plan.minInvestalParcelIndex = (page - 1) * plan.pageSize;\r\n    plan.maxInvestalParcelIndex = page * plan.pageSize;\r\n    this.setState(\r\n      {\r\n        plan,\r\n      },\r\n      () => {\r\n        this.setToStore();\r\n      }\r\n    );\r\n  };\r\n  handleStreetChange = (page) => {\r\n    let { plan } = this.state;\r\n    plan.currentStreetPage = page;\r\n    plan.minStreetIndex = (page - 1) * plan.pageSize;\r\n    plan.maxStreetIndex = page * plan.pageSize;\r\n    this.setState(\r\n      {\r\n        plan,\r\n      },\r\n      () => {\r\n        this.setToStore();\r\n      }\r\n    );\r\n  };\r\n\r\n  investalChange = (key, evt) => {\r\n    let { plan } = this.state;\r\n    if (key == -1) {\r\n      plan.statisticsParcels = plan.updateStatisticParcels(this.props);\r\n    } else {\r\n      plan.statisticsParcels[key].isInvestalIncluded =\r\n        (plan.statisticsParcels[key].is_cut == 1 && true) || evt.target.checked;\r\n      calculateSchemanticProportions(\r\n        plan.uplodedFeatures?.[plan.selectedCADIndex],\r\n        plan.statisticsParcels,\r\n        plan.TotalParcelArea,\r\n        this.props.mainObject\r\n      );\r\n    }\r\n    this.setState(\r\n      {\r\n        plan,\r\n      },\r\n      () => {\r\n        this.setToStore();\r\n      }\r\n    );\r\n  };\r\n\r\n  changeVisibilty = (layerName, isVisibile) => {\r\n    let { plan } = this.state;\r\n    var checkboxs = {};\r\n    if (layerName == \"markall\") {\r\n      plan.markall.isVisibile = !plan.markall.isVisibile;\r\n      plan.servicesTypes.forEach((service) => {\r\n        if (this.map.getLayer(\"Layer_G\" + service.symbol_id))\r\n          this.map\r\n            .getLayer(\"Layer_G\" + service.symbol_id)\r\n            .setOpacity(plan.markall.isVisibile ? 1 : 0);\r\n\r\n        checkboxs[service.symbol_id + \"_visbility\"] = plan.markall.isVisibile\r\n          ? 1\r\n          : 0;\r\n      });\r\n\r\n      if (this.map.getLayer(\"PacrelNoGraphicLayer\"))\r\n        this.map\r\n          .getLayer(\"PacrelNoGraphicLayer\")\r\n          .setOpacity(plan.markall.isVisibile ? 1 : 0);\r\n    } else {\r\n      if (this.map.getLayer(\"Layer_G\" + layerName))\r\n        this.map.getLayer(\"Layer_G\" + layerName).setOpacity(isVisibile ? 1 : 0);\r\n\r\n      checkboxs[layerName + \"_visbility\"] = isVisibile ? 1 : 0;\r\n    }\r\n\r\n    this.setState({ ...checkboxs });\r\n  };\r\n\r\n  zoom = function (feature) {\r\n    feature.type = \"polygon\";\r\n    highlightFeature({ geometry: feature }, this.map, {\r\n      layerName: \"highlightGraphicLayer\",\r\n      isZoom: true,\r\n      zoomFactor: 20,\r\n      isHiglightSymbol: true,\r\n      highlighColor: [0, 255, 255, 0.5],\r\n    });\r\n  };\r\n\r\n  highlight = function (feature) {\r\n    feature.type = \"polygon\";\r\n    highlightFeature({ geometry: feature }, this.map, {\r\n      layerName: \"highlightBoundriesGraphicLayer\",\r\n      isZoom: false,\r\n      highlighColor: [0, 255, 255],\r\n    });\r\n  };\r\n\r\n  clearHighlight = (feature) => {\r\n    clearGraphicFromLayer(this.map, \"highlightBoundriesGraphicLayer\");\r\n  };\r\n\r\n  setToStore = () => {\r\n    const { plan } = this.state;\r\n    var values = {\r\n      isInvestalIncluded: plan?.isInvestalIncluded,\r\n      statisticsParcels: plan?.statisticsParcels,\r\n      enableDownlaodCad: plan?.uplodedFeatures.cad_path ? true : false,\r\n      planDescription: plan?.planDescription,\r\n      streets: plan?.streets,\r\n      detailsParcelTypes: plan?.detailsParcelTypes,\r\n      uplodedFeatures: plan?.uplodedFeatures,\r\n      streetsAnnotation: plan?.streetsAnnotation,\r\n      serviceSubType: plan?.serviceSubType,\r\n      serviceType: plan?.serviceType,\r\n      selectedCAD: plan?.selectedCAD,\r\n      selectedCADIndex: plan?.selectedCADIndex,\r\n      planUsingSymbol: plan?.planUsingSymbol,\r\n      hide_details: plan?.hide_details,\r\n      servicesTypes: plan?.servicesTypes,\r\n      servicesSubTypes: plan?.servicesSubTypes,\r\n      TotalParcelArea: plan?.TotalParcelArea,\r\n      current_step: plan?.current_step,\r\n      bufferDistance: plan?.bufferDistance,\r\n      buildingCondition: plan?.buildingCondition || [],\r\n      layers: plan.layers || [],\r\n    };\r\n\r\n    var additionalValues = {\r\n      totalParcelPage:\r\n        plan?.uplodedFeatures?.[plan?.selectedCADIndex]?.shapeFeatures?.landbase\r\n          ?.length / plan?.pageSize,\r\n      totalInvestalParcelPage:\r\n        plan?.uplodedFeatures?.[\r\n          plan?.selectedCADIndex\r\n        ]?.shapeFeatures?.landbase?.filter((parcel) => parcel?.is_cut == 2)\r\n          ?.length / plan?.pageSize,\r\n      minParcelIndex: plan?.minParcelIndex,\r\n      maxParcelIndex: plan?.pageSize,\r\n      minInvestalParcelIndex: plan?.minInvestalParcelIndex,\r\n      maxInvestalParcelIndex: plan?.pageSize,\r\n      totalStreetPage: plan?.streets?.length / plan?.pageSize,\r\n      minStreetIndex: plan?.minStreetIndex,\r\n      maxStreetIndex: plan?.pageSize,\r\n    };\r\n\r\n    this.props.input.onChange({\r\n      ...values,\r\n      ...additionalValues,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    const { input, mainObject } = this.props;\r\n    const vals = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n\r\n    if (input.value && input.value != \"\" && input.value.justInvoked) {\r\n      input.value.justInvoked = false;\r\n      this.isLoaded = false;\r\n      this.map = getMap();\r\n      let plan = {};\r\n      plan.plans = [];\r\n\r\n      if (\r\n        !plan.uplodedFeatures ||\r\n        (Array.isArray(plan.uplodedFeatures) &&\r\n          plan.uplodedFeatures.length == 0)\r\n      ) {\r\n        plan.uplodedFeatures = [];\r\n        plan.uplodedFeatures.push(\r\n          (!isEmpty(input.value.perfectCad) && input.value.perfectCad) || null\r\n        );\r\n        plan.uplodedFeatures.push(\r\n          (!isEmpty(input.value.secondCad) && input.value.secondCad) || null\r\n        );\r\n        plan.uplodedFeatures.push(\r\n          (!isEmpty(input.value.thirdCad) && input.value.thirdCad) || null\r\n        );\r\n      } else {\r\n        plan.uplodedFeatures[0] =\r\n          (!isEmpty(input.value.perfectCad) && input.value.perfectCad) || null;\r\n        plan.uplodedFeatures[1] =\r\n          (!isEmpty(input.value.secondCad) && input.value.secondCad) || null;\r\n        plan.uplodedFeatures[2] =\r\n          (!isEmpty(input.value.thirdCad) && input.value.thirdCad) || null;\r\n      }\r\n\r\n      plan.hide_details = input.value.hide_details || false;\r\n\r\n      for (var i = 0; i < plan.uplodedFeatures.length; i++) {\r\n        if (plan.uplodedFeatures[i]) {\r\n          plan.selectedCADIndex = i;\r\n          var currentPlan =\r\n            i == 0 ? \"perfectCad\" : i == 1 ? \"secondCad\" : \"thirdCad\";\r\n          plan.selectedCAD = currentPlan;\r\n          plan.plans.push(currentPlan);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      this.setState(\r\n        {\r\n          plan: new PlanEntity(this.props, plan),\r\n        },\r\n        () => {\r\n          this.init(plan.selectedCADIndex);\r\n        }\r\n      );\r\n    } else if (\r\n      this.isLoaded &&\r\n      window.mapInfo &&\r\n      !vals?.plansData?.mapviewer?.mapGraphics?.length\r\n    ) {\r\n      let { plan } = this.state;\r\n      this.map = getMap();\r\n      if (getIsMapLoaded()) {\r\n        setIsMapLoaded(false);\r\n        this.isLoaded = false;\r\n\r\n        plan.plans = [];\r\n        for (var i = 0; i < plan.uplodedFeatures.length; i++) {\r\n          if (plan.uplodedFeatures[i]) {\r\n            plan.selectedCADIndex = i;\r\n            var currentPlan =\r\n              i == 0 ? \"perfectCad\" : i == 1 ? \"secondCad\" : \"thirdCad\";\r\n            plan.selectedCAD = currentPlan;\r\n            plan.plans.push(currentPlan);\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (plan.selectedCADIndex != -1) {\r\n          this.setState(\r\n            {\r\n              plan,\r\n            },\r\n            () => {\r\n              this.init(plan.selectedCADIndex);\r\n            }\r\n          );\r\n        }\r\n      }\r\n    } else if (\r\n      this.isLoaded &&\r\n      window.mapInfo &&\r\n      vals?.plansData?.mapviewer?.mapGraphics?.length\r\n    ) {\r\n      let { plan } = this.state;\r\n      this.map = getMap();\r\n      if (getIsMapLoaded()) {\r\n        setIsMapLoaded(false);\r\n        this.isLoaded = false;\r\n        for (var i = 0; i < plan.uplodedFeatures.length; i++) {\r\n          if (plan.uplodedFeatures[i]) {\r\n            plan.selectedCADIndex = i;\r\n            var currentPlan =\r\n              i == 0 ? \"perfectCad\" : i == 1 ? \"secondCad\" : \"thirdCad\";\r\n            plan.selectedCAD = currentPlan;\r\n            plan.plans.push(currentPlan);\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n\r\n        this.setState(\r\n          {\r\n            plan,\r\n          },\r\n          () => {\r\n            this.setToStore();\r\n          }\r\n        );\r\n      }\r\n    }\r\n    //return true;\r\n  }\r\n\r\n  selectPlan = (evt) => {\r\n    const {\r\n      input: { value },\r\n    } = this.props;\r\n    let { plan } = this.state;\r\n    plan.selectedCAD = evt.target.value;\r\n    plan.selectedCADIndex =\r\n      evt.target.value.indexOf(\"first\") != -1\r\n        ? 0\r\n        : evt.target.value.indexOf(\"second\") != -1\r\n        ? 1\r\n        : 2;\r\n    plan.hide_details = true;\r\n    this.setState(\r\n      {\r\n        plan,\r\n      },\r\n      () => {\r\n        this.init(plan.selectedCADIndex);\r\n      }\r\n    );\r\n  };\r\n\r\n  changeBufferDistance = (evt) => {\r\n    let { plan } = this.state;\r\n    plan.bufferDistance = evt.target.value;\r\n    this.setState(\r\n      {\r\n        plan,\r\n      },\r\n      () => {\r\n        this.setToStore();\r\n      }\r\n    );\r\n  };\r\n\r\n  changeNote = (key, evt) => {\r\n    let { plan } = this.state;\r\n    plan.uplodedFeatures[plan.selectedCADIndex].shapeFeatures.landbase[\r\n      key\r\n    ].note = evt.target.value;\r\n    this.setState(\r\n      {\r\n        plan,\r\n      },\r\n      () => {\r\n        this.setToStore();\r\n      }\r\n    );\r\n  };\r\n\r\n  changeFrontLength = (key, evt) => {\r\n    let { plan } = this.state;\r\n    plan.uplodedFeatures[plan.selectedCADIndex].shapeFeatures.landbase[\r\n      key\r\n    ].frontLength = evt.target.value;\r\n    this.setState(\r\n      {\r\n        plan,\r\n      },\r\n      () => {\r\n        this.setToStore();\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { mainObject, t, isInViewMode, forAddingPlans } = this.props;\r\n    let { plan } = this.state;\r\n    return (\r\n      <div>\r\n        {!isInViewMode && plan.selectedCADIndex != -1 && (\r\n          <select\r\n            onChange={this.selectPlan}\r\n            className=\"form-control\"\r\n            style={{ height: \"40px\" }}\r\n          >\r\n            {map(plan.plans, (plan, index) => {\r\n              return (\r\n                <option value={plan} selected={plan == plan.selectedCAD}>\r\n                  {t(plan)}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        )}\r\n        {plan.planDescription && (\r\n          <div style={planDescStyle}>\r\n            {convertToArabic(plan.planDescription)}\r\n          </div>\r\n        )}\r\n\r\n        {plan.planUsingSymbol && (\r\n          <div className=\"usingsymbolStyle\">\r\n            {convertToArabic(plan.planUsingSymbol)}\r\n          </div>\r\n        )}\r\n\r\n        {!isInViewMode && !plan.hide_details && (\r\n          <div style={containerDetails}>\r\n            <Collapse className=\"Collapse\" key={0}>\r\n              <Panel\r\n                key={0}\r\n                header={`مفتاح الخريطة`}\r\n                forceRender={true}\r\n                style={{ margin: \"5px\" }}\r\n              >\r\n                {plan.servicesTypes &&\r\n                  plan.servicesTypes.map((type, index) => {\r\n                    if (this.state[type.symbol_id + \"_visbility\"] == undefined)\r\n                      this.state[type.symbol_id + \"_visbility\"] = true;\r\n\r\n                    return (\r\n                      <span style={{ padding: \"7px\", width: \"130px\" }}>\r\n                        <span>\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            style={{\r\n                              width: \"20px\",\r\n                              height: \"20px\",\r\n                              margin: \"3px\",\r\n                            }}\r\n                            checked={this.state[type.symbol_id + \"_visbility\"]}\r\n                            onChange={this.changeVisibilty.bind(\r\n                              this,\r\n                              type.symbol_id,\r\n                              !this.state[type.symbol_id + \"_visbility\"]\r\n                            )}\r\n                          />\r\n                          <span\r\n                            style={{\r\n                              width: \"20px\",\r\n                              height: \"20px\",\r\n                              display: \"inline-flex\",\r\n                              backgroundColor: type.layer_color\r\n                                ? \"rgba(\" +\r\n                                  type.layer_color[0] +\r\n                                  \", \" +\r\n                                  type.layer_color[1] +\r\n                                  \", \" +\r\n                                  type.layer_color[2] +\r\n                                  \", \" +\r\n                                  type.layer_color[3] +\r\n                                  \")\"\r\n                                : \"rgb(255, 255, 255)\",\r\n                            }}\r\n                          ></span>\r\n                          <span style={{ fontSize: \"16px\", margin: \"3px\" }}>\r\n                            {type.layer_description}\r\n                          </span>\r\n                        </span>\r\n                      </span>\r\n                    );\r\n                  })}\r\n              </Panel>\r\n            </Collapse>\r\n            {/* </div>\r\n                            </div>\r\n                        </div>\r\n                    </div> */}\r\n\r\n            {/* <div className=\"panel-group\" >\r\n                        <div className=\"panel panel-default\">\r\n                            <div className=\"panel-heading\">\r\n                                <h4 className=\"panel-title\">\r\n                                    <a data-toggle=\"collapse\" href=\"#collapse6\">الشوارع</a>\r\n                                </h4>\r\n                            </div>\r\n                            <div id=\"collapse6\" className=\"panel-collapse collapse\"> */}\r\n            <Collapse className=\"Collapse\" key={1}>\r\n              <Panel\r\n                key={1}\r\n                header={`الشوارع`}\r\n                forceRender={true}\r\n                style={{ margin: \"5px\" }}\r\n              >\r\n                <table className=\"table table-bordered no-margin table-striped\">\r\n                  <thead>\r\n                    <tr>\r\n                      {[52].indexOf(this.props.currentModule.id) != -1 && (\r\n                        <>\r\n                          <td>اسم الشارع</td>\r\n                          <td>صنف الشارع</td>\r\n                          <td>نوع الشارع</td>\r\n                          <td>باتجاه واحد</td>\r\n                          <td>الطريقة مفصولة بجزيرة وسطية</td>\r\n                        </>\r\n                      )}\r\n                      <td>الطول (م)</td>\r\n                      <td>العرض (م)</td>\r\n                      <td>يحسب ضمن معدل نسبة أطوال الشوارع بالمخطط</td>\r\n                      <td></td>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {plan.streets &&\r\n                      plan.streets.map((street, index) => {\r\n                        return (\r\n                          index >= plan.minStreetIndex &&\r\n                          index < plan.maxStreetIndex && (\r\n                            <tr>\r\n                              {[52].indexOf(this.props.currentModule.id) !=\r\n                                -1 && (\r\n                                <>\r\n                                  <td>\r\n                                    <input\r\n                                      type=\"text\"\r\n                                      name={\"streetname\"}\r\n                                      value={street.streetname}\r\n                                      placeholder=\"من فضلك أدخل اسم الشارع\"\r\n                                      className=\"sidebar-form-control form-control\"\r\n                                      onInput={this.onStreetChange.bind(\r\n                                        this,\r\n                                        index\r\n                                      )}\r\n                                    />\r\n                                  </td>\r\n                                  <td>\r\n                                    <Select\r\n                                      getPopupContainer={(trigger) =>\r\n                                        trigger.parentNode\r\n                                      }\r\n                                      autoFocus\r\n                                      name=\"streetClass\"\r\n                                      onChange={(val) => {\r\n                                        this.onStreetChange(index, {\r\n                                          target: {\r\n                                            value: val,\r\n                                            name: \"streetClass\",\r\n                                          },\r\n                                        });\r\n                                      }}\r\n                                      placeholder=\"صنف الشارع\"\r\n                                      value={street.streetClass}\r\n                                    >\r\n                                      {(\r\n                                        plan.domains?.[9]?.domain\r\n                                          ?.codedValues || []\r\n                                      ).map((e, i) => {\r\n                                        return (\r\n                                          <Option key={i + 1} value={e.code}>\r\n                                            {e.name}\r\n                                          </Option>\r\n                                        );\r\n                                      })}\r\n                                    </Select>\r\n                                  </td>\r\n                                  <td>\r\n                                    <Select\r\n                                      getPopupContainer={(trigger) =>\r\n                                        trigger.parentNode\r\n                                      }\r\n                                      autoFocus\r\n                                      name=\"streetType\"\r\n                                      onChange={(val) => {\r\n                                        this.onStreetChange(index, {\r\n                                          target: {\r\n                                            value: val,\r\n                                            name: \"streetType\",\r\n                                          },\r\n                                        });\r\n                                      }}\r\n                                      placeholder=\"نوع الشارع\"\r\n                                      value={street.streetType}\r\n                                    >\r\n                                      {(\r\n                                        plan.domains?.[10]?.domain\r\n                                          ?.codedValues || []\r\n                                      ).map((e, i) => {\r\n                                        return (\r\n                                          <Option key={i + 1} value={e.code}>\r\n                                            {e.name}\r\n                                          </Option>\r\n                                        );\r\n                                      })}\r\n                                    </Select>\r\n                                  </td>\r\n                                  <td>\r\n                                    <RadioGroup\r\n                                      onChange={(val) => {\r\n                                        this.onStreetChange(index, {\r\n                                          target: {\r\n                                            value: val.target.value,\r\n                                            name: \"oneWay\",\r\n                                          },\r\n                                        });\r\n                                      }}\r\n                                      options={plan.domains?.[11]?.domain?.codedValues.map(\r\n                                        (x) => ({\r\n                                          label: x.name,\r\n                                          value: (x.code && true) || false,\r\n                                        })\r\n                                      )}\r\n                                      name={\"oneWay\"}\r\n                                      type={\"radio\"}\r\n                                      value={street.oneWay}\r\n                                    />\r\n                                  </td>\r\n                                  <td>\r\n                                    <RadioGroup\r\n                                      onChange={(val) => {\r\n                                        this.onStreetChange(index, {\r\n                                          target: {\r\n                                            value: val.target.value,\r\n                                            name: \"divided\",\r\n                                          },\r\n                                        });\r\n                                      }}\r\n                                      options={plan.domains?.[12]?.domain?.codedValues.map(\r\n                                        (x) => ({\r\n                                          label: x.name,\r\n                                          value: (x.code && true) || false,\r\n                                        })\r\n                                      )}\r\n                                      name={\"divided\"}\r\n                                      type={\"radio\"}\r\n                                      value={street.divided}\r\n                                    />\r\n                                  </td>\r\n                                </>\r\n                              )}\r\n                              <td>\r\n                                {convertToArabic(\r\n                                  parseFloat(street?.length?.toFixed(2))\r\n                                )}\r\n                              </td>\r\n                              <td>\r\n                                {convertToArabic(\r\n                                  parseFloat(street?.width?.toFixed(2))\r\n                                )}\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"checkbox\"\r\n                                  style={{\r\n                                    width: \"20px\",\r\n                                    height: \"20px\",\r\n                                    margin: \"3px\",\r\n                                  }}\r\n                                  checked={street.checked}\r\n                                  disabled={\r\n                                    [2322, 3099].indexOf(plan.current_step) ==\r\n                                    -1\r\n                                  }\r\n                                  onChange={() => {\r\n                                    plan.streets[index].checked =\r\n                                      !plan.streets[index].checked;\r\n                                    this.setState(\r\n                                      {\r\n                                        plan,\r\n                                      },\r\n                                      () => {\r\n                                        this.setToStore();\r\n                                      }\r\n                                    );\r\n                                  }}\r\n                                />\r\n                              </td>\r\n\r\n                              <td\r\n                                onClick={this.zoom.bind(this, street)}\r\n                                onMouseOver={this.highlight.bind(this, street)}\r\n                                onMouseLeave={this.clearHighlight.bind(this)}\r\n                              >\r\n                                <i className=\"fa fa-search-plus\"></i>\r\n                              </td>\r\n                            </tr>\r\n                          )\r\n                        );\r\n                      })}\r\n                    <tr>\r\n                      <td>معدل نسبة أطوال الشوارع في المخطط</td>\r\n                      <td colSpan={\"100%\"}>\r\n                        {(() => {\r\n                          let totalAreaPercentage =\r\n                            mainObject?.landData?.landData?.area / 10000;\r\n\r\n                          return convertToArabic(\r\n                            +(\r\n                              plan.streets?.reduce(function (a, b) {\r\n                                if (b.checked) {\r\n                                  return a + +b.length.toFixed(2);\r\n                                }\r\n                                return a;\r\n                              }, 0) / totalAreaPercentage\r\n                            )?.toFixed(2)\r\n                          );\r\n                        })() + \" م ط / هكتار\"}\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                <Pagination\r\n                  pageSize={plan.pageSize}\r\n                  current={plan.currentStreetPage}\r\n                  total={plan.streets.length}\r\n                  onChange={this.handleStreetChange}\r\n                  style={{ bottom: \"0px\", position: \"static\" }}\r\n                />\r\n              </Panel>\r\n            </Collapse>\r\n            <Collapse className=\"Collapse\" key={2}>\r\n              <Panel\r\n                key={2}\r\n                header={`نطاقات تأثير الخدمات`}\r\n                forceRender={true}\r\n                style={{ margin: \"5px\" }}\r\n              >\r\n                <FormSection name={`frm`} className=\"form\">\r\n                  <select\r\n                    name=\"servTypes\"\r\n                    onChange={this.serviceChange.bind(this)}\r\n                    className=\"form-control\"\r\n                    style={{ margin: \"5px\", fontSize: \"16px\" }}\r\n                  >\r\n                    <option ng-disabled=\"false\" value=\"\">\r\n                      نوع الخدمة\r\n                    </option>\r\n                    {_.filter(plan.servicesTypes, (type, index) => {\r\n                      return type.cad_sublayers && type.cad_sublayers?.length;\r\n                    }).map((item, index) => {\r\n                      return (\r\n                        <option value={JSON.stringify(item)}>\r\n                          {item.layer_description}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n\r\n                  <select\r\n                    name=\"servSubTypes\"\r\n                    onChange={this.serviceSubChange.bind(this)}\r\n                    className=\"form-control\"\r\n                    style={{ margin: \"5px\" }}\r\n                  >\r\n                    <option ng-disabled=\"false\" value>\r\n                      مستوى الخدمة\r\n                    </option>\r\n                    {plan.servicesSubTypes &&\r\n                      plan.servicesSubTypes.map((item, index) => {\r\n                        return (\r\n                          <option value={JSON.stringify(item)}>\r\n                            {item.sublayer_description}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                  </select>\r\n\r\n                  <input\r\n                    type=\"text\"\r\n                    value={plan[\"bufferDistance\"]}\r\n                    style={{ margin: \"5px\", fontSize: \"16px\" }}\r\n                    onChange={this.changeBufferDistance.bind(this)}\r\n                    placeholder=\"نطاق التخديم بالمتر\"\r\n                    name=\"service\"\r\n                    className=\"form-control\"\r\n                  />\r\n\r\n                  <button\r\n                    className=\"btn btn-primary btn-sm\"\r\n                    type=\"button\"\r\n                    style={{ margin: \"5px\", fontSize: \"16px\" }}\r\n                    onClick={this.drawBuffer.bind(this, plan[\"bufferDistance\"])}\r\n                  >\r\n                    رسم\r\n                  </button>\r\n\r\n                  <button\r\n                    className=\"btn btn-primary btn-sm\"\r\n                    type=\"button\"\r\n                    onClick={this.clearBuffer.bind(this)}\r\n                  >\r\n                    مسح\r\n                  </button>\r\n                </FormSection>\r\n              </Panel>\r\n            </Collapse>\r\n            <Collapse className=\"Collapse\" key={3}>\r\n              <Panel\r\n                key={3}\r\n                header={`قطع الأراضي`}\r\n                forceRender={true}\r\n                style={{ margin: \"5px\" }}\r\n              >\r\n                <section style={{ display: \"flex\", marginTop: \"20px\" }}>\r\n                  <div style={{ width: \"100%\" }}>\r\n                    <table className=\"table table-bordered no-margin table-striped\">\r\n                      <thead>\r\n                        <tr>\r\n                          <td>رقم القطعة</td>\r\n                          <td>الاستخدام</td>\r\n                          {(plan.current_step == 2329 ||\r\n                            plan.current_step == 2330 ||\r\n                            plan.current_step == 2372 ||\r\n                            plan.current_step == 2902 ||\r\n                            plan.current_step == 2903 ||\r\n                            plan.current_step == 2895 ||\r\n                            plan.current_step == 2896 ||\r\n                            plan.current_step == 2897 ||\r\n                            plan.current_step == 2898 ||\r\n                            plan.current_step == 2899 ||\r\n                            plan.current_step == 2900 ||\r\n                            plan.current_step == 2901 ||\r\n                            plan.current_step == 2331 ||\r\n                            plan.current_step == 2371 ||\r\n                            plan.current_step == 3117 ||\r\n                            plan.current_step == 3118 ||\r\n                            plan.current_step == 3119 ||\r\n                            plan.current_step == 3120 ||\r\n                            plan.current_step == 3121 ||\r\n                            plan.current_step == 3122 ||\r\n                            plan.current_step == 3123 ||\r\n                            plan.current_step == 3124 ||\r\n                            plan.current_step == 3125 ||\r\n                            plan.current_step == 3126 ||\r\n                            plan.current_step == 3130 ||\r\n                            plan.current_step == 3132 ||\r\n                            plan.current_step == 3133) && (\r\n                            <td>طول الحد الشمالي (م)</td>\r\n                          )}\r\n                          {(plan.current_step == 2329 ||\r\n                            plan.current_step == 2330 ||\r\n                            plan.current_step == 2372 ||\r\n                            plan.current_step == 2902 ||\r\n                            plan.current_step == 2903 ||\r\n                            plan.current_step == 2895 ||\r\n                            plan.current_step == 2896 ||\r\n                            plan.current_step == 2897 ||\r\n                            plan.current_step == 2898 ||\r\n                            plan.current_step == 2899 ||\r\n                            plan.current_step == 2900 ||\r\n                            plan.current_step == 2901 ||\r\n                            plan.current_step == 2331 ||\r\n                            plan.current_step == 2371 ||\r\n                            plan.current_step == 3117 ||\r\n                            plan.current_step == 3118 ||\r\n                            plan.current_step == 3119 ||\r\n                            plan.current_step == 3120 ||\r\n                            plan.current_step == 3121 ||\r\n                            plan.current_step == 3122 ||\r\n                            plan.current_step == 3123 ||\r\n                            plan.current_step == 3124 ||\r\n                            plan.current_step == 3125 ||\r\n                            plan.current_step == 3126 ||\r\n                            plan.current_step == 3130 ||\r\n                            plan.current_step == 3132 ||\r\n                            plan.current_step == 3133) && (\r\n                            <td>طول الحد الشرقي (م)</td>\r\n                          )}\r\n                          {(plan.current_step == 2329 ||\r\n                            plan.current_step == 2330 ||\r\n                            plan.current_step == 2372 ||\r\n                            plan.current_step == 2902 ||\r\n                            plan.current_step == 2903 ||\r\n                            plan.current_step == 2895 ||\r\n                            plan.current_step == 2896 ||\r\n                            plan.current_step == 2897 ||\r\n                            plan.current_step == 2898 ||\r\n                            plan.current_step == 2899 ||\r\n                            plan.current_step == 2900 ||\r\n                            plan.current_step == 2901 ||\r\n                            plan.current_step == 2331 ||\r\n                            plan.current_step == 2371 ||\r\n                            plan.current_step == 3117 ||\r\n                            plan.current_step == 3118 ||\r\n                            plan.current_step == 3119 ||\r\n                            plan.current_step == 3120 ||\r\n                            plan.current_step == 3121 ||\r\n                            plan.current_step == 3122 ||\r\n                            plan.current_step == 3123 ||\r\n                            plan.current_step == 3124 ||\r\n                            plan.current_step == 3125 ||\r\n                            plan.current_step == 3126 ||\r\n                            plan.current_step == 3130 ||\r\n                            plan.current_step == 3132 ||\r\n                            plan.current_step == 3133) && (\r\n                            <td>طول الحد الجنوبي (م)</td>\r\n                          )}\r\n                          {(plan.current_step == 2329 ||\r\n                            plan.current_step == 2330 ||\r\n                            plan.current_step == 2372 ||\r\n                            plan.current_step == 2902 ||\r\n                            plan.current_step == 2903 ||\r\n                            plan.current_step == 2895 ||\r\n                            plan.current_step == 2896 ||\r\n                            plan.current_step == 2897 ||\r\n                            plan.current_step == 2898 ||\r\n                            plan.current_step == 2899 ||\r\n                            plan.current_step == 2900 ||\r\n                            plan.current_step == 2901 ||\r\n                            plan.current_step == 2331 ||\r\n                            plan.current_step == 2371 ||\r\n                            plan.current_step == 3117 ||\r\n                            plan.current_step == 3118 ||\r\n                            plan.current_step == 3119 ||\r\n                            plan.current_step == 3120 ||\r\n                            plan.current_step == 3121 ||\r\n                            plan.current_step == 3122 ||\r\n                            plan.current_step == 3123 ||\r\n                            plan.current_step == 3124 ||\r\n                            plan.current_step == 3125 ||\r\n                            plan.current_step == 3126 ||\r\n                            plan.current_step == 3130 ||\r\n                            plan.current_step == 3132 ||\r\n                            plan.current_step == 3133) && (\r\n                            <td>طول الحد الغربي (م)</td>\r\n                          )}\r\n                          <td>المساحة (م۲)</td>\r\n                          {plan.current_step != 2329 &&\r\n                            plan.current_step != 3117 &&\r\n                            plan.current_step != 2330 &&\r\n                            plan.current_step != 3118 &&\r\n                            plan.current_step != 2371 &&\r\n                            plan.current_step != 3119 && (\r\n                              <td>طول الواجهة (م)</td>\r\n                            )}\r\n                          {(plan.current_step == 2329 ||\r\n                            plan.current_step == 2330 ||\r\n                            plan.current_step == 2372 ||\r\n                            plan.current_step == 2902 ||\r\n                            plan.current_step == 2903 ||\r\n                            plan.current_step == 2895 ||\r\n                            plan.current_step == 2896 ||\r\n                            plan.current_step == 2897 ||\r\n                            plan.current_step == 2898 ||\r\n                            plan.current_step == 2899 ||\r\n                            plan.current_step == 2900 ||\r\n                            plan.current_step == 2901 ||\r\n                            plan.current_step == 2331 ||\r\n                            plan.current_step == 2371 ||\r\n                            plan.current_step == 3117 ||\r\n                            plan.current_step == 3118 ||\r\n                            plan.current_step == 3119 ||\r\n                            plan.current_step == 3120 ||\r\n                            plan.current_step == 3121 ||\r\n                            plan.current_step == 3122 ||\r\n                            plan.current_step == 3123 ||\r\n                            plan.current_step == 3124 ||\r\n                            plan.current_step == 3125 ||\r\n                            plan.current_step == 3126 ||\r\n                            plan.current_step == 3130 ||\r\n                            plan.current_step == 3132 ||\r\n                            plan.current_step == 3133) && <td>ملاحظات</td>}\r\n\r\n                          <td>الشطفات</td>\r\n                          <td></td>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {plan?.uplodedFeatures[\r\n                          plan.selectedCADIndex\r\n                        ]?.shapeFeatures?.landbase\r\n                          //.filter((parcel) => parcel.is_cut != 2)\r\n                          ?.map((parcel, index) => {\r\n                            return (\r\n                              !parcel.isHide &&\r\n                              index >= plan.minParcelIndex &&\r\n                              index < plan.maxParcelIndex && (\r\n                                <tr\r\n                                  style={\r\n                                    (plan.isValidCondition(\r\n                                      this.props,\r\n                                      parcel\r\n                                    ) && {\r\n                                      backgroundColor: \"white\",\r\n                                    }) || { backgroundColor: \"#f58c8c\" }\r\n                                  }\r\n                                >\r\n                                  <td>{convertToArabic(parcel.number)}</td>\r\n                                  <td>\r\n                                    {convertToArabic(parcel.usingSymbolName)}\r\n                                  </td>\r\n\r\n                                  {(plan.current_step == 2329 ||\r\n                                    plan.current_step == 2330 ||\r\n                                    plan.current_step == 2372 ||\r\n                                    plan.current_step == 2902 ||\r\n                                    plan.current_step == 2903 ||\r\n                                    plan.current_step == 2895 ||\r\n                                    plan.current_step == 2896 ||\r\n                                    plan.current_step == 2897 ||\r\n                                    plan.current_step == 2898 ||\r\n                                    plan.current_step == 2899 ||\r\n                                    plan.current_step == 2900 ||\r\n                                    plan.current_step == 2901 ||\r\n                                    plan.current_step == 2331 ||\r\n                                    plan.current_step == 2371 ||\r\n                                    plan.current_step == 3117 ||\r\n                                    plan.current_step == 3118 ||\r\n                                    plan.current_step == 3119 ||\r\n                                    plan.current_step == 3120 ||\r\n                                    plan.current_step == 3121 ||\r\n                                    plan.current_step == 3122 ||\r\n                                    plan.current_step == 3123 ||\r\n                                    plan.current_step == 3124 ||\r\n                                    plan.current_step == 3125 ||\r\n                                    plan.current_step == 3126 ||\r\n                                    plan.current_step == 3130 ||\r\n                                    plan.current_step == 3132 ||\r\n                                    plan.current_step == 3133) && (\r\n                                    <td>\r\n                                      {convertToArabic(\r\n                                        parseFloat(\r\n                                          parcel?.north_length?.toFixed(2)\r\n                                        )\r\n                                      )}\r\n                                    </td>\r\n                                  )}\r\n                                  {(plan.current_step == 2329 ||\r\n                                    plan.current_step == 2330 ||\r\n                                    plan.current_step == 2372 ||\r\n                                    plan.current_step == 2902 ||\r\n                                    plan.current_step == 2903 ||\r\n                                    plan.current_step == 2895 ||\r\n                                    plan.current_step == 2896 ||\r\n                                    plan.current_step == 2897 ||\r\n                                    plan.current_step == 2898 ||\r\n                                    plan.current_step == 2899 ||\r\n                                    plan.current_step == 2900 ||\r\n                                    plan.current_step == 2901 ||\r\n                                    plan.current_step == 2331 ||\r\n                                    plan.current_step == 2371 ||\r\n                                    plan.current_step == 3117 ||\r\n                                    plan.current_step == 3118 ||\r\n                                    plan.current_step == 3119 ||\r\n                                    plan.current_step == 3120 ||\r\n                                    plan.current_step == 3121 ||\r\n                                    plan.current_step == 3122 ||\r\n                                    plan.current_step == 3123 ||\r\n                                    plan.current_step == 3124 ||\r\n                                    plan.current_step == 3125 ||\r\n                                    plan.current_step == 3126 ||\r\n                                    plan.current_step == 3130 ||\r\n                                    plan.current_step == 3132 ||\r\n                                    plan.current_step == 3133) && (\r\n                                    <td>\r\n                                      {convertToArabic(\r\n                                        parseFloat(\r\n                                          parcel?.east_length?.toFixed(2)\r\n                                        )\r\n                                      )}\r\n                                    </td>\r\n                                  )}\r\n                                  {(plan.current_step == 2329 ||\r\n                                    plan.current_step == 2330 ||\r\n                                    plan.current_step == 2372 ||\r\n                                    plan.current_step == 2902 ||\r\n                                    plan.current_step == 2903 ||\r\n                                    plan.current_step == 2895 ||\r\n                                    plan.current_step == 2896 ||\r\n                                    plan.current_step == 2897 ||\r\n                                    plan.current_step == 2898 ||\r\n                                    plan.current_step == 2899 ||\r\n                                    plan.current_step == 2900 ||\r\n                                    plan.current_step == 2901 ||\r\n                                    plan.current_step == 2331 ||\r\n                                    plan.current_step == 2371 ||\r\n                                    plan.current_step == 3117 ||\r\n                                    plan.current_step == 3118 ||\r\n                                    plan.current_step == 3119 ||\r\n                                    plan.current_step == 3120 ||\r\n                                    plan.current_step == 3121 ||\r\n                                    plan.current_step == 3122 ||\r\n                                    plan.current_step == 3123 ||\r\n                                    plan.current_step == 3124 ||\r\n                                    plan.current_step == 3125 ||\r\n                                    plan.current_step == 3126 ||\r\n                                    plan.current_step == 3130 ||\r\n                                    plan.current_step == 3132 ||\r\n                                    plan.current_step == 3133) && (\r\n                                    <td>\r\n                                      {convertToArabic(\r\n                                        parseFloat(\r\n                                          parcel?.south_length?.toFixed(2)\r\n                                        )\r\n                                      )}\r\n                                    </td>\r\n                                  )}\r\n                                  {(plan.current_step == 2329 ||\r\n                                    plan.current_step == 2330 ||\r\n                                    plan.current_step == 2372 ||\r\n                                    plan.current_step == 2902 ||\r\n                                    plan.current_step == 2903 ||\r\n                                    plan.current_step == 2895 ||\r\n                                    plan.current_step == 2896 ||\r\n                                    plan.current_step == 2897 ||\r\n                                    plan.current_step == 2898 ||\r\n                                    plan.current_step == 2899 ||\r\n                                    plan.current_step == 2900 ||\r\n                                    plan.current_step == 2901 ||\r\n                                    plan.current_step == 2331 ||\r\n                                    plan.current_step == 2371 ||\r\n                                    plan.current_step == 3117 ||\r\n                                    plan.current_step == 3118 ||\r\n                                    plan.current_step == 3119 ||\r\n                                    plan.current_step == 3120 ||\r\n                                    plan.current_step == 3121 ||\r\n                                    plan.current_step == 3122 ||\r\n                                    plan.current_step == 3123 ||\r\n                                    plan.current_step == 3124 ||\r\n                                    plan.current_step == 3125 ||\r\n                                    plan.current_step == 3126 ||\r\n                                    plan.current_step == 3130 ||\r\n                                    plan.current_step == 3132 ||\r\n                                    plan.current_step == 3133) && (\r\n                                    <td>\r\n                                      {convertToArabic(\r\n                                        parseFloat(\r\n                                          parcel?.weast_length?.toFixed(2)\r\n                                        )\r\n                                      )}\r\n                                    </td>\r\n                                  )}\r\n\r\n                                  <td>\r\n                                    {convertToArabic(\r\n                                      parseFloat(\r\n                                        parcel?.area?.toFixed(2) -\r\n                                          (parcel.cuttes_area ||\r\n                                            (parcel.survayParcelCutter &&\r\n                                              +parcel.survayParcelCutter[0]\r\n                                                .NORTH_EAST_DIRECTION +\r\n                                                +parcel.survayParcelCutter[0]\r\n                                                  .NORTH_WEST_DIRECTION +\r\n                                                +parcel.survayParcelCutter[0]\r\n                                                  .SOUTH_EAST_DIRECTION +\r\n                                                +parcel.survayParcelCutter[0]\r\n                                                  .SOUTH_WEST_DIRECTION) ||\r\n                                            0)\r\n                                      )\r\n                                    )}\r\n                                  </td>\r\n                                  {[2329, 3117].indexOf(plan.current_step) !=\r\n                                    -1 && (\r\n                                    <td>\r\n                                      <input\r\n                                        type=\"text\"\r\n                                        value={parcel.note}\r\n                                        onChange={this.changeNote.bind(\r\n                                          this,\r\n                                          index\r\n                                        )}\r\n                                        placeholder=\"من فضلك أدخل ملاحظاتك\"\r\n                                        className=\"sidebar-form-control form-control\"\r\n                                      />\r\n                                    </td>\r\n                                  )}\r\n                                  {((plan.current_step &&\r\n                                    [2317, 3095].indexOf(plan.current_step) !=\r\n                                      -1 &&\r\n                                    [2329, 3117].indexOf(plan.current_step) ==\r\n                                      -1) ||\r\n                                    !plan.current_step) && (\r\n                                    <td>\r\n                                      <input\r\n                                        type=\"text\"\r\n                                        value={parcel.frontLength}\r\n                                        onChange={this.changeFrontLength.bind(\r\n                                          this,\r\n                                          index\r\n                                        )}\r\n                                        placeholder=\"من فضلك أدخل طول الواجهة\"\r\n                                        className=\"sidebar-form-control form-control\"\r\n                                      />\r\n                                    </td>\r\n                                  )}\r\n                                  {plan.current_step &&\r\n                                    plan.current_step != 2317 &&\r\n                                    plan.current_step != 3095 &&\r\n                                    plan.current_step != 2330 &&\r\n                                    plan.current_step != 2329 &&\r\n                                    plan.current_step != 2371 &&\r\n                                    plan.current_step != 3117 &&\r\n                                    plan.current_step != 3118 &&\r\n                                    plan.current_step != 3119 && (\r\n                                      <td>\r\n                                        {convertToArabic(parcel.frontLength)}\r\n                                      </td>\r\n                                    )}\r\n                                  {(plan.current_step == 2329 ||\r\n                                    plan.current_step == 2330 ||\r\n                                    plan.current_step == 2372 ||\r\n                                    plan.current_step == 2902 ||\r\n                                    plan.current_step == 2903 ||\r\n                                    plan.current_step == 2895 ||\r\n                                    plan.current_step == 2896 ||\r\n                                    plan.current_step == 2897 ||\r\n                                    plan.current_step == 2898 ||\r\n                                    plan.current_step == 2899 ||\r\n                                    plan.current_step == 2900 ||\r\n                                    plan.current_step == 2901 ||\r\n                                    plan.current_step == 2331 ||\r\n                                    plan.current_step == 2371 ||\r\n                                    plan.current_step == 3117 ||\r\n                                    plan.current_step == 3118 ||\r\n                                    plan.current_step == 3119 ||\r\n                                    plan.current_step == 3120 ||\r\n                                    plan.current_step == 3121 ||\r\n                                    plan.current_step == 3122 ||\r\n                                    plan.current_step == 3123 ||\r\n                                    plan.current_step == 3124 ||\r\n                                    plan.current_step == 3125 ||\r\n                                    plan.current_step == 3126 ||\r\n                                    plan.current_step == 3130 ||\r\n                                    plan.current_step == 3132 ||\r\n                                    plan.current_step == 3133) && (\r\n                                    <td>{convertToArabic(parcel.note)}</td>\r\n                                  )}\r\n                                  <td>\r\n                                    <button\r\n                                      className=\"btn\"\r\n                                      onClick={() => {\r\n                                        plan.openPopup(\r\n                                          this.props,\r\n                                          !parcel?.survayParcelCutter?.length,\r\n                                          index,\r\n                                          () => {\r\n                                            this.setState(\r\n                                              {\r\n                                                plan,\r\n                                              },\r\n                                              () => {\r\n                                                this.setToStore();\r\n                                              }\r\n                                            );\r\n                                          }\r\n                                        );\r\n                                      }}\r\n                                    >\r\n                                      {(!parcel?.survayParcelCutter?.length &&\r\n                                        \"اضافة شطفات\") ||\r\n                                        \"عرض الشطفات\"}\r\n                                    </button>\r\n                                    {parcel?.survayParcelCutter?.length && (\r\n                                      <button\r\n                                        className=\"btn\"\r\n                                        onClick={() => {\r\n                                          plan.openPopup(\r\n                                            this.props,\r\n                                            true,\r\n                                            index,\r\n                                            () => {\r\n                                              this.setState(\r\n                                                {\r\n                                                  plan,\r\n                                                },\r\n                                                () => {\r\n                                                  this.setToStore();\r\n                                                }\r\n                                              );\r\n                                            }\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        {\"تعديل الشطفات\"}\r\n                                      </button>\r\n                                    )}\r\n                                  </td>\r\n\r\n                                  {!plan.isValidCondition(\r\n                                    this.props,\r\n                                    parcel\r\n                                  ) && (\r\n                                    <td>\r\n                                      <Tooltip title=\"المساحة لا تطابق اشتراطات البناء\">\r\n                                        <i className=\"fa fa-exclamation-circle\"></i>\r\n                                      </Tooltip>\r\n                                    </td>\r\n                                  )}\r\n                                </tr>\r\n                              )\r\n                            );\r\n                          })}\r\n                      </tbody>\r\n                    </table>\r\n\r\n                    <Pagination\r\n                      pageSize={plan.pageSize}\r\n                      current={plan.currentParcelPage}\r\n                      total={\r\n                        plan?.uplodedFeatures[plan.selectedCADIndex]\r\n                          ?.shapeFeatures?.landbase?.length || 0\r\n                      }\r\n                      onChange={this.handleParcelChange}\r\n                      style={{ bottom: \"0px\", position: \"static\" }}\r\n                    />\r\n                  </div>\r\n                </section>\r\n              </Panel>\r\n            </Collapse>\r\n\r\n            <Collapse className=\"Collapse\" key={3}>\r\n              <Panel\r\n                key={3}\r\n                header={`النسب التخطيطية`}\r\n                forceRender={true}\r\n                style={{ margin: \"5px\" }}\r\n              >\r\n                <section style={{ display: \"flex\", marginTop: \"20px\" }}>\r\n                  <div style={{ width: \"100%\" }}>\r\n                    <table className=\"table table-bordered no-margin table-striped\">\r\n                      <thead>\r\n                        <tr>\r\n                          <td>الاستخدام</td>\r\n                          <td>المساحة (م۲)</td>\r\n                          <td>النسبة المئوية (%)</td>\r\n                          <td>تحسب ضمن النسب التخطيطية</td>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {plan.statisticsParcels\r\n                          ?.filter(\r\n                            (parcel) => [1, 2].indexOf(parcel.is_cut) != -1\r\n                          )\r\n                          ?.map((parcel, index) => {\r\n                            return (\r\n                              <tr>\r\n                                {parcel.name != \"undefined\" && (\r\n                                  <td>{parcel.name}</td>\r\n                                )}\r\n                                <td>\r\n                                  {convertToArabic(\r\n                                    parseFloat(parcel?.area?.toFixed(2))\r\n                                  )}\r\n                                </td>\r\n                                <td>\r\n                                  {convertToArabic(\r\n                                    parseFloat(\r\n                                      parcel?.areaPercentage?.toFixed(2)\r\n                                    )\r\n                                  )}\r\n                                </td>\r\n                                <td>\r\n                                  <span>\r\n                                    <input\r\n                                      type=\"checkbox\"\r\n                                      style={{\r\n                                        width: \"20px\",\r\n                                        height: \"20px\",\r\n                                        margin: \"3px\",\r\n                                      }}\r\n                                      checked={\r\n                                        (parcel.is_cut == 1 && true) ||\r\n                                        parcel.isInvestalIncluded\r\n                                      }\r\n                                      disabled={\r\n                                        [2322, 3099].indexOf(\r\n                                          plan.current_step\r\n                                        ) != -1 && parcel.is_cut == 2\r\n                                          ? false\r\n                                          : true\r\n                                      }\r\n                                      onChange={this.investalChange.bind(\r\n                                        this,\r\n                                        plan.statisticsParcels.findIndex(\r\n                                          (r) => r.name == parcel.name\r\n                                        ) || -1\r\n                                      )}\r\n                                    />\r\n                                  </span>\r\n                                </td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </section>\r\n              </Panel>\r\n            </Collapse>\r\n            <Collapse className=\"Collapse\" key={4}>\r\n              <Panel\r\n                key={4}\r\n                header={`مؤشر نسب الاستعمالات`}\r\n                forceRender={true}\r\n                style={{ margin: \"5px\" }}\r\n              >\r\n                <table className=\"table table-bordered no-margin table-striped\">\r\n                  <thead>\r\n                    <tr>\r\n                      <td>الاستخدام</td>\r\n                      <td>المساحة (م۲)</td>\r\n                      <td>النسبة المئوية (%)</td>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {plan.statisticsParcels.map((parcel, index) => {\r\n                      return (\r\n                        <tr>\r\n                          {parcel.name == \"undefined\" && <td>اخرى</td>}\r\n                          {parcel.name != \"undefined\" && <td>{parcel.name}</td>}\r\n                          <td>\r\n                            {convertToArabic(\r\n                              parseFloat(parcel?.area?.toFixed(2))\r\n                            )}\r\n                          </td>\r\n                          <td>\r\n                            {convertToArabic(\r\n                              parseFloat(parcel?.areaPercentage?.toFixed(2))\r\n                            )}\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </Panel>\r\n            </Collapse>\r\n            <Collapse className=\"Collapse\" key={5}>\r\n              <Panel\r\n                key={5}\r\n                header={`الميزانية التفصيلية`}\r\n                forceRender={true}\r\n                style={{ margin: \"5px\" }}\r\n              >\r\n                <section style={{ display: \"flex\", marginTop: \"20px\" }}>\r\n                  <table className=\"table table-bordered no-margin table-striped\">\r\n                    <thead>\r\n                      <tr>\r\n                        <td>الاستعمال</td>\r\n                        <td>الاستعمال الفرعي</td>\r\n                        <td>العدد</td>\r\n                        <td>المساحة (م۲)</td>\r\n                        <td>النسبة المئوية (%)</td>\r\n                        <td>النسبة المئوية الإجمالية (%)</td>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {plan.detailsParcelTypes.map((detail, index) => {\r\n                        return (\r\n                          <tr>\r\n                            {detail.key == \"undefined\" && <td>اخرى</td>}\r\n                            {detail.key != \"undefined\" && <td>{detail.key}</td>}\r\n                            <td>\r\n                              <table className=\"table no-margin table-striped\">\r\n                                {Object.values(detail.value).map(\r\n                                  (value, index) => {\r\n                                    return (\r\n                                      <tr>\r\n                                        <td>\r\n                                          {(value.value[0].subType &&\r\n                                            value.value[0].subType\r\n                                              .sublayer_description) ||\r\n                                            \"\"}\r\n                                        </td>\r\n                                      </tr>\r\n                                    );\r\n                                  }\r\n                                )}\r\n                              </table>\r\n                            </td>\r\n                            <td>\r\n                              <table className=\"table no-margin table-striped\">\r\n                                {Object.values(detail.value).map(\r\n                                  (value, index) => {\r\n                                    return (\r\n                                      <tr>\r\n                                        <td>\r\n                                          {convertToArabic(value.value.length)}\r\n                                        </td>\r\n                                      </tr>\r\n                                    );\r\n                                  }\r\n                                )}\r\n                              </table>\r\n                            </td>\r\n                            <td>\r\n                              <table className=\"table no-margin table-striped\">\r\n                                {Object.values(detail.value).map(\r\n                                  (value, index) => {\r\n                                    return (\r\n                                      <tr>\r\n                                        <td>\r\n                                          {convertToArabic(\r\n                                            parseFloat(\r\n                                              value?.total_area?.toFixed(2)\r\n                                            )\r\n                                          )}\r\n                                        </td>\r\n                                      </tr>\r\n                                    );\r\n                                  }\r\n                                )}\r\n                              </table>\r\n                            </td>\r\n                            <td>\r\n                              <table className=\"table no-margin table-striped\">\r\n                                {Object.values(detail.value).map(\r\n                                  (value, index) => {\r\n                                    return (\r\n                                      <tr>\r\n                                        <td>\r\n                                          {convertToArabic(\r\n                                            parseFloat(\r\n                                              (\r\n                                                (value.total_area /\r\n                                                  plan.TotalParcelArea) *\r\n                                                100\r\n                                              )?.toFixed(2)\r\n                                            )\r\n                                          )}\r\n                                        </td>\r\n                                      </tr>\r\n                                    );\r\n                                  }\r\n                                )}\r\n                              </table>\r\n                            </td>\r\n                            <td>\r\n                              {convertToArabic(\r\n                                parseFloat(\r\n                                  (\r\n                                    (detail.usingTypeArea /\r\n                                      plan.TotalParcelArea) *\r\n                                    100\r\n                                  )?.toFixed(2)\r\n                                )\r\n                              )}\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                      <tr>\r\n                        <td>معدل نسبة أطوال الشوارع في المخطط</td>\r\n                        <td colSpan={5}>\r\n                          {(() => {\r\n                            let totalAreaPercentage =\r\n                              mainObject?.landData?.landData?.area / 10000;\r\n\r\n                            return convertToArabic(\r\n                              +(\r\n                                plan.streets?.reduce(function (a, b) {\r\n                                  if (b.checked) {\r\n                                    return a + +b.length.toFixed(2);\r\n                                  }\r\n                                  return a;\r\n                                }, 0) / totalAreaPercentage\r\n                              )?.toFixed(2)\r\n                            );\r\n                          })() + \" م ط / هكتار\"}\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </section>\r\n              </Panel>\r\n            </Collapse>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(withTranslation(\"cadData\")(plansDataComponent));\r\n","import React, { Component } from 'react'\r\nimport {get} from 'lodash';\r\nimport * as dataTypes from './typeofData'\r\nimport {translate} from 'react-i18next'\r\nimport { mapStateToProps, mapDispatchToProps } from \"./mapping\"\r\nimport { connect } from \"react-redux\";\r\nclass labelComponent extends Component {\r\n\r\n  componentDidMount() {\r\n      const {init_data} = this.props;\r\n      \r\n      if(init_data)\r\n      {\r\n        init_data(this.props);\r\n      }\r\n  }\r\n\r\n  render() {\r\n      const { className, input: {value}, type, data={} , t} = this.props;\r\n      \r\n      let initialVal = get(data, value, value);\r\n      const Val = get(dataTypes, type, () => <label>{initialVal}</label>)\r\n\r\n      return (\r\n      <Val  {...{ className }}  data={value} t={t}/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation('labels')(labelComponent));\r\n","import { get } from 'lodash';\r\nimport {formValueSelector} from 'redux-form'\r\nexport const mapStateToProps = ({ wizard: {mainObject}, selectors = {}, mainApp, mapViewer, ...state }, { moduleName, path, value_key, ...props }) => {\r\n    return ({\r\n        mainObject: {...mainObject},\r\n    })\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n    return {\r\n        getValues(name='stepForm'){return formValueSelector('name')},        \r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport  class boolean extends Component {\r\n\r\n  render() {\r\n    const {data,t} = this.props\r\n    \r\n    return (\r\n      <div>\r\n        {data ? t('Yes') : t('No')}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport moment from 'moment';\r\n\r\nexport  class date extends Component {\r\n  render() {\r\n    const {data}=this.props\r\n    return (\r\n      <div>\r\n        {moment(data)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export * from './object';\r\nexport * from './string';\r\nexport * from './date';\r\nexport * from './number';\r\nexport * from './list';\r\nexport * from './boolean';\r\n","import React, { Component } from 'react'\r\n\r\nexport class number extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.data && (+this.props.data).toFixed(2)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {get, isEmpty} from 'lodash'\r\nimport {fileUploader} from 'app/helpers/fieldValues'\r\n\r\nexport class object extends Component {\r\n\r\n\r\n\r\n  render() {\r\n    const {data,t}=this.props\r\n    let files = data && data.length ? data.filter(singleData => get(singleData, 'uid', null) ? singleData : null) : null\r\n    \r\n    return (\r\n      <div>\r\n        {\r\n          !isEmpty(files) ? \r\n          <div>\r\n            {fileUploader(data)}\r\n          </div>\r\n          :\r\n          <div style={{display:'flex'}}>\r\n            {data.map((val, index) => <div style={{padding:'5px'}} key={index}>{index == 0 ? ` ${t(val)} ` : ` - ${t(val)} ` }</div>)}\r\n          </div> \r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {date as Date} from './date';\r\n\r\n export class string extends Component {\r\n  render() {\r\n     const {data,t} = this.props\r\n     const datetime= /\\d{4,4}-\\d{2,2}-\\d{2,2}/;\r\n\r\n     let item = datetime.test(data) ? <Date data={data}/> : data\r\n\r\n      return (\r\n        <div>\r\n          {item}\r\n        </div>\r\n      )\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AA+BA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAsGA;AACA;AACA;AACA;AAiuIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAQA;AAAA;AAAA;AAIA;AACA;AAGA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAQA;AAAA;AAAA;AAIA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAMA;AAEA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAQA;AACA;AAIA;AAUA;AAUA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AAIA;AACA;AAEA;AAIA;AACA;AAEA;AAIA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AAEA;AAKA;AACA;AAEA;AAKA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAAA;AAAA;AAIA;AACA;AAGA;AAMA;AAIA;AAEA;AAQA;AACA;AAMA;AACA;AAEA;AAclEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AASA;AAOA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAKA;AAKA;AAGA;AAGA;AACA;AAGA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AAiyBA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAQA;AACA;AACA;AAQA;AACA;AACA;AAQA;AAEA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAslCA;;;;;;;;;;;;AC5pEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AAKA;AACA;AACA;AACA;AAsCA;AACA;AACA;AAYA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAqEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAIA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AAEA;AAIA;AACA;AAGA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAqIA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AA3iBA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwSA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAGA;AAGA;AAGA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAoEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAIA;AAIA;AAAA;AAMA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAMA;AAgBA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAoBA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AAAA;AAAA;AAIA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AAAA;AAAA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAKA;AACA;AACA;AAAA;AAEA;AAAA;AAKA;AAGA;AAAA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAKA;AACA;AAAA;AAIA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AAOA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAsKA;AAAA;AACA;AACA;AAKA;AAKA;AACA;AAAA;AAAA;AACA;AA0KA;AACA;AACA;AAIA;AACA;AAAA;AAYA;AACA;AACA;AAIA;AACA;AAAA;AAgDA;AACA;AAAA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAQA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAYA;AAAA;AACA;AAAA;AAOA;AAKA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAcA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAOA;AAKA;AAMA;AAOA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AASA;AACA;AAgBA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAYA;AACA;AAKA;AAAA;AAGA;AAUA;AAKA;AAAA;AAGA;AAOA;AAKA;AAAA;AAEA;AACA;AAWA;AAKA;AAAA;AAEA;AACA;AAeA;AAiBA;AAGA;AAAA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACh9DA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AAKA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"16.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/Helpers.js","webpack:///./src/app/components/inputs/fields/identify/Component/msa7yDataComponent/cadSuggestedData.js","webpack:///./src/app/components/inputs/fields/label/index.js","webpack:///./src/app/components/inputs/fields/label/mapping.js","webpack:///./src/app/components/inputs/fields/label/typeofData/boolean.js","webpack:///./src/app/components/inputs/fields/label/typeofData/date.js","webpack:///./src/app/components/inputs/fields/label/typeofData/index.js","webpack:///./src/app/components/inputs/fields/label/typeofData/number.js","webpack:///./src/app/components/inputs/fields/label/typeofData/object.js","webpack:///./src/app/components/inputs/fields/label/typeofData/string.js"],"sourcesContent":["\r\nimport { loadModules } from 'esri-loader';\r\nimport{mapUrl}from\"../mapviewer/config/map\"\r\n\r\nconst options = {\r\n    url: 'https://js.arcgis.com/3.13'\r\n};\r\n\r\nexport const selectDis=(e)=>{\r\nvar a=[];\r\n\r\ne.forEach(el => {\r\n    el.features.forEach(element=>{\r\n        if(!a.find((t=>t.attributes.PARCEL_SPATIAL_ID==element.attributes.PARCEL_SPATIAL_ID))){\r\n            a.push(element)\r\n        }\r\n    })\r\n});\r\nreturn a;\r\n}\r\n\r\nexport const DataQuery=(layerNum,QueryOptions,CallBack)=>{\r\n    loadModules([\"esri/symbols/SimpleLineSymbol\",\"esri/Color\",\"esri/layers/FeatureLayer\",\"esri/tasks/RelationshipQuery\",\"esri/tasks/QueryTask\",\"esri/tasks/query\",\"esri/request\",\"esri/geometry/Polygon\",\"esri/symbols/SimpleFillSymbol\",\"esri/graphic\"], options)\r\n    .then(([SimpleLineSymbol,Color,FeatureLayer,RQuery,QueryTask,Query,request,Polygon,SimpleFillSymbol,Graphic]) => {\r\n\r\n     var query = new Query()\r\n     var qt = new QueryTask(mapUrl+`/${layerNum}`)\r\n    QueryOptions.forEach(e=>{\r\n        query[e.name]=e.value\r\n    })\r\n     qt.execute(query,CallBack,(res)=>{console.log(res)})\r\n    })\r\n}\r\nexport const queryOption=(where,geo,outfields)=>{\r\n       return [{name:\"where\",value:where},\r\n       {name:\"returnGeometry\",value:geo},\r\n       {name:\"outFields\",value:outfields}\r\n      ]\r\n}\r\nexport const querySetting=(num,where,geo,outfields, url)=>{\r\n    \r\n    \r\n    return {\r\n        url:(url || mapUrl)+\"/\"+num,\r\n        where,\r\n        returnGeometry:geo,\r\n        outFields:outfields\r\n}\r\n\r\n}\r\nexport const DataReqest=(url,callBack)=>{\r\n    loadModules([\"esri/request\"], options)\r\n    .then(([request]) => {\r\n        request({\r\n            url: url,\r\n            content: {f:\"json\"},\r\n            handleAs: \"json\",\r\n            callbackParamName:\"callback\"\r\n        }).then(callBack);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport { postItem, fetchData } from \"app/helpers/apiMethods\";\r\nimport {\r\n  getMap,\r\n  getIsMapLoaded,\r\n  setIsMapLoaded,\r\n} from \"main_helpers/functions/filters/state\";\r\nimport { esriRequest, getMapInfo } from \"../common/esri_request\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport {\r\n  redrawNames,\r\n  checkParcelAdjacents,\r\n  intersectQueryTask,\r\n  setParcelName,\r\n  DrawGraphics,\r\n  createFeatureLayer,\r\n  getInfo,\r\n  reverse,\r\n  queryTask,\r\n  project,\r\n  isPointOrArc,\r\n  addGraphicToLayer,\r\n  computeLineAngle,\r\n  addParcelNo,\r\n  getLengthOffset,\r\n  clearGraphicFromLayer,\r\n  getCornersIndex,\r\n  sortLines,\r\n  getCornerIconPosition,\r\n  getColorFromCadIndex,\r\n  zoomToLayer,\r\n  zoomToIdentifyParcel,\r\n  IdentifyTask,\r\n  getPolygons,\r\n  HasArabicCharacters,\r\n  computeAngle,\r\n  highlightFeature,\r\n  convertToArabic,\r\n  getPacrelNoAngle,\r\n  localizeNumber,\r\n  getLineLength,\r\n  GetSpatialId,\r\n  resizeMap,\r\n  computePointDirection,\r\n  selectMainObject,\r\n} from \"../common/common_func\";\r\nimport { layersSetting } from \"../mapviewer/config/layers\";\r\nimport { geometryServiceUrl, mapUrl } from \"../mapviewer/config/map\";\r\nimport { Select, Button, Form, message, Checkbox, Tabs, Row, Col } from \"antd\";\r\nconst { TabPane } = Tabs;\r\nimport {\r\n  DragDropContext,\r\n  Droppable,\r\n  Draggable,\r\n  useKeyboardSensor,\r\n} from \"react-beautiful-dnd\";\r\nimport \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport { connect } from \"react-redux\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nvar uniqid = require(\"uniqid\");\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n  isEmpty,\r\n} from \"lodash\";\r\nconst _ = require(\"lodash\");\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport axios from \"axios\";\r\nimport label from \"../../../label\";\r\nimport store from \"reducers\";\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: \"2px\",\r\n  fontSize: \"20px\",\r\n  marginRight: \"13px\",\r\n  float: \"right\",\r\n  // change background colour if dragging\r\n  background: \"#E0E0E0\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nconst dragStyle = {\r\n  float: \"right\",\r\n  marginRight: \"13px\",\r\n  backgroundColor: \"#E0E0E0\",\r\n  padding: \"2px\",\r\n};\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  //background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  padding: grid,\r\n  width: \"100%\",\r\n  height: \"60px\",\r\n});\r\n\r\nconst itemContainerNorth = {\r\n  borderTop: \"13px solid #008DFF\",\r\n  margin: \"auto\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst sideClass = {\r\n  float: \"right\",\r\n  textAlign: \"right\",\r\n  fontSize: \"20px\",\r\n  marginLeft: \"10px\",\r\n  marginRight: \"10px\",\r\n  backgroundColor: \"#E0E0E0\",\r\n};\r\n\r\nconst itemContainerWest = {\r\n  borderLeft: \"13px solid red\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerEmpty = {\r\n  height: \"auto\",\r\n  margin: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"35px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerEast = {\r\n  borderRight: \"13px solid #8A8A8A\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst itemContainerSouth = {\r\n  borderBottom: \"13px solid #09F869\",\r\n  margin: \"auto\",\r\n  height: \"auto\",\r\n  width: \"500px\",\r\n  marginTop: \"15px\",\r\n  backgroundColor: \"white\",\r\n  boxShadow: \"1px 1px 3px #505050\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"10px\",\r\n  padding: \"5px\",\r\n  minHeight: \"152px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nArray.prototype.sum = (prop) => {\r\n  var total = 0;\r\n  for (var y = 0, _len = this.length; y < _len; y++) {\r\n    prop = prop.replace(/\\[(\\w+)\\]/g, \".$1\");\r\n    prop = prop.replace(/^\\./, \"\");\r\n    var a = prop.split(\".\");\r\n    var data = JSON.parse(JSON.stringify(this[y]));\r\n\r\n    for (var i = 0, n = a.length; i < n; ++i) {\r\n      var k = a[i];\r\n      if (k in data) {\r\n        data = data[k];\r\n      } else {\r\n        return 0;\r\n      }\r\n    }\r\n\r\n    total += data;\r\n  }\r\n  return total;\r\n};\r\n// Number.prototype.toFixed = function (fixed) {\r\n//   //var re = new RegExp(`^\\\\d+(?:\\\\.\\\\d{0,${fixed}})?`);\r\n//   let str = (!isNaN(Number(this)) && Number(this)?.toString()) || String(this);\r\n//   return str?.slice(0, str.indexOf(\".\") + fixed + 1);\r\n// };\r\nclass cadSuggestedDataComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.parcel_fields_headers = [\r\n      \"الإتجاه\",\r\n      \"شمال / شرق\",\r\n      \"شمال / غرب\",\r\n      \"جنوب / شرق\",\r\n      \"جنوب / غرب\",\r\n    ];\r\n    this.parcel_fields = [\r\n      { name: \"direction\", editable: false },\r\n      { name: \"NORTH_EAST_DIRECTION\", editable: true },\r\n      { name: \"NORTH_WEST_DIRECTION\", editable: true },\r\n      { name: \"SOUTH_EAST_DIRECTION\", editable: true },\r\n      { name: \"SOUTH_WEST_DIRECTION\", editable: true },\r\n    ];\r\n    this.InvokedToAdParcel = false;\r\n\r\n    if (this.props.mainObject?.data_msa7y?.msa7yData?.cadDetails) {\r\n      const {\r\n        mainObject: {\r\n          data_msa7y: {\r\n            msa7yData: { cadDetails },\r\n          },\r\n        },\r\n      } = props;\r\n\r\n      this.state = {\r\n        isConfirmed: true,\r\n        outRange: (cadDetails.temp && cadDetails.temp.outRange) || false,\r\n        pointsLength: [],\r\n        annotationLength: 3,\r\n        polygons: [],\r\n        demSaveDraft: false,\r\n        cadFiles: {},\r\n        layerParcels: [],\r\n        planDescription: cadDetails.planDescription || \"\",\r\n        activeKey: \"1\",\r\n        cadResults:\r\n          (cadDetails.temp && cadDetails.temp.cadResults) || undefined,\r\n        notify: false,\r\n        hasNotify: false,\r\n        hideDrag: false,\r\n        lineLengthFont: 20,\r\n        parcelNumberFont: 20,\r\n        isBoundry: false,\r\n        mun: cadDetails.mun || {},\r\n        muns: [],\r\n        have_electric_room:\r\n          (cadDetails.temp && cadDetails.temp.have_electric_room) || false,\r\n        electric_room_area:\r\n          (cadDetails.temp && cadDetails.temp.electric_room_area) || 0,\r\n        reqType:\r\n          (([34].indexOf(this.props.currentModule.id) != -1 ||\r\n            [1949, 2048].indexOf(this.props.currentModule.record.workflow_id) !=\r\n              -1) &&\r\n            \"duplex\") ||\r\n          \"\",\r\n      };\r\n    } else {\r\n      this.state = {\r\n        isConfirmed: true,\r\n        outRange: false,\r\n        hasNotify: false,\r\n        pointsLength: [],\r\n        annotationLength: 3,\r\n        polygons: [],\r\n        survayParcelCutter: [\r\n          {\r\n            direction: \"الشطفة\",\r\n            NORTH_EAST_DIRECTION: \"\",\r\n            NORTH_WEST_DIRECTION: \"\",\r\n            SOUTH_EAST_DIRECTION: \"\",\r\n            SOUTH_WEST_DIRECTION: \"\",\r\n          },\r\n        ],\r\n        demSaveDraft: false,\r\n        cadFiles: {},\r\n        layerParcels: [],\r\n        planDescription: \"\",\r\n        activeKey: \"1\",\r\n        cadResults: undefined,\r\n        notify: false,\r\n        hasNotify: false,\r\n        hideDrag: false,\r\n        lineLengthFont: 20,\r\n        parcelNumberFont: 20,\r\n        isBoundry: false,\r\n        mun: {},\r\n        muns: [],\r\n        have_electric_room: false,\r\n        electric_room_area: 0,\r\n        reqType:\r\n          (([34].indexOf(this.props.currentModule.id) != -1 ||\r\n            [1949, 2048].indexOf(this.props.currentModule.record.workflow_id) !=\r\n              -1) &&\r\n            \"duplex\") ||\r\n          \"\",\r\n      };\r\n    }\r\n\r\n    fetchData(`${workFlowUrl}/api/Municipality`).then((response) => {\r\n      this.state.muns = response.results;\r\n    });\r\n\r\n    if (this.props.mainObject?.data_msa7y?.msa7yData?.cadDetails?.temp) {\r\n      const {\r\n        inputs,\r\n        mainObject: {\r\n          data_msa7y: {\r\n            msa7yData: {\r\n              cadDetails: { suggestionsParcels, temp },\r\n            },\r\n          },\r\n          tadkek_data_Msa7y: {\r\n            tadkek_msa7yData: { requestType },\r\n          },\r\n        },\r\n      } = props;\r\n\r\n      suggestionsParcels.forEach((element, index) => {\r\n        if (!inputs?.north) {\r\n          inputs?.north?.forEach((input, key) => {\r\n            this.state[input.name + index] = temp[input.name + index] || \"\";\r\n          });\r\n        }\r\n        if (!inputs?.east) {\r\n          inputs?.east?.forEach((input, key) => {\r\n            this.state[input.name + index] = temp[input.name + index] || \"\";\r\n          });\r\n        }\r\n        if (!inputs?.west) {\r\n          inputs?.west?.forEach((input, key) => {\r\n            this.state[input.name + index] = temp[input.name + index] || \"\";\r\n          });\r\n        }\r\n        if (!inputs?.south) {\r\n          inputs?.south?.forEach((input, key) => {\r\n            this.state[input.name + index] = temp[input.name + index] || \"\";\r\n          });\r\n        }\r\n\r\n        //if (!element.parcel_name) {\r\n        element.parcel_name = setParcelName([\r\n          temp[\"parcel_name\" + index],\r\n          requestType != 2 ? temp[\"parcelSliceNo\" + index] : \"1\",\r\n        ]);\r\n\r\n        element.parcelNameRight = temp[\"parcel_name\" + index];\r\n        element.parcelNameLeft =\r\n        requestType != 2 ? temp[\"parcelSliceNo\" + index] : \"1\";\r\n        //}\r\n        this.state[\"north_Desc\" + index] =\r\n          element[\"north_Desc\"] || temp[\"north_Desc\" + index] || \"\";\r\n        this.state[\"west_Desc\" + index] =\r\n          element[\"west_Desc\"] || temp[\"west_Desc\" + index] || \"\";\r\n        this.state[\"south_Desc\" + index] =\r\n          element[\"south_Desc\"] || temp[\"south_Desc\" + index] || \"\";\r\n        this.state[\"east_Desc\" + index] =\r\n          element[\"east_Desc\"] || temp[\"east_Desc\" + index] || \"\";\r\n\r\n        this.state[\"northBoundries\" + index] =\r\n          element.data[0].data.map((item, i) => {\r\n            return {\r\n              id: `item-${\"north_\" + i}`,\r\n              content: item.text,\r\n              data: item,\r\n            };\r\n          }) || temp[\"northBoundries\" + index];\r\n        this.state[\"southBoundries\" + index] =\r\n          element.data[4].data.map((item, i) => {\r\n            return {\r\n              id: `item-${\"south_\" + i}`,\r\n              content: item.text,\r\n              data: item,\r\n            };\r\n          }) || temp[\"southBoundries\" + index];\r\n        this.state[\"eastBoundries\" + index] =\r\n          element.data[1].data.map((item, i) => {\r\n            return {\r\n              id: `item-${\"east_\" + i}`,\r\n              content: item.text,\r\n              data: item,\r\n            };\r\n          }) || temp[\"eastBoundries\" + index];\r\n        this.state[\"westBoundries\" + index] =\r\n          element.data[3].data.map((item, i) => {\r\n            return {\r\n              id: `item-${\"west_\" + i}`,\r\n              content: item.text,\r\n              data: item,\r\n            };\r\n          }) || temp[\"westBoundries\" + index];\r\n        this.state[\"parcelSliceNo\" + index] =\r\n          requestType != 2\r\n            ? temp[\"parcelSliceNo\" + index] || element.parcelNameLeft\r\n            : \"1\";\r\n        this.state[\"parcel_name\" + index] =\r\n          temp[\"parcel_name\" + index] || element.parcelNameRight || \"\";\r\n        this.state[\"area\" + index] = temp[\"area\" + index] || element.area || \"\";\r\n      });\r\n    }\r\n\r\n    this.isLoaded = true;\r\n    this.toLoadLines = true;\r\n  }\r\n\r\n  saveEdit(id, name, i) {\r\n    this.state.survayParcelCutter[0][name] = this[\"edit_\" + name + i];\r\n    this.setState({\r\n      [name + \"_isEdit_\" + i]: false,\r\n      survayParcelCutter: this.state.survayParcelCutter,\r\n    });\r\n    this.settoStore(this.state.polygons);\r\n  }\r\n\r\n  myChangeHandler = (name, i, e, event) => {\r\n    this[\"edit_\" + name + i] = event.target.value;\r\n    e[name] = event.target.value;\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  showEditBtn = (name, value) => {\r\n    return (\r\n      [\r\n        \"NORTH_EAST_DIRECTION\",\r\n        \"NORTH_WEST_DIRECTION\",\r\n        \"SOUTH_EAST_DIRECTION\",\r\n        \"SOUTH_WEST_DIRECTION\",\r\n      ].indexOf(name) > -1\r\n    );\r\n  };\r\n\r\n  enableEdit = (name, i) => {\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  id2List = {\r\n    droppable_North: \"northBoundries\",\r\n    droppable_South: \"southBoundries\",\r\n    droppable_East: \"eastBoundries\",\r\n    droppable_West: \"westBoundries\",\r\n  };\r\n\r\n  getList = (id) => this.state[this.id2List[id] + (this.state.activeKey - 1)];\r\n\r\n  onDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const items = reorder(\r\n        this.getList(source.droppableId),\r\n        source.index,\r\n        destination.index\r\n      );\r\n\r\n      let state = { items };\r\n\r\n      if (source.droppableId === \"droppable_South\") {\r\n        this.state[\"southBoundries\" + (this.state.activeKey - 1)] = items;\r\n      }\r\n      if (source.droppableId === \"droppable_North\") {\r\n        this.state[\"northBoundries\" + (this.state.activeKey - 1)] = items;\r\n      }\r\n      if (source.droppableId === \"droppable_East\") {\r\n        this.state[\"eastBoundries\" + (this.state.activeKey - 1)] = items;\r\n      }\r\n      if (source.droppableId === \"droppable_West\") {\r\n        this.state[\"westBoundries\" + (this.state.activeKey - 1)] = items;\r\n      }\r\n    } else {\r\n      const result = move(\r\n        this.getList(source.droppableId),\r\n        this.getList(destination.droppableId),\r\n        source,\r\n        destination\r\n      );\r\n\r\n      if (result.droppable_North) {\r\n        this.state.polygons[+this.state.activeKey - 1].data[0].data =\r\n          result.droppable_North.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n      if (result.droppable_West) {\r\n        this.state.polygons[+this.state.activeKey - 1].data[3].data =\r\n          result.droppable_West.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n      if (result.droppable_South) {\r\n        this.state.polygons[+this.state.activeKey - 1].data[4].data =\r\n          result.droppable_South.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n      if (result.droppable_East) {\r\n        this.state.polygons[+this.state.activeKey - 1].data[1].data =\r\n          result.droppable_East.map((item) => {\r\n            return item.data;\r\n          });\r\n      }\r\n\r\n      this.dropSuccess();\r\n      this.calculateLines();\r\n\r\n      this.state[\"northBoundries\" + (this.state.activeKey - 1)] =\r\n        result.droppable_North ||\r\n        this.state[\"northBoundries\" + (this.state.activeKey - 1)];\r\n      this.state[\"southBoundries\" + (this.state.activeKey - 1)] =\r\n        result.droppable_South ||\r\n        this.state[\"southBoundries\" + (this.state.activeKey - 1)];\r\n      this.state[\"eastBoundries\" + (this.state.activeKey - 1)] =\r\n        result.droppable_East ||\r\n        this.state[\"eastBoundries\" + (this.state.activeKey - 1)];\r\n      this.state[\"westBoundries\" + (this.state.activeKey - 1)] =\r\n        result.droppable_West ||\r\n        this.state[\"westBoundries\" + (this.state.activeKey - 1)];\r\n    }\r\n\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  dropSuccess = () => {\r\n    const { input } = this.props;\r\n    const { layerParcels } = this.state;\r\n\r\n    clearGraphicFromLayer(this.map, \"boundriesDirection\");\r\n    clearGraphicFromLayer(this.map, \"highlightBoundriesGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"pictureGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n\r\n    var count = 0;\r\n\r\n    var oldData = JSON.parse(JSON.stringify(layerParcels));\r\n\r\n    this.state.layerParcels = [];\r\n\r\n    sortLines(this.state.polygons);\r\n\r\n    this.state.polygons.forEach((polygon, key) => {\r\n      if (polygon.polygon) {\r\n        count++;\r\n        var parcelNumber = key + 1;\r\n\r\n        if (oldData[key]) {\r\n          polygon.corners = JSON.parse(JSON.stringify(oldData[key].corners));\r\n        } else polygon.corners = [];\r\n\r\n        layerParcels.push(JSON.parse(JSON.stringify(polygon.polygon)));\r\n        layerParcels[layerParcels.length - 1].lines = [];\r\n        layerParcels[layerParcels.length - 1].corners = [];\r\n\r\n        polygon.data.forEach((boundry) => {\r\n          var lineDirection;\r\n          if (boundry.name != \"main\") {\r\n            var color = [0, 0, 255];\r\n\r\n            if (boundry.name == \"north\") {\r\n              color = [0, 141, 255];\r\n              lineDirection = 1;\r\n            } else if (boundry.name == \"east\") {\r\n              color = [117, 114, 114];\r\n              lineDirection = 2;\r\n            } else if (boundry.name == \"west\") {\r\n              color = [255, 0, 0];\r\n              lineDirection = 4;\r\n            } else if (boundry.name == \"south\") {\r\n              color = [0, 255, 0];\r\n              lineDirection = 3;\r\n            }\r\n\r\n            boundry.data.forEach((line) => {\r\n              if (this.toLoadLines) {\r\n                line.color = color;\r\n                line.polygonNum = count;\r\n                line.lineDirection = lineDirection;\r\n\r\n                var polyline = new esri.geometry.Polyline(line);\r\n\r\n                var point1 = {};\r\n                point1.x = line.paths[0][0][0];\r\n                point1.y = line.paths[0][0][1];\r\n\r\n                point1.x = Number(point1.x.toPrecision(12));\r\n                point1.y = Number(point1.y.toPrecision(12));\r\n\r\n                var latlng = esri.geometry.xyToLngLat(point1.x, point1.y);\r\n                point1.lat = latlng[0];\r\n                point1.lng = latlng[1];\r\n\r\n                var point2 = {};\r\n                point2.x = line.paths[0][1][0];\r\n                point2.y = line.paths[0][1][1];\r\n\r\n                point2.x = Number(point2.x.toPrecision(12));\r\n                point2.y = Number(point2.y.toPrecision(12));\r\n\r\n                latlng = esri.geometry.xyToLngLat(point2.x, point2.y);\r\n                point2.lat = latlng[0];\r\n                point2.lng = latlng[1];\r\n\r\n                var fromCornerIndex = getCornersIndex(polygon.corners, point1);\r\n                if (fromCornerIndex == -1) {\r\n                  polygon.corners.push(point1);\r\n                  fromCornerIndex = polygon.corners.length;\r\n                }\r\n                var toCornerIndex = getCornersIndex(polygon.corners, point2);\r\n                if (toCornerIndex == -1) {\r\n                  polygon.corners.push(point2);\r\n                  toCornerIndex = polygon.corners.length;\r\n                }\r\n\r\n                line.from = fromCornerIndex;\r\n                line.to = toCornerIndex;\r\n                line.BOUNDARY_NO = line.from;\r\n\r\n                var polyline = new esri.geometry.Polyline(line);\r\n\r\n                layerParcels[layerParcels.length - 1].lines.push(polyline);\r\n\r\n                var attr = {\r\n                  parcelNumber: parcelNumber,\r\n                };\r\n\r\n                addGraphicToLayer(\r\n                  polyline,\r\n                  this.map,\r\n                  \"boundriesDirection\",\r\n                  color,\r\n                  null,\r\n                  null,\r\n                  null,\r\n                  attr\r\n                );\r\n              }\r\n              // else {\r\n              //   var polyline = new esri.geometry.Polyline(line);\r\n              //   addGraphicToLayer(polyline, this.map, \"boundriesDirection\", color, null, null, null, attr);\r\n              // }\r\n            });\r\n          }\r\n        });\r\n\r\n        layerParcels[layerParcels.length - 1].corners = JSON.parse(\r\n          JSON.stringify(polygon.corners)\r\n        );\r\n      }\r\n    });\r\n\r\n    //draw corners\r\n    layerParcels.forEach((polygon, key) => {\r\n      var polygonClass = new esri.geometry.Polygon(polygon);\r\n      var graphic = new esri.Graphic(polygonClass, null, null, null);\r\n      var pt = graphic.geometry.getExtent().getCenter();\r\n      polygon.lines.forEach((line, key) => {\r\n        var attr = {\r\n          BOUNDARY_NO: line.BOUNDARY_NO,\r\n          FROM_CORNER: line.from,\r\n          TO_CORNER: line.to,\r\n          BOUNDARY_LENGTH: line.text,\r\n          BOUNDARY_DIRECTION: line.lineDirection,\r\n        };\r\n\r\n        var graphic = new esri.Graphic(line, null, attr, null);\r\n        polygon.lines[key] = graphic;\r\n\r\n        var tempString = \" يميل \"; //\" من النقطة \" + \"<b>\" + line.from + \"</b>\" + \" الي النقطة \" + \"<b>\" + line.to + \"</b>\" + \" \";\r\n\r\n        if (line.lineDirection == 1) {\r\n          if (!polygon.northDescription)\r\n            polygon.northDescription = \"من الغرب الي الشرق\";\r\n          else {\r\n            polygon.northDescription += \" ثم \";\r\n          }\r\n          polygon.northDescription +=\r\n            tempString +\r\n            computeAngle(line.paths[0][0], line.paths[0][1]) +\r\n            \" بطول \" +\r\n            \"<b>\" +\r\n            line.text +\r\n            \"</b>\" +\r\n            \" م\";\r\n        } else if (line.lineDirection == 4) {\r\n          if (!polygon.westDescription)\r\n            polygon.westDescription = \" من الجنوب الي الشمال\";\r\n          else {\r\n            polygon.westDescription += \" ثم \";\r\n          }\r\n          polygon.westDescription +=\r\n            tempString +\r\n            computeAngle(line.paths[0][0], line.paths[0][1]) +\r\n            \" بطول \" +\r\n            \"<b>\" +\r\n            line.text +\r\n            \"</b>\" +\r\n            \" م\";\r\n        } else if (line.lineDirection == 3) {\r\n          if (!polygon.southDescription)\r\n            polygon.southDescription = \"من الشرق الي الغرب\";\r\n          else {\r\n            polygon.southDescription += \" ثم \";\r\n          }\r\n\r\n          polygon.southDescription +=\r\n            tempString +\r\n            computeAngle(line.paths[0][0], line.paths[0][1]) +\r\n            \" بطول \" +\r\n            \"<b>\" +\r\n            line.text +\r\n            \"</b>\" +\r\n            \" م\";\r\n        } else if (line.lineDirection == 2) {\r\n          if (!polygon.eastDescription)\r\n            polygon.eastDescription = \"من الشمال الي الجنوب\";\r\n          else {\r\n            polygon.eastDescription += \" ثم \";\r\n          }\r\n\r\n          polygon.eastDescription +=\r\n            tempString +\r\n            computeAngle(line.paths[0][0], line.paths[0][1]) +\r\n            \" بطول \" +\r\n            \"<b>\" +\r\n            line.text +\r\n            \"</b>\" +\r\n            \" م\";\r\n        }\r\n      });\r\n\r\n      polygon.corners.forEach((corner, key) => {\r\n        var point = new esri.geometry.Point(corner.lat, corner.lng);\r\n        var mp = esri.geometry.geographicToWebMercator(point);\r\n\r\n        var iconTextPosition;\r\n        var iconPosition;\r\n\r\n        if (!corner.iconPosition) {\r\n          iconTextPosition = { x: -5, y: 0 };\r\n          iconPosition = { x: 0, y: 0 };\r\n\r\n          if (layerParcels.length > 1) {\r\n            iconPosition = getCornerIconPosition(key + 1, polygon.lines);\r\n            iconTextPosition.x =\r\n              iconPosition.x > 0 ? iconPosition.x : iconPosition.x - 5;\r\n            iconTextPosition.y =\r\n              iconPosition.y > 0 ? iconPosition.y : iconPosition.y - 4;\r\n          }\r\n\r\n          corner.iconTextPosition = iconTextPosition;\r\n          corner.iconPosition = iconPosition;\r\n        } else {\r\n          iconTextPosition = corner.iconTextPosition;\r\n          iconPosition = corner.iconPosition;\r\n        }\r\n      });\r\n    });\r\n\r\n    this.state.polygons.forEach((polygon, key) => {\r\n      if (polygon.polygon) {\r\n        var polygonClass = new esri.geometry.Polygon(polygon.polygon);\r\n        var graphic = new esri.Graphic(polygonClass, null, null, null);\r\n        var pt = graphic.geometry.getExtent().getCenter();\r\n\r\n        polygon.position = pt;\r\n        polygon.northDescription = layerParcels[key].northDescription;\r\n        polygon.westDescription = layerParcels[key].westDescription;\r\n        polygon.southDescription = layerParcels[key].southDescription;\r\n        polygon.eastDescription = layerParcels[key].eastDescription;\r\n      }\r\n    });\r\n\r\n    // DrawIntersectLines();\r\n  };\r\n\r\n  higlightNotify = (polygon) => {\r\n    highlightFeature(\r\n      polygon,\r\n      this.map,\r\n      \"notifyZoomGraphicLayer\",\r\n      null,\r\n      [255, 255, 255],\r\n      null,\r\n      null,\r\n      true,\r\n      null,\r\n      4\r\n    );\r\n  };\r\n\r\n  clearHighlightNotify = () => {\r\n    clearGraphicFromLayer(this.map, \"notifyZoomGraphicLayer\");\r\n  };\r\n\r\n  confirmNotify = (hide) => {\r\n    if (!hide) {\r\n      this.state[\"hasNotify\"] = false;\r\n      this.state[\"isConfirmed\"] = true;\r\n      clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n\r\n      this.state.polygons.forEach((elem, key) => {\r\n        //elem.geometry = ;\r\n        addGraphicToLayer(\r\n          elem.polygon,\r\n          this.map,\r\n          \"addedParclGraphicLayer\",\r\n          [0, 0, 255, 0.8],\r\n          null,\r\n          true,\r\n          (param) => {\r\n            zoomToLayer(\"addedParclGraphicLayer\", this.map, 10);\r\n            //resizeMap(this.map);\r\n          }\r\n        );\r\n      });\r\n      this.getSuggestLine();\r\n    } else {\r\n      this.state[\"hasNotify\"] = true;\r\n      this.state[\"isConfirmed\"] = false;\r\n    }\r\n    var polygons = null;\r\n    if (this.props.mainObject && this.props.mainObject.data_msa7y) {\r\n      const {\r\n        mainObject: {\r\n          data_msa7y: {\r\n            msa7yData: { cadDetails },\r\n          },\r\n        },\r\n      } = this.props;\r\n\r\n      polygons =\r\n        !this.InvokedToAdParcel && cadDetails?.suggestionsParcels?.length > 0\r\n          ? cadDetails?.suggestionsParcels\r\n          : this.state[\"polygons\"];\r\n    } else {\r\n      polygons = this.state[\"polygons\"];\r\n    }\r\n\r\n    if (!this.state[\"hasNotify\"] && this.state[\"isConfirmed\"]) {\r\n      polygons.map((parcel, index) => {\r\n        parcel.notify = parcel.polygon.notify = \"\";\r\n      });\r\n\r\n      if (\r\n        this.state.cadResults &&\r\n        this.state.cadResults.shapeFeatures &&\r\n        this.state.cadResults.shapeFeatures.length\r\n      ) {\r\n        this.state.cadResults.shapeFeatures.map((parcel) => {\r\n          parcel.notify = \"\";\r\n        });\r\n      }\r\n    }\r\n\r\n    this.settoStore(polygons);\r\n  };\r\n\r\n  addParcelToSelect = (geometries, parcelIds) => {\r\n    return new Promise((resolve, reject) => {\r\n      intersectQueryTask({\r\n        outFields: [\r\n          \"OBJECTID\",\r\n          \"MUNICIPALITY_NAME\",\r\n          \"PARCEL_AREA\",\r\n          \"PARCEL_LAT_COORD\",\r\n          \"PARCEL_LONG_COORD\",\r\n          \"PARCEL_MAIN_LUSE\",\r\n          \"PLAN_NO\",\r\n          \"PARCEL_PLAN_NO\",\r\n          \"USING_SYMBOL\",\r\n          \"PARCEL_SPATIAL_ID\",\r\n        ],\r\n        //spatialRelationship: esri.tasks.Query.SPATIAL_REL_TOUCHES,\r\n        geometry: geometries, // features[0].geometry\r\n        url: mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n        where: `PARCEL_PLAN_NO ${\r\n          (parcelIds && \"in (\" + parcelIds.join(\",\") + \")\") || \"is not null\"\r\n        }`,\r\n        callbackResult: (res) => {\r\n          return resolve(res);\r\n        },\r\n      });\r\n      //}\r\n    });\r\n  };\r\n\r\n  initAddParcelNo = (pacrels) => {\r\n    //clearGraphicFromLayer(this.map, \"MapPacrelNoGraphicLayer\");\r\n    //\r\n    highlightFeature(pacrels, this.map, {\r\n      layerName: \"SelectLandsGraphicLayer\",\r\n      noclear: false,\r\n      isZoom: false,\r\n      isHiglightSymbol: true,\r\n      highlighColor: [0, 255, 0, 0.5],\r\n      zoomFactor: 10,\r\n    });\r\n    pacrels.forEach((val) => {\r\n      var pt;\r\n\r\n      try {\r\n        pt = val.geometry.getExtent().getCenter();\r\n      } catch (e) {\r\n        if (val.geometry.type == \"polygon\") {\r\n          val.geometry = new esri.geometry.Polygon(val.geometry);\r\n        }\r\n        pt = val.geometry.getExtent().getCenter();\r\n      }\r\n\r\n      var angle = getPacrelNoAngle(val);\r\n\r\n      addParcelNo(\r\n        pt,\r\n        this.map,\r\n        convertToArabic(val.attributes.PARCEL_PLAN_NO),\r\n        \"PacrelUnNamedGraphicLayer\",\r\n        28,\r\n        null,\r\n        angle\r\n      );\r\n    });\r\n  };\r\n\r\n  cancelNotify = () => {\r\n    this.resetMap();\r\n  };\r\n\r\n  clearAllGraphics = () => {\r\n    clearGraphicFromLayer(this.map, \"highlightBoundriesGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"PacrelLenNoGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"boundriesGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"boundriesDirection\");\r\n    clearGraphicFromLayer(this.map, \"pictureGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"PacrelUnNamedGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"detailedGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"floorGraphicLayer\");\r\n  };\r\n\r\n  calculateLines = () => {\r\n    // if (this.state.polygons && this.state.polygons.length) {\r\n    \r\n    this.state.polygons.forEach((polygon, key) => {\r\n      polygon.data.forEach((lines) => {\r\n        lines.totalLength = 0;\r\n        lines.data.forEach((line) => {\r\n          if (!line.hide) lines.totalLength += +(+line.text).toFixed(2);\r\n        });\r\n        lines.totalLength = lines.totalLength;\r\n      });\r\n    });\r\n  };\r\n\r\n  getSuggestLine = () => {\r\n    this.state.polygons.forEach((polygon, index) => {\r\n      if (polygon.area != -1) {\r\n        //this.state['area' + index] = (+polygon.area).toFixed(2);\r\n        var lengthPoint1, lengthPoint2;\r\n        var polyg = new esri.geometry.Polygon(polygon.polygon);\r\n        var polygonCenterPoint = polyg.getExtent().getCenter();\r\n\r\n        polygon.data[2].data.forEach((boundry, key) => {\r\n          // //if (this.toLoadLines) {\r\n          // var line = new esri.geometry.Polyline(boundry);\r\n          // var centerPointofLine = line.getExtent().getCenter();\r\n\r\n          // var diffrenceInXWithMaxPoint = Math.abs(\r\n          //   centerPointofLine.x - polygon.maxPoint.x\r\n          // );\r\n          // var diffrenceWithPolygonCenterPoint = Math.abs(\r\n          //   centerPointofLine.x - polygonCenterPoint.x\r\n          // );\r\n\r\n          // if (diffrenceInXWithMaxPoint < diffrenceWithPolygonCenterPoint) {\r\n          //   polygon.data[1].data.push(boundry);\r\n          // } else {\r\n          //   var diffrenceInXWithMinPoint = Math.abs(\r\n          //     centerPointofLine.x - polygon.minPoint.x\r\n          //   );\r\n          //   if (diffrenceInXWithMinPoint < diffrenceWithPolygonCenterPoint) {\r\n          //     polygon.data[3].data.push(boundry);\r\n          //   } else if (centerPointofLine.y > polygonCenterPoint.y) {\r\n          //     polygon.data[0].data.push(boundry);\r\n          //   } else {\r\n          //     polygon.data[4].data.push(boundry);\r\n          //   }\r\n          // }\r\n          // //}\r\n          let direction = computePointDirection(\r\n            polygon,\r\n            boundry.paths[0][0],\r\n            boundry.paths[0][1],\r\n            polyg\r\n          );\r\n          if (direction.direction == \"east\") {\r\n            polygon.data[1].data.push(boundry);\r\n          } else {\r\n            if (direction.direction == \"west\") {\r\n              polygon.data[3].data.push(boundry);\r\n            } else if (direction.direction == \"north\") {\r\n              polygon.data[0].data.push(boundry);\r\n            } else if (direction.direction == \"south\") {\r\n              polygon.data[4].data.push(boundry);\r\n            }\r\n          }\r\n        });\r\n\r\n        polygon.data[2].data = [];\r\n      }\r\n    });\r\n\r\n    this.dropSuccess();\r\n\r\n    if (this.state.polygons && this.state.polygons.length > 0) {\r\n      var obj = { polygons: this.state.polygons };\r\n      this.state.polygons.forEach((polygon, index) => {\r\n        this.state[\"westBoundries\" + index] = obj[\"westBoundries\" + index] =\r\n          this.InvokedToAdParcel\r\n            ? polygon.data[3].data.map((item, i) => {\r\n                return {\r\n                  id: `item-${\"west_\" + i}`,\r\n                  content: item.text,\r\n                  data: item,\r\n                };\r\n              })\r\n            : this.state[\"westBoundries\" + index];\r\n        this.state[\"northBoundries\" + index] = obj[\"northBoundries\" + index] =\r\n          this.InvokedToAdParcel\r\n            ? polygon.data[0].data.map((item, i) => {\r\n                return {\r\n                  id: `item-${\"north_\" + i}`,\r\n                  content: item.text,\r\n                  data: item,\r\n                };\r\n              })\r\n            : this.state[\"northBoundries\" + index];\r\n        this.state[\"eastBoundries\" + index] = obj[\"eastBoundries\" + index] =\r\n          this.InvokedToAdParcel\r\n            ? polygon.data[1].data.map((item, i) => {\r\n                return {\r\n                  id: `item-${\"east_\" + i}`,\r\n                  content: item.text,\r\n                  data: item,\r\n                };\r\n              })\r\n            : this.state[\"eastBoundries\" + index];\r\n        this.state[\"southBoundries\" + index] = obj[\"southBoundries\" + index] =\r\n          this.InvokedToAdParcel\r\n            ? polygon.data[4].data.map((item, i) => {\r\n                return {\r\n                  id: `item-${\"south_\" + i}`,\r\n                  content: item.text,\r\n                  data: item,\r\n                };\r\n              })\r\n            : this.state[\"southBoundries\" + index];\r\n      });\r\n\r\n      this.setState(obj);\r\n    }\r\n    this.calculateLines();\r\n  };\r\n\r\n  buildCADDetails = () => {\r\n    // componentDidUpdate\r\n    //return new Promise((resolve,reject) => {\r\n\r\n    //const { mainObject, mapLayers, t } = this.props;\r\n    let suggestionsParcels =\r\n      this.props.mainObject?.data_msa7y?.msa7yData?.cadDetails\r\n        ?.suggestionsParcels;\r\n    let temp = this.props.mainObject?.data_msa7y?.msa7yData?.cadDetails?.temp;\r\n    let requestType =\r\n      this.props.mainObject?.tadkek_data_Msa7y?.tadkek_msa7yData?.requestType;\r\n    const { t, inputs } = this.props;\r\n    let {\r\n      outRange,\r\n      pointsLength,\r\n      annotationLength,\r\n      polygons,\r\n      lineLengthFont,\r\n      parcelNumberFont,\r\n      isBoundry,\r\n      cadResults,\r\n      notify,\r\n      hideDrag,\r\n      muns,\r\n    } = this.state;\r\n    //if (isPlan) {\r\n    if (this.map && cadResults) {\r\n      //if () {\r\n      //if (!this.state.cadResults.data) {\r\n      clearGraphicFromLayer(this.map, \"MapPacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"highlightBoundriesGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"boundriesGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"boundriesDirection\");\r\n      clearGraphicFromLayer(this.map, \"pictureGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelUnNamedGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"detailedGraphicLayer\");\r\n\r\n      this.state[\"isConfirmed\"] = true;\r\n      this.state[\"outRange\"] = null;\r\n      this.state[\"layerParcels\"] = [];\r\n\r\n      if (this.state.cadResults) {\r\n        lineLengthFont = 20;\r\n        parcelNumberFont = 20;\r\n      }\r\n      let index = -1;\r\n      if (this.map) {\r\n        this.state[\"polygons\"] = [];\r\n\r\n        //this.state.cadResults.lineFeatures = [];\r\n        if (this.state.cadResults.lineFeatures) {\r\n          //draw details\r\n          this.state.cadResults.lineFeatures.forEach((line, appartNumber) => {\r\n            var polyline = new esri.geometry.Polyline(line);\r\n            //lineFeatures.push(polyline);\r\n            addGraphicToLayer(\r\n              polyline,\r\n              this.map,\r\n              \"detailedGraphicLayer\",\r\n              [0, 0, 255, 0.5],\r\n              null,\r\n              null,\r\n              null\r\n            );\r\n          });\r\n        }\r\n\r\n        this.state[\"hasNotify\"] = this.state[\"demSaveDraft\"];\r\n        getPolygons(\r\n          this.state.cadResults.shapeFeatures,\r\n          (polygon, esriModules, elem, key) => {\r\n            this.state[\"polygons\"].push({\r\n              parcel_name: \"\",\r\n              area: -1,\r\n              data: [\r\n                { name: \"north\", data: [], totalLength: 0 },\r\n                { name: \"east\", data: [], totalLength: 0 },\r\n                { name: \"main\", data: [], totalLength: 0 },\r\n                { name: \"west\", data: [], totalLength: 0 },\r\n                { name: \"south\", data: [], totalLength: 0 },\r\n              ],\r\n            });\r\n\r\n            var key = this.state.polygons.length - 1;\r\n            // if (!isEmpty(this.state.polygons[key].parcel_name)) {\r\n            //   this.state.polygons[key].parcel_name = isEmpty(this.state[`parcelSliceNo${key}`]) ? this.state[`parcel_name${key}`] : `${this.state[`parcelSliceNo${key}`]}/${this.state[`parcel_name${key}`]}`;\r\n            // }\r\n            //else\r\n\r\n            if (\r\n              this.InvokedToAdParcel &&\r\n              isEmpty(this.state.polygons[key].parcel_name)\r\n            ) {\r\n              this.state[`parcelSliceNo${key}`] = this.state.polygons[\r\n                key\r\n              ].parcelNameLeft = requestType != 2 ? \"\" : \"1\";\r\n              this.state[`parcel_name${key}`] =\r\n                [34].indexOf(this.props.currentModule.id) != -1 ||\r\n                [1949, 2048].indexOf(\r\n                  this.props.currentModule.record.workflow_id\r\n                ) != -1\r\n                  ? `دوبلكس رقم${key + 1}`\r\n                  : `أرض رقم${key + 1}`; // parcels[key].attributes.PARCEL_PLAN_NO;\r\n              this.state.polygons[key].parcel_name = this.state.polygons[\r\n                key\r\n              ].parcelNameRight = this.state[`parcel_name${key}`];\r\n              this.state[`duplixType${key}`] = \"\";\r\n              this.state[`area${key}`] = elem.area.toFixed(2);\r\n            }\r\n\r\n            this.state[\"polygons\"][key].PARCEL_SPATIAL_ID = \"\";\r\n            this.state[\"polygons\"][key].area = elem.area;\r\n            this.state[\"polygons\"][key].parcel_nameHidden = \"\";\r\n\r\n            this.state[\"polygons\"][key].notify = polygon.notify;\r\n            this.state[\"polygons\"][key].polygon = polygon;\r\n            this.state[\"polygons\"][key].min;\r\n            this.state[\"polygons\"][key].active = false;\r\n            this.state[\"polygons\"][key].max = 0;\r\n            this.state[\"polygons\"][key].maxPointLineLen;\r\n            this.state[\"polygons\"][key].minPointLineLen;\r\n            this.state[\"polygons\"][key].minLineLen;\r\n\r\n            if (polygon.rings.length > 0) {\r\n              var arcLength = 0;\r\n              var arcPoints = [];\r\n              var arcLines = [];\r\n\r\n              for (var j = 0, n = polygon.rings[0].length - 1; j < n; j++) {\r\n                var point1 = new esriModules.Point(\r\n                  polygon.rings[0][j][0],\r\n                  polygon.rings[0][j][1],\r\n                  new esri.SpatialReference({ wkid: polygon.spatialReference })\r\n                );\r\n                var point2 = new esriModules.Point(\r\n                  polygon.rings[0][j + 1][0],\r\n                  polygon.rings[0][j + 1][1],\r\n                  new esri.SpatialReference({ wkid: polygon.spatialReference })\r\n                );\r\n\r\n                var length = +esriModules.mathUtils\r\n                  .getLength(point1, point2)\r\n                  //.toFixed(2);\r\n                //length = Number(parseFloat(length).toFixed(2));\r\n                \r\n                if (point1.x > this.state[\"polygons\"][key].max) {\r\n                  this.state[\"polygons\"][key].max = point1.x;\r\n                  this.state[\"polygons\"][key].maxPoint = point1;\r\n                }\r\n\r\n                if (\r\n                  !this.state[\"polygons\"][key].min ||\r\n                  point1.x < this.state[\"polygons\"][key].min\r\n                ) {\r\n                  this.state[\"polygons\"][key].min = point1.x;\r\n                  this.state[\"polygons\"][key].minPoint = point1;\r\n                }\r\n\r\n                if (point2.x > this.state[\"polygons\"][key].max) {\r\n                  this.state[\"polygons\"][key].max = point2.x;\r\n                  this.state[\"polygons\"][key].maxPoint = point2;\r\n                }\r\n\r\n                if (\r\n                  !this.state[\"polygons\"][key].min ||\r\n                  point2.x < this.state[\"polygons\"][key].min\r\n                ) {\r\n                  this.state[\"polygons\"][key].min = point2.x;\r\n                  this.state[\"polygons\"][key].minPoint = point2;\r\n                }\r\n\r\n                var path = {\r\n                  paths: [[polygon.rings[0][j], polygon.rings[0][j + 1]]],\r\n                  text: length,\r\n                  spatialReference: polygon.spatialReference,\r\n                };\r\n\r\n                if (\r\n                  !(\r\n                    isPointOrArc(\r\n                      point1,\r\n                      key,\r\n                      this.state.cadResults.cadFeatures\r\n                    ) &&\r\n                    isPointOrArc(point2, key, this.state.cadResults.cadFeatures)\r\n                  )\r\n                ) {\r\n                  if (\r\n                    isPointOrArc(point2, key, this.state.cadResults.cadFeatures)\r\n                  ) {\r\n                    //\r\n                    arcLength += length;\r\n                    arcPoints.push(point1);\r\n                    path = new esriModules.Polyline(path);\r\n                    path.centroid = path.getExtent().getCenter();\r\n                    arcLines.push(new esriModules.Polyline(path));\r\n                    path.text = arcLength || length;\r\n\r\n                    if (\r\n                      this.state.cadResults.boundryFeaturesLen &&\r\n                      this.state.cadResults.boundryFeaturesLen.length &&\r\n                      this.state.cadResults.boundryFeaturesLen.length > 0\r\n                    ) {\r\n                      //\r\n                      var line = getLineLength(\r\n                        this.state.cadResults.boundryFeaturesLen,\r\n                        arcPoints[0],\r\n                        point2,\r\n                        this.state.cadResults.isArc\r\n                      );\r\n                      if (line) path.text = line.length;\r\n                    }\r\n\r\n                    length = path.text;\r\n                    path.lines = arcLines;\r\n                    arcLines = [];\r\n                    arcLength = 0;\r\n                    this.state[\"polygons\"][key].data[2].data.push(\r\n                      JSON.parse(JSON.stringify(path))\r\n                    );\r\n                    this.state[\"polygons\"][key].data[2].data[\r\n                      this.state[\"polygons\"][key].data[2].data.length - 1\r\n                    ].centroid = path.getExtent().getCenter();\r\n                  } else {\r\n                    path.hide = true;\r\n                    arcLength += length;\r\n                    arcPoints.push(point1);\r\n                    path = new esriModules.Polyline(path);\r\n                    var polyline = new esriModules.Polyline(path);\r\n                    path.centroid = polyline.getExtent().getCenter();\r\n                    arcLines.push(new esriModules.Polyline(path));\r\n                  }\r\n                }\r\n                if (\r\n                  isPointOrArc(\r\n                    point1,\r\n                    key,\r\n                    this.state.cadResults.cadFeatures\r\n                  ) &&\r\n                  isPointOrArc(point2, key, this.state.cadResults.cadFeatures)\r\n                ) {\r\n                  if (\r\n                    this.state.cadResults.boundryFeaturesLen &&\r\n                    this.state.cadResults.boundryFeaturesLen.length &&\r\n                    this.state.cadResults.boundryFeaturesLen.length > 0\r\n                  ) {\r\n                    //\r\n                    var line = getLineLength(\r\n                      this.state.cadResults.boundryFeaturesLen,\r\n                      point1,\r\n                      point2,\r\n                      this.state.cadResults.isArc\r\n                    );\r\n\r\n                    if (line) path.text = line.length;\r\n\r\n                    length = path.text;\r\n                  }\r\n                  this.state[\"polygons\"][key].data[2].data.push(\r\n                    JSON.parse(JSON.stringify(path))\r\n                  );\r\n                }\r\n\r\n                var polyline = new esriModules.Polyline(path);\r\n\r\n                if (\r\n                  !this.state[\"polygons\"][key].minLineLen ||\r\n                  this.state[\"polygons\"][key].minLineLen > length\r\n                )\r\n                  this.state[\"polygons\"][key].minLineLen = length;\r\n\r\n                var pt = polyline.getExtent().getCenter();\r\n\r\n                if (\r\n                  !(\r\n                    isPointOrArc(\r\n                      point1,\r\n                      key,\r\n                      this.state.cadResults.cadFeatures\r\n                    ) &&\r\n                    isPointOrArc(point2, key, this.state.cadResults.cadFeatures)\r\n                  )\r\n                ) {\r\n                  if (\r\n                    isPointOrArc(point2, key, this.state.cadResults.cadFeatures)\r\n                  ) {\r\n                    if (arcPoints.length)\r\n                      pt = arcPoints[Math.floor(arcPoints.length / 2)];\r\n                  }\r\n                }\r\n\r\n                if (\r\n                  isPointOrArc(\r\n                    point1,\r\n                    key,\r\n                    this.state.cadResults.cadFeatures\r\n                  ) &&\r\n                  isPointOrArc(point2, key, this.state.cadResults.cadFeatures)\r\n                ) {\r\n                  this.state[\"polygons\"][key].data[2].data[\r\n                    this.state[\"polygons\"][key].data[2].data.length - 1\r\n                  ].centroid = pt;\r\n                }\r\n\r\n                addGraphicToLayer(\r\n                  polyline,\r\n                  this.map,\r\n                  \"boundriesGraphicLayer\",\r\n                  [0, 0, 255, 0.1],\r\n                  null,\r\n                  null,\r\n                  (param) => {\r\n                    zoomToLayer(\"boundriesGraphicLayer\", this.map, 10);\r\n                    //resizeMap(this.map);\r\n                  }\r\n                );\r\n\r\n                if (pt.length) {\r\n                  pt.x = pt[0];\r\n                  pt.y = pt[1];\r\n                }\r\n\r\n                var attr = {\r\n                  text: length, //.toFixed(2),\r\n                  angle: getPacrelNoAngle({ geometry: polygon }),\r\n                };\r\n\r\n                // because there were similarity between points in fraction part 123.4567 , 123.4512\r\n                if (\r\n                  !(\r\n                    pointsLength.indexOf(\r\n                      pt.x.toFixed(4) + \",\" + pt.y.toFixed(4)\r\n                    ) > -1\r\n                  )\r\n                ) {\r\n                  if (\r\n                    isPointOrArc(\r\n                      point1,\r\n                      key,\r\n                      this.state.cadResults.cadFeatures\r\n                    ) &&\r\n                    isPointOrArc(point2, key, this.state.cadResults.cadFeatures)\r\n                  ) {\r\n                    pointsLength.push(pt.x.toFixed(4) + \",\" + pt.y.toFixed(4));\r\n\r\n                    addParcelNo(\r\n                      pt,\r\n                      this.map,\r\n                      \"\" + length.toFixed(2) + \"\",\r\n                      \"editlengthGraphicLayer\",\r\n                      lineLengthFont,\r\n                      null,\r\n                      getPacrelNoAngle({ geometry: polygon }),\r\n                      null,\r\n                      attr\r\n                    );\r\n                  } else if (\r\n                    isPointOrArc(point2, key, this.state.cadResults.cadFeatures)\r\n                  ) {\r\n                    if (arcPoints.length)\r\n                      pt = arcPoints[Math.floor(arcPoints.length / 2)];\r\n                    addParcelNo(\r\n                      pt,\r\n                      this.map,\r\n                      \"\" + length.toFixed(2) + \"\",\r\n                      \"editlengthGraphicLayer\",\r\n                      lineLengthFont,\r\n                      null,\r\n                      getPacrelNoAngle({ geometry: polygon }),\r\n                      null,\r\n                      attr\r\n                    );\r\n                  }\r\n                }\r\n\r\n                if (\r\n                  isPointOrArc(point2, key, this.state.cadResults.cadFeatures)\r\n                ) {\r\n                  arcPoints = [];\r\n                }\r\n              }\r\n\r\n              if (elem.outRange) {\r\n                this.state[\"outRange\"] = true;\r\n              }\r\n              if (elem.notify) {\r\n                //\r\n                this.state[\"isConfirmed\"] = false;\r\n                this.state[\"hasNotify\"] = true;\r\n                addGraphicToLayer(\r\n                  polygon,\r\n                  this.map,\r\n                  \"addedParclGraphicLayer\",\r\n                  null,\r\n                  [255, 0, 0, 0.6]\r\n                );\r\n              } else {\r\n                addGraphicToLayer(\r\n                  polygon,\r\n                  this.map,\r\n                  \"addedParclGraphicLayer\",\r\n                  [0, 0, 255, 0.8],\r\n                  null,\r\n                  true\r\n                );\r\n              }\r\n\r\n              if (this.state[\"reqType\"] != \"duplex\") {\r\n                this.state[\"polygons\"][key].parcel_nameHidden =\r\n                  this.state[\"polygons\"].length +\r\n                  \" \" +\r\n                  t(\"labels:PARCELCOUNTERDRAGREV\");\r\n                console.log(\"---P----\");\r\n                addParcelNo(\r\n                  polygon.getExtent().getCenter(),\r\n                  this.map,\r\n                  convertToArabic(\r\n                    setParcelName([\r\n                      this.state[`parcel_name${key}`],\r\n                      this.state[\"parcelSliceNo\" + key],\r\n                    ])\r\n                  ),\r\n                  \"PacrelUnNamedGraphicLayer\",\r\n                  parcelNumberFont,\r\n                  [0, 0, 0],\r\n                  getPacrelNoAngle({ geometry: polygon })\r\n                );\r\n              } else {\r\n                this.state[\"polygons\"][key].parcel_nameHidden =\r\n                  this.state[\"polygons\"].length +\r\n                  \" \" +\r\n                  t(\"labels:DUPLIXCOUNTERDRAGREV\");\r\n                console.log(\"---T----\");\r\n                addParcelNo(\r\n                  polygon.getExtent().getCenter(),\r\n                  this.map,\r\n                  convertToArabic(\r\n                    setParcelName([\r\n                      this.state[`parcel_name${key}`],\r\n                      this.state[\"parcelSliceNo\" + key],\r\n                    ])\r\n                  ),\r\n                  \"PacrelUnNamedGraphicLayer\",\r\n                  parcelNumberFont,\r\n                  [0, 0, 0],\r\n                  getPacrelNoAngle({ geometry: polygon })\r\n                );\r\n              }\r\n            }\r\n\r\n            // const {\r\n            //   mainObject: {\r\n            //     tadkek_data_Msa7y: {\r\n            //       tadkek_msa7yData: { requestType },\r\n            //     },\r\n            //   },\r\n            // } = this.props;\r\n            let tadkekMainObject = selectMainObject(this.props);\r\n\r\n            if (\r\n              this.state[\"polygons\"].length ==\r\n              this.state.cadResults.shapeFeatures.length\r\n            ) {\r\n              if (requestType == 1 && this.state[\"polygons\"].length < 2) {\r\n                this.state[\"outRange\"] = true;\r\n\r\n                this.state[\"polygons\"].forEach((polygon) => {\r\n                  polygon.notify = \"mapview.parcels.FarzNotify\";\r\n                });\r\n                this.state[\"hasNotify\"] = true;\r\n                this.state[\"isConfirmed\"] = false;\r\n              } else if (\r\n                requestType == 2 &&\r\n                this.state[\"polygons\"].length > 1\r\n              ) {\r\n                this.state[\"outRange\"] = true;\r\n\r\n                this.state[\"polygons\"].forEach((polygon) => {\r\n                  polygon.notify = \"mapview.parcels.DamgNotify\";\r\n                });\r\n                this.state[\"hasNotify\"] = true;\r\n                this.state[\"isConfirmed\"] = false;\r\n              }\r\n\r\n              // check if suggest polygon has same PARCEL_SPAITAL_ID\r\n              this.state[\"polygons\"].forEach((polygon) => {\r\n                var polygonSpatialId = GetSpatialId(polygon.polygon);\r\n\r\n                tadkekMainObject.landData.landData.lands.parcels.forEach(\r\n                  (identifyPolygon) => {\r\n                    if (\r\n                      identifyPolygon.attributes.PARCEL_SPATIAL_ID ==\r\n                      polygonSpatialId\r\n                    ) {\r\n                      this.state[\"outRange\"] = true;\r\n                      this.state[\"isConfirmed\"] = false;\r\n                      this.state[\"hasNotify\"] = true;\r\n                      polygon.notify = \"mapview.parcels.HASSAMESPATIALID\";\r\n                      addGraphicToLayer(\r\n                        polygon.polygon,\r\n                        this.map,\r\n                        \"addedParclGraphicLayer\",\r\n                        null,\r\n                        [255, 0, 0, 0.6]\r\n                      );\r\n                    }\r\n                  }\r\n                );\r\n              });\r\n\r\n              this.state[\"demSaveDraft\"] = false;\r\n\r\n              if (!this.state[\"hasNotify\"]) {\r\n                clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n\r\n                this.state[\"polygons\"].forEach((elem, key) => {\r\n                  addGraphicToLayer(\r\n                    elem.polygon,\r\n                    this.map,\r\n                    \"addedParclGraphicLayer\",\r\n                    [0, 0, 255, 0.8],\r\n                    null,\r\n                    true\r\n                  );\r\n                });\r\n\r\n                zoomToIdentifyParcel(this.map);\r\n              }\r\n\r\n              this.confirmNotify(this.state[\"hideDrag\"]);\r\n              checkParcelAdjacents(\r\n                tadkekMainObject.landData.landData.lands.parcels,\r\n                false\r\n              );\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (\r\n      !isEqual(nextProps.input.value, this.props.input.value) ||\r\n      !isEqual(nextProps.lang, this.props.lang) ||\r\n      !isEqual(nextProps.forceUpdate, this.props.forceUpdate)\r\n    );\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  settoStore(polygons) {\r\n    const { mun } = this.state;\r\n    const { input, inputs } = this.props;\r\n\r\n    if (polygons && polygons.length) {\r\n      var obj = {};\r\n      polygons.forEach((element, key) => {\r\n        obj[\"westBoundries\" + key] = this.state[\"westBoundries\" + key];\r\n        obj[\"southBoundries\" + key] = this.state[\"southBoundries\" + key];\r\n        obj[\"northBoundries\" + key] = this.state[\"northBoundries\" + key];\r\n        obj[\"eastBoundries\" + key] = this.state[\"eastBoundries\" + key];\r\n\r\n        inputs?.north?.forEach((input, index) => {\r\n          obj[input.name + key] = this.state[input.name + key];\r\n        });\r\n        inputs?.east?.forEach((input, index) => {\r\n          obj[input.name + key] = this.state[input.name + key];\r\n        });\r\n        inputs?.west?.forEach((input, index) => {\r\n          obj[input.name + key] = this.state[input.name + key];\r\n        });\r\n        inputs?.south?.forEach((input, index) => {\r\n          obj[input.name + key] = this.state[input.name + key];\r\n        });\r\n\r\n        obj[\"area\" + key] = this.state[\"area\" + key];\r\n        obj[\"parcelSliceNo\" + key] = this.state[\"parcelSliceNo\" + key];\r\n\r\n        obj[\"parcel_name\" + key] = this.state[\"parcel_name\" + key];\r\n        obj[\"duplixType\" + key] = this.state[\"duplixType\" + key] || \"\";\r\n      });\r\n    }\r\n\r\n    var inputChanged = {\r\n      suggestionsParcels: polygons,\r\n      planDescription: this.state.planDescription,\r\n      mun: mun,\r\n      temp: {\r\n        cadResults:\r\n          input.value.cadData ||\r\n          this.state.cadResults ||\r\n          (input.value.temp && input.value.temp.cadResults) ||\r\n          undefined,\r\n        notify:\r\n          input.value.notify ||\r\n          this.state.notify ||\r\n          (input.value.temp && input.value.temp.notify) ||\r\n          false,\r\n        hideDrag:\r\n          input.value.hideDrag ||\r\n          this.state.hideDrag ||\r\n          (input.value.temp && input.value.temp.hideDrag) ||\r\n          false,\r\n        hasNotify:\r\n          this.state[\"hasNotify\"] ||\r\n          (input.value.temp && input.value.temp.hasNotify) ||\r\n          false,\r\n        isConfirmed:\r\n          this.state[\"isConfirmed\"] ||\r\n          (input.value.temp && input.value.temp.isConfirmed) ||\r\n          false,\r\n        outRange:\r\n          this.state[\"outRange\"] ||\r\n          (input.value.temp && input.value.temp.outRange) ||\r\n          false,\r\n        isFarz: true,\r\n        ...obj,\r\n      },\r\n    };\r\n    input.onChange({ ...inputChanged });\r\n    // hasNotify, hideDrag, outRange\r\n    this.setState({\r\n      polygons: polygons,\r\n      hasNotify: this.state[\"hasNotify\"],\r\n      hideDrag: this.state[\"hideDrag\"],\r\n      outRange: this.state[\"outRange\"],\r\n      ...obj,\r\n    });\r\n  }\r\n\r\n  // redrawNames = (polygon, map, index) => {\r\n  //\r\n  //   console.log(\"---r----\");\r\n  //   let { parcelNumberFont } = this.state;\r\n  //   if (polygon) {\r\n  //     var filteredGraphic = map\r\n  //       .getLayer(\"PacrelUnNamedGraphicLayer\")\r\n  //       .graphics.find(\r\n  //         (graphic) =>\r\n  //           graphic.geometry.x == polygon.position.x &&\r\n  //           graphic.geometry.y == polygon.position.y\r\n  //       );\r\n  //     if (filteredGraphic) {\r\n  //       map.getLayer(\"PacrelUnNamedGraphicLayer\").remove(filteredGraphic);\r\n  //       var name =\r\n  //         convertToArabic(\r\n  //           setParcelName([\r\n  //             this.state[\"parcelSliceNo\" + index],\r\n  //             this.state[`parcel_name${index}`],\r\n  //           ])\r\n  //         ) || polygon.parcel_nameHidden;\r\n\r\n  //       if (name && name.indexOf(\"حدود المعاملة\") >= -1) {\r\n  //         addParcelNo(\r\n  //           polygon.position,\r\n  //           map,\r\n  //           \"\" + name + \"\",\r\n  //           \"PacrelUnNamedGraphicLayer\",\r\n  //           parcelNumberFont,\r\n  //           [0, 0, 0],\r\n  //           getPacrelNoAngle({ geometry: polygon.polygon })\r\n  //         );\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  resetStore() {\r\n    const { mun } = this.state;\r\n    const { input, inputs } = this.props;\r\n\r\n    var obj = {};\r\n    if (this.state.polygons && this.state.polygons.length) {\r\n      this.state.polygons.forEach((element, key) => {\r\n        obj[\"westBoundries\" + key] = \"\";\r\n        obj[\"southBoundries\" + key] = \"\";\r\n        obj[\"northBoundries\" + key] = \"\";\r\n        obj[\"eastBoundries\" + key] = \"\";\r\n        inputs?.north?.forEach((input, index) => {\r\n          obj[input.name + key] = \"\";\r\n        });\r\n        inputs?.east?.forEach((input, index) => {\r\n          obj[input.name + key] = \"\";\r\n        });\r\n        inputs?.west?.forEach((input, index) => {\r\n          obj[input.name + key] = \"\";\r\n        });\r\n        inputs?.south?.forEach((input, index) => {\r\n          obj[input.name + key] = \"\";\r\n        });\r\n        obj[\"area\" + key] = \"\";\r\n        obj[\"parcelSliceNo\" + key] = \"\";\r\n        obj[\"parcel_name\" + key] = \"\";\r\n        obj[\"duplixType\" + key] = \"\";\r\n      });\r\n    }\r\n    var polygons = [];\r\n    this.setState({\r\n      polygons: polygons,\r\n      hasNotify: false,\r\n      notify: false,\r\n      hideDrag: false,\r\n      outRange: false,\r\n      isConfirmed: true,\r\n      ...obj,\r\n    });\r\n\r\n    var inputChanged = {\r\n      suggestionsParcels: polygons,\r\n      planDescription: \"\",\r\n      mun: mun,\r\n      temp: {\r\n        cadResults: undefined,\r\n        notify: false,\r\n        hasNotify: false,\r\n        hideDrag: false,\r\n        isFarz: true,\r\n        isConfirmed: true,\r\n        ...obj,\r\n      },\r\n    };\r\n\r\n    this.props.input.onChange({ ...inputChanged });\r\n  }\r\n\r\n  clearInputs = () => {\r\n    const { inputs } = this.props;\r\n    if (this.state.polygons && this.state.polygons.length) {\r\n      this.state.polygons.forEach((polygon, index) => {\r\n        this.state[\"westBoundries\" + index] = [];\r\n        this.state[\"northBoundries\" + index] = [];\r\n        this.state[\"eastBoundries\" + index] = [];\r\n        this.state[\"southBoundries\" + index] = [];\r\n        inputs?.north?.forEach((input, key) => {\r\n          this.state[input.name + index] = \"\";\r\n        });\r\n        inputs?.east?.forEach((input, key) => {\r\n          this.state[input.name + index] = \"\";\r\n        });\r\n        inputs?.west?.forEach((input, key) => {\r\n          this.state[input.name + index] = \"\";\r\n        });\r\n        inputs?.south?.forEach((input, key) => {\r\n          this.state[input.name + index] = \"\";\r\n        });\r\n        this.state[\"area\" + index] = \"\";\r\n        this.state[\"parcelSliceNo\" + index] = \"\";\r\n        this.state[\"parcel_name\" + index] = \"\";\r\n        this.state[\"duplixType\" + index] = \"\";\r\n      });\r\n    }\r\n\r\n    this.state[\"have_electric_room\"] = false;\r\n    this.state[\"electric_room_area\"] = \"\";\r\n\r\n    this.state.polygons = [];\r\n    this.state.pointsLength = [];\r\n    this.state.cadFiles = {};\r\n    this.state.layerParcels = [];\r\n    this.state.planDescription = \"\";\r\n    this.state.activeKey = \"1\";\r\n  };\r\n\r\n  resetMap = () => {\r\n    if (this?.map?.graphicsLayerIds) {\r\n      this.map.graphicsLayerIds.forEach((layerName, index) => {\r\n        clearGraphicFromLayer(this.map, layerName);\r\n      });\r\n    }\r\n\r\n    this.map?.setExtent(\r\n      new esri.geometry.Extent({\r\n        xmin: 351074.79384063353,\r\n        ymin: 2908411.351837893,\r\n        xmax: 461736.99433170113,\r\n        ymax: 2947768.2013849253,\r\n        spatialReference: {\r\n          wkid: 32639,\r\n        },\r\n      })\r\n    );\r\n\r\n    this.resetStore();\r\n  };\r\n\r\n  checkIntersectionOfParcels = () => {\r\n    const {\r\n      landData: {\r\n        landData: {\r\n          lands: { parcels },\r\n        },\r\n      },\r\n    } = selectMainObject(this.props);\r\n\r\n    let isDataDrawn = false;\r\n    getInfo().then((res) => {\r\n      this.LayerID = res;\r\n      let outRange = 0;\r\n\r\n      this.state?.cadResults?.shapeFeatures?.forEach((feature) => {\r\n        var polygonJson = {\r\n          rings: feature.rings,\r\n          spatialReference: feature.spatialReference,\r\n        };\r\n        var polygon = new esri.geometry.Polygon(polygonJson);\r\n        this.addParcelToSelect(polygon).then((res) => {\r\n          if (res.features) {\r\n            let isParcelExist = false;\r\n\r\n            res.features.map((feature) => {\r\n              isParcelExist =\r\n                parcels.filter((parcel) => {\r\n                  return (\r\n                    feature.attributes.PARCEL_PLAN_NO ==\r\n                      parcel.attributes.PARCEL_PLAN_NO &&\r\n                    feature.attributes.PARCEL_SPATIAL_ID ==\r\n                      parcel.attributes.PARCEL_SPATIAL_ID\r\n                  );\r\n                }).length > 0;\r\n\r\n              if (isParcelExist && !isDataDrawn) {\r\n                isDataDrawn = true;\r\n                this.buildCADDetails();\r\n              }\r\n            });\r\n\r\n            if (!isDataDrawn) {\r\n              outRange++;\r\n              if (outRange == this.state.cadResults.shapeFeatures.length) {\r\n                this.settoStore([]);\r\n                window.notifySystem(\r\n                  \"error\",\r\n                  `الكاد المرفق لا يتقاطع مع الأراضي المختارة، يرجي التأكد من إحداثيات الكاد المرفق`\r\n                );\r\n              }\r\n            }\r\n          }\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    const { input } = this.props;\r\n    if (input.value && input.value != \"\" && input.value.justInvoked) {\r\n      this.InvokedToAdParcel = true;\r\n      input.value.justInvoked = false;\r\n      this.isLoaded = false;\r\n      this.map = getMap();\r\n      if (this.map) {\r\n        this.clearInputs();\r\n        this.toLoadLines = true;\r\n        this.state.cadResults = input.value.cadData || undefined;\r\n        this.state.hasNotify = input.value.notify || false;\r\n        this.state.hideDrag = input.value.hideDrag || false;\r\n\r\n        if (this.state.cadResults) {\r\n          this.state.cadResults.shapeFeatures.map((parcel, index) => {\r\n            this.state[\"northBoundries\" + index] = \"\";\r\n            this.state[\"southBoundries\" + index] = \"\";\r\n            this.state[\"eastBoundries\" + index] = \"\";\r\n            this.state[\"westBoundries\" + index] = \"\";\r\n          });\r\n\r\n          this.checkIntersectionOfParcels();\r\n        } else {\r\n          this.resetMap();\r\n        }\r\n      }\r\n    } else if (this.isLoaded) {\r\n      this.map = getMap();\r\n      if (getIsMapLoaded()) {\r\n        setIsMapLoaded(false);\r\n\r\n        this.toLoadLines = true;\r\n        this.InvokedToAdParcel = false;\r\n        if (this.props.mainObject?.data_msa7y?.msa7yData?.cadDetails) {\r\n          const {\r\n            mainObject: {\r\n              data_msa7y: {\r\n                msa7yData: {\r\n                  cadDetails: { suggestionsParcels, temp },\r\n                },\r\n              },\r\n            },\r\n          } = this.props;\r\n\r\n          if (suggestionsParcels && suggestionsParcels.length) {\r\n            suggestionsParcels.forEach((polygon, key) => {\r\n              this.state[\"duplixType\" + key] = temp[\"duplixType\" + key];\r\n            });\r\n          }\r\n        }\r\n\r\n        this.checkIntersectionOfParcels();\r\n\r\n        this.isLoaded = false;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getParcelAdjacents = (parcels) => {\r\n    getInfo().then((res) => {\r\n      this.LayerID = res;\r\n      var token = \"\";\r\n      if (window.esriToken) token = \"?token=\" + window.esriToken;\r\n      var flayer = new esri.layers.FeatureLayer(\r\n        mapUrl + \"/\" + this.LayerID.Landbase_Parcel + token,\r\n        {\r\n          outFields: [\"*\"],\r\n        }\r\n      );\r\n\r\n      this.besideParcels = [];\r\n      let i = 0;\r\n      if (parcels) {\r\n        var query = new esri.tasks.Query();\r\n        query.objectIds = parcels.map((feature) => feature.attributes.OBJECTID);\r\n        query.outFields = [\"*\"];\r\n        flayer.queryFeatures(query, (featureSet) => {\r\n          featureSet.features.forEach((parcel) => {\r\n            this.addParcelToSelect(parcel.geometry).then((res) => {\r\n              i++;\r\n              Array.prototype.push.apply(this.besideParcels, res.features);\r\n              if (featureSet.features.length == i) {\r\n                this.initAddParcelNo([\r\n                  ...new Map(\r\n                    this.besideParcels\r\n                      .filter((queryParcel) => {\r\n                        return (\r\n                          featureSet.features.filter((fsFeature) => {\r\n                            return (\r\n                              queryParcel.attributes.OBJECTID ==\r\n                              fsFeature.attributes.OBJECTID\r\n                            );\r\n                          }).length == 0\r\n                        );\r\n                      })\r\n                      .map((item) => [item[\"attributes\"][\"OBJECTID\"], item])\r\n                  ).values(),\r\n                ]);\r\n              }\r\n            });\r\n          });\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  duplixTypeChange = (selectedType, polygon, key, evt) => {\r\n    polygon[\"duplixType\"] = selectedType;\r\n    this.state[\"duplixType\" + key] = selectedType;\r\n\r\n    var minLength = 0;\r\n    polygon.data.forEach((val, key) => {\r\n      if (\r\n        (minLength > parseFloat(val.totalLength) || minLength == 0) &&\r\n        val.name != \"main\"\r\n      ) {\r\n        minLength = val.totalLength;\r\n      }\r\n    });\r\n\r\n    if (selectedType == \"splited\") {\r\n      if (minLength < 11.5) {\r\n        polygon.cantSplitedOrMarged = true;\r\n        polygon.errorInDuplixType = true;\r\n        polygon.errorMsgForDuplixType =\r\n          \"لا يمكنك أختيار فلل منفصلة لان طول أقل ضلع فى هذه الدوبلكس أقل من 11.5 متر\";\r\n      } else {\r\n        polygon.cantSplitedOrMarged = false;\r\n        polygon.errorInDuplixType = false;\r\n        polygon.errorMsgForDuplixType = \"\";\r\n      }\r\n    } else if (selectedType == \"marged\") {\r\n      if (minLength < 9.5) {\r\n        polygon.cantSplitedOrMarged = true;\r\n        polygon.errorInDuplixType = true;\r\n        polygon.errorMsgForDuplixType =\r\n          \"لا يمكنك أختيار فلل متصلة لان طول أقل ضلع فى هذه الدوبلكس أقل من 9.5 متر\";\r\n      } else {\r\n        polygon.cantSplitedOrMarged = false;\r\n        polygon.errorInDuplixType = false;\r\n        polygon.errorMsgForDuplixType = \"\";\r\n      }\r\n    } else {\r\n      polygon.errorInDuplixType = false;\r\n      polygon.errorMsgForDuplixType = \"\";\r\n    }\r\n\r\n    if (!isEmpty(polygon.errorMsgForDuplixType))\r\n      window.notifySystem(\"error\", `${polygon.errorMsgForDuplixType}`);\r\n\r\n    this.state.polygons[key] = polygon;\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  onInputTextChange = (polygon, key, evt) => {\r\n    polygon[evt.target.name] = evt.target.value;\r\n    console.log(polygon);\r\n    this.state[evt.target.name + key] = evt.target.value;\r\n    this.state.polygons[key] = polygon;\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  onParcelTextChange = (polygon, key, evt) => {\r\n    this.state[evt.target.name + key] = evt.target.value;\r\n\r\n    polygon.parcel_name = setParcelName([\r\n      this.state[`parcel_name${key}`],\r\n      this.state[\"parcelSliceNo\" + key],\r\n    ]);\r\n    polygon.parcelNameRight = this.state[`parcel_name${key}`];\r\n    polygon.parcelNameLeft = this.state[\"parcelSliceNo\" + key];\r\n\r\n    this.state.polygons[key] = polygon;\r\n    redrawNames(\r\n      this.state.polygons[key],\r\n      this.map,\r\n      setParcelName([\r\n        this.state[`parcel_name${key}`],\r\n        this.state[\"parcelSliceNo\" + key],\r\n      ]),\r\n      \"PacrelUnNamedGraphicLayer\",\r\n      key\r\n    );\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  onChange = (activeKey) => {\r\n    if (this.state.polygons[+activeKey - 1].data) {\r\n      this.setState({\r\n        activeKey,\r\n        [`duplixType${+activeKey - 1}`]:\r\n          this.state.polygons[+activeKey - 1].duplixType,\r\n        [\"westBoundries\" + (+activeKey - 1)]: this.state.polygons[\r\n          +activeKey - 1\r\n        ].data[3].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"west_\" + i}`,\r\n            content: item.text,\r\n            data: item,\r\n          };\r\n        }),\r\n        [\"northBoundries\" + (+activeKey - 1)]: this.state.polygons[\r\n          +activeKey - 1\r\n        ].data[0].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"north_\" + i}`,\r\n            content: item.text,\r\n\r\n            data: item,\r\n          };\r\n        }),\r\n        [\"eastBoundries\" + (+activeKey - 1)]: this.state.polygons[\r\n          +activeKey - 1\r\n        ].data[1].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"east_\" + i}`,\r\n            content: item.text,\r\n\r\n            data: item,\r\n          };\r\n        }),\r\n        [\"southBoundries\" + (+activeKey - 1)]: this.state.polygons[\r\n          +activeKey - 1\r\n        ].data[4].data.map((item, i) => {\r\n          return {\r\n            id: `item-${\"south_\" + i}`,\r\n            content: item.text,\r\n            data: item,\r\n          };\r\n        }),\r\n      });\r\n    } else {\r\n      this.setState({ activeKey });\r\n    }\r\n  };\r\n\r\n  onmouseover = (item) => {\r\n    var polyline = new esri.geometry.Polyline(item);\r\n    highlightFeature(polyline, this.map, {\r\n      layerName: \"highlightBoundriesGraphicLayer\",\r\n      fillColor: item.color,\r\n    });\r\n  };\r\n\r\n  onmouseleave = () => {\r\n    clearGraphicFromLayer(this.map, \"highlightBoundriesGraphicLayer\");\r\n  };\r\n\r\n  onElectricInputChange = (stateName, evt) => {\r\n    this.state[stateName] =\r\n      evt.target.type == \"checkbox\" ? evt.target.checked : evt.target.value;\r\n    this.settoStore(this.state.polygons);\r\n  };\r\n\r\n  render() {\r\n    const { planDescription, reqType, hasNotify, hideDrag, outRange } =\r\n      this.state;\r\n    const {\r\n      mainObject: {\r\n        tadkek_data_Msa7y: {\r\n          tadkek_msa7yData: { requestType },\r\n        },\r\n      },\r\n      isView,\r\n      inputs,\r\n      t,\r\n    } = this.props;\r\n\r\n    const {\r\n      landData: {\r\n        landData: {\r\n          lands: { parcels },\r\n        },\r\n      },\r\n    } = selectMainObject(this.props);\r\n    //return <></>;\r\n    return (\r\n      <>\r\n        {!isView && (\r\n          <div>\r\n            <div className=\"col-md-12\">\r\n              {hasNotify && (\r\n                <div\r\n                  className=\"col-md-12\"\r\n                  style={{\r\n                    border: \"2px solid #FFA423\",\r\n                    height: \"400px\",\r\n                    borderRadius: \"10px\",\r\n                    background: \"#F2DEDE\",\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      overflowY: \"auto\",\r\n                      maxHeight: \"320px\",\r\n                      height: \"320px\",\r\n                    }}\r\n                  >\r\n                    {this.state.polygons.map((parcel, index) => {\r\n                      return (\r\n                        <>\r\n                          {parcel.notify && (\r\n                            <div\r\n                              onMouseOver={this.higlightNotify.bind(\r\n                                this,\r\n                                parcel.polygon\r\n                              )}\r\n                              onMouseLeave={this.clearHighlightNotify.bind(\r\n                                this\r\n                              )}\r\n                            >\r\n                              <i\r\n                                className=\"fa fa-exclamation-triangle pulse\"\r\n                                style={{\r\n                                  float: \"right\",\r\n                                  margin: \"7px\",\r\n                                  marginTop: \"10px\",\r\n                                  fontSize: \"35px\",\r\n                                  color: \"#E74C3C\",\r\n                                }}\r\n                              ></i>\r\n                              <p\r\n                                className=\"bg-danger\"\r\n                                style={{\r\n                                  padding: \"5px\",\r\n                                  background: \"#EFC2C2\",\r\n                                }}\r\n                              >\r\n                                {\" \"}\r\n                                {t(`cadData:${parcel.notify}`)}\r\n                              </p>\r\n                            </div>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  {/* <div className=\"text-center\">\r\n                    {!outRange && (\r\n                      <input\r\n                        className=\"btn btn-primary small-font\"\r\n                        type=\"button\"\r\n                        name=\"name\"\r\n                        value={t(\"modals:Confirm\")}\r\n                        onClick={this.confirmNotify.bind(this, false)}\r\n                      />\r\n                    )}\r\n                    <input\r\n                      className=\"btn btn-danger small-font\"\r\n                      type=\"button\"\r\n                      name=\"name\"\r\n                      value={t(\"modals:Reject\")}\r\n                      onClick={this.cancelNotify.bind(this)}\r\n                    />\r\n                  </div> */}\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"col-md-12\">\r\n              <div>\r\n                {planDescription != \"\" && (\r\n                  <p style={{ textAlign: \"right\", fontSize: \"18px\" }}>\r\n                    {planDescription}\r\n                  </p>\r\n                )}\r\n              </div>\r\n              <div>\r\n                {!hasNotify &&\r\n                  this.state.polygons &&\r\n                  this.state.polygons.length > 0 &&\r\n                  this.state.polygons[0].area != -1 && (\r\n                    <Tabs\r\n                      style={{ marginTop: \"30px\" }}\r\n                      tabPosition=\"top\"\r\n                      type=\"card\"\r\n                      activeKey={this.state.activeKey}\r\n                      onChange={this.onChange}\r\n                    >\r\n                      {this.state.polygons.map((polygon, key) => {\r\n                        return (\r\n                          <TabPane\r\n                            tab={convertToArabic(\r\n                              polygon.parcel_name ||\r\n                                ([34].indexOf(this.props.currentModule.id) !=\r\n                                  -1 ||\r\n                                [1949, 2048].indexOf(\r\n                                  this.props.currentModule.record.workflow_id\r\n                                ) != -1\r\n                                  ? `دوبلكس رقم${key + 1}`\r\n                                  : `أرض رقم${key + 1}`)\r\n                            )}\r\n                            key={key + 1}\r\n                          >\r\n                            {key == this.state[\"activeKey\"] - 1 && (\r\n                              <div key={key}>\r\n                                <div>\r\n                                  المساحة الكلية :{\" \"}\r\n                                  {convertToArabic((+polygon.area).toFixed(2))}{\" \"}\r\n                                  م{convertToArabic(2)}\r\n                                </div>\r\n\r\n                                {inputs && (\r\n                                  <DragDropContext onDragEnd={this.onDragEnd}>\r\n                                    <div style={itemContainerNorth}>\r\n                                      <p\r\n                                        style={{\r\n                                          textAlign: \"center\",\r\n                                          fontSize: \"18px\",\r\n                                        }}\r\n                                      >\r\n                                        الشمال\r\n                                      </p>\r\n\r\n                                      {inputs?.north?.map((input, index) => {\r\n                                        return (\r\n                                          <input\r\n                                            name={input.name}\r\n                                            type={input.type || \"text\"}\r\n                                            className=\"ant-input\"\r\n                                            placeholder={input.placeholder}\r\n                                            required=\"required\"\r\n                                            value={this.state[input.name + key]}\r\n                                            onChange={this.onInputTextChange.bind(\r\n                                              this,\r\n                                              polygon,\r\n                                              key\r\n                                            )}\r\n                                          />\r\n                                        );\r\n                                      })}\r\n\r\n                                      <Droppable droppableId=\"droppable_North\">\r\n                                        {(provided, snapshot) => (\r\n                                          <div\r\n                                            ref={provided.innerRef}\r\n                                            style={getListStyle(\r\n                                              snapshot.isDraggingOver\r\n                                            )}\r\n                                          >\r\n                                            {this.state[\r\n                                              \"northBoundries\" + key\r\n                                            ] &&\r\n                                              this.state[\r\n                                                \"northBoundries\" + key\r\n                                              ].map((item, index) => (\r\n                                                <Draggable\r\n                                                  key={item.id}\r\n                                                  draggableId={item.id}\r\n                                                  index={index}\r\n                                                >\r\n                                                  {(provided, snapshot) => (\r\n                                                    <div\r\n                                                      ref={provided.innerRef}\r\n                                                      {...provided.draggableProps}\r\n                                                      {...provided.dragHandleProps}\r\n                                                      style={getItemStyle(\r\n                                                        snapshot.isDragging,\r\n                                                        provided.draggableProps\r\n                                                          .style\r\n                                                      )}\r\n                                                      onMouseOver={this.onmouseover.bind(\r\n                                                        this,\r\n                                                        item.data\r\n                                                      )}\r\n                                                      onMouseLeave={this.onmouseleave.bind(\r\n                                                        this\r\n                                                      )}\r\n                                                    >\r\n                                                      {convertToArabic(\r\n                                                        item.content &&\r\n                                                          (+item.content)?.toFixed(\r\n                                                            2\r\n                                                          )\r\n                                                      )}\r\n                                                    </div>\r\n                                                  )}\r\n                                                </Draggable>\r\n                                              ))}\r\n                                            {provided.placeholder}\r\n                                          </div>\r\n                                        )}\r\n                                      </Droppable>\r\n                                      <p\r\n                                        style={{\r\n                                          float: \"left\",\r\n                                          textAlign: \"left\",\r\n                                          fontSize: \"20px\",\r\n                                        }}\r\n                                      >\r\n                                        طول الحد :{\" \"}\r\n                                        {convertToArabic(\r\n                                          polygon.data[0].totalLength &&\r\n                                            (+polygon.data[0]\r\n                                              .totalLength).toFixed(2)\r\n                                        )}\r\n                                      </p>\r\n                                    </div>\r\n\r\n                                    <div style={{ display: \"flex\" }}>\r\n                                      <div style={itemContainerEast}>\r\n                                        <p\r\n                                          style={{\r\n                                            textAlign: \"center\",\r\n                                            fontSize: \"18px\",\r\n                                          }}\r\n                                        >\r\n                                          الشرق\r\n                                        </p>\r\n\r\n                                        {inputs?.east?.map((input, index) => {\r\n                                          return (\r\n                                            <input\r\n                                              name={input.name}\r\n                                              type={input.type || \"text\"}\r\n                                              className=\"ant-input\"\r\n                                              placeholder={input.placeholder}\r\n                                              required=\"required\"\r\n                                              value={\r\n                                                this.state[input.name + key]\r\n                                              }\r\n                                              onChange={this.onInputTextChange.bind(\r\n                                                this,\r\n                                                polygon,\r\n                                                key\r\n                                              )}\r\n                                            />\r\n                                          );\r\n                                        })}\r\n\r\n                                        <Droppable droppableId=\"droppable_East\">\r\n                                          {(provided, snapshot) => (\r\n                                            <div\r\n                                              ref={provided.innerRef}\r\n                                              style={getListStyle(\r\n                                                snapshot.isDraggingOver\r\n                                              )}\r\n                                            >\r\n                                              {this.state[\r\n                                                \"eastBoundries\" + key\r\n                                              ] &&\r\n                                                this.state[\r\n                                                  \"eastBoundries\" + key\r\n                                                ].map((item, index) => (\r\n                                                  <Draggable\r\n                                                    key={item.id}\r\n                                                    draggableId={item.id}\r\n                                                    index={index}\r\n                                                  >\r\n                                                    {(provided, snapshot) => (\r\n                                                      <div\r\n                                                        ref={provided.innerRef}\r\n                                                        {...provided.draggableProps}\r\n                                                        {...provided.dragHandleProps}\r\n                                                        style={getItemStyle(\r\n                                                          snapshot.isDragging,\r\n                                                          provided\r\n                                                            .draggableProps\r\n                                                            .style\r\n                                                        )}\r\n                                                        onMouseOver={this.onmouseover.bind(\r\n                                                          this,\r\n                                                          item.data\r\n                                                        )}\r\n                                                        onMouseLeave={this.onmouseleave.bind(\r\n                                                          this\r\n                                                        )}\r\n                                                      >\r\n                                                        {convertToArabic(\r\n                                                          item.content &&\r\n                                                            (+item.content)?.toFixed(\r\n                                                              2\r\n                                                            )\r\n                                                        )}\r\n                                                      </div>\r\n                                                    )}\r\n                                                  </Draggable>\r\n                                                ))}\r\n                                              {provided.placeholder}\r\n                                            </div>\r\n                                          )}\r\n                                        </Droppable>\r\n                                        <p\r\n                                          style={{\r\n                                            float: \"left\",\r\n                                            textAlign: \"left\",\r\n                                            fontSize: \"20px\",\r\n                                          }}\r\n                                        >\r\n                                          طول الحد :{\" \"}\r\n                                          {convertToArabic(\r\n                                            polygon.data[1].totalLength &&\r\n                                              (+polygon.data[1]\r\n                                                .totalLength).toFixed(2)\r\n                                          )}\r\n                                        </p>\r\n                                      </div>\r\n\r\n                                      <div style={itemContainerEmpty}> </div>\r\n                                      <div style={itemContainerWest}>\r\n                                        <p\r\n                                          style={{\r\n                                            textAlign: \"center\",\r\n                                            fontSize: \"18px\",\r\n                                          }}\r\n                                        >\r\n                                          الغرب\r\n                                        </p>\r\n\r\n                                        {inputs?.west?.map((input, index) => {\r\n                                          return (\r\n                                            <input\r\n                                              name={input.name}\r\n                                              type={input.type || \"text\"}\r\n                                              className=\"ant-input\"\r\n                                              placeholder={input.placeholder}\r\n                                              required=\"required\"\r\n                                              value={\r\n                                                this.state[input.name + key]\r\n                                              }\r\n                                              onChange={this.onInputTextChange.bind(\r\n                                                this,\r\n                                                polygon,\r\n                                                key\r\n                                              )}\r\n                                            />\r\n                                          );\r\n                                        })}\r\n\r\n                                        <Droppable droppableId=\"droppable_West\">\r\n                                          {(provided, snapshot) => (\r\n                                            <div\r\n                                              ref={provided.innerRef}\r\n                                              style={getListStyle(\r\n                                                snapshot.isDraggingOver\r\n                                              )}\r\n                                            >\r\n                                              {this.state[\r\n                                                \"westBoundries\" + key\r\n                                              ] &&\r\n                                                this.state[\r\n                                                  \"westBoundries\" + key\r\n                                                ].map((item, index) => (\r\n                                                  <Draggable\r\n                                                    key={item.id}\r\n                                                    draggableId={item.id}\r\n                                                    index={index}\r\n                                                  >\r\n                                                    {(provided, snapshot) => (\r\n                                                      <div\r\n                                                        ref={provided.innerRef}\r\n                                                        {...provided.draggableProps}\r\n                                                        {...provided.dragHandleProps}\r\n                                                        style={getItemStyle(\r\n                                                          snapshot.isDragging,\r\n                                                          provided\r\n                                                            .draggableProps\r\n                                                            .style\r\n                                                        )}\r\n                                                        onMouseOver={this.onmouseover.bind(\r\n                                                          this,\r\n                                                          item.data\r\n                                                        )}\r\n                                                        onMouseLeave={this.onmouseleave.bind(\r\n                                                          this\r\n                                                        )}\r\n                                                      >\r\n                                                        {convertToArabic(\r\n                                                          item.content &&\r\n                                                            (+item.content)?.toFixed(\r\n                                                              2\r\n                                                            )\r\n                                                        )}\r\n                                                      </div>\r\n                                                    )}\r\n                                                  </Draggable>\r\n                                                ))}\r\n                                              {provided.placeholder}\r\n                                            </div>\r\n                                          )}\r\n                                        </Droppable>\r\n\r\n                                        <p\r\n                                          style={{\r\n                                            float: \"left\",\r\n                                            textAlign: \"left\",\r\n                                            fontSize: \"20px\",\r\n                                          }}\r\n                                        >\r\n                                          طول الحد :{\" \"}\r\n                                          {convertToArabic(\r\n                                            polygon.data[3].totalLength &&\r\n                                              (+polygon.data[3]\r\n                                                .totalLength).toFixed(2)\r\n                                          )}\r\n                                        </p>\r\n                                      </div>\r\n                                    </div>\r\n\r\n                                    <div style={itemContainerSouth}>\r\n                                      <p\r\n                                        style={{\r\n                                          textAlign: \"center\",\r\n                                          fontSize: \"18px\",\r\n                                        }}\r\n                                      >\r\n                                        الجنوب\r\n                                      </p>\r\n\r\n                                      {inputs?.south?.map((input, index) => {\r\n                                        return (\r\n                                          <input\r\n                                            name={input.name}\r\n                                            type={input.type || \"text\"}\r\n                                            className=\"ant-input\"\r\n                                            placeholder={input.placeholder}\r\n                                            required=\"required\"\r\n                                            value={this.state[input.name + key]}\r\n                                            onChange={this.onInputTextChange.bind(\r\n                                              this,\r\n                                              polygon,\r\n                                              key\r\n                                            )}\r\n                                          />\r\n                                        );\r\n                                      })}\r\n\r\n                                      <Droppable droppableId=\"droppable_South\">\r\n                                        {(provided, snapshot) => (\r\n                                          <div\r\n                                            ref={provided.innerRef}\r\n                                            style={getListStyle(\r\n                                              snapshot.isDraggingOver\r\n                                            )}\r\n                                          >\r\n                                            {this.state[\r\n                                              \"southBoundries\" + key\r\n                                            ] &&\r\n                                              this.state[\r\n                                                \"southBoundries\" + key\r\n                                              ].map((item, index) => (\r\n                                                <Draggable\r\n                                                  key={item.id}\r\n                                                  draggableId={item.id}\r\n                                                  index={index}\r\n                                                >\r\n                                                  {(provided, snapshot) => (\r\n                                                    <div\r\n                                                      ref={provided.innerRef}\r\n                                                      {...provided.draggableProps}\r\n                                                      {...provided.dragHandleProps}\r\n                                                      style={getItemStyle(\r\n                                                        snapshot.isDragging,\r\n                                                        provided.draggableProps\r\n                                                          .style\r\n                                                      )}\r\n                                                      onMouseOver={this.onmouseover.bind(\r\n                                                        this,\r\n                                                        item.data\r\n                                                      )}\r\n                                                      onMouseLeave={this.onmouseleave.bind(\r\n                                                        this\r\n                                                      )}\r\n                                                    >\r\n                                                      {convertToArabic(\r\n                                                        item.content &&\r\n                                                          (+item.content)?.toFixed(\r\n                                                            2\r\n                                                          )\r\n                                                      )}\r\n                                                    </div>\r\n                                                  )}\r\n                                                </Draggable>\r\n                                              ))}\r\n                                            {provided.placeholder}\r\n                                          </div>\r\n                                        )}\r\n                                      </Droppable>\r\n                                      <p\r\n                                        style={{\r\n                                          float: \"left\",\r\n                                          textAlign: \"left\",\r\n                                          fontSize: \"20px\",\r\n                                        }}\r\n                                      >\r\n                                        طول الحد :{\" \"}\r\n                                        {convertToArabic(\r\n                                          polygon.data[4].totalLength &&\r\n                                            (+polygon.data[4]\r\n                                              .totalLength).toFixed(2)\r\n                                        )}\r\n                                      </p>\r\n                                    </div>\r\n                                  </DragDropContext>\r\n                                )}\r\n                              </div>\r\n                            )}\r\n                            {key == this.state[\"activeKey\"] - 1 && (\r\n                              <>\r\n                                <Row gutter={[24, 16]}>\r\n                                  <Col span={4}>\r\n                                    <input\r\n                                      name=\"parcelSliceNo\"\r\n                                      type=\"number\"\r\n                                      placeholder=\"رقم التقسيم\"\r\n                                      className=\"form-control\"\r\n                                      value={this.state[`parcelSliceNo${key}`]}\r\n                                      disabled={requestType == 2}\r\n                                      onChange={this.onParcelTextChange.bind(\r\n                                        this,\r\n                                        polygon,\r\n                                        key\r\n                                      )}\r\n                                    />\r\n                                  </Col>\r\n                                  <Col span={1}>/</Col>\r\n                                  <Col span={4}>\r\n                                    {/* <input\r\n                                      name=\"parcel_name\"\r\n                                      type=\"text\"\r\n                                      placeholder=\"رقم قطعة الأرض\"\r\n                                      className=\"form-control\"\r\n                                      required=\"required\"\r\n                                      value={this.state[`parcel_name${key}`]}\r\n                                      onChange={this.onParcelTextChange.bind(\r\n                                        this,\r\n                                        polygon,\r\n                                        key\r\n                                      )}\r\n                                    /> */}\r\n                                    <Select\r\n                                      getPopupContainer={(trigger) =>\r\n                                        trigger.parentNode\r\n                                      }\r\n                                      // autoFocus\r\n                                      name=\"parcel_name\"\r\n                                      onChange={(val) => {\r\n                                        this.onParcelTextChange(polygon, key, {\r\n                                          target: {\r\n                                            value: val,\r\n                                            name: \"parcel_name\",\r\n                                          },\r\n                                        });\r\n                                      }}\r\n                                      placeholder=\"رقم قطعة الارض\"\r\n                                      value={this.state[`parcel_name${key}`]}\r\n                                    >\r\n                                      {parcels.map((e, i) => {\r\n                                        return (\r\n                                          <Option\r\n                                            key={e.attributes.PARCEL_SPATIAL_ID}\r\n                                            value={e.attributes.PARCEL_PLAN_NO}\r\n                                          >\r\n                                            {localizeNumber(\r\n                                              e.attributes.PARCEL_PLAN_NO\r\n                                            )}\r\n                                          </Option>\r\n                                        );\r\n                                      })}\r\n                                    </Select>\r\n                                  </Col>\r\n                                </Row>\r\n                                <Row gutter={[24, 16]}>\r\n                                  <Col span={9}>\r\n                                    <input\r\n                                      name=\"area\"\r\n                                      type=\"text\"\r\n                                      className=\"form-control\"\r\n                                      placeholder=\"المساحة (م۲)\"\r\n                                      required=\"required\"\r\n                                      value={this.state[`area${key}`]}\r\n                                      onChange={this.onInputTextChange.bind(\r\n                                        this,\r\n                                        polygon,\r\n                                        key\r\n                                      )}\r\n                                    />\r\n                                  </Col>\r\n                                </Row>\r\n                              </>\r\n                            )}\r\n                            {reqType == \"duplex\" &&\r\n                              key == this.state[\"activeKey\"] - 1 && (\r\n                                <Row gutter={[24, 16]}>\r\n                                  <Col span={4}>\r\n                                    <input\r\n                                      type=\"radio\"\r\n                                      name=\"duplixType\"\r\n                                      value=\"splited\"\r\n                                      checked={\r\n                                        this.state[`duplixType${key}`] ===\r\n                                        \"splited\"\r\n                                      }\r\n                                      onChange={this.duplixTypeChange.bind(\r\n                                        this,\r\n                                        \"splited\",\r\n                                        polygon,\r\n                                        key\r\n                                      )}\r\n                                    />{\" \"}\r\n                                    فلل منفصلة\r\n                                  </Col>\r\n                                  <Col span={5}>\r\n                                    <input\r\n                                      type=\"radio\"\r\n                                      name=\"duplixType\"\r\n                                      value=\"marged\"\r\n                                      checked={\r\n                                        this.state[`duplixType${key}`] ===\r\n                                        \"marged\"\r\n                                      }\r\n                                      onChange={this.duplixTypeChange.bind(\r\n                                        this,\r\n                                        \"marged\",\r\n                                        polygon,\r\n                                        key\r\n                                      )}\r\n                                    />{\" \"}\r\n                                    فلل متصلة\r\n                                  </Col>\r\n                                </Row>\r\n                              )}\r\n                          </TabPane>\r\n                        );\r\n                      })}\r\n                    </Tabs>\r\n                  )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation(\"cadData\")(cadSuggestedDataComponent));\r\n","import React, { Component } from 'react'\r\nimport {get} from 'lodash';\r\nimport * as dataTypes from './typeofData'\r\nimport {translate} from 'react-i18next'\r\nimport { mapStateToProps, mapDispatchToProps } from \"./mapping\"\r\nimport { connect } from \"react-redux\";\r\nclass labelComponent extends Component {\r\n\r\n  componentDidMount() {\r\n      const {init_data} = this.props;\r\n      \r\n      if(init_data)\r\n      {\r\n        init_data(this.props);\r\n      }\r\n  }\r\n\r\n  render() {\r\n      const { className, input: {value}, type, data={} , t} = this.props;\r\n      \r\n      let initialVal = get(data, value, value);\r\n      const Val = get(dataTypes, type, () => <label>{initialVal}</label>)\r\n\r\n      return (\r\n      <Val  {...{ className }}  data={value} t={t}/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation('labels')(labelComponent));\r\n","import { get } from 'lodash';\r\nimport {formValueSelector} from 'redux-form'\r\nexport const mapStateToProps = ({ wizard: {mainObject}, selectors = {}, mainApp, mapViewer, ...state }, { moduleName, path, value_key, ...props }) => {\r\n    return ({\r\n        mainObject: {...mainObject},\r\n    })\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n    return {\r\n        getValues(name='stepForm'){return formValueSelector('name')},        \r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport  class boolean extends Component {\r\n\r\n  render() {\r\n    const {data,t} = this.props\r\n    \r\n    return (\r\n      <div>\r\n        {data ? t('Yes') : t('No')}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport moment from 'moment';\r\n\r\nexport  class date extends Component {\r\n  render() {\r\n    const {data}=this.props\r\n    return (\r\n      <div>\r\n        {moment(data)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export * from './object';\r\nexport * from './string';\r\nexport * from './date';\r\nexport * from './number';\r\nexport * from './list';\r\nexport * from './boolean';\r\n","import React, { Component } from 'react'\r\n\r\nexport class number extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.data && (+this.props.data).toFixed(2)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {get, isEmpty} from 'lodash'\r\nimport {fileUploader} from 'app/helpers/fieldValues'\r\n\r\nexport class object extends Component {\r\n\r\n\r\n\r\n  render() {\r\n    const {data,t}=this.props\r\n    let files = data && data.length ? data.filter(singleData => get(singleData, 'uid', null) ? singleData : null) : null\r\n    \r\n    return (\r\n      <div>\r\n        {\r\n          !isEmpty(files) ? \r\n          <div>\r\n            {fileUploader(data)}\r\n          </div>\r\n          :\r\n          <div style={{display:'flex'}}>\r\n            {data.map((val, index) => <div style={{padding:'5px'}} key={index}>{index == 0 ? ` ${t(val)} ` : ` - ${t(val)} ` }</div>)}\r\n          </div> \r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {date as Date} from './date';\r\n\r\n export class string extends Component {\r\n  render() {\r\n     const {data,t} = this.props\r\n     const datetime= /\\d{4,4}-\\d{2,2}-\\d{2,2}/;\r\n\r\n     let item = datetime.test(data) ? <Date data={data}/> : data\r\n\r\n      return (\r\n        <div>\r\n          {item}\r\n        </div>\r\n      )\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AAKA;AACA;AACA;AAqCA;AACA;AAEA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAewNA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAQA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAGA;AAGA;AAGA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAQA;AACA;AAGA;AACA;AACA;AAQA;AACA;AAGA;AACA;AAEA;AAQA;AACA;AAGA;AACA;AAEA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAYA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAYA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AACA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAOA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAEA;AAGA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAKA;AACA;AAOA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AAMA;AAEA;AAUA;AAGA;AAEA;AACA;AAEA;AAQA;AAGA;AAEA;AAQA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAQA;AAEA;AAOA;AAAA;AAIA;AAGA;AAEA;AAOA;AAAA;AAIA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAQA;AAEA;AACA;AAIA;AACA;AAYA;AAAA;AAEA;AACA;AAIA;AACA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAQA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AA+LA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAgj7DA;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA6qCA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAKA;AAIA;AAIA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAuHA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAsMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAIA;AAIA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AASA;AAuBA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAUA;AAAA;AAGA;AAAA;AAQA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAEA;AAAA;AAGA;AACA;AAEA;AASA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAKA;AAIA;AAEA;AAQA;AASA;AACA;AACA;AACA;AACA;AAAA;AAWA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAGA;AAEA;AAAA;AAGA;AACA;AAEA;AASA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAMA;AAIA;AAEA;AAQA;AASA;AACA;AACA;AACA;AACA;AAAA;AAWA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAGA;AAEA;AAAA;AAGA;AACA;AAEA;AASA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAMA;AAIA;AAEA;AAQA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAEA;AAAA;AAGA;AACA;AAEA;AASA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAKA;AAIA;AAEA;AAQA;AASA;AACA;AACA;AACA;AACA;AAAA;AAgBA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAAA;AACA;AAAA;AAeA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAOA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAQA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AAKA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AAKA;AAQA;AASA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC/0FA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AAKA;AACA;;;;A","sourceRoot":""}
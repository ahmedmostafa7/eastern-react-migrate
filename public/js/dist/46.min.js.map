{"version":3,"file":"46.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/FilterComponent/index.js","webpack:///./src/app/components/inputs/fields/identify/Component/editUpdateFilterComponent/ExportCSV.js","webpack:///./src/app/components/inputs/fields/identify/Component/editUpdateFilterComponent/index.js","webpack:///./src/app/components/inputs/fields/identify/Component/editUpdateFilterComponent/maping.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Select, Input, message, Spin } from \"antd\";\r\nimport {\r\n  addedParcelMapServiceUrl,\r\n  editAndDeleteMapLayers,\r\n  layersSetting,\r\n} from \"../mapviewer/config\";\r\nimport {\r\n  getFeatureDomainName,\r\n  getLayerId,\r\n  isLayerExist,\r\n  queryTask,\r\n  showLoading,\r\n  zoomToFeatureByFilter,\r\n  clearGraphicFromLayer,\r\n} from \"../common/common_func\";\r\n\r\nclass FilterComponent extends Component {\r\n  state = {\r\n    searchLayer: null,\r\n    searchLayers: [],\r\n    formValues: {},\r\n    searchFields: [],\r\n    isActiveBufferSearch: false,\r\n    showInfo: false,\r\n    noData: false,\r\n  };\r\n  self = this;\r\n  mapPoint = null;\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      searchLayers: Object.keys(editAndDeleteMapLayers)\r\n        .map((key) => {\r\n          return {\r\n            layerName: key,\r\n            layer: editAndDeleteMapLayers[key],\r\n            name: editAndDeleteMapLayers[key].name,\r\n          };\r\n        })\r\n        .filter((l) => {\r\n          return (\r\n            l.layer.searchFields &&\r\n            isLayerExist(this.props.map.__mapInfo, l.layerName)\r\n          );\r\n        }),\r\n    });\r\n  }\r\n  componentWillUnmount() {\r\n    clearGraphicFromLayer(this.props.map, \"ZoomGraphicLayer\");\r\n  }\r\n  handleSearchSelect = () => (layer) => {\r\n    this.setState({\r\n      searchLayer: layer,\r\n      showInfo: false,\r\n      noData: false,\r\n      formValues: {},\r\n      searchFields: [],\r\n      isActiveBufferSearch: false,\r\n    });\r\n    this.props.setSelectMapLayer(layer);\r\n    this.getListsValue(layer);\r\n  };\r\n\r\n  getListsValue = (layer, getListsAfterFieldName, parentFilter) => {\r\n    //get all filters\r\n    let promiseQueries = [];\r\n    let fieldsName = [];\r\n    let layerdId = getLayerId(this.props.map.__mapInfo, layer);\r\n\r\n    editAndDeleteMapLayers[layer]?.searchFields\r\n      ?.filter((x) => !x.isSearch)\r\n      .forEach((item, index) => {\r\n        if (!getListsAfterFieldName) {\r\n          fieldsName.push(item.field);\r\n\r\n          let filterQuery = parentFilter\r\n            ? parentFilter + \" and \" + item.field + \" is not null\"\r\n            : \"1=1\";\r\n\r\n          promiseQueries.push(\r\n            queryTask({\r\n              url: addedParcelMapServiceUrl + \"/\" + layerdId,\r\n              where: filterQuery,\r\n              outFields:\r\n                item.zoomLayer &&\r\n                item.zoomLayer.filterField &&\r\n                !item.zoomLayer.isNotSameAttributeNameInLayer\r\n                  ? [item.field, item.zoomLayer.filterField]\r\n                  : [item.field],\r\n              returnGeometry: false,\r\n              returnExecuteObject: true,\r\n              returnDistinctValues: true,\r\n            })\r\n          );\r\n        } else {\r\n          if (item.field == getListsAfterFieldName)\r\n            getListsAfterFieldName = null;\r\n        }\r\n      });\r\n\r\n    if (promiseQueries.length > 0) showLoading(true);\r\n    else {\r\n      this.setState({\r\n        searchFields: editAndDeleteMapLayers[layer]?.searchFields?.filter(\r\n          (x) => !x.isSearch\r\n        ),\r\n      });\r\n    }\r\n\r\n    if (!this.state.formValues[\"MUNICIPALITY_NAME\"]) {\r\n      promiseQueries = [promiseQueries[0]];\r\n      fieldsName = [fieldsName[0]];\r\n    }\r\n\r\n    Promise.all(promiseQueries).then((resultsData) => {\r\n      this.mapResultWithDomain(resultsData, fieldsName, layerdId).then(\r\n        (data) => {\r\n          data.forEach((item, index) => {\r\n            let searchField = editAndDeleteMapLayers[layer]?.searchFields?.find(\r\n              (x) => x.field == fieldsName[index]\r\n            );\r\n            if (item.features.length > 0) {\r\n              searchField.dataList =\r\n                fieldsName[index] === \"MUNICIPALITY_NAME\"\r\n                  ? [\r\n                      ...item.features\r\n                        .filter(\r\n                          (f) =>\r\n                            typeof f.attributes[\"MUNICIPALITY_NAME\"] ===\r\n                            \"string\"\r\n                        )\r\n                        .sort((a, b) =>\r\n                          a.attributes[\"MUNICIPALITY_NAME\"].localeCompare(\r\n                            b.attributes[\"MUNICIPALITY_NAME\"],\r\n                            \"ar\"\r\n                          )\r\n                        ),\r\n                    ]\r\n                  : [...item.features];\r\n            } else {\r\n              searchField.dataList = [];\r\n            }\r\n          });\r\n          showLoading(false);\r\n          this.setState({\r\n            searchFields: this.state.formValues[\"MUNICIPALITY_NAME\"]\r\n              ? editAndDeleteMapLayers[layer]?.searchFields?.filter(\r\n                  (x) => !x.isSearch\r\n                )\r\n              : editAndDeleteMapLayers[layer]?.searchFields?.filter(\r\n                  (x) => x.field == \"MUNICIPALITY_NAME\"\r\n                ),\r\n            formValues: { ...this.state.formValues },\r\n          });\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  mapResultWithDomain = (results, fieldsName, layerId) => {\r\n    return new Promise((resolve, reject) => {\r\n      let count = fieldsName.length;\r\n\r\n      results.forEach((item, index) => {\r\n        getFeatureDomainName(\r\n          item.features,\r\n          layerId,\r\n          false,\r\n          addedParcelMapServiceUrl\r\n        ).then((domainResult) => {\r\n          if (domainResult) item.features = domainResult;\r\n\r\n          --count;\r\n          if (count < 1) {\r\n            resolve(results);\r\n          }\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  selectChange = (name, listData, item) => (e) => {\r\n    this.setState({ showInfo: false, noData: false });\r\n    if (!e) {\r\n      clearGraphicFromLayer(this.props.map, \"ZoomGraphicLayer\");\r\n      this.setState({ [name]: undefined });\r\n    }\r\n    this.setState(\r\n      { formValues: { ...this.state.formValues, [name]: e } },\r\n      () => {\r\n        let searchField = editAndDeleteMapLayers[\r\n          this.state.searchLayer\r\n        ].searchFields.find((i) => i.field == name && !i.isSearch);\r\n        if (searchField) {\r\n          let filterQuery = [];\r\n\r\n          if (searchField.zoomLayer) {\r\n            let item = searchField.dataList.find(\r\n              (x) =>\r\n                (x.attributes[name + \"_Code\"] || x.attributes[name]) ==\r\n                this.state.formValues[name]\r\n            );\r\n\r\n            if (item) {\r\n              let where = \"\";\r\n              if (searchField.zoomLayer.isNotSameAttributeNameInLayer) {\r\n                where =\r\n                  searchField.zoomLayer.filterField +\r\n                  \"=\" +\r\n                  \"'\" +\r\n                  (item.attributes[searchField.field + \"_Code\"] ||\r\n                    item.attributes[searchField.zoomLayer.field]) +\r\n                  \"'\";\r\n              } else {\r\n                where =\r\n                  searchField.zoomLayer.filterField +\r\n                  \"=\" +\r\n                  \"'\" +\r\n                  (item.attributes[\r\n                    searchField.zoomLayer.filterField + \"_Code\"\r\n                  ] || item.attributes[searchField.zoomLayer.filterField]) +\r\n                  \"'\";\r\n              }\r\n\r\n              if (e) {\r\n                zoomToFeatureByFilter(\r\n                  where,\r\n                  searchField.zoomLayer.name,\r\n                  this.props.map,\r\n                  null,\r\n                  (data) => {\r\n                    if (item) {\r\n                      item.attributes[\"OBJECTID\"] = data.attributes[\"OBJECTID\"];\r\n                      item.geometry = data.geometry;\r\n                      this.state[name + \"_Object\"] = item;\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            }\r\n          }\r\n\r\n          this.state.formValues = this.deleteChildValues(name);\r\n\r\n          Object.keys(this.state.formValues).forEach((key) => {\r\n            if (this.state.formValues[key])\r\n              filterQuery.push(key + \"='\" + this.state.formValues[key] + \"'\");\r\n          });\r\n\r\n          this.getListsValue(\r\n            this.state.searchLayer,\r\n            name,\r\n            filterQuery.join(\" and \")\r\n          );\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  deleteChildValues = (name) => {\r\n    let found = false;\r\n    editAndDeleteMapLayers[this.state.searchLayer].searchFields.forEach(\r\n      (item) => {\r\n        if (found) {\r\n          delete this.state.formValues[item.field];\r\n          delete this.state[item.field];\r\n        }\r\n        if (item.field == name) {\r\n          found = true;\r\n        }\r\n      }\r\n    );\r\n\r\n    return this.state.formValues;\r\n  };\r\n\r\n  handleChangeInput = (e) => {\r\n    this.setState({\r\n      showInfo: false,\r\n      noData: false,\r\n      formValues: { ...this.state.formValues, [e.target.name]: e.target.value },\r\n    });\r\n  };\r\n\r\n  handleBufferSearch = (e) => {\r\n    this.setState({\r\n      showInfo: false,\r\n      noData: false,\r\n      buffer_distance: e.target.value,\r\n    });\r\n  };\r\n\r\n  searchForData = (e) => {\r\n    let searchFields =\r\n      editAndDeleteMapLayers[this.state.searchLayer].searchFields;\r\n    let selectedFeature =\r\n      this.state[searchFields[searchFields.length - 1].field + \"_Object\"];\r\n\r\n    let layerdId = getLayerId(this.props.map.__mapInfo, this.state.searchLayer);\r\n\r\n    queryTask({\r\n      url:\r\n        this.props.map.getLayer(\"basemap\").url.split(\"?\")[0] + \"/\" + layerdId,\r\n      where: \"OBJECTID = \" + selectedFeature.attributes[\"OBJECTID\"],\r\n      outFields: layersSetting[this.state.searchLayer].outFields,\r\n      returnGeometry: false,\r\n      callbackResult: ({ features }) => {\r\n        if (features.length > 0) {\r\n          getFeatureDomainName(\r\n            features,\r\n            layerdId,\r\n            false,\r\n            addedParcelMapServiceUrl\r\n          ).then((res) => {\r\n            selectedFeature.attributes = { ...res[0].attributes };\r\n            selectedFeature.layerName = this.state.searchLayer;\r\n            this.props.addFeature(selectedFeature);\r\n            this.state.formValues[searchFields[searchFields.length - 1].field] =\r\n              null;\r\n\r\n            this.setState({ formValues: { ...this.state.formValues } });\r\n          });\r\n        }\r\n      },\r\n      callbackError(error) {},\r\n    });\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({ isActiveBufferSearch: !this.state.isActiveBufferSearch });\r\n  };\r\n  changeDate = (name) => (e) => {\r\n    this.setState({ formValues: { ...this.state.formValues, [name]: e } });\r\n  };\r\n\r\n  onSearch = (item, filterValue) => {\r\n    if (item.isServerSideSearch) {\r\n      if (this.searchTimeOut) clearTimeout(this.searchTimeOut);\r\n\r\n      this.searchTimeOut = setTimeout(() => {\r\n        this.setState({ fetching: true });\r\n\r\n        let filterQuery = [];\r\n\r\n        Object.keys(this.state.formValues).forEach((key) => {\r\n          if (\r\n            this.state.formValues[key] &&\r\n            key != item.field &&\r\n            key != item.isServerSideSearch\r\n          )\r\n            filterQuery.push(key + \"='\" + this.state.formValues[key] + \"'\");\r\n        });\r\n\r\n        if (filterValue) {\r\n          filterQuery.push(item.field + \" like '%\" + filterValue + \"%'\");\r\n        }\r\n\r\n        let layerdId = getLayerId(\r\n          this.props.map.__mapInfo,\r\n          this.state.searchLayer\r\n        );\r\n\r\n        queryTask({\r\n          url: addedParcelMapServiceUrl + \"/\" + layerdId,\r\n          where: filterQuery.join(\" and \"),\r\n          outFields: [item.field, item.zoomLayer.filterField],\r\n          returnDistinctValues: true,\r\n          returnGeometry: false,\r\n          callbackResult: ({ features }) => {\r\n            let searchField = editAndDeleteMapLayers[\r\n              this.state.searchLayer\r\n            ].searchFields.find((x) => x.field == item.field);\r\n\r\n            if (features.length > 0) searchField.dataList = [...features];\r\n\r\n            this.setState({\r\n              searchFields: [\r\n                ...editAndDeleteMapLayers[\r\n                  this.state.searchLayer\r\n                ].searchFields.filter((x) => !x.isSearch),\r\n              ],\r\n              formValues: { ...this.state.formValues },\r\n              fetching: false,\r\n            });\r\n          },\r\n        });\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  isActive = () => {\r\n    let searchFields =\r\n      editAndDeleteMapLayers[this.state.searchLayer].searchFields;\r\n    return !this.state.formValues[searchFields[searchFields.length - 1].field];\r\n  };\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const filterText =\r\n      this.state.searchLayer &&\r\n      editAndDeleteMapLayers[this.state.searchLayer].searchFields.find(\r\n        (x) => x.isSearch\r\n      );\r\n    return (\r\n      <div style={{ textAlign: \"right\", paddingRight: \"10px\" }}>\r\n        <div style={{ display: \"grid\" }}>\r\n          <label className=\"selectLabelStyle\">الطبقة</label>\r\n          {/**Layer */}\r\n          <Select\r\n            virtual={false}\r\n            showSearch\r\n            className=\"dont-show\"\r\n            onChange={this.handleSearchSelect()}\r\n            value={this.state.searchLayer}\r\n            placeholder=\"الطبقة\"\r\n            getPopupContainer={(trigger) => trigger.parentNode}\r\n            optionFilterProp=\"v\"\r\n            filterOption={(input, option) =>\r\n              option.v && option.v.indexOf(input) >= 0\r\n            }>\r\n            {this.state.searchLayers.map((s, index) => (\r\n              <Select.Option v={s.name} value={s.layerName} id={s.layerName}>\r\n                {s.name}\r\n              </Select.Option>\r\n            ))}\r\n          </Select>\r\n\r\n          {this.state.searchFields.map((item, index) => {\r\n            return (\r\n              <div style={{ display: \"grid\" }} key={index}>\r\n                <label className=\"selectLabelStyle\">{item.alias}</label>\r\n\r\n                <Select\r\n                  style={{ width: \"50%\" }}\r\n                  virtual={false}\r\n                  disabled={item.dataList && item.dataList.length == 0}\r\n                  showSearch\r\n                  allowClear\r\n                  notFoundContent={\r\n                    this.state.fetching ? <Spin size=\"small\" /> : null\r\n                  }\r\n                  onChange={this.selectChange(item.field, item.dataList, item)}\r\n                  value={this.state.formValues[item.field]}\r\n                  placeholder={item.alias}\r\n                  onSearch={(e) => {\r\n                    this.setState({ [item.field]: e });\r\n                    this.onSearch(item, e);\r\n                  }}\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  optionFilterProp=\"v\">\r\n                  {item.dataList &&\r\n                    item.dataList\r\n                      .filter((e, i) => {\r\n                        if (this.state[item.field]) {\r\n                          return (\r\n                            e.attributes[item.field] &&\r\n                            e.attributes[item.field]\r\n                              .toLowerCase()\r\n                              .indexOf(this.state[item.field].toLowerCase()) >=\r\n                              0\r\n                          );\r\n                        } else {\r\n                          return i < 100 && e.attributes[item.field];\r\n                        }\r\n                      })\r\n                      .slice(0, 50)\r\n                      .map((m, i) => {\r\n                        return (\r\n                          <Select.Option\r\n                            key={m.attributes[item.field] + i}\r\n                            v={m.attributes[item.field]}\r\n                            value={\r\n                              m.attributes[item.field + \"_Code\"] ||\r\n                              m.attributes[item.field]\r\n                            }>\r\n                            {m.attributes[item.field]}\r\n                          </Select.Option>\r\n                        );\r\n                      })}\r\n                </Select>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {this.state.searchLayer && (\r\n          <div>\r\n            {filterText && (\r\n              <div style={{ display: \"grid\" }}>\r\n                <label className=\"selectLabelStyle\">{filterText.alias}</label>\r\n\r\n                <Input\r\n                  name={filterText.field}\r\n                  onChange={this.handleChangeInput}\r\n                  value={this.state.formValues[filterText.field]}\r\n                  placeholder={filterText.alias}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <div style={{ display: \"grid\" }}>\r\n              <div style={{ textAlign: \"center\" }}>\r\n                <button\r\n                  onClick={this.searchForData}\r\n                  className=\"SearchBtn mt-3 w-25\"\r\n                  size=\"large\"\r\n                  disabled={this.isActive()}\r\n                  htmlType=\"submit\">\r\n                  إضافة\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default FilterComponent;\r\n","import React from \"react\";\r\nimport ReactExport from \"react-export-excel\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst ExcelFile = ReactExport.ExcelFile;\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\r\n\r\nfunction ExportCSV({ dataSet, columns, labels, layerName }) {\r\n\r\n  return (\r\n    <ExcelFile\r\n      filename={layerName + \"CSV\"}\r\n      element={\r\n        <label>\r\n          {/* <Tooltip placement=\"topLeft\" title={` استخراج ملف CSV `}> */}\r\n\r\n          CSV استخراج ملف\r\n          {/* </Tooltip> */}\r\n        </label>\r\n      }\r\n    >\r\n      <ExcelSheet data={dataSet} name=\"AttributeTable\">\r\n        {labels.map((head, index) => (\r\n          <ExcelColumn\r\n            label={head}\r\n            value={(col) => {\r\n              return col.attributes[head] ? col.attributes[head] + '' : null;\r\n            }}\r\n          />\r\n        ))}\r\n      </ExcelSheet>\r\n    </ExcelFile>\r\n  );\r\n}\r\n\r\nexport default ExportCSV;\r\n","import React, { Component } from \"react\";\r\nimport { Menu, Dropdown, Icon } from \"antd\";\r\nimport {\r\n    Button,\r\n    Form,\r\n    Input,\r\n    Select,\r\n    Checkbox,\r\n    Upload,\r\n    message,\r\n    Tooltip,\r\n} from \"antd\";\r\nimport RenderField from \"app/components/inputs\";\r\nimport { serverFieldMapper } from \"app/helpers/functions\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"./maping\";\r\nimport { connect } from \"react-redux\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { host } from \"config\";\r\nimport {\r\n    addParcelNo,\r\n    clearGraphicFromLayer,\r\n    convertToArabic,\r\n    DrawFeatures,\r\n    drawLength,\r\n    drawLength_Lines,\r\n    executeGPTool,\r\n    formatKmlAttributes,\r\n    formatMappingExcel,\r\n    formatMappingShape,\r\n    getFeatureDomainName,\r\n    getFieldDomain,\r\n    getInfo,\r\n    getLayerId,\r\n    highlightFeature,\r\n    project,\r\n    queryTask,\r\n    readExcel,\r\n    showLoading,\r\n    uploadGISFile,\r\n    zoomToFeature,\r\n} from \"../common/common_func\";\r\nimport {\r\n    addedParcelMapServiceUrl,\r\n    editAndDeleteMapLayers,\r\n    layersSetting,\r\n    addFeaturesMapLayers,\r\n} from \"../mapviewer/config\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport store from \"reducers\";\r\nimport {\r\n    faSearchPlus,\r\n    faEdit,\r\n    faStar,\r\n    faTrash,\r\n    faTimes,\r\n    faWindowMaximize,\r\n    faPlus,\r\n    faCloudUploadAlt,\r\n    faCloudDownloadAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport axios from \"axios\";\r\nimport {\r\n    getMap,\r\n    getIsMapLoaded,\r\n    setIsMapLoaded,\r\n} from \"main_helpers/functions/filters/state\";\r\nimport { Modal } from \"antd\";\r\nimport { groupBy } from \"lodash\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport { Sticky, StickyContainer } from \"react-sticky\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport FilterComponent from \"../FilterComponent\";\r\nimport { getMapInfo } from \"../common/esri_request\";\r\nimport ExportCSV from \"./ExportCSV\";\r\n\r\nconst pageSize = 10;\r\nclass editUpdateFilterComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.isLoaded = true;\r\n        this.editLayerName;\r\n\r\n        this.state = {\r\n            features: null,\r\n            editFields: [],\r\n            editFeature: {},\r\n            current: 1,\r\n            allFeatures: props?.mainObject?.editUpdateCreate?.editableFeatures || {},\r\n            originalFeatures:\r\n                props?.mainObject?.editUpdateCreate?.originalFeatures || {},\r\n            totalPage: 0,\r\n            minIndex: 0,\r\n            maxIndex: pageSize,\r\n            selectedFeatures: [],\r\n            isEditMultiple: false,\r\n            mapLoaded: false,\r\n        };\r\n\r\n        this.props.setEditableFeatures({ ...this.state.allFeatures });\r\n        this.props.setOriginalFeatures({ ...this.state.originalFeatures });\r\n    }\r\n\r\n    formatNumber(num) {\r\n        return (+num).toFixed(2).replace(/[.,]00$/, \"\");\r\n    }\r\n\r\n    zoomToFeature(feature) {\r\n        highlightFeature(feature, this.map, {\r\n            layerName: \"ZoomGraphicLayer\",\r\n            isZoom: true,\r\n            isHighlighPolygonBorder: true,\r\n            zoomFactor: 20,\r\n        });\r\n    }\r\n\r\n    removeFeature(feature, index) {\r\n        this.state.allFeatures[feature.layerName].features.splice(index, 1);\r\n        this.state.originalFeatures[feature.layerName].features.splice(index, 1);\r\n\r\n        this.props.setEditableFeatures({ ...this.state.allFeatures });\r\n        this.props.setOriginalFeatures({ ...this.state.originalFeatures });\r\n\r\n        this.setState({\r\n            allFeatures: { ...this.state.allFeatures },\r\n            originalFeatures: { ...this.state.originalFeatures },\r\n        });\r\n    }\r\n\r\n    deleteFeature(feature, index) {\r\n        this.state.allFeatures[feature.layerName].features[index].isDelete =\r\n            !this.state.allFeatures[feature.layerName].features[index].isDelete;\r\n        this.props.setEditableFeatures({ ...this.state.allFeatures });\r\n\r\n        this.setState({ allFeatures: { ...this.state.allFeatures } });\r\n    }\r\n\r\n    drawEditableFeatures(features) {\r\n        //let layerInfo = addFeaturesMapLayers.find((l) => l.value == this.props.UploadFileDetails.layerName);\r\n        //let annotationField = layerInfo.outFields.find((x) => x.isMainAnnotaion);\r\n        clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n        clearGraphicFromLayer(this.map, \"ZoomGraphicLayer\");\r\n\r\n        features.forEach((f) => {\r\n            let pt;\r\n\r\n            if (f.geometry.type == \"point\") {\r\n                pt = f.geometry;\r\n            } else {\r\n                pt = f.geometry.getExtent().getCenter();\r\n            }\r\n            /*addParcelNo(\r\n                      pt, this.map, convertToArabic(f.attributes[annotationField.name]),\r\n                      \"ParcelPlanNoGraphicLayer\", 40, [0, 0, 0]\r\n                  );*/\r\n\r\n            var symbol;\r\n\r\n            if (f.geometry.type === \"point\") {\r\n                symbol = new esri.symbol.SimpleMarkerSymbol(\r\n                    esri.symbol.SimpleMarkerSymbol.STYLE_CIRCLE,\r\n                    28,\r\n                    new esri.symbol.SimpleLineSymbol(\r\n                        esri.symbol.SimpleLineSymbol.STYLE_SOLID,\r\n                        new esri.Color([0, 0, 0]),\r\n                        2\r\n                    ),\r\n                    new esri.Color([0, 0, 0, 0.2])\r\n                );\r\n            } else if (f.geometry.type === \"polyline\") {\r\n                symbol = new esri.symbol.SimpleLineSymbol(\r\n                    esri.symbol.SimpleLineSymbol.STYLE_SOLID,\r\n                    new esri.Color([0, 0, 0]),\r\n                    7\r\n                );\r\n            } else {\r\n                symbol = new esri.symbol.SimpleFillSymbol(\r\n                    esri.symbol.SimpleFillSymbol.STYLE_NULL,\r\n                    new esri.symbol.SimpleLineSymbol(\r\n                        esri.symbol.SimpleFillSymbol.STYLE_SOLID,\r\n                        new esri.Color([0, 0, 0]),\r\n                        3\r\n                    ),\r\n                    new esri.Color([0, 0, 0])\r\n                );\r\n            }\r\n\r\n            var graphic = new esri.Graphic(f.geometry, symbol, null);\r\n\r\n            this.map.getLayer(\"ZoomGraphicLayer\").add(graphic);\r\n        });\r\n\r\n        zoomToFeature(this.map.getLayer(\"ZoomGraphicLayer\").graphics, this.map, 2);\r\n    }\r\n\r\n    reProjectAndMapSpatailRelation(features) {\r\n        store.dispatch({ type: \"Show_Loading_new\", loading: true });\r\n        project(\r\n            [...features.map((x) => x.geometry)],\r\n            this.map.spatialReference.wkid,\r\n            (res) => {\r\n                features.forEach((f, index) => {\r\n                    f.geometry = res[index];\r\n                });\r\n\r\n                this.getSpatialRelationsWithLayers(\r\n                    features,\r\n                    this.layerInfo.spatialRelationLayers\r\n                ).then((spatialFeatures) => {\r\n                    getFeatureDomainName(\r\n                        spatialFeatures,\r\n                        this.LayerID[this.props.UploadFileDetails.layerName],\r\n                        null,\r\n                        addedParcelMapServiceUrl\r\n                    ).then((r) => {\r\n                        store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n\r\n                        this.drawEditableFeatures([...r]);\r\n                        this.props.setEditableFeatures([...r]);\r\n                        this.setState({\r\n                            features: [...r],\r\n                            totalPage: r.length / pageSize,\r\n                            minIndex: 0,\r\n                            maxIndex: pageSize,\r\n                        });\r\n                    });\r\n                });\r\n            },\r\n            true\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() { }\r\n\r\n    mapFieldsAndGetDomainCodes = (attributes, searchBy) => {\r\n        let tempAttributes = {};\r\n\r\n        this.props.UploadFileDetails.activeLayerDetails.outFields.forEach(\r\n            (outField) => {\r\n                if (outField.mappingField) {\r\n                    let domainField = this.LayerFields.find(\r\n                        (x) => x.name == outField.name\r\n                    );\r\n                    if (domainField?.domain) {\r\n                        let domainValues = domainField.domain.codedValues.filter(\r\n                            (x) => x[searchBy] == attributes[outField.mappingField]\r\n                        );\r\n                        if (domainValues.length == 1) {\r\n                            if (searchBy == \"code\") {\r\n                                tempAttributes[outField.name + \"_Code\"] = domainValues[0].code;\r\n                                tempAttributes[outField.name] = domainValues[0].name;\r\n                            } else {\r\n                                tempAttributes[outField.name + \"_Code\"] = domainValues[0].code;\r\n                                tempAttributes[outField.name] =\r\n                                    attributes[outField.mappingField] != \"<Null>\"\r\n                                        ? attributes[outField.mappingField]\r\n                                        : null;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        tempAttributes[outField.name] =\r\n                            attributes[outField.mappingField] != \"<Null>\"\r\n                                ? attributes[outField.mappingField]\r\n                                : null;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n\r\n        return tempAttributes;\r\n    };\r\n\r\n    getSpatialRelationsWithLayers = (features, spatialRelationLayers) => {\r\n        return new Promise((resolve, reject) => {\r\n            store.dispatch({ type: \"Show_Loading_new\", loading: true });\r\n            let intersectGraphic = window.geometryEngine.union(\r\n                features.map((f) => {\r\n                    return f.geometry;\r\n                })\r\n            );\r\n            let promiseList = [];\r\n            spatialRelationLayers.forEach((item) => {\r\n                let layerId = this.LayerID[item.layerName];\r\n                promiseList.push(\r\n                    queryTask({\r\n                        url: addedParcelMapServiceUrl + \"/\" + layerId,\r\n                        geometry: intersectGraphic,\r\n                        queryWithGemoerty: true,\r\n                        returnGeometry: true,\r\n                        outFields: item.bindFields.map((i) => i.dependLayerField),\r\n                        returnExecuteObject: true,\r\n                    })\r\n                );\r\n            });\r\n\r\n            let promises = window.promiseAll(promiseList);\r\n            promises.then((result) => {\r\n                features.forEach((feature) => {\r\n                    spatialRelationLayers.forEach((item, index) => {\r\n                        let intersectedGeometry = result[index].features.find((x) => {\r\n                            return window.geometryEngine.contains(\r\n                                x.geometry,\r\n                                feature.geometry\r\n                            );\r\n                        });\r\n                        if (intersectedGeometry) {\r\n                            item.bindFields.forEach((bindField) => {\r\n                                feature.attributes[bindField.mappingField] =\r\n                                    intersectedGeometry.attributes[bindField.dependLayerField];\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n\r\n                if (!features.find((x) => x.attributes.MUNICIPALITY_NAME)) {\r\n                    message.error(\"البيانات المدرجة خارج حدود البلديات\");\r\n\r\n                    resolve([]);\r\n                } else {\r\n                    resolve([...features]);\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    handleOk = () => {\r\n        if (this.state.isEditMultiple) {\r\n            this.state.allFeatures[this.state.isEditMultiple].features.forEach(\r\n                (f) => {\r\n                    if (f.isSelected) {\r\n                        Object.keys(this.state.editFeature.attributes).forEach(\r\n                            (attribute) => {\r\n                                if (this.state.editFeature.attributes[attribute])\r\n                                    f.attributes[attribute] =\r\n                                        this.state.editFeature.attributes[attribute];\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n            );\r\n        } else {\r\n            this.state.allFeatures[this.state.editFeature.layerName].features[\r\n                this.state.editFeature.index\r\n            ].attributes = { ...this.state.editFeature.attributes };\r\n        }\r\n\r\n        this.setState({\r\n            allFeatures: { ...this.state.allFeatures },\r\n            showModal: false,\r\n            isEditMultiple: false,\r\n        });\r\n\r\n        this.props.setEditableFeatures({ ...this.state.allFeatures });\r\n        //this.drawEditableFeatures([...this.state.features]);\r\n    };\r\n\r\n    removeDialog = () => {\r\n        this.setState({ showModal: false, isEditMultiple: false });\r\n    };\r\n\r\n    checkIntersect = (features, OBJECTID) => {\r\n        if (features.length == 1) {\r\n            if (features[0].attributes[\"OBJECTID\"] != OBJECTID) {\r\n                return true;\r\n            }\r\n        }\r\n        else if (features.length > 1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    checkLineFullIntersect = (features, OBJECTID, newFeature, layerType) => {\r\n\r\n        let isIntersect = false;\r\n        if (layerType == \"line\") {\r\n            if (features.length == 1) {\r\n                if (features[0].attributes[\"OBJECTID\"] != OBJECTID) {\r\n                    return true;\r\n                }\r\n            }\r\n            else if (features.length > 1) {\r\n                features.filter((x) => x.attributes[\"OBJECTID\"] != OBJECTID).forEach((f) => {\r\n                    if(!isIntersect)\r\n                    {\r\n                        if (newFeature.spatialReference)\r\n                            delete newFeature.spatialReference._geVersion;\r\n                        if (f.geometry.spatialReference)\r\n                            delete f.geometry.spatialReference._geVersion;\r\n\r\n                        isIntersect = window.geometryEngine.equals(newFeature , f.geometry);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else{\r\n            return true;\r\n        }\r\n        return isIntersect;\r\n    }\r\n\r\n    editGraphicFeature(feature, index, type, layer) {\r\n        if (this.editToolbar) this.editToolbar.deactivate();\r\n        else {\r\n            this.editToolbar = new window.Edit(this.map);\r\n\r\n            this.editToolbar.on(\"deactivate\", (evt) => {\r\n                if (evt.info.isModified) {\r\n\r\n                    let editGraphic = { ...evt.graphic };\r\n\r\n                    let editFeature = this.state.allFeatures[\r\n                        this.editLayerName\r\n                    ].features.find(\r\n                        (x) =>\r\n                            x.attributes[\"OBJECTID\"] == editGraphic.attributes[\"OBJECTID\"]\r\n                    );\r\n\r\n                    let layerId = getLayerId(this.map.__mapInfo, editGraphic.layerName);\r\n\r\n                    queryTask({\r\n                        url: addedParcelMapServiceUrl + \"/\" + layerId,\r\n                        geometry: editGraphic.geometry,\r\n                        outFields: ['OBJECTID'],\r\n                        spatialRelationship:\r\n                            editAndDeleteMapLayers[editGraphic.layerName].type == \"line\" ? \"SPATIAL_REL_INTERSECTS\" : \"SPATIAL_REL_OVERLAPS\",\r\n                        queryWithGemoerty: true,\r\n                        returnGeometry: true,\r\n                        callbackResult: ({ features }) => {\r\n\r\n                            if (!this.checkIntersect(features, editGraphic.attributes[\"OBJECTID\"]) || !this.checkLineFullIntersect(features, editGraphic.attributes[\"OBJECTID\"], editGraphic.geometry, editAndDeleteMapLayers[editGraphic.layerName].type)) {\r\n                                if (editAndDeleteMapLayers[editGraphic.layerName].type == \"polygon\") {\r\n\r\n                                    let areaField = editAndDeleteMapLayers[editGraphic.layerName].outFields.find((x) => x.isArea);\r\n                                    if (areaField) {\r\n\r\n                                        //\r\n\r\n                                        if (editGraphic.geometry.spatialReference)\r\n                                            delete editGraphic.geometry.spatialReference._geVersion;\r\n\r\n                                        editFeature.attributes[areaField.name] =\r\n                                            window.geometryEngine.planarArea(new esri.geometry.Polygon(JSON.parse(JSON.stringify(editGraphic.geometry))));\r\n                                        window.notifySystem(\"info\", \"تم تغيير المساحة\");\r\n\r\n                                    }\r\n\r\n                                    drawLength(this.map, [{\r\n                                        geometry:\r\n                                            new esri.geometry.Polygon(JSON.parse(JSON.stringify(editGraphic.geometry)))\r\n                                    }]);\r\n\r\n                                }\r\n                                else if (editAndDeleteMapLayers[editGraphic.layerName].type == \"line\") {\r\n                                    drawLength_Lines(this.map, [{\r\n                                        geometry:\r\n                                            new esri.geometry.Polyline(JSON.parse(JSON.stringify(editGraphic.geometry)))\r\n                                    }]);\r\n                                }\r\n                                editFeature.geometry = editGraphic.geometry;\r\n                                editFeature.isUploaded = true;\r\n\r\n                                this.props.setEditableFeatures({ ...this.state.allFeatures });\r\n\r\n                                this.setState({\r\n                                    allFeatures: { ...this.state.allFeatures },\r\n                                });\r\n\r\n                                highlightFeature(editFeature, this.map, {\r\n                                    layerName: \"ZoomGraphicLayer\",\r\n                                    isZoom: true,\r\n                                    isHighlighPolygonBorder: true,\r\n                                    zoomFactor: 20,\r\n                                });\r\n\r\n                    this.map.graphics.clear();\r\n                }\r\n                            else {\r\n\r\n                                window.notifySystem(\"error\", \"لا يمكن رسم قطعتين متقاطعتين\");\r\n\r\n                                highlightFeature(editFeature, this.map, {\r\n                                    layerName: \"ZoomGraphicLayer\",\r\n                                    isZoom: true,\r\n                                    isHighlighPolygonBorder: true,\r\n                                    zoomFactor: 20,\r\n                                });\r\n\r\n                                this.map.graphics.clear();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            //Use the edit toolbar to edit vertices\r\n        }\r\n\r\n        this.editLayerName = layer;\r\n\r\n        var polygonSymbol = new esri.symbol.SimpleFillSymbol();\r\n        var polylineSymbol = new esri.symbol.SimpleLineSymbol();\r\n        var symbol = feature.geometry.rings ? polygonSymbol : polylineSymbol;\r\n\r\n        let tempGeometry = null;\r\n\r\n        if (feature.geometry.type == \"polygon\") {\r\n            tempGeometry = new esri.geometry.Polygon(\r\n                JSON.parse(JSON.stringify(feature.geometry))\r\n            );\r\n        } else if (feature.geometry.type == \"point\") {\r\n            tempGeometry = new esri.geometry.Point(\r\n                JSON.parse(JSON.stringify(feature.geometry))\r\n            );\r\n            symbol = new esri.symbol.SimpleMarkerSymbol(\r\n                esri.symbol.SimpleMarkerSymbol.STYLE_CIRCLE,\r\n                28,\r\n                new esri.symbol.SimpleLineSymbol(\r\n                    esri.symbol.SimpleLineSymbol.STYLE_SOLID,\r\n                    new esri.Color([0, 0, 0]),\r\n                    2\r\n                ),\r\n                new esri.Color([0, 0, 0, 0.2])\r\n            );\r\n        } else {\r\n            tempGeometry = new esri.geometry.Polyline(\r\n                JSON.parse(JSON.stringify(feature.geometry))\r\n            );\r\n        }\r\n\r\n        var graphic = new esri.Graphic(tempGeometry, symbol, feature.attributes);\r\n\r\n        graphic.layerName = layer;\r\n\r\n        this.map.graphics.clear();\r\n\r\n        this.map.graphics.add(graphic);\r\n\r\n        if (type == \"MOVE\") {\r\n            this.editToolbar.activate(\r\n                window.Edit.MOVE,\r\n                graphic\r\n            );\r\n        }\r\n        else if (type == \"EDIT_VERTICES\") {\r\n            if (graphic.type == \"point\") {\r\n                this.editToolbar.activate(\r\n                    window.Edit.MOVE,\r\n                    graphic\r\n                );\r\n            }\r\n            else {\r\n                this.editToolbar.activate(\r\n                    window.Edit.EDIT_VERTICES | window.Edit.SCALE,\r\n                    graphic\r\n                );\r\n\r\n                if (feature.geometry.type == \"polygon\") {\r\n\r\n                    drawLength(this.map, [{\r\n                        geometry:\r\n                            new esri.geometry.Polygon(JSON.parse(JSON.stringify(graphic.geometry)))\r\n                    }]);\r\n                }\r\n                else if (feature.geometry.type == \"polyline\") {\r\n                    drawLength_Lines(this.map, [{\r\n                        geometry:\r\n                            new esri.geometry.Polyline(JSON.parse(JSON.stringify(graphic.geometry)))\r\n                    }]);\r\n                }\r\n            }\r\n        }\r\n        else if (type == \"ROTATE\")\r\n            this.editToolbar.activate(window.Edit.ROTATE, graphic);\r\n    }\r\n\r\n    editFeature(feature, index) {\r\n        let editFeatureObj = { index: index };\r\n        editFeatureObj.attributes = { ...feature.attributes };\r\n        editFeatureObj.layerName = feature.layerName;\r\n\r\n        let layerInfo = editAndDeleteMapLayers[feature.layerName];\r\n        let layerFields = this.map.__mapInfo.info.$layers.layers.find(\r\n            (x) => x.name == feature.layerName\r\n        )?.fields;\r\n        let editFieldsObj = [];\r\n\r\n        let mandatoryFields = layerInfo.outFields\r\n            .filter((x) => x.isMandatory)\r\n            .map((f) => f.name);\r\n\r\n        layerInfo.outFields.forEach((outField) => {\r\n            editFieldsObj.push(layerFields.find((x) => x.name == outField.name));\r\n        });\r\n\r\n        editFieldsObj.forEach((item) => {\r\n            if (item && mandatoryFields.indexOf(item.name) > -1) {\r\n                item.isMandatory = true;\r\n            }\r\n            if (item && item.domain && item.type == \"esriFieldTypeInteger\") {\r\n                editFeatureObj.attributes[item.name + \"_Code\"] =\r\n                    +editFeatureObj.attributes[item.name + \"_Code\"];\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            showModal: true,\r\n            editFields: [...editFieldsObj],\r\n            editFeature: { ...editFeatureObj },\r\n            isEditMultiple: false,\r\n        });\r\n    }\r\n\r\n    handleUserInput = (e) => {\r\n        let editFeatureTemp = { ...this.state.editFeature };\r\n        editFeatureTemp.attributes[e.target.name] = e.target.value;\r\n        this.setState({ editFeature: { ...editFeatureTemp } });\r\n    };\r\n\r\n    selectHandleChange = (e, value) => {\r\n        let editFeatureTemp = { ...this.state.editFeature };\r\n        editFeatureTemp.attributes[e.name + \"_Code\"] = value;\r\n        editFeatureTemp.attributes[e.name] = e.domain.codedValues.find(\r\n            (x) => x.code == value\r\n        ).name;\r\n\r\n        this.setState({ editFeature: { ...editFeatureTemp } });\r\n    };\r\n\r\n    isdisabledField = (field, feature) => {\r\n        if (feature) {\r\n            let layerInfo = editAndDeleteMapLayers[feature.layerName || feature];\r\n            return layerInfo?.outFields?.find((x) => x.name == field.name)\r\n                ?.isDisabled;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    onChangeSelectFeature = (index, feature, e) => {\r\n        this.state.allFeatures[feature.layerName].features[index].isSelected =\r\n            !this.state.allFeatures[feature.layerName].features[index].isSelected;\r\n\r\n        let selectedFeatures = this.state.allFeatures[\r\n            feature.layerName\r\n        ].features.filter((x) => x.isSelected);\r\n\r\n        if (selectedFeatures.length > 1) {\r\n            this.setState({\r\n                selectedFeatures: [...selectedFeatures],\r\n                allFeatures: { ...this.state.allFeatures },\r\n            });\r\n        } else {\r\n            this.setState({\r\n                selectedFeatures: [],\r\n                allFeatures: { ...this.state.allFeatures },\r\n            });\r\n        }\r\n    };\r\n\r\n    zoomToSelectedFeature = (layer) => {\r\n        let features = [];\r\n\r\n        this.state.allFeatures[layer].features.forEach((f, index) => {\r\n            if (f.isSelected) {\r\n                features.push(f);\r\n            }\r\n        });\r\n\r\n        if (!features.length) {\r\n            features = this.state.features;\r\n        }\r\n\r\n        this.drawEditableFeatures(features);\r\n    };\r\n\r\n    editSelectedFeatures = (layer) => {\r\n        let editFeatureObj = { attributes: {} };\r\n        let layerInfo = editAndDeleteMapLayers[layer];\r\n        let layerFields = this.map.__mapInfo.info.$layers.layers.find(\r\n            (x) => x.name == layer\r\n        )?.fields;\r\n\r\n        let editFieldsObj = [];\r\n\r\n        layerInfo.outFields.forEach((outField) => {\r\n            if (!this.isdisabledField(outField, layer))\r\n                editFieldsObj.push(layerFields.find((x) => x.name == outField.name));\r\n        });\r\n\r\n        this.setState({\r\n            showModal: true,\r\n            editFields: [...editFieldsObj],\r\n            editFeature: { ...editFeatureObj },\r\n            isEditMultiple: layer,\r\n        });\r\n    };\r\n\r\n    deleteSelectedFeatures = (layer) => {\r\n        this.state.allFeatures[layer].features.forEach((f, index) => {\r\n            f.isDelete = !f.isDelete;\r\n        });\r\n\r\n        this.props.setEditableFeatures({ ...this.state.allFeatures });\r\n\r\n        this.setState({\r\n            allFeatures: { ...this.state.allFeatures },\r\n        });\r\n    };\r\n\r\n    removeSelectedFeatures = (layer) => {\r\n        this.state.allFeatures[layer].isSelectAll = false;\r\n        this.state.allFeatures[layer].selectedFeatures = [];\r\n        this.state.allFeatures[layer].features = [\r\n            ...this.state.allFeatures[layer].features.filter((x) => !x.isSelected),\r\n        ];\r\n\r\n        this.props.setEditableFeatures({ ...this.state.allFeatures });\r\n\r\n        this.setState({\r\n            allFeatures: { ...this.state.allFeatures },\r\n        });\r\n    };\r\n\r\n    onChangeSelectAll = (layerName) => {\r\n        this.state.allFeatures[layerName].isSelectAll =\r\n            !this.state.allFeatures[layerName].isSelectAll;\r\n        this.state.allFeatures[layerName].selectedFeatures = [];\r\n\r\n        this.state.allFeatures[layerName].features.map((f) => {\r\n            f.isSelected = this.state.allFeatures[layerName].isSelectAll;\r\n        });\r\n        this.setState({\r\n            allFeatures: { ...this.state.allFeatures },\r\n        });\r\n    };\r\n\r\n    handleChange = (page) => {\r\n        this.setState({\r\n            current: page,\r\n            minIndex: (page - 1) * pageSize,\r\n            maxIndex: page * pageSize,\r\n        });\r\n    };\r\n\r\n    mapLoaded = (map) => {\r\n        getMapInfo(addedParcelMapServiceUrl).then((response) => {\r\n            map.__mapInfo = response;\r\n            this.map = map;\r\n\r\n            this.map.on(\"click\", (evt) => {\r\n                this.editToolbar.deactivate();\r\n            });\r\n            this.setState({ mapLoaded: true });\r\n            this.props.setCurrentMap(map);\r\n\r\n            if (Object.keys(this.state.allFeatures).length > 0) {\r\n                if (\r\n                    this.state?.allFeatures[Object.keys(this.state.allFeatures)[0]]\r\n                        ?.features?.length > 0\r\n                ) {\r\n                    highlightFeature(\r\n                        this.state.allFeatures[Object.keys(this.state.allFeatures)[0]]\r\n                            .features,\r\n                        this.map,\r\n                        {\r\n                            layerName: \"ZoomGraphicLayer\",\r\n                            isZoom: true,\r\n                            isHighlighPolygonBorder: true,\r\n                            zoomFactor: 20,\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    setSelectMapLayer = (layer) => {\r\n        this.props.setSelectMapLayer(layer);\r\n    };\r\n\r\n    addFeature = (feature) => {\r\n\r\n\r\n        this.state.allFeatures[feature.layerName] =\r\n            this.state.allFeatures[feature.layerName] || {};\r\n        this.state.allFeatures[feature.layerName].features =\r\n            this.state.allFeatures[feature.layerName].features || [];\r\n        this.state.allFeatures[feature.layerName].features.push({ ...feature });\r\n\r\n        //set original features for compare\r\n        this.state.originalFeatures[feature.layerName] =\r\n            this.state.originalFeatures[feature.layerName] || {};\r\n        this.state.originalFeatures[feature.layerName].features =\r\n            this.state.originalFeatures[feature.layerName].features || [];\r\n        this.state.originalFeatures[feature.layerName].features.push(JSON.parse(JSON.stringify(feature)));\r\n\r\n        this.setState({\r\n            allFeatures: { ...this.state.allFeatures },\r\n            originalFeatures: { ...this.state.originalFeatures },\r\n        });\r\n\r\n        this.props.setEditableFeatures({ ...this.state.allFeatures });\r\n        this.props.setOriginalFeatures({ ...this.state.originalFeatures });\r\n    };\r\n\r\n    addSelectedFeaturesFromMap = () => {\r\n        this.props.selectedFeaturesOnMap.forEach((f) => {\r\n            f.layerName = this.props.selectMapLayer;\r\n            this.addFeature(f);\r\n        });\r\n\r\n        this.props.setSelectedFeaturesOnMap([]);\r\n    };\r\n\r\n    exportFile = (fileType, layer) => {\r\n        let conditions = this.state.allFeatures[layer].features.map((f) => {\r\n            return \"OBJECTID = \" + f.attributes[\"OBJECTID\"];\r\n        });\r\n        let where = conditions.join(\" or \");\r\n        let whereClause = [{ [\"SDE.\" + layer]: where }];\r\n        let params = {\r\n            Filters: whereClause,\r\n            FileType: fileType,\r\n        };\r\n        showLoading(true);\r\n        //notification with it is succeeded\r\n        //notificationMessage(t(\"fileUploading\"), 5);\r\n        executeGPTool(\r\n            window.exportFeaturesGPUrl,\r\n            params,\r\n            this.callBackExportFile,\r\n            this.callbackExportError,\r\n            \"output_value\"\r\n        );\r\n    };\r\n\r\n    callBackExportFile = (result) => {\r\n\r\n        if (result) {\r\n            let anchor = document.createElement(\"a\");\r\n            anchor.href = window.filesURL + \"/\" + result.value;\r\n            // anchor.download = layersNames[activeLink].layerName\r\n            document.body.appendChild(anchor);\r\n            anchor.click();\r\n        }\r\n        showLoading(false);\r\n    };\r\n    callbackExportError = (err) => {\r\n        console.log(err);\r\n        //notification with something error happened\r\n        //notificationMessage(t(\"ErrorOccurd\"), 5);\r\n\r\n        window.notifySystem(\"error\", \"حدث خطأ اثناء استخراج الملفات\");\r\n        showLoading(false);\r\n    };\r\n\r\n    exportMenu = (layer) => {\r\n        return (\r\n            <Menu className=\"exportMenu\">\r\n                <Menu.Item>\r\n                    <label onClick={() => this.exportFile(\"Shape\", layer)}>\r\n                        Shape استخراج ملف\r\n                    </label>\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    <>\r\n                        <ExportCSV\r\n                            dataSet={() =>\r\n                                this.exportCsvMapping(this.state.allFeatures[layer].features)\r\n                            }\r\n                            labels={[...layersSetting[layer].outFields, \"x\", \"y\"]}\r\n                            layerName={layer}\r\n                        />\r\n                    </>\r\n                </Menu.Item>\r\n            </Menu>\r\n        );\r\n    };\r\n\r\n    setFeatures = (features, layer) => {\r\n        let layerdId = getLayerId(this.map.__mapInfo, layer);\r\n\r\n        getFeatureDomainName(\r\n            features,\r\n            layerdId,\r\n            false,\r\n            addedParcelMapServiceUrl\r\n        ).then((domainFeatures) => {\r\n            store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n\r\n            domainFeatures.forEach((d) => {\r\n                d.isUploaded = true;\r\n                d.layerName = layer;\r\n            });\r\n\r\n            this.state.allFeatures[layer] = this.state.allFeatures[layer] || {};\r\n            this.state.allFeatures[layer].features =\r\n                this.state.allFeatures[layer].features || [];\r\n            //self.state.allFeatures[layer].features.push(...domainFeatures);\r\n\r\n            let isMatched = true;\r\n            domainFeatures.forEach((f) => {\r\n                let tempF = this.state.allFeatures[layer].features.find(\r\n                    (x) => x.attributes.OBJECTID == f.attributes.OBJECTID\r\n                );\r\n                if (tempF) {\r\n                    tempF.attributes = { ...f.attributes };\r\n                    tempF.geometry = f.geometry;\r\n                    tempF.isUploaded = true;\r\n                } else {\r\n                    isMatched = false;\r\n                }\r\n            });\r\n\r\n            if (isMatched) {\r\n\r\n                this.zoomToFeature(this.state.allFeatures[layer].features);\r\n                this.setState({\r\n                    allFeatures: { ...this.state.allFeatures },\r\n                });\r\n                this.props.setEditableFeatures({ ...this.state.allFeatures });\r\n            } else {\r\n                window.notifySystem(\r\n                    \"error\",\r\n                    \"للبيانات المرفوعة لا يتوافق مع البيانات المختارة OBJECTID\"\r\n                );\r\n            }\r\n        });\r\n    };\r\n\r\n    uploadMenu = (layer) => {\r\n        let self = this;\r\n        let startUpload = false;\r\n\r\n        const excelUploadProps = {\r\n            name: \"file\",\r\n            action: `${host}/uploadMultifiles`,\r\n            accept: \".xlsx,.xls\",\r\n            onChange(info) {\r\n                if (info.file.status === \"uploading\") {\r\n                    if (!startUpload) {\r\n                        store.dispatch({ type: \"Show_Loading_new\", loading: true });\r\n                        startUpload = true;\r\n                    }\r\n                }\r\n\r\n                if (info.file.status === \"done\") {\r\n                    readExcel(info.file?.response[0]?.data, (res) => {\r\n                        let features = formatMappingExcel(res.features, layer, self.map);\r\n\r\n                        self.setFeatures(features, layer);\r\n                    });\r\n                }\r\n            },\r\n        };\r\n\r\n        const handleFileChange = (e) => {\r\n            if (e.target.files.length == 8) {\r\n                const formData = new window.FormData();\r\n                for (let i = 0; i < e.target.files.length; i++) {\r\n                    formData.append(\"file\" + i, e.target.files[i]);\r\n                }\r\n                return axios\r\n                    .post(`${host}/uploadShpeFiles`, formData, {\r\n                        headers: {\r\n                            \"content-type\": \"multipart/form-data\",\r\n                        },\r\n                    })\r\n                    .then(({ data }) => {\r\n                        let params, outputName, processingToolUrl;\r\n\r\n                        params = {\r\n                            ShapeFile_Name: data[0].data,\r\n                        };\r\n\r\n                        processingToolUrl = `${window.restServicesPath.replace(\r\n                            \"/Eastern\",\r\n                            \"\"\r\n                        )}/ShapeFileToJSON/GPServer/ShapeFileToJSON`;\r\n\r\n                        //outputName = \"Output_JSON\";\r\n\r\n                        uploadGISFile(\r\n                            processingToolUrl,\r\n                            params,\r\n                            (data) => {\r\n                                if (data.value?.features?.length) {\r\n                                    \r\n                                    let features = formatMappingShape(\r\n                                        data.value.features,\r\n                                        layer,\r\n                                        self.map\r\n                                    );\r\n                                    self.setFeatures(features, layer);\r\n                                } else {\r\n                                    window.notifySystem(\"error\", \"الملف لا يحتوي على بيانات\");\r\n                                }\r\n                                store.dispatch({\r\n                                    type: \"Show_Loading_new\",\r\n                                    loading: false,\r\n                                });\r\n                            },\r\n                            outputName\r\n                        );\r\n                    });\r\n            }\r\n        };\r\n\r\n        return (\r\n            <Menu className=\"exportMenu\">\r\n                <Menu.Item>\r\n                    <>\r\n                        <input\r\n                            type=\"file\"\r\n                            id=\"actual-btn\"\r\n                            hidden\r\n                            onChange={handleFileChange}\r\n                            multiple\r\n                        />\r\n                        <label htmlFor=\"actual-btn\">Shape رفع ملف</label>\r\n                    </>\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    <Upload {...excelUploadProps}>\r\n                        <label>Excel رفع ملف</label>\r\n                    </Upload>\r\n                </Menu.Item>\r\n            </Menu>\r\n        );\r\n    };\r\n\r\n    exportCsvMapping = (features) => {\r\n        let records = [];\r\n        let featuresClone = JSON.parse(JSON.stringify(features));\r\n\r\n        featuresClone.forEach((f) => {\r\n            Object.keys(f.attributes).forEach((attribute) => {\r\n                if (f.attributes[attribute + \"_Code\"] != null) {\r\n                    f.attributes[attribute] = f.attributes[attribute + \"_Code\"];\r\n                    delete f.attributes[attribute + \"_Code\"];\r\n                }\r\n            });\r\n        });\r\n\r\n        featuresClone.forEach((f) => {\r\n            if (f.geometry?.rings) {\r\n                f.geometry?.rings[0]?.forEach((point) => {\r\n                    records.push({\r\n                        attributes: { ...f.attributes, x: point[0], y: point[1] },\r\n                    });\r\n                });\r\n            }\r\n            else if (f.geometry?.paths) {\r\n                f.geometry?.paths[0]?.forEach((point) => {\r\n                    records.push({\r\n                        attributes: { ...f.attributes, x: point[0], y: point[1] },\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                records.push({\r\n                    attributes: { ...f.attributes, x: f.geometry.x, y: f.geometry.y },\r\n                });\r\n            }\r\n\r\n        });\r\n\r\n        return records;\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            fullMapWidth,\r\n            selectedFeaturesOnMap,\r\n            mainObject: {\r\n                selectEditingWorkFlow: {\r\n                    selectWorkFlow: { workflowType },\r\n                },\r\n            },\r\n        } = this.props;\r\n        const { editFields, editFeature, mapLoaded, allFeatures } = this.state;\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div className={!fullMapWidth ? \"filter-section implementation\" : \"\"}>\r\n                        <div>\r\n                            {mapLoaded && (\r\n                                <div\r\n                                    style={{\r\n                                        boxShadow: \"1px 1px 3px black\",\r\n                                        paddingLeft: \"15px\",\r\n                                        height: \"487px\",\r\n                                        overflowY: \"auto\",\r\n                                        overflowX: \"hidden\",\r\n                                    }}>\r\n                                    <FilterComponent\r\n                                        map={this.map}\r\n                                        setSelectMapLayer={this.setSelectMapLayer}\r\n                                        addFeature={this.addFeature}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        <div>\r\n                            <div>\r\n                                <StickyContainer style={{ direction: \"ltr\" }}>\r\n                                    <Sticky bottomOffset={80}>\r\n                                        {({ style }) => (\r\n                                            <MapBtnsComponent\r\n                                                style={style}\r\n                                                {...this.props}></MapBtnsComponent>\r\n                                        )}\r\n                                    </Sticky>\r\n                                </StickyContainer>\r\n                                <div>\r\n                                    <MapComponent\r\n                                        mapload={this.mapLoaded.bind(this)}\r\n                                        {...this.props}></MapComponent>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{ textAlign: \"end\", marginTop: \"10px\" }}>\r\n                    {selectedFeaturesOnMap && selectedFeaturesOnMap.length ? (\r\n                        <Button\r\n                            onClick={this.addSelectedFeaturesFromMap.bind(this)}\r\n                            className=\"add_mktab toolsBtnStyle\"\r\n                            type=\"primary\"\r\n                            icon=\"plus\">\r\n                            {\" \"}\r\n                            إضافة مواقع{\" \"}\r\n                        </Button>\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n                {Object.keys(allFeatures).map((layer) => {\r\n                    return allFeatures[layer].features?.length ? (\r\n                        <div>\r\n                            <div\r\n                                style={{\r\n                                    background: \"#57779d\",\r\n                                    textAlign: \"center\",\r\n                                    padding: \"5px\",\r\n                                }}>\r\n                                <label\r\n                                    style={{\r\n                                        color: \"white\",\r\n                                        float:\r\n                                            allFeatures[layer].isSelectAll ||\r\n                                                allFeatures[layer].selectedFeatures?.length > 1\r\n                                                ? \"right\"\r\n                                                : \"none\",\r\n                                        marginRight: \"20px\",\r\n                                        fontSize: \"23px !important\",\r\n                                    }}>\r\n                                    {editAndDeleteMapLayers[layer].name}\r\n                                </label>\r\n                                {(allFeatures[layer].isSelectAll ||\r\n                                    allFeatures[layer].selectedFeatures?.length > 1) && (\r\n                                        <div style={{ textAlign: \"left\" }}>\r\n                                            {workflowType == \"update_geo\" && (\r\n                                                <Dropdown overlay={this.exportMenu(layer)}>\r\n                                                    <a\r\n                                                        className=\"ant-dropdown-link\"\r\n                                                        style={{ marginLeft: \"20px\" }}\r\n                                                        onClick={(e) => e.preventDefault()}>\r\n                                                        <FontAwesomeIcon\r\n                                                            icon={faCloudDownloadAlt}\r\n                                                            style={{ marginLeft: \"5px\" }}\r\n                                                        />\r\n                                                        تنزيل البيانات <Icon type=\"down\" />\r\n                                                    </a>\r\n                                                </Dropdown>\r\n                                            )}\r\n                                            {workflowType == \"update_geo\" && (\r\n                                                <Dropdown overlay={this.uploadMenu(layer)}>\r\n                                                    <a\r\n                                                        className=\"ant-dropdown-link\"\r\n                                                        style={{ marginLeft: \"20px\" }}\r\n                                                        onClick={(e) => e.preventDefault()}>\r\n                                                        <FontAwesomeIcon\r\n                                                            icon={faCloudUploadAlt}\r\n                                                            style={{ marginLeft: \"5px\" }}\r\n                                                        />\r\n                                                        رفع البيانات <Icon type=\"down\" />\r\n                                                    </a>\r\n                                                </Dropdown>\r\n                                            )}\r\n                                            {workflowType == \"edit\" || workflowType == \"update_geo\" ? (\r\n                                                <Button\r\n                                                    className=\"toolsBtnStyle\"\r\n                                                    size=\"large\"\r\n                                                    onClick={this.editSelectedFeatures.bind(this, layer)}\r\n                                                    style={{ marginLeft: \"10px\" }}>\r\n                                                    <FontAwesomeIcon icon={faEdit} />\r\n                                                    <span style={{ marginRight: \"5px\" }}>تعديل المحدد</span>\r\n                                                </Button>\r\n                                            ) : (\r\n                                                <Button\r\n                                                    className=\"toolsBtnStyle\"\r\n                                                    size=\"large\"\r\n                                                    onClick={this.deleteSelectedFeatures.bind(this, layer)}\r\n                                                    style={{ marginLeft: \"10px\" }}>\r\n                                                    <FontAwesomeIcon icon={faEdit} />\r\n                                                    <span style={{ marginRight: \"5px\" }}>حذف المحدد</span>\r\n                                                </Button>\r\n                                            )}\r\n                                            {(allFeatures[layer].isSelectAll ||\r\n                                                allFeatures[layer].selectedFeatures?.length >\r\n                                                1) /*&& selectedFeatures?.length != features?.length*/ && (\r\n                                                    <Button\r\n                                                        className=\"toolsBtnStyle\"\r\n                                                        size=\"large\"\r\n                                                        onClick={this.removeSelectedFeatures.bind(this, layer)}\r\n                                                        style={{ marginLeft: \"10px\" }}>\r\n                                                        <FontAwesomeIcon icon={faTimes} />\r\n                                                        <span style={{ marginRight: \"5px\" }}>إزالة المحدد</span>\r\n                                                    </Button>\r\n                                                )}\r\n                                            <Button\r\n                                                className=\"toolsBtnStyle\"\r\n                                                size=\"large\"\r\n                                                onClick={this.zoomToSelectedFeature.bind(this, layer)}>\r\n                                                <FontAwesomeIcon icon={faSearchPlus} className=\"\" />\r\n                                            </Button>\r\n                                        </div>\r\n                                    )}\r\n                            </div>\r\n                            <table\r\n                                className=\"table table-bordered centeredTable\"\r\n                                style={{ width: \"100%\" }}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            <div>\r\n                                                <Checkbox\r\n                                                    style={{ marginTop: \"20px\" }}\r\n                                                    checked={allFeatures[layer].isSelectAll}\r\n                                                    onChange={this.onChangeSelectAll.bind(\r\n                                                        this,\r\n                                                        layer\r\n                                                    )}></Checkbox>\r\n                                            </div>\r\n                                        </th>\r\n                                        {editAndDeleteMapLayers[layer]?.outFields\r\n                                            ?.filter((x) => !x.notInclude)\r\n                                            ?.map((field) => {\r\n                                                return <th>{field.arName}</th>;\r\n                                            })}\r\n                                        <th>الإجراءات</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {allFeatures[layer].features.map((feature, index) => {\r\n                                        return (\r\n                                            <tr\r\n                                                style={{\r\n                                                    background: feature.isDelete\r\n                                                        ? \"#ff000045\"\r\n                                                        : feature.isUploaded\r\n                                                            ? \"#fff6588f\"\r\n                                                            : \"\",\r\n                                                }}>\r\n                                                <td style={{ textAlign: \"center\" }}>\r\n                                                    <Checkbox\r\n                                                        style={{ marginTop: \"20px\" }}\r\n                                                        checked={feature.isSelected}\r\n                                                        onChange={this.onChangeSelectFeature.bind(\r\n                                                            this,\r\n                                                            index,\r\n                                                            feature\r\n                                                        )}></Checkbox>\r\n                                                </td>\r\n                                                {editAndDeleteMapLayers[layer]?.outFields\r\n                                                    ?.filter((x) => !x.notInclude)\r\n                                                    ?.map((field) => {\r\n                                                        return (\r\n                                                            <td>\r\n                                                                {isNaN(feature.attributes[field.name]) ||\r\n                                                                    !feature.attributes[field.name]\r\n                                                                    ? feature.attributes[field.name] ||\r\n                                                                    \"غير متوفر\"\r\n                                                                    : this.formatNumber(\r\n                                                                        feature.attributes[field.name]\r\n                                                                    )}\r\n                                                            </td>\r\n                                                        );\r\n                                                    })}\r\n                                                <td>\r\n                                                    {(workflowType == \"edit\" ||\r\n                                                        workflowType == \"update_geo\") && (\r\n                                                            <Tooltip title=\"تعديل\">\r\n                                                                <Button\r\n                                                                    className=\"toolsBtnStyle\"\r\n                                                                    style={{ margin: \"auto 3px\" }}\r\n                                                                    disabled={\r\n                                                                        allFeatures[layer].isSelectAll ||\r\n                                                                        allFeatures[layer].selectedFeatures?.length >\r\n                                                                        1\r\n                                                                    }\r\n                                                                    size=\"large\"\r\n                                                                    onClick={this.editFeature.bind(\r\n                                                                        this,\r\n                                                                        feature,\r\n                                                                        index\r\n                                                                    )}>\r\n                                                                    <FontAwesomeIcon icon={faEdit} className=\"\" />\r\n                                                                </Button>\r\n                                                            </Tooltip>\r\n                                                        )}\r\n                                                    {workflowType == \"update_geo\" && editAndDeleteMapLayers[layer].type != 'point' && (\r\n                                                        <Tooltip title=\"تعديل الأبعاد\" >\r\n                                                            <Button\r\n                                                                className=\"toolsBtnStyle\"\r\n                                                                style={{ margin: \"auto 3px\" }}\r\n                                                                disabled={\r\n                                                                    allFeatures[layer].isSelectAll ||\r\n                                                                    allFeatures[layer].selectedFeatures?.length >\r\n                                                                    1\r\n                                                                }\r\n                                                                size=\"large\"\r\n                                                                onClick={this.editGraphicFeature.bind(\r\n                                                                    this,\r\n                                                                    feature,\r\n                                                                    index,\r\n                                                                    \"EDIT_VERTICES\",\r\n                                                                    layer\r\n                                                                )}>\r\n                                                                <svg\r\n                                                                    width=\"24\"\r\n                                                                    height=\"24\"\r\n                                                                    viewBox=\"0 0 24 24\"\r\n                                                                    fill=\"none\"\r\n                                                                    xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                                    <rect width=\"24\" height=\"24\" fill=\"white\" />\r\n                                                                    <path\r\n                                                                        d=\"M20.2891 14.0082V20.2889H3.71133V4.16516L20.2891 14.0082Z\"\r\n                                                                        stroke=\"#196F6C\"\r\n                                                                        stroke-width=\"1.2\"\r\n                                                                    />\r\n                                                                    <line\r\n                                                                        x1=\"20.4443\"\r\n                                                                        y1=\"14.8336\"\r\n                                                                        x2=\"20.4443\"\r\n                                                                        y2=\"5.49971\"\r\n                                                                        stroke=\"#196F6C\"\r\n                                                                        stroke-linecap=\"square\"\r\n                                                                        stroke-dasharray=\"2 2\"\r\n                                                                    />\r\n                                                                    <path\r\n                                                                        d=\"M3.61133 3.72223L18.5 3.72223\"\r\n                                                                        stroke=\"#196F6C\"\r\n                                                                        stroke-linecap=\"square\"\r\n                                                                        stroke-dasharray=\"2 2\"\r\n                                                                    />\r\n                                                                    <rect\r\n                                                                        x=\"2\"\r\n                                                                        y=\"2\"\r\n                                                                        width=\"3.33333\"\r\n                                                                        height=\"3.33333\"\r\n                                                                        fill=\"#196F6C\"\r\n                                                                    />\r\n                                                                    <rect\r\n                                                                        x=\"2\"\r\n                                                                        y=\"18.6667\"\r\n                                                                        width=\"3.33333\"\r\n                                                                        height=\"3.33333\"\r\n                                                                        fill=\"#196F6C\"\r\n                                                                    />\r\n                                                                    <rect\r\n                                                                        x=\"18.6665\"\r\n                                                                        y=\"18.6667\"\r\n                                                                        width=\"3.33333\"\r\n                                                                        height=\"3.33333\"\r\n                                                                        fill=\"#196F6C\"\r\n                                                                    />\r\n                                                                    <rect\r\n                                                                        x=\"18.6665\"\r\n                                                                        y=\"12\"\r\n                                                                        width=\"3.33333\"\r\n                                                                        height=\"3.33333\"\r\n                                                                        fill=\"#A61C35\"\r\n                                                                    />\r\n                                                                    <rect\r\n                                                                        x=\"18.9165\"\r\n                                                                        y=\"2.25\"\r\n                                                                        width=\"2.83333\"\r\n                                                                        height=\"2.83333\"\r\n                                                                        stroke=\"#196F6C\"\r\n                                                                        stroke-width=\"0.5\"\r\n                                                                    />\r\n                                                                </svg>\r\n                                                            </Button>\r\n                                                        </Tooltip>\r\n                                                    )}\r\n                                                    {workflowType == \"update_geo\" && (\r\n                                                        <Tooltip title=\"تحريك\">\r\n                                                            <Button\r\n                                                                className=\"toolsBtnStyle\"\r\n                                                                style={{ margin: \"auto 3px\" }}\r\n                                                                disabled={\r\n                                                                    allFeatures[layer].isSelectAll ||\r\n                                                                    allFeatures[layer].selectedFeatures?.length >\r\n                                                                    1\r\n                                                                }\r\n                                                                size=\"large\"\r\n                                                                onClick={this.editGraphicFeature.bind(\r\n                                                                    this,\r\n                                                                    feature,\r\n                                                                    index,\r\n                                                                    \"MOVE\",\r\n                                                                    layer\r\n                                                                )}>\r\n                                                                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                                    <rect width=\"24\" height=\"24\" fill=\"white\" />\r\n                                                                    <line x1=\"4.04983\" y1=\"19.153\" x2=\"20.2047\" y2=\"4.79307\" stroke=\"#196F6C\" stroke-width=\"1.2\" stroke-linecap=\"square\" />\r\n                                                                    <path d=\"M4 4.00006L20.1323 20.1324\" stroke=\"#196F6C\" stroke-linecap=\"square\" stroke-dasharray=\"2 2\" />\r\n                                                                    <rect x=\"9.65186\" y=\"10.0161\" width=\"3.80243\" height=\"3.80243\" fill=\"#A61C35\" />\r\n                                                                </svg>\r\n                                                            </Button>\r\n                                                        </Tooltip>)}\r\n\r\n\r\n                                                    {workflowType == \"update_geo\" && editAndDeleteMapLayers[layer].type != \"point\" && (\r\n                                                        <Tooltip title=\"تدوير\">\r\n                                                            <Button\r\n                                                                className=\"toolsBtnStyle\"\r\n                                                                style={{ margin: \"auto 3px\" }}\r\n                                                                disabled={\r\n                                                                    allFeatures[layer].isSelectAll ||\r\n                                                                    allFeatures[layer].selectedFeatures?.length >\r\n                                                                    1\r\n                                                                }\r\n                                                                size=\"large\"\r\n                                                                onClick={this.editGraphicFeature.bind(\r\n                                                                    this,\r\n                                                                    feature,\r\n                                                                    index,\r\n                                                                    \"ROTATE\",\r\n                                                                    layer\r\n                                                                )}>\r\n                                                                <svg\r\n                                                                    width=\"24\"\r\n                                                                    height=\"24\"\r\n                                                                    viewBox=\"0 0 24 24\"\r\n                                                                    fill=\"none\"\r\n                                                                    xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                                    <g clip-path=\"url(#clip0_16_25)\">\r\n                                                                        <rect\r\n                                                                            width=\"24\"\r\n                                                                            height=\"24\"\r\n                                                                            transform=\"matrix(1.19249e-08 -1 -1 -1.19249e-08 24 24)\"\r\n                                                                            fill=\"white\"\r\n                                                                        />\r\n                                                                        <path\r\n                                                                            d=\"M10.2502 10.4689C11.2028 9.91891 12.4323 10.2483 12.9823 11.201C13.5323 12.1536 13.2028 13.383 12.2502 13.933C11.2976 14.483 10.0682 14.1536 9.51815 13.201C8.96815 12.2483 9.29758 11.0189 10.2502 10.4689ZM19.0444 7.70096C21.5294 12.0051 20.0544 17.5102 15.7502 19.9952L17.2502 22.5933L11.7861 21.1292L13.2502 15.6651L14.7502 18.2631C18.1017 16.3281 19.2474 12.0525 17.3124 8.70096C15.3774 5.34944 11.1017 4.20378 7.7502 6.13878C4.39869 8.07378 3.25303 12.3494 5.18803 15.701C5.94303 17.0087 7.06738 17.9761 8.34386 18.567L7.80678 20.5168C6.04219 19.7804 4.48598 18.485 3.45598 16.701C0.970976 12.3968 2.44606 6.89173 6.7502 4.40673C11.0543 1.92173 16.5594 3.39681 19.0444 7.70096Z\"\r\n                                                                            fill=\"#196F6C\"\r\n                                                                        />\r\n                                                                    </g>\r\n                                                                    <defs>\r\n                                                                        <clipPath id=\"clip0_16_25\">\r\n                                                                            <rect\r\n                                                                                width=\"24\"\r\n                                                                                height=\"24\"\r\n                                                                                fill=\"white\"\r\n                                                                                transform=\"matrix(1.19249e-08 -1 -1 -1.19249e-08 24 24)\"\r\n                                                                            />\r\n                                                                        </clipPath>\r\n                                                                    </defs>\r\n                                                                </svg>\r\n                                                            </Button>\r\n                                                        </Tooltip>\r\n                                                    )}\r\n                                                    {workflowType == \"delete\" && (\r\n                                                        <Tooltip title=\"حذف\">\r\n                                                            <Button\r\n                                                                className=\"toolsBtnStyle\"\r\n                                                                style={{ margin: \"auto 3px\" }}\r\n                                                                disabled={\r\n                                                                    allFeatures[layer].isSelectAll ||\r\n                                                                    allFeatures[layer].selectedFeatures?.length >\r\n                                                                    1\r\n                                                                }\r\n                                                                size=\"large\"\r\n                                                                onClick={this.deleteFeature.bind(\r\n                                                                    this,\r\n                                                                    feature,\r\n                                                                    index\r\n                                                                )}>\r\n                                                                <FontAwesomeIcon icon={faTrash} className=\"\" />\r\n                                                            </Button>\r\n                                                        </Tooltip>\r\n                                                    )}\r\n                                                    <Tooltip title=\"تقريب\">\r\n                                                        <Button\r\n                                                            className=\"toolsBtnStyle\"\r\n                                                            style={{ margin: \"auto 3px\" }}\r\n                                                            size=\"large\"\r\n                                                            onClick={this.zoomToFeature.bind(this, feature)}>\r\n                                                            <FontAwesomeIcon\r\n                                                                icon={faSearchPlus}\r\n                                                                className=\"\"\r\n                                                            />\r\n                                                        </Button>\r\n                                                    </Tooltip>\r\n                                                    <Tooltip title=\"إزالة\">\r\n                                                        <Button\r\n                                                            className=\"toolsBtnStyle\"\r\n                                                            style={{ margin: \"auto 3px\" }}\r\n                                                            size=\"large\"\r\n                                                            onClick={this.removeFeature.bind(\r\n                                                                this,\r\n                                                                feature,\r\n                                                                index\r\n                                                            )}>\r\n                                                            <FontAwesomeIcon icon={faTimes} className=\"\" />\r\n                                                        </Button>\r\n                                                    </Tooltip>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    ) : (\r\n                        <></>\r\n                    );\r\n                })}\r\n\r\n                <Modal\r\n                    width={800}\r\n                    title=\"تعديل البيانات\"\r\n                    onOk={this.handleOk}\r\n                    visible={this.state.showModal}\r\n                    onCancel={this.removeDialog}\r\n                    okText=\"نعم\"\r\n                    cancelText=\"إلغاء\">\r\n                    <div>\r\n                        <table>\r\n                            <tbody>\r\n                                {editFields.length > 0 &&\r\n                                    editFields\r\n                                        .filter((x) => x)\r\n                                        .map((field) => {\r\n                                            return (\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {field.alias}\r\n                                                        {field.isMandatory && (\r\n                                                            <label\r\n                                                                style={{ marginRight: \"10px\", color: \"red\" }}>\r\n                                                                *\r\n                                                            </label>\r\n                                                        )}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <div>\r\n                                                            {field.domain?.codedValues?.length ? (\r\n                                                                <Select\r\n                                                                    disabled={this.isdisabledField(\r\n                                                                        field,\r\n                                                                        editFeature\r\n                                                                    )}\r\n                                                                    style={{ width: \"80%\" }}\r\n                                                                    virtual={false}\r\n                                                                    onChange={this.selectHandleChange.bind(\r\n                                                                        this,\r\n                                                                        field\r\n                                                                    )}\r\n                                                                    className=\"dont-show\"\r\n                                                                    value={\r\n                                                                        editFeature.attributes[\r\n                                                                        field.name + \"_Code\"\r\n                                                                        ] || editFeature.attributes[field.name]\r\n                                                                    }\r\n                                                                    placeholder={\"من فضلك أدخل \" + field.alias}\r\n                                                                    getPopupContainer={(trigger) =>\r\n                                                                        trigger.parentNode\r\n                                                                    }>\r\n                                                                    {field.domain.codedValues.map(\r\n                                                                        (domain, index) => {\r\n                                                                            return (\r\n                                                                                <Select.Option\r\n                                                                                    value={domain.code}\r\n                                                                                    id={domain.code}>\r\n                                                                                    {domain.name}\r\n                                                                                </Select.Option>\r\n                                                                            );\r\n                                                                        }\r\n                                                                    )}\r\n                                                                </Select>\r\n                                                            ) : (\r\n                                                                <Input\r\n                                                                    disabled={this.isdisabledField(\r\n                                                                        field,\r\n                                                                        editFeature\r\n                                                                    )}\r\n                                                                    name={field.name}\r\n                                                                    type={\r\n                                                                        field.type == \"esriFieldTypeString\"\r\n                                                                            ? \"text\"\r\n                                                                            : \"number\"\r\n                                                                    }\r\n                                                                    onChange={this.handleUserInput}\r\n                                                                    value={editFeature.attributes[field.name]}\r\n                                                                    placeholder={\"من فضلك أدخل \" + field.alias}\r\n                                                                />\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(withTranslation(\"labels\")(editUpdateFilterComponent));\r\n","let mainMap = undefined;\r\nimport { setMap } from 'main_helpers/functions/filters/state'\r\nexport const mapStateToProps = state => {\r\n\r\n    return {\r\n        mainObject: state.wizard.mainObject,\r\n        UploadFileDetails: state.mainApp.uploadFileDetails,\r\n        editableFeatures: state.mainApp.editableFeatures,\r\n        originalFeatures: state.mainApp.originalFeatures,\r\n        selectMapLayer: state.mainApp.selectMapLayer,\r\n        selectedFeaturesOnMap: state.mainApp.selectedFeaturesOnMap\r\n    };\r\n}\r\n\r\n\r\nexport const mapDispatchToProps = dispatch => {\r\n    return {\r\n        setLoading: (data) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'loading',\r\n                data\r\n            })\r\n        },\r\n        setCurrentMap: (data) => {\r\n            mainMap = data;\r\n            setMap(data);\r\n        },\r\n        setMap: (e) => dispatch({ type: 'setMap', value: e }),\r\n        setEditableFeatures: (e) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'editableFeatures',\r\n                data: e\r\n            })\r\n        },\r\n        setSelectMapLayer: (e) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'selectMapLayer',\r\n                data: e\r\n            })\r\n        },\r\n        setOriginalFeatures: (e) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'originalFeatures',\r\n                data: e\r\n            })\r\n        },\r\n        setSelectedFeaturesOnMap: (e) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'selectedFeaturesOnMap',\r\n                data: e\r\n            })\r\n        }\r\n\r\n    };\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAKA;AAUA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AAQA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAKA;AACA;AAEA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AA7WA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AA2VA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAOA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AAIA;AAIA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AASA;AACA;AACA;;;;;;;;;;;;ACvgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAOA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAuBA;AAMA;AACA;AACA;AAWA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AA6JA;AAEA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAscA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAOA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAQA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AAGA;AAMA;AACA;AAKA;AACA;AAEA;AACA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAIA;AAKA;AAWA;AAIA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAIA;AACA;AAAA;AAAA;AAKA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AASA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAIA;AACA;AAAA;AAAA;AAIA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAMA;AAOA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AASA;AAIA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AAKA;AACA;AAEA;AAGA;AAEA;AACA;AAAA;AAIA;AAKA;AAIA;AACA;AAKA;AACA;AACA;AAAA;AAOA;AAOA;AACA;AACA;;;;;;;;;;;;ACzlDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}
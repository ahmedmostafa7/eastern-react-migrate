(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[8],{

/***/ "./src/app/components/inputs/fields/identify/Component/common/filters_objects.js":
/*!***************************************************************************************!*\
  !*** ./src/app/components/inputs/fields/identify/Component/common/filters_objects.js ***!
  \***************************************************************************************/
/*! exports provided: onSearch, getParcels, onDistrictChange, onMunChange, GetDistrictByMunID, GetPlansByMunID, onPlaneChange, GetBlocksByPlanID, onSubTypeChange, getSubNamesBySubType, onSubNameChange, onBlockChange, onLandParcelChange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onSearch", function() { return onSearch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getParcels", function() { return getParcels; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onDistrictChange", function() { return onDistrictChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onMunChange", function() { return onMunChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetDistrictByMunID", function() { return GetDistrictByMunID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetPlansByMunID", function() { return GetPlansByMunID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onPlaneChange", function() { return onPlaneChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetBlocksByPlanID", function() { return GetBlocksByPlanID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onSubTypeChange", function() { return onSubTypeChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSubNamesBySubType", function() { return getSubNamesBySubType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onSubNameChange", function() { return onSubNameChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onBlockChange", function() { return onBlockChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onLandParcelChange", function() { return onLandParcelChange; });
/* harmony import */ var _propertyCheckIdentifyComponnent_Helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../propertyCheckIdentifyComponnent/Helpers */ "./src/app/components/inputs/fields/identify/Component/propertyCheckIdentifyComponnent/Helpers.js");
/* harmony import */ var _common_func__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common_func */ "./src/app/components/inputs/fields/identify/Component/common/common_func.js");
/* harmony import */ var _esri_request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./esri_request */ "./src/app/components/inputs/fields/identify/Component/common/esri_request.js");

var uniqid = __webpack_require__(/*! uniqid */ "./node_modules/uniqid/index.js");


var uniqid = __webpack_require__(/*! uniqid */ "./node_modules/uniqid/index.js");
const onSearch = async (scope, filterValue) => {
  var _scope$state$serviceD, _scope$state$serviceD2, _scope$state$serviceD3;
  if (!((_scope$state$serviceD = scope.state.serviceData) !== null && _scope$state$serviceD !== void 0 && (_scope$state$serviceD2 = _scope$state$serviceD.find(item => {
    var _item$munval, _item$planeval, _item$subNameval, _item$blockval;
    return ((_item$munval = item.munval) === null || _item$munval === void 0 ? void 0 : _item$munval.code) == scope.state.munval && ((_item$planeval = item.planeval) === null || _item$planeval === void 0 ? void 0 : _item$planeval.code) == scope.state.planeval && ((_item$subNameval = item.subNameval) === null || _item$subNameval === void 0 ? void 0 : _item$subNameval.code) == scope.state.subNameval && ((_item$blockval = item.blockval) === null || _item$blockval === void 0 ? void 0 : _item$blockval.code) == scope.state.blockval;
  })) !== null && _scope$state$serviceD2 !== void 0 && (_scope$state$serviceD3 = _scope$state$serviceD2.selectedLands) !== null && _scope$state$serviceD3 !== void 0 && _scope$state$serviceD3.length) && filterValue != "") {
    if (scope.searchTimeOut) clearTimeout(scope.searchTimeOut);
    //if (!scope.state.parcelNum?.length) return;
    scope.searchTimeOut = setTimeout(async () => {
      debugger;
      let filterQuery = [];
      filterQuery.push(scope.parcelFilterWhere);
      filterQuery.push("PARCEL_PLAN_NO like '%" + filterValue + "%'");
      let filterWhere = filterQuery.join(" and ");
      console.log(filterWhere);
      Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["queryTask"])({
        ...Object(_propertyCheckIdentifyComponnent_Helpers__WEBPACK_IMPORTED_MODULE_0__["querySetting"])(scope.LayerID.Landbase_Parcel, filterWhere, false, ["PARCEL_SPATIAL_ID", "PARCEL_PLAN_NO"], scope.mapUrl),
        returnGeometry: false,
        callbackResult: res => {
          res.features = res.features.map((e, i) => {
            return {
              ...e,
              i: e.attributes.PARCEL_SPATIAL_ID
            };
          });
          scope.setState({
            parcelId: null,
            parcelNum: res.features
          });
        }
      });
    }, 500);
  }
};
const getParcels = (scope, featureToBeBuffered, where, settings = {}, outFields = ["*"]) => {
  return new Promise((resolve, reject) => {
    //if (!scope.state.allParcels) {
    //scope.parcelFilterWhere = where || "";
    if (scope.getParcelsWithinBufferedArea && featureToBeBuffered) {
      scope.getParcelsWithinBufferedArea(featureToBeBuffered, where, false, [...outFields], settings).then(resps => {
        resolve(resps.features);
      });
    } else {
      Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["queryTask"])({
        ...Object(_propertyCheckIdentifyComponnent_Helpers__WEBPACK_IMPORTED_MODULE_0__["querySetting"])(scope.LayerID.UnplannedParcels || scope.LayerID.Landbase_Parcel, where, false, [...outFields], scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl || mapUrl),
        callbackResult: res => {
          resolve(res.features);
        },
        ...settings
      });
    }
    // } else {
    //   resolve(scope.state.allParcels);
    // }
  });
};
const onDistrictChange = (scope, e, callback) => {
  if ((!callback || callback && typeof callback == "object") && !scope.loadLists) {
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "SelectLandsGraphicLayer");
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "ParcelPlanNoGraphicLayer");
    const {
      values,
      currentModule: {
        id
      }
    } = scope.props;
    scope.setState({
      districtval: e,
      parcelval: undefined,
      parcelId: null,
      parcelNum: [],
      parcelData: scope.parcelData,
      plan_no: undefined
    });
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["queryTask"])({
      url: (scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl || mapUrl) + "/" + scope.LayerID.District_Boundary,
      where: `DISTRICT_NAME ='${e}'`,
      outFields: ["DISTRICT_NAME"],
      returnGeometry: true,
      callbackResult: res => {
        scope.pol = res.features[0];
        Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["highlightFeature"])(res.features[0], scope.map, {
          layerName: "SelectGraphicLayer",
          isZoom: true,
          isHiglightSymbol: true,
          highlighColor: [0, 0, 0, 0.25]
        });
      }
    });
    scope.getServiceParcels(scope.state.munval, e, null, null);
  } else {
    if (e) {
      var _scope$state$District;
      scope.pol = (_scope$state$District = scope.state.Districts.filter(r => r.code == e)) === null || _scope$state$District === void 0 ? void 0 : _scope$state$District[0];
      scope.getServiceParcels(scope.state.munval, e, null, null);
    } else {
      if (callback && typeof callback == "function") {
        callback();
      }
    }
  }
};
const onMunChange = (scope, e, callback) => {
  var _scope$state$serviceD4;
  let serviceDataItem = (_scope$state$serviceD4 = scope.state.serviceData) === null || _scope$state$serviceD4 === void 0 ? void 0 : _scope$state$serviceD4.find(item => {
    var _item$munval2, _item$planeval2, _item$subNameval2, _item$blockval2;
    return ((_item$munval2 = item.munval) === null || _item$munval2 === void 0 ? void 0 : _item$munval2.code) == e && ((_item$planeval2 = item.planeval) === null || _item$planeval2 === void 0 ? void 0 : _item$planeval2.code) == undefined && ((_item$subNameval2 = item.subNameval) === null || _item$subNameval2 === void 0 ? void 0 : _item$subNameval2.code) == undefined && ((_item$blockval2 = item.blockval) === null || _item$blockval2 === void 0 ? void 0 : _item$blockval2.code) == undefined;
  });
  if ((!callback || callback && typeof callback == "object") && !scope.loadLists) {
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "SelectLandsGraphicLayer");
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "ParcelPlanNoGraphicLayer");
    const {
      values,
      currentModule: {
        id
      }
    } = scope.props;
    scope.setState({
      munval: e,
      districtval: undefined,
      planeval: undefined,
      parcelval: undefined,
      parcelId: null,
      parcelNum: [],
      parcelData: scope.parcelData,
      plan_no: undefined
    });
    scope.planId = null;
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["queryTask"])({
      url: (scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl || mapUrl) + "/" + scope.LayerID.Municipality_Boundary,
      where: `MUNICIPALITY_NAME='${e}'`,
      outFields: ["MUNICIPALITY_NAME"],
      returnGeometry: true,
      callbackResult: res => {
        scope.pol = res.features[0];
        Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["highlightFeature"])(res.features[0], scope.map, {
          layerName: "SelectGraphicLayer",
          isZoom: true,
          isHiglightSymbol: true,
          highlighColor: [0, 0, 0, 0.25]
        });
      }
    });
    if (scope.props.currentModule.record.app_id == 27) {
      GetDistrictByMunID(scope, e, () => {});
    } else {
      GetPlansByMunID(scope, e, () => {});
    }
    scope.getServiceParcels(e, null, null, null);
  } else {
    var _scope$state$Municipa;
    debugger;
    scope.pol = (_scope$state$Municipa = scope.state.MunicipalityNames.filter(m => m.code == e)) === null || _scope$state$Municipa === void 0 ? void 0 : _scope$state$Municipa[0];
    // queryTask({
    //   url:
    //     ((scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl) ||
    //       mapUrl) +
    //     "/" +
    //     scope.LayerID.Municipality_Boundary,
    //   where: `MUNICIPALITY_NAME='${e}'`,
    //   outFields: ["MUNICIPALITY_NAME"],
    //   returnGeometry: true,
    //   callbackResult: (res) => {
    //     scope.pol = res.features[0];
    if (e) {
      if (scope.props.currentModule.record.app_id == 27) {
        GetDistrictByMunID(scope, e, callback);
      } else {
        GetPlansByMunID(scope, e, callback);
      }
      // if (
      //   !serviceDataItem?.selectedLands?.length &&
      //   scope.state.munval &&
      //   !scope.state.planeval &&
      //   !scope.state.subNameval &&
      //   !scope.state.blockval
      // ) {
      //   highlightFeature(scope.pol, scope.map, {
      //     layerName: "SelectGraphicLayer",
      //     isZoom: true,
      //     isHiglightSymbol: true,
      //     highlighColor: [0, 0, 0, 0.25],
      //   });
      //   //scope.getServiceParcels(e, null, null, null);
      // }
    } else {
      if (callback && typeof callback == "function") {
        callback();
      }
    }
    //   },
    // });
  }
};
const GetDistrictByMunID = (scope, e, callback) => {
  var _scope$state$Municipa2, _scope$state$Municipa3;
  getParcels(scope, (_scope$state$Municipa2 = scope.state.MunicipalityNames) === null || _scope$state$Municipa2 === void 0 ? void 0 : (_scope$state$Municipa3 = _scope$state$Municipa2.filter(m => (m === null || m === void 0 ? void 0 : m.code) == e)) === null || _scope$state$Municipa3 === void 0 ? void 0 : _scope$state$Municipa3[0], `MUNICIPALITY_NAME='${e}'`, {
    returnDistinctValues: true
  }, ["DISTRICT_NAME"]).then(features => {
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["getFeatureDomainName"])(features, scope.LayerID.UnplannedParcels || scope.LayerID.Landbase_Parcel, false, scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl || mapUrl).then(res => {
      scope.setState({
        Districts: res.map(r => {
          return {
            code: r.attributes.DISTRICT_NAME_Code,
            name: r.attributes.DISTRICT_NAME
          };
        })
      }, callback);
    });
  });
};
const GetPlansByMunID = (scope, e, callback) => {
  var _scope$state$Municipa4, _scope$state$Municipa5;
  getParcels(scope, (_scope$state$Municipa4 = scope.state.MunicipalityNames) === null || _scope$state$Municipa4 === void 0 ? void 0 : (_scope$state$Municipa5 = _scope$state$Municipa4.filter(m => (m === null || m === void 0 ? void 0 : m.code) == e)) === null || _scope$state$Municipa5 === void 0 ? void 0 : _scope$state$Municipa5[0], `MUNICIPALITY_NAME='${e}'`, {
    returnDistinctValues: true
  }, ["PLAN_SPATIAL_ID", "PLAN_NO"]).then(features => {
    scope.setState({
      PlanNum: features.filter(r => r.attributes.PLAN_SPATIAL_ID && r.attributes.PLAN_NO).map((e, i) => {
        return {
          ...e,
          i: e.attributes.PLAN_SPATIAL_ID
        };
      })
    }, callback);
  });
};
const onPlaneChange = (scope, f, callback) => {
  var _scope$state$PlanNum$, _scope$state$PlanNum$2, _scope$state$PlanNum$3, _scope$state$serviceD5;
  var planSpatialId = (_scope$state$PlanNum$ = scope.state.PlanNum.filter(m => m.i == f)) === null || _scope$state$PlanNum$ === void 0 ? void 0 : (_scope$state$PlanNum$2 = _scope$state$PlanNum$[0]) === null || _scope$state$PlanNum$2 === void 0 ? void 0 : (_scope$state$PlanNum$3 = _scope$state$PlanNum$2.attributes) === null || _scope$state$PlanNum$3 === void 0 ? void 0 : _scope$state$PlanNum$3.PLAN_SPATIAL_ID;
  let serviceDataItem = (_scope$state$serviceD5 = scope.state.serviceData) === null || _scope$state$serviceD5 === void 0 ? void 0 : _scope$state$serviceD5.find(item => {
    var _item$munval3, _item$planeval3, _item$subNameval3, _item$blockval3;
    return ((_item$munval3 = item.munval) === null || _item$munval3 === void 0 ? void 0 : _item$munval3.code) == scope.state.munval && ((_item$planeval3 = item.planeval) === null || _item$planeval3 === void 0 ? void 0 : _item$planeval3.code) == f && ((_item$subNameval3 = item.subNameval) === null || _item$subNameval3 === void 0 ? void 0 : _item$subNameval3.code) == undefined && ((_item$blockval3 = item.blockval) === null || _item$blockval3 === void 0 ? void 0 : _item$blockval3.code) == undefined;
  });
  debugger;
  if ((!callback || callback && typeof callback == "object") && !scope.loadLists) {
    var _scope$state$PlanNum$4, _scope$state$PlanNum$5, _scope$state$PlanNum$6;
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "SelectLandsGraphicLayer");
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "ParcelPlanNoGraphicLayer");

    // if (
    //   scope.state.serviceData.length &&
    //   !scope.state.serviceData?.find(
    //     (item) =>
    //       item.munval?.code == scope.state.munval && item.planeval?.code == f
    //   )
    // ) {
    //   window.notifySystem("warning", "يجب اختيار مخطط واحد فقط");
    //   return;
    // }

    const {
      values,
      currentModule: {
        id
      }
    } = scope.props;
    scope.setState({
      plan_no: (_scope$state$PlanNum$4 = scope.state.PlanNum.filter(m => m.i == f)) === null || _scope$state$PlanNum$4 === void 0 ? void 0 : (_scope$state$PlanNum$5 = _scope$state$PlanNum$4[0]) === null || _scope$state$PlanNum$5 === void 0 ? void 0 : (_scope$state$PlanNum$6 = _scope$state$PlanNum$5.attributes) === null || _scope$state$PlanNum$6 === void 0 ? void 0 : _scope$state$PlanNum$6.PLAN_NO,
      planeval: f,
      subTypeval: undefined,
      subType_name: undefined,
      subNameval: undefined,
      subName_name: undefined,
      blockval: undefined,
      block_no: undefined,
      parcelval: undefined,
      blockNum: [],
      subDivNames: [],
      subDivType: [],
      parcelId: null,
      parcelNum: [],
      parcelData: scope.parcelData
    });
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["queryTask"])({
      ...Object(_propertyCheckIdentifyComponnent_Helpers__WEBPACK_IMPORTED_MODULE_0__["querySetting"])(scope.LayerID.Plan_Data, `PLAN_SPATIAL_ID='${planSpatialId}'`, true, ["MUNICIPALITY_NAME"]),
      callbackResult: res => {
        scope.pol = res.features[0];
        Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["highlightFeature"])(res.features[0], scope.map, {
          layerName: "SelectGraphicLayer",
          isZoom: true,
          isHiglightSymbol: true,
          highlighColor: [0, 0, 0, 0.25]
        });
        scope.planId = planSpatialId;
      }
    });
    GetBlocksByPlanID(scope, f, planSpatialId, callback);
    scope.getServiceParcels(scope.state.munval, f, null, null);
    Object(_esri_request__WEBPACK_IMPORTED_MODULE_2__["esriRequest"])((scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl || mapUrl) + "/" + scope.LayerID.Subdivision).then(response => {
      scope.setState({
        subDivType: response.fields[7].domain.codedValues
      });
    });
    if (scope.checkDrawAvailability) {
      scope.checkDrawAvailability();
    }
  } else {
    var _scope$state$PlanNum$7;
    scope.pol = (_scope$state$PlanNum$7 = scope.state.PlanNum.filter(m => {
      var _m$attributes;
      return ((_m$attributes = m.attributes) === null || _m$attributes === void 0 ? void 0 : _m$attributes.PLAN_SPATIAL_ID) && m.i == f || m.attributes.PLAN_NO == f;
    })) === null || _scope$state$PlanNum$7 === void 0 ? void 0 : _scope$state$PlanNum$7[0];
    if (f) {
      GetBlocksByPlanID(scope, f, planSpatialId, callback);
      // if (
      //   !serviceDataItem?.selectedLands?.length &&
      //   scope.state.munval &&
      //   scope.state.planeval &&
      //   !scope.state.subNameval &&
      //   !scope.state.blockval
      // ) {
      //   highlightFeature(scope.pol, scope.map, {
      //     layerName: "SelectGraphicLayer",
      //     isZoom: true,
      //     isHiglightSymbol: true,
      //     highlighColor: [0, 0, 0, 0.25],
      //   });
      //   // scope.getServiceParcels(scope.state.munval, f, null, null);
      // }
      Object(_esri_request__WEBPACK_IMPORTED_MODULE_2__["esriRequest"])((scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl || mapUrl) + "/" + scope.LayerID.Subdivision).then(response => {
        scope.setState({
          subDivType: response.fields[7].domain.codedValues
        });
      });
      if (scope.checkDrawAvailability) {
        scope.checkDrawAvailability();
      }
    } else {
      if (callback && typeof callback == "function") {
        callback();
      }
    }
  }
};
const GetBlocksByPlanID = (scope, f, planSpatialId, callback) => {
  var _scope$state$PlanNum$8;
  getParcels(scope, (_scope$state$PlanNum$8 = scope.state.PlanNum.filter(m => {
    var _m$attributes2;
    return ((_m$attributes2 = m.attributes) === null || _m$attributes2 === void 0 ? void 0 : _m$attributes2.PLAN_SPATIAL_ID) && m.i == f || m.attributes.PLAN_NO == f;
  })) === null || _scope$state$PlanNum$8 === void 0 ? void 0 : _scope$state$PlanNum$8[0], `PLAN_SPATIAL_ID='${planSpatialId}' AND PARCEL_BLOCK_NO IS NOT NULL AND LOWER(PARCEL_BLOCK_NO) <> 'null'`, {
    returnDistinctValues: true
  }, ["PARCEL_BLOCK_NO", "BLOCK_SPATIAL_ID"]).then(features => {
    scope.setState({
      blockNum: features.filter(r => r.attributes.BLOCK_SPATIAL_ID && r.attributes.PARCEL_BLOCK_NO).map((e, i) => {
        return {
          attributes: {
            BLOCK_NO: e.attributes.PARCEL_BLOCK_NO,
            //e.attributes.BLOCK_SPATIAL_ID,   ||
            BLOCK_SPATIAL_ID: e.attributes.BLOCK_SPATIAL_ID
          },
          i: e.attributes.BLOCK_SPATIAL_ID
        };
      })
    }, callback);
  });
};
const onSubTypeChange = (scope, e, callback) => {
  var _scope$state$serviceD6;
  let serviceDataItem = (_scope$state$serviceD6 = scope.state.serviceData) === null || _scope$state$serviceD6 === void 0 ? void 0 : _scope$state$serviceD6.find(item => {
    var _item$munval4, _item$planeval4, _item$subTypeval, _item$blockval4;
    return ((_item$munval4 = item.munval) === null || _item$munval4 === void 0 ? void 0 : _item$munval4.code) == scope.state.munval && ((_item$planeval4 = item.planeval) === null || _item$planeval4 === void 0 ? void 0 : _item$planeval4.code) == scope.state.planeval && ((_item$subTypeval = item.subTypeval) === null || _item$subTypeval === void 0 ? void 0 : _item$subTypeval.code) == e && ((_item$blockval4 = item.blockval) === null || _item$blockval4 === void 0 ? void 0 : _item$blockval4.code) == undefined;
  });
  if ((!callback || callback && typeof callback == "object") && !scope.loadLists) {
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "SelectLandsGraphicLayer");
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "ParcelPlanNoGraphicLayer");
    scope.setState({
      subType_name: scope.state.subDivType.filter(m => (m === null || m === void 0 ? void 0 : m.code) == e)[0].name,
      subTypeval: e,
      subNameval: undefined,
      subName_name: undefined,
      blockval: undefined,
      block_no: undefined,
      parcelval: undefined
    });
    getSubNamesBySubType(scope, e, callback);
  } else {
    if (e) {
      getSubNamesBySubType(scope, e, callback); // callback
    } else {
      if (callback && typeof callback == "function") {
        callback();
      }
    }
  }
};
const getSubNamesBySubType = (scope, e, callback) => {
  var _scope$state$subDivTy, _scope$state$subDivTy2;
  getParcels(scope, (_scope$state$subDivTy = scope.state.subDivType) === null || _scope$state$subDivTy === void 0 ? void 0 : (_scope$state$subDivTy2 = _scope$state$subDivTy.filter(m => (m === null || m === void 0 ? void 0 : m.code) == e)) === null || _scope$state$subDivTy2 === void 0 ? void 0 : _scope$state$subDivTy2[0], `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${scope.planId}`, {
    returnDistinctValues: true
  }, ["SUBDIVISION_DESCRIPTION", "SUBDIVISION_SPATIAL_ID"]).then(features => {
    scope.setState({
      subDivNames: features.filter(r => r.attributes.SUBDIVISION_SPATIAL_ID != null && r.attributes.SUBDIVISION_DESCRIPTION != null).reduce((a, b) => {
        if (!a.find(r => r.attributes.SUBDIVISION_SPATIAL_ID == b.attributes.SUBDIVISION_SPATIAL_ID)) {
          a.push(b);
        }
        return a;
      }, []).map((e, i) => {
        return {
          attributes: {
            SUBDIVISION_SPATIAL_ID: e.attributes.SUBDIVISION_SPATIAL_ID,
            //  e.attributes.PARCEL_BLOCK_NO ||
            SUBDIVISION_DESCRIPTION: e.attributes.SUBDIVISION_DESCRIPTION
          },
          i: e.attributes.SUBDIVISION_SPATIAL_ID
        };
      })
    }, callback);
    //scope.setState({ subDivNames: features }, callback);
  });
};
const onSubNameChange = (scope, e, callback) => {
  var _scope$state$subDivNa, _scope$state$serviceD7;
  let subName = (_scope$state$subDivNa = scope.state.subDivNames.filter(m => m.attributes.SUBDIVISION_SPATIAL_ID == e || m.i == e)) === null || _scope$state$subDivNa === void 0 ? void 0 : _scope$state$subDivNa[0];
  let serviceDataItem = (_scope$state$serviceD7 = scope.state.serviceData) === null || _scope$state$serviceD7 === void 0 ? void 0 : _scope$state$serviceD7.find(item => {
    var _item$munval5, _item$planeval5, _item$subNameval4, _subName$attributes, _item$blockval5;
    return ((_item$munval5 = item.munval) === null || _item$munval5 === void 0 ? void 0 : _item$munval5.code) == scope.state.munval && ((_item$planeval5 = item.planeval) === null || _item$planeval5 === void 0 ? void 0 : _item$planeval5.code) == scope.state.planeval && ((_item$subNameval4 = item.subNameval) === null || _item$subNameval4 === void 0 ? void 0 : _item$subNameval4.code) == (subName === null || subName === void 0 ? void 0 : (_subName$attributes = subName.attributes) === null || _subName$attributes === void 0 ? void 0 : _subName$attributes.SUBDIVISION_SPATIAL_ID) && ((_item$blockval5 = item.blockval) === null || _item$blockval5 === void 0 ? void 0 : _item$blockval5.code) == undefined;
  });
  if ((!callback || callback && typeof callback == "object") && !scope.loadLists) {
    var _subName$attributes2, _subName$attributes3, _subName$attributes4, _subName$attributes5;
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "SelectLandsGraphicLayer");
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "ParcelPlanNoGraphicLayer");
    const {
      values,
      currentModule: {
        id
      }
    } = scope.props;
    scope.setState({
      subName_name: subName === null || subName === void 0 ? void 0 : (_subName$attributes2 = subName.attributes) === null || _subName$attributes2 === void 0 ? void 0 : _subName$attributes2.SUBDIVISION_DESCRIPTION,
      subNameval: subName === null || subName === void 0 ? void 0 : (_subName$attributes3 = subName.attributes) === null || _subName$attributes3 === void 0 ? void 0 : _subName$attributes3.SUBDIVISION_SPATIAL_ID,
      blockval: undefined,
      block_no: undefined,
      parcelval: undefined,
      parcelNum: [],
      parcelId: null
    });
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["queryTask"])({
      ...Object(_propertyCheckIdentifyComponnent_Helpers__WEBPACK_IMPORTED_MODULE_0__["querySetting"])(scope.LayerID.Subdivision, `SUBDIVISION_SPATIAL_ID=${subName === null || subName === void 0 ? void 0 : (_subName$attributes4 = subName.attributes) === null || _subName$attributes4 === void 0 ? void 0 : _subName$attributes4.SUBDIVISION_SPATIAL_ID}`, true, ["SUBDIVISION_SPATIAL_ID"]),
      callbackResult: res => {
        scope.pol = res.features[0];
        Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["highlightFeature"])(res.features[0], scope.map, {
          layerName: "SelectGraphicLayer",
          isZoom: true,
          isHiglightSymbol: true,
          highlighColor: [0, 0, 0, 0.25]
        });
      }
    });
    scope.getServiceParcels(scope.state.munval, scope.state.districtval || scope.state.planeval, subName === null || subName === void 0 ? void 0 : (_subName$attributes5 = subName.attributes) === null || _subName$attributes5 === void 0 ? void 0 : _subName$attributes5.SUBDIVISION_SPATIAL_ID, null);
  } else {
    scope.pol = subName;
    // if (
    //   !serviceDataItem?.selectedLands?.length &&
    //   scope.state.munval &&
    //   scope.state.planeval &&
    //   scope.state.subNameval &&
    //   !scope.state.blockval
    // ) {
    //   highlightFeature(scope.pol, scope.map, {
    //     layerName: "SelectGraphicLayer",
    //     isZoom: true,
    //     isHiglightSymbol: true,
    //     highlighColor: [0, 0, 0, 0.25],
    //   });
    // scope.getServiceParcels(
    //   scope.state.munval,
    //   scope.state.districtval || scope.state.planeval,
    //   subName?.attributes?.SUBDIVISION_SPATIAL_ID,
    //   null
    // );
    //}
    if (callback && typeof callback == "function") {
      callback();
    }
  }
};
const onBlockChange = (scope, e, callback) => {
  var _scope$state$blockNum, _scope$state$serviceD8;
  let blockObj = (_scope$state$blockNum = scope.state.blockNum.filter(m => m.attributes.BLOCK_SPATIAL_ID == e || m.i == e)) === null || _scope$state$blockNum === void 0 ? void 0 : _scope$state$blockNum[0];
  let serviceDataItem = (_scope$state$serviceD8 = scope.state.serviceData) === null || _scope$state$serviceD8 === void 0 ? void 0 : _scope$state$serviceD8.find(item => {
    var _item$munval6, _item$planeval6, _item$subNameval5, _item$blockval6, _blockObj$attributes;
    return ((_item$munval6 = item.munval) === null || _item$munval6 === void 0 ? void 0 : _item$munval6.code) == scope.state.munval && ((_item$planeval6 = item.planeval) === null || _item$planeval6 === void 0 ? void 0 : _item$planeval6.code) == scope.state.planeval && ((_item$subNameval5 = item.subNameval) === null || _item$subNameval5 === void 0 ? void 0 : _item$subNameval5.code) == scope.state.subNameval && ((_item$blockval6 = item.blockval) === null || _item$blockval6 === void 0 ? void 0 : _item$blockval6.code) == (blockObj === null || blockObj === void 0 ? void 0 : (_blockObj$attributes = blockObj.attributes) === null || _blockObj$attributes === void 0 ? void 0 : _blockObj$attributes.BLOCK_SPATIAL_ID);
  });
  if ((!callback || callback && typeof callback == "object") && !scope.loadLists) {
    var _blockObj$attributes2, _blockObj$attributes3, _blockObj$attributes4, _blockObj$attributes5;
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "SelectLandsGraphicLayer");
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["clearGraphicFromLayer"])(scope.map, "ParcelPlanNoGraphicLayer");
    const {
      values,
      currentModule: {
        id
      }
    } = scope.props;
    scope.setState({
      block_no: blockObj === null || blockObj === void 0 ? void 0 : (_blockObj$attributes2 = blockObj.attributes) === null || _blockObj$attributes2 === void 0 ? void 0 : _blockObj$attributes2.BLOCK_NO,
      blockval: blockObj === null || blockObj === void 0 ? void 0 : (_blockObj$attributes3 = blockObj.attributes) === null || _blockObj$attributes3 === void 0 ? void 0 : _blockObj$attributes3.BLOCK_SPATIAL_ID,
      parcelval: undefined,
      parcelId: null,
      parcelNum: []
    });
    Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["queryTask"])({
      ...Object(_propertyCheckIdentifyComponnent_Helpers__WEBPACK_IMPORTED_MODULE_0__["querySetting"])(scope.LayerID.Survey_Block, `BLOCK_SPATIAL_ID=${blockObj === null || blockObj === void 0 ? void 0 : (_blockObj$attributes4 = blockObj.attributes) === null || _blockObj$attributes4 === void 0 ? void 0 : _blockObj$attributes4.BLOCK_SPATIAL_ID}`, true, ["BLOCK_SPATIAL_ID"]),
      callbackResult: res => {
        scope.pol = res.features[0];
        Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["highlightFeature"])(res.features[0], scope.map, {
          layerName: "SelectGraphicLayer",
          isZoom: true,
          isHiglightSymbol: true,
          highlighColor: [0, 0, 0, 0.25]
        });
      }
    });
    scope.getServiceParcels(scope.state.munval, scope.state.districtval || scope.state.planeval, null, blockObj === null || blockObj === void 0 ? void 0 : (_blockObj$attributes5 = blockObj.attributes) === null || _blockObj$attributes5 === void 0 ? void 0 : _blockObj$attributes5.BLOCK_SPATIAL_ID);
  } else {
    scope.pol = blockObj;
    // getParcels(scope, scope.pol, `BLOCK_SPATIAL_ID=${e}`).then((features) => {
    //   scope.setState({
    //     parcelSearch: null,
    //     parcelNum: features
    //       .filter((r) => r.attributes.BLOCK_SPATIAL_ID == e)
    //       .map((e, i) => {
    //         return {
    //           ...e,
    //           i,
    //         };
    //       }),
    //   });
    // });
    // if (
    //   !serviceDataItem?.selectedLands?.length &&
    //   scope.state.munval &&
    //   scope.state.planeval &&
    //   !scope.state.subNameval &&
    //   scope.state.blockval
    // ) {
    //   highlightFeature(scope.pol, scope.map, {
    //     layerName: "SelectGraphicLayer",
    //     isZoom: true,
    //     isHiglightSymbol: true,
    //     highlighColor: [0, 0, 0, 0.25],
    //   });
    // scope.getServiceParcels(
    //   scope.state.munval,
    //   scope.state.districtval || scope.state.planeval,
    //   null,
    //   blockObj?.attributes?.BLOCK_SPATIAL_ID
    // );
    // }
    if (callback && typeof callback == "function") {
      callback();
    }
  }
};
const onLandParcelChange = (scope, f, callback) => {
  var _scope$state$serviceD9, _serviceDataItem$parc, _serviceDataItem$parc2, _serviceDataItem$parc3, _serviceDataItem$parc4, _serviceDataItem$parc5, _serviceDataItem$parc6, _serviceDataItem$parc7, _serviceDataItem$parc8;
  //;
  let serviceDataItem = (_scope$state$serviceD9 = scope.state.serviceData) === null || _scope$state$serviceD9 === void 0 ? void 0 : _scope$state$serviceD9.find(item => {
    var _item$munval7, _item$planeval7, _item$subNameval6, _item$blockval7;
    return ((_item$munval7 = item.munval) === null || _item$munval7 === void 0 ? void 0 : _item$munval7.code) == scope.state.munval && ((_item$planeval7 = item.planeval) === null || _item$planeval7 === void 0 ? void 0 : _item$planeval7.code) == scope.state.planeval && ((_item$subNameval6 = item.subNameval) === null || _item$subNameval6 === void 0 ? void 0 : _item$subNameval6.code) == scope.state.subNameval && ((_item$blockval7 = item.blockval) === null || _item$blockval7 === void 0 ? void 0 : _item$blockval7.code) == scope.state.blockval;
  });
  let selectedLands = (serviceDataItem === null || serviceDataItem === void 0 ? void 0 : serviceDataItem.selectedLands) || [];
  var e = serviceDataItem === null || serviceDataItem === void 0 ? void 0 : (_serviceDataItem$parc = serviceDataItem.parcelNum) === null || _serviceDataItem$parc === void 0 ? void 0 : (_serviceDataItem$parc2 = _serviceDataItem$parc.filter(m => m.i === f)) === null || _serviceDataItem$parc2 === void 0 ? void 0 : (_serviceDataItem$parc3 = _serviceDataItem$parc2[0]) === null || _serviceDataItem$parc3 === void 0 ? void 0 : (_serviceDataItem$parc4 = _serviceDataItem$parc3.attributes) === null || _serviceDataItem$parc4 === void 0 ? void 0 : _serviceDataItem$parc4.PARCEL_SPATIAL_ID;
  if (!e) {
    var _scope$state$parcelNu, _scope$state$parcelNu2, _scope$state$parcelNu3, _scope$state$parcelNu4;
    e = (_scope$state$parcelNu = scope.state.parcelNum) === null || _scope$state$parcelNu === void 0 ? void 0 : (_scope$state$parcelNu2 = _scope$state$parcelNu.filter(m => m.i === f)) === null || _scope$state$parcelNu2 === void 0 ? void 0 : (_scope$state$parcelNu3 = _scope$state$parcelNu2[0]) === null || _scope$state$parcelNu3 === void 0 ? void 0 : (_scope$state$parcelNu4 = _scope$state$parcelNu3.attributes) === null || _scope$state$parcelNu4 === void 0 ? void 0 : _scope$state$parcelNu4.PARCEL_SPATIAL_ID;
    scope.RolBackParcelNum = scope.state.parcelNum || [];
  } else {
    scope.RolBackParcelNum = serviceDataItem === null || serviceDataItem === void 0 ? void 0 : serviceDataItem.parcelNum;
  }
  var s = serviceDataItem === null || serviceDataItem === void 0 ? void 0 : (_serviceDataItem$parc5 = serviceDataItem.parcelNum) === null || _serviceDataItem$parc5 === void 0 ? void 0 : (_serviceDataItem$parc6 = _serviceDataItem$parc5.filter(m => m.i === f)) === null || _serviceDataItem$parc6 === void 0 ? void 0 : (_serviceDataItem$parc7 = _serviceDataItem$parc6[0]) === null || _serviceDataItem$parc7 === void 0 ? void 0 : (_serviceDataItem$parc8 = _serviceDataItem$parc7.attributes) === null || _serviceDataItem$parc8 === void 0 ? void 0 : _serviceDataItem$parc8.SUBMISSIONNO;
  if (!s) {
    var _scope$state$parcelNu5, _scope$state$parcelNu6, _scope$state$parcelNu7, _scope$state$parcelNu8;
    s = (_scope$state$parcelNu5 = scope.state.parcelNum) === null || _scope$state$parcelNu5 === void 0 ? void 0 : (_scope$state$parcelNu6 = _scope$state$parcelNu5.filter(m => m.i === f)) === null || _scope$state$parcelNu6 === void 0 ? void 0 : (_scope$state$parcelNu7 = _scope$state$parcelNu6[0]) === null || _scope$state$parcelNu7 === void 0 ? void 0 : (_scope$state$parcelNu8 = _scope$state$parcelNu7.attributes) === null || _scope$state$parcelNu8 === void 0 ? void 0 : _scope$state$parcelNu8.PARCEL_SPATIAL_ID;
  }
  if ((!callback || callback && typeof callback == "object") && !scope.loadLists) {
    scope.setState({
      parcelId: e,
      parcelval: f,
      SUBMISSIONNO: s
    });
    scope.RolBackPol = scope.pol;
    if (e) {
      Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["queryTask"])({
        url: (scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl || mapUrl) + "/" + (scope.LayerID.UnplannedParcels || scope.LayerID.Landbase_Parcel),
        where: `PARCEL_SPATIAL_ID='${e}'`,
        outFields: ["PARCEL_SPATIAL_ID"],
        returnGeometry: true,
        callbackResult: res => {
          if (serviceDataItem && !selectedLands.length) {
            serviceDataItem.selectedLandsT = [];
          }
          Object(_common_func__WEBPACK_IMPORTED_MODULE_1__["highlightFeature"])(res.features[0], scope.map, {
            layerName: "SelectGraphicLayer",
            strokeColor: [0, 0, 0],
            highlightWidth: 3,
            isHighlighPolygonBorder: true,
            isZoom: true,
            zoomFactor: 50
          });
        }
      });
    }
  } else {
    // clearGraphicFromLayer(scope.map, "SelectGraphicLayer");
    if (f) {
      var _serviceDataItem$parc9, _serviceDataItem$parc10, _g, _g$attributes;
      var prevParcelId = scope.state.parcelId;
      var g = serviceDataItem === null || serviceDataItem === void 0 ? void 0 : (_serviceDataItem$parc9 = serviceDataItem.parcelNum) === null || _serviceDataItem$parc9 === void 0 ? void 0 : (_serviceDataItem$parc10 = _serviceDataItem$parc9.filter(m => m.i === f)) === null || _serviceDataItem$parc10 === void 0 ? void 0 : _serviceDataItem$parc10[0];
      if (!g) {
        var _scope$state$parcelNu9, _scope$state$parcelNu10;
        g = (_scope$state$parcelNu9 = scope.state.parcelNum) === null || _scope$state$parcelNu9 === void 0 ? void 0 : (_scope$state$parcelNu10 = _scope$state$parcelNu9.filter(m => m.i === f)) === null || _scope$state$parcelNu10 === void 0 ? void 0 : _scope$state$parcelNu10[0];
      }
      scope.state["parcelId"] = (_g = g) === null || _g === void 0 ? void 0 : (_g$attributes = _g.attributes) === null || _g$attributes === void 0 ? void 0 : _g$attributes.PARCEL_SPATIAL_ID;
      //scope.setState({ parcelId: g.attributes.PARCEL_SPATIAL_ID });

      scope.LandHoverOff(scope.map.getLayer("SelectGraphicLayer").graphics.find(prevGraphic => {
        var _prevGraphic$attribut;
        return (prevGraphic === null || prevGraphic === void 0 ? void 0 : (_prevGraphic$attribut = prevGraphic.attributes) === null || _prevGraphic$attribut === void 0 ? void 0 : _prevGraphic$attribut.PARCEL_SPATIAL_ID) == prevParcelId;
      }));
      scope.setState({
        parcelval: f
      });
    }
  }
  if (callback && typeof callback == "function") {
    callback();
  }
};

/***/ })

}]);
//# sourceMappingURL=8.min.js.map
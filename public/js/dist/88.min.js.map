{"version":3,"file":"88.min.js","sources":["webpack:///./src/app/components/inputs/fields/textArea.js","webpack:///./src/app/components/inputs/mapping.js"],"sourcesContent":["import React from \"react\";\r\nimport { Input } from \"antd\";\r\nimport mainInput from \"app/helpers/main/input\";\r\nimport { connect } from \"react-redux\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"../mapping\";\r\nimport { withRouter } from \"react-router\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { isFunction, isEqual } from \"lodash\";\r\nconst { TextArea } = Input;\r\n\r\nclass textAreaComp extends mainInput {\r\n  handleSubmit(e) {\r\n    const {\r\n      input: { value, onChange },\r\n      value_func,\r\n      saveComment,\r\n    } = this.props;\r\n    onChange(e.target.value);\r\n    saveComment(e.target.value);\r\n  }\r\n\r\n  // onChangeInput(e){\r\n  //   //\r\n  //   const {onExtChange, input:  {onChange}} = this.props;\r\n  //   if (onExtChange && typeof onExtChange == 'function') {\r\n  //     onExtChange(e);\r\n  //   }\r\n  //   onChange(e);\r\n  // }\r\n  render() {\r\n    const {\r\n      input: { value, onChange },\r\n      value_func,\r\n      saveComment,\r\n    } = this.props;\r\n    let {\r\n      className,\r\n      input,\r\n      label,\r\n      type,\r\n      placeholder,\r\n      style,\r\n      textEdit = \"\",\r\n      rows = 1,\r\n      t,\r\n      onChangeInput,\r\n      disabled,\r\n      values,\r\n    } = this.props;\r\n    // console.log(\"rows\", rows)\r\n    onChange(value);\r\n    // saveComment(value);\r\n    disabled = isFunction(disabled) ? disabled(values, this.props) : disabled;\r\n    return (\r\n      <form onSubmit={this.handleSubmit.bind(this)}>\r\n        {(onChangeInput && (\r\n          <TextArea\r\n            disabled={disabled}\r\n            {...{ className }}\r\n            {...{ rows }}\r\n            {...input}\r\n            {...{ type }}\r\n            placeholder={t(placeholder ? placeholder : label)}\r\n            value={value || textEdit}\r\n            {...{ style }}\r\n            onChange={onChangeInput.bind(this, this.props)}\r\n          />\r\n        )) || (\r\n            <TextArea\r\n              disabled={disabled}\r\n              {...{ className }}\r\n              {...{ rows }}\r\n              {...input}\r\n              {...{ type }}\r\n              placeholder={t(placeholder ? placeholder : label)}\r\n              value={value || textEdit}\r\n              {...{ style }}\r\n              \r\n            />\r\n          )}\r\n        {/* <button type=\"submit\">ارسال</button> */}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n// export default withTranslation('labels')(textAreaComp)\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(withTranslation(\"labels\")(textAreaComp))\r\n);\r\n","import { get } from \"lodash\";\r\nimport { formValueSelector } from \"redux-form\";\r\nimport { copyUser } from \"./fields/identify/Component/common/common_func\";\r\nexport const mapStateToProps = (\r\n  {\r\n    wizard: {\r\n      currentStep,\r\n      wizardSettings,\r\n      steps,\r\n      mainObject,\r\n      comments,\r\n      currentModule,\r\n    },\r\n    selectors = {},\r\n    mainApp,\r\n    user,\r\n    mapViewer,\r\n    ...state\r\n  },\r\n  { moduleName, path, value_key, ...props }\r\n) => {\r\n  return {\r\n    data: props.data || get(state, path),\r\n    lang: mainApp.language,\r\n    selectors,\r\n    apps: mainApp.apps,\r\n    info: get(mapViewer, \"info.info\", {}),\r\n    ...(selectors[moduleName] || {}),\r\n    value_key: get(selectors[moduleName], \"value_key\", value_key),\r\n    currentStep,\r\n    steps,\r\n    mainObject,\r\n    currentModule,\r\n    user: get(user, \"user\", {}),\r\n    comments,\r\n    wizardSettings,\r\n    //allNotes,\r\n    mainApp,\r\n    record: get(currentModule, \"record\") || [],\r\n  };\r\n};\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n  return {\r\n    getValues(name = \"stepForm\") {\r\n      return formValueSelector(\"name\");\r\n    },\r\n    setSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}`,\r\n        data,\r\n      });\r\n    },\r\n    setValueLabelKeys: (label_key, value_key) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.label_key`,\r\n        data: label_key,\r\n      });\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.value_key`,\r\n        data: value_key,\r\n      });\r\n    },\r\n    setData: (data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.data`,\r\n        data,\r\n      });\r\n    },\r\n    addToData: (data, index, operation) => {\r\n      dispatch({\r\n        type: \"insertInArraySelectors\",\r\n        path: `${moduleName}.data`,\r\n        operation,\r\n        index,\r\n        data,\r\n      });\r\n    },\r\n    setNextUrl: (nextUrl) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.links.nextLink`,\r\n        data: nextUrl,\r\n      });\r\n    },\r\n    addNewSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: moduleName,\r\n        data,\r\n      });\r\n    },\r\n    removeSelector: (moduleName) => {\r\n      dispatch({\r\n        type: \"removeSelectors\",\r\n        path: moduleName,\r\n      });\r\n    },\r\n    setCurrentModule: (data) => {\r\n      dispatch({\r\n        type: \"setWizard\",\r\n        path: \"currentModule\",\r\n        data,\r\n      });\r\n    },\r\n    removeMainObject: () => {\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"mainObject\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"currentStep\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"comments\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"allNotes\",\r\n      });\r\n    },\r\n    setMainObject: (data, step, user) => {\r\n      dispatch({\r\n        type: \"setWizard\",\r\n        path: `mainObject.${step}`,\r\n        data,\r\n      });\r\n\r\n      if (user) {\r\n        // user = { ...user, currentDate: moment().format(\"iYYYY/iM/iD\") };\r\n\r\n        dispatch({\r\n          type: \"setWizard\",\r\n          path: `mainObject.${step}.user`,\r\n          data: copyUser({ user }),\r\n        });\r\n      }\r\n    },\r\n  };\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACtsourceRoot":""}
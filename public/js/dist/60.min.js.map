{"version":3,"file":"60.min.js","sources":["webpack:///./src/app/helpers/components/show/select/main.js","webpack:///./src/app/helpers/components/show/select/mapping.js","webpack:///./src/app/helpers/components/show/select/multiSelect.js"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"./mapping\";\r\nimport { get, find } from \"lodash\";\r\nimport { fetchAllData } from \"app/helpers/functions\";\r\nimport {withTranslation} from \"react-i18next\";\r\n\r\nexport class selectComponent extends React.Component {\r\n  componentDidMount() {\r\n    const {\r\n      data = [],\r\n      setNextUrl,\r\n      setData,\r\n      fetch,\r\n      links = {},\r\n      ux_pattern,\r\n      api_config,\r\n      VALUE,\r\n      inconsistant,\r\n    } = this.props;\r\n    const { nextLink } = links;\r\n    if (\r\n      (fetch || this.props.field.fetch) &&\r\n      (!data.length ||\r\n        (ux_pattern != \"infiniteScrolling\" && (nextLink || inconsistant)))\r\n    ) {\r\n      ux_pattern == \"infiniteScrolling\"\r\n        ? this.getScrollingData(this.props, true)\r\n        : fetchAllData(fetch || this.props.field.fetch, api_config).then(\r\n            (data) => {\r\n              setData(data);\r\n              setNextUrl(\"\");\r\n            }\r\n          );\r\n    }\r\n  }\r\n\r\n  getScrollingData(props, onMount) {\r\n    // const { fetch, addToData, setData, links = {}, api_config, setNextUrl, pageSize = 20 } = props;\r\n    // const { nextLink } = links;\r\n    // if (onMount) {\r\n    //     return fetchData(fetch, {\r\n    //         ...api_config,\r\n    //         params: {\r\n    //             ...get(api_config, 'params'),\r\n    //             pageSize: pageSize\r\n    //         }\r\n    //     })\r\n    //         .then(({ results, next }) => {\r\n    //             setData(results);\r\n    //             setNextUrl(next)\r\n    //         })\r\n    // }\r\n    // else {\r\n    //     return fetchData(nextLink, omit(api_config, 'params'))\r\n    //         .then(({ results, next }) => {\r\n    //             addToData(results, -1);\r\n    //             setNextUrl(next);\r\n    //         })\r\n    // }\r\n  }\r\n\r\n  render() {\r\n    //;\r\n    const { field, data, val, t, values } = this.props;\r\n    const show =\r\n      get(\r\n        values,\r\n        field.show,\r\n        get(\r\n          find(field.data || data, { [field.value_key || \"value\"]: val }),\r\n          field.label_key || \"label\"\r\n        )\r\n      ) ||\r\n      get(\r\n        find(field.data || data, { [field.value_key || \"value\"]: val }),\r\n        field.label_key || \"label\"\r\n      ) ||\r\n      val;\r\n\r\n    return <p>{t(show)}</p>;\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation(\"labels\")(selectComponent));\r\n","import { get } from 'lodash';\r\nexport const mapStateToProps = ({ selectors = {}, mainApp, mapViewer, ...state }, { moduleName, path, value_key, ...props }) => {\r\n    return ({\r\n        data: props.field.data || get(state, path),\r\n        lang: mainApp.language,\r\n        selectors,\r\n        apps: mainApp.apps,\r\n        info: get(mapViewer, 'info.info', {}),\r\n        ...selectors[moduleName] || {},\r\n        value_key: get(selectors[moduleName], 'value_key', value_key)\r\n    })\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n    return {\r\n        setSelector: (moduleName, data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}`,\r\n                data\r\n            });\r\n        },\r\n        setValueLabelKeys: (label_key, value_key) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.label_key`,\r\n                data: label_key\r\n            });\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.value_key`,\r\n                data: value_key\r\n            });\r\n        },\r\n        setData: (data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.data`,\r\n                data\r\n            })\r\n        },\r\n        setChildData: (field, data) => {\r\n            field.data = data;\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${field.moduleName}.data`,\r\n                data\r\n            })\r\n        },\r\n        addToData: (data, index, operation) => {\r\n            dispatch({\r\n                type: 'insertInArraySelectors',\r\n                path: `${moduleName}.data`,\r\n                operation,\r\n                index,\r\n                data\r\n            })\r\n        },\r\n        setNextUrl: (nextUrl) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: `${moduleName}.links.nextLink`,\r\n                data: nextUrl\r\n            })\r\n        },\r\n        addNewSelector: (moduleName, data) => {\r\n            dispatch({\r\n                type: 'setSelectors',\r\n                path: moduleName,\r\n                data\r\n            })\r\n        },\r\n        removeSelector: (moduleName) => {\r\n            dispatch({\r\n                type: 'removeSelectors',\r\n                path: moduleName\r\n            })\r\n        },\r\n        setCurrentModule: (data) => {\r\n            dispatch({\r\n                type: 'setWizard',\r\n                path: \"currentModule\",\r\n                data\r\n            })\r\n        },\r\n        removeMainObject: () => {\r\n            dispatch({\r\n                type: 'removeWizard',\r\n                path: 'mainObject'\r\n            });\r\n            dispatch({\r\n                type: 'removeWizard',\r\n                path: 'currentStep'\r\n            });\r\n            dispatch({\r\n                type: 'removeWizard',\r\n                path: 'comments'\r\n            });\r\n            dispatch({\r\n                type: 'removeWizard',\r\n                path: 'allNotes'\r\n            });\r\n        },\r\n        \r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"./mapping\";\r\nimport { get, map, find } from \"lodash\";\r\nimport { selectComponent } from \"./main\";\r\nimport {withTranslation} from \"react-i18next\";\r\n\r\nclass multiSelectComponent extends selectComponent {\r\n  render() {\r\n    const { val, field, data, t } = this.props;\r\n    const shows = map(val, (d) => {\r\n      const md = find(data, { [field.value_key || \"value\"]: d });\r\n      return t(get(md, field.label_key || \"label\"));\r\n    });\r\n    return <p>{shows.join(\",\")}</p>;\r\n  }\r\n}\r\n\r\nexport const multiSelect = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation(\"labels\")(multiSelectComponent));\r\nexport default multiSelect;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAKA;AAAA;AAKA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;ACnzGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;;;;A","sourceRoot":""}
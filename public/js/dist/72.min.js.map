{"version":3,"file":"72.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/annotationTable/index.js","webpack:///./src/app/components/inputs/fields/identify/Component/annotationTable/maping.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Form, message, Select, Tooltip } from \"antd\";\r\nimport RenderField from \"app/components/inputs\";\r\nimport { serverFieldMapper } from \"app/helpers/functions\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"./maping\";\r\nimport { connect } from \"react-redux\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { formatKmlAttributes, groupBy } from \"../common/common_func\";\r\nimport { addFeaturesMapLayers } from \"../mapviewer/config\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass annotationTableComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let savedObject = props.mainObject?.locationData?.uploadFileDetails;\r\n    this.state = {\r\n      annotationList:\r\n        savedObject?.annotationList ||\r\n        props.UploadFileDetails?.annotationList ||\r\n        [],\r\n      layerName:\r\n        savedObject?.layerName ||\r\n        props?.UploadFileDetails?.layerName ||\r\n        props?.values?.layerName ||\r\n        null,\r\n      activeLayerDetails:\r\n        savedObject?.activeLayerDetails ||\r\n        props?.UploadFileDetails?.activeLayerDetails ||\r\n        null,\r\n      fileType:\r\n        savedObject?.fileType ||\r\n        props?.UploadFileDetails?.fileType ||\r\n        props?.values?.uploadFileType ||\r\n        null,\r\n      fileData:\r\n        savedObject?.fileData || props?.UploadFileDetails?.fileData || null,\r\n      googlePoints:\r\n        savedObject?.googlePoints ||\r\n        props?.UploadFileDetails?.googlePoints ||\r\n        [],\r\n    };\r\n\r\n    this.checkClearValues();\r\n\r\n  }\r\n\r\n\r\n  checkClearValues = () => {\r\n    \r\n    const { input } = this.props;\r\n\r\n    if (input.value.clearAll) {\r\n      //reset features\r\n      this.props.setEditableFeatures(null);\r\n      this.props.setUploadFileDetails(null);\r\n\r\n      this.setState({\r\n        annotationList: [],\r\n        layerName: input.value.layerName,\r\n        activeLayerDetails: null,\r\n        fileData: null,\r\n        fileType: input.value.fileType\r\n      }, () => {\r\n        this.props.setUploadFileDetails({ ...this.state })\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(oldProps, newProps) {\r\n    const { input } = this.props;\r\n\r\n    //\r\n    if (input.value.checkGoogleLink) {\r\n\r\n      this.setState({\r\n        layerName: input.value.layerName,\r\n        fileType: input.value.fileType\r\n      }, () => {\r\n        this.props.setUploadFileDetails({ ...this.state })\r\n      });\r\n      input.value.checkGoogleLink = false;\r\n    }\r\n\r\n    if (input.value.clearAll) {\r\n      //reset features\r\n      this.props.setEditableFeatures(null);\r\n      this.props.setUploadFileDetails(null);\r\n\r\n      this.setState({\r\n        annotationList: [],\r\n        layerName: input.value.layerName,\r\n        activeLayerDetails: null,\r\n        fileData: null,\r\n        fileType: input.value.fileType\r\n      }, () => {\r\n        this.props.setUploadFileDetails({ ...this.state })\r\n      });\r\n\r\n      input.value.clearAll = false;\r\n\r\n    }\r\n    else {\r\n      if (input.value && input.value != \"\" && input.value.justInvoked) {\r\n\r\n        //reset features\r\n        this.props.setEditableFeatures(null);\r\n        this.props.setUploadFileDetails(null);\r\n\r\n        let activeLayerDetails = {\r\n          ...addFeaturesMapLayers[input.value.layerName]\r\n        };\r\n\r\n        if (input.value.fileType == \"kml\") {\r\n          let columns = formatKmlAttributes(input.value.data.features[0]);\r\n\r\n          activeLayerDetails.outFields.filter((x) => x.mappingTypes.indexOf(input.value.fileType) > -1).forEach(element => {\r\n            element.mappingField = Object.keys(columns).find((x) => x.toLowerCase() == element.name.toLowerCase());\r\n            if (!element.mappingField) {\r\n              element.mappingField = Object.keys(columns).find((x) => element.arName.toLowerCase() == x.toLowerCase());\r\n            }\r\n          });\r\n\r\n          this.setState({\r\n            annotationList: columns,\r\n            layerName: input.value.layerName,\r\n            activeLayerDetails: activeLayerDetails,\r\n            fileData: input.value.data,\r\n            fileType: input.value.fileType\r\n          }, () => {\r\n            this.props.setUploadFileDetails({ ...this.state })\r\n          });\r\n        }\r\n        else if (input.value.fileType == \"shape\") {\r\n          let columns = input.value.data.features[0].attributes;\r\n\r\n          activeLayerDetails.outFields.filter((x) => x.mappingTypes.indexOf(input.value.fileType) > -1).forEach(element => {\r\n            element.mappingField = Object.keys(columns).find((x) => x == element.name);\r\n            if (!element.mappingField) {\r\n              element.mappingField = Object.keys(columns).find((x) => element.name.startsWith(x));\r\n            }\r\n          });\r\n\r\n          this.setState({\r\n            annotationList: columns,\r\n            layerName: input.value.layerName,\r\n            activeLayerDetails: activeLayerDetails,\r\n            fileData: input.value.data,\r\n            fileType: input.value.fileType\r\n          }, () => {\r\n            this.props.setUploadFileDetails({ ...this.state })\r\n          });\r\n        }\r\n        else if (input.value.fileType == \"cad\") {\r\n\r\n          let columns = groupBy(input.value.data.annotations, 'layer');\r\n          let keys = Object.keys(columns);\r\n\r\n          activeLayerDetails.outFields.filter((x) => x.mappingTypes.indexOf(input.value.fileType) > -1).forEach(element => {\r\n            element.mappingField = keys.find((x) => x == element.name);\r\n            if (!element.mappingField) {\r\n              element.mappingField = keys.find((x) => x.indexOf(element.name) > -1);\r\n            }\r\n          });\r\n\r\n          this.setState({\r\n            annotationList: columns,\r\n            layerName: input.value.layerName,\r\n            activeLayerDetails: activeLayerDetails,\r\n            fileData: input.value.data,\r\n            fileType: input.value.fileType\r\n          }, () => {\r\n            this.props.setUploadFileDetails({ ...this.state })\r\n          });\r\n\r\n        }\r\n        else if (input.value.fileType == \"excel\") {\r\n          if (this.validateExcel(input.value.data.features)) {\r\n\r\n            let columns = input.value.data.features[0].attributes;\r\n\r\n            activeLayerDetails.outFields.filter((x) => x.mappingTypes.indexOf(input.value.fileType) > -1).forEach(element => {\r\n              element.mappingField = Object.keys(columns).find((x) => x.toLowerCase().trim() == element.name.toLowerCase().trim());\r\n              if (!element.mappingField) {\r\n                element.mappingField = Object.keys(columns).find((x) => element.arName.toLowerCase().trim() == x.toLowerCase().trim());\r\n              }\r\n            });\r\n\r\n            this.setState({\r\n              annotationList: columns,\r\n              layerName: input.value.layerName,\r\n              activeLayerDetails: activeLayerDetails,\r\n              fileData: input.value.data,\r\n              fileType: input.value.fileType\r\n            }, () => {\r\n              this.props.setUploadFileDetails({ ...this.state })\r\n            });\r\n          }\r\n        }\r\n\r\n        input.value.justInvoked = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  validateExcel = (features) => {\r\n    let notIncludeSerial = features.find((f) => {\r\n      return !f.attributes.serial;\r\n    });\r\n    if (notIncludeSerial) {\r\n      window.notifySystem(\"error\", \"الملف لا يحتوى على معرف خاص بكل البيانات\");\r\n      return false;\r\n    }\r\n    let notIncludeXY = features.find((f) => {\r\n      return !f.attributes.x || !f.attributes.y;\r\n    });\r\n    if (notIncludeXY) {\r\n      window.notifySystem(\"error\", \"الملف لا يحتوى على اماكن النقاط x , y\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  annotaionHandleChange = (e, value) => {\r\n    this.props.setEditableFeatures(null);\r\n    e.mappingField = value;\r\n    this.setState({ activeLayerDetails: { ...this.state.activeLayerDetails } });\r\n    this.props.input.onChange({ ...this.props.input, ...this.state });\r\n    this.props.setUploadFileDetails({ ...this.state });\r\n  };\r\n\r\n  changeValue(name, e) {\r\n    this.setState({ [name]: e.target.value });\r\n\r\n    if (name == \"googleLink\") {\r\n      let url = e.target.value;\r\n      let regex = new RegExp(\"@(.*),(.*),\");\r\n      let lat_long_match = url.match(regex);\r\n\r\n      if (!lat_long_match) {\r\n        if (url.indexOf(\",\") > -1) {\r\n          this.setState({\r\n            lat: url.split(\",\")[0].trim(),\r\n            long: url.split(\",\")[1].trim(),\r\n          });\r\n        }\r\n      } else {\r\n        let lat = lat_long_match[1];\r\n        let long = lat_long_match[2];\r\n        this.setState({ lat: lat, long: long });\r\n      }\r\n    }\r\n  }\r\n\r\n  addPoint() {\r\n    if (this.state.lat && this.state.long) {\r\n      if (\r\n        this.state.googlePoints.find(\r\n          (point) =>\r\n            point.lat == this.state.lat && point.long == this.state.long\r\n        )\r\n      ) {\r\n        window.notifySystem(\"error\", \"النقطة المدخلة مضافة من قبل\");\r\n      } else {\r\n        this.props.setEditableFeatures(null);\r\n        this.setState(\r\n          {\r\n            googlePoints: [\r\n              ...this.state.googlePoints,\r\n              { lat: this.state.lat, long: this.state.long },\r\n            ],\r\n            lat: \"\",\r\n            long: \"\",\r\n            googleLink: \"\",\r\n          },\r\n          () => {\r\n            this.props.setUploadFileDetails({ ...this.state });\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  removeFeature(index) {\r\n    this.state.googlePoints.splice(index, 1);\r\n\r\n    this.setState({ googlePoints: [...this.state.googlePoints] });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      annotationList,\r\n      activeLayerDetails,\r\n      fileType,\r\n      googleLink,\r\n      lat,\r\n      long,\r\n      googlePoints,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        {fileType != \"google\" ? (\r\n          Object.keys(annotationList).length > 0 &&\r\n          activeLayerDetails?.outFields?.filter(\r\n            (x) => x.mappingTypes.indexOf(fileType) > -1\r\n          )?.length > 0 && (\r\n            <div>\r\n              <label>جدول annotations</label>\r\n              <table className=\"table table-bordered\" style={{ width: \"100%\" }}>\r\n                <thead>\r\n                  <tr>\r\n                    <th>طبقات ال Annotation</th>\r\n                    <th>أعمدة الطبقة</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {activeLayerDetails.outFields\r\n                    .filter((x) => x.mappingTypes.indexOf(fileType) > -1)\r\n                    .map((outField) => {\r\n                      return (\r\n                        <tr>\r\n                          <td>\r\n                            <Select\r\n                              showSearch\r\n                              style={{ width: \"80%\" }}\r\n                              virtual={false}\r\n                              onChange={this.annotaionHandleChange.bind(\r\n                                this,\r\n                                outField\r\n                              )}\r\n                              className=\"dont-show\"\r\n                              value={outField.mappingField}\r\n                              placeholder=\"من فضلك اختر الحقل\"\r\n                              filterOption={(input, option) =>\r\n                                option.props.children\r\n                                  ?.toLowerCase()\r\n                                  ?.indexOf(String(input).toLowerCase()) >= 0\r\n                              }\r\n                              getPopupContainer={(trigger) =>\r\n                                trigger.parentNode\r\n                              }>\r\n                              {Object.keys(annotationList).map((s, index) => {\r\n                                return (\r\n                                  <Select.Option value={s} id={index}>\r\n                                    {s}\r\n                                  </Select.Option>\r\n                                );\r\n                              })}\r\n                            </Select>\r\n                          </td>\r\n                          <td>\r\n                            {outField.arName} - {outField.name}\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )\r\n        ) : (\r\n          <div>\r\n            <label>رفع البيانات الخاصة بالموقع</label>\r\n            <div style={{ display: \"flex\" }}>\r\n              <input\r\n                name=\"input1\"\r\n                autoFocus\r\n                placeholder=\"قم بلصق الرابط هنا\"\r\n                value={googleLink}\r\n                className=\"form-control\"\r\n                onChange={this.changeValue.bind(this, \"googleLink\")}\r\n              />\r\n\r\n              <Button size=\"large\" onClick={this.addPoint.bind(this)}>\r\n                <FontAwesomeIcon icon={faPlus} className=\"\" />\r\n              </Button>\r\n            </div>\r\n            <div style={{ display: \"flex\", marginTop: \"20px\" }}>\r\n              <input\r\n                placeholder=\"إحداثيات خط الطول\"\r\n                value={long}\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                onChange={this.changeValue.bind(this, \"long\")}\r\n              />\r\n\r\n              <input\r\n                placeholder=\"إحداثيات دائرة العرض\"\r\n                value={lat}\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                onChange={this.changeValue.bind(this, \"lat\")}\r\n              />\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"20px\" }}>\r\n              {googlePoints.length > 0 && (\r\n                <table\r\n                  className=\"table table-bordered\"\r\n                  style={{ width: \"100%\" }}>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>التسلسل</th>\r\n                      <th>إحداثيات خط الطول</th>\r\n                      <th>إحداثيات دائرة العرض</th>\r\n                      <th>الإجراءات</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {googlePoints.map((point, index) => {\r\n                      return (\r\n                        <tr>\r\n                          <td>{index + 1}</td>\r\n                          <td>{point.long}</td>\r\n                          <td>{point.lat}</td>\r\n                          <td>\r\n                            <Button\r\n                              size=\"large\"\r\n                              onClick={this.removeFeature.bind(this, index)}>\r\n                              <FontAwesomeIcon icon={faTrash} className=\"\" />\r\n                            </Button>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation(\"labels\")(annotationTableComponent));\r\n","export const mapStateToProps = state => {\r\n    return {\r\n        mainObject: state.wizard.mainObject,\r\n        UploadFileDetails: state.mainApp.uploadFileDetails,\r\n        map: state.map,\r\n        editableFeatures: state.mainApp.editableFeatures\r\n    };\r\n}\r\n\r\n\r\nexport const mapDispatchToProps = dispatch => {\r\n    return {\r\n        setLoading: (data) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'loading',\r\n                data\r\n            })\r\n        },\r\n        setmap: (e) => dispatch({ type: 'setMap', value: e }),\r\n        setUploadFileDetails: (e) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'uploadFileDetails',\r\n                data: e\r\n            })\r\n        },\r\n        setEditableFeatures: (e) => {\r\n            dispatch({\r\n                type: 'setMainApp',\r\n                path: 'editableFeatures',\r\n                data: e\r\n            })\r\n        }\r\n    };\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAoCA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AA2IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAtNA;AACA;AACA;AAIA;AAKA;AAIA;AAKA;AAEA;AAIA;AAEA;AAEA;AAwBA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA4BA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAWA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAIA;AAQA;AAQA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAWA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AAKA;AASA;AACA;AACA;;;;;;;;;;;;ACnbA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}
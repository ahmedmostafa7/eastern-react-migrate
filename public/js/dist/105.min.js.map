{"version":3,"file":"105.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/updatefinalMap/index.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Tabs, message } from \"antd\";\r\nconst { TabPane } = Tabs;\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nimport { post } from \"axios\";\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  getPolygons,\r\n  addGraphicToLayer,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  project,\r\n  addParcelNo,\r\n  zoomToLayer,\r\n  GetSpatial,\r\n  resizeMap,\r\n  computePointDirection,\r\n  convertToArabic,\r\n  applyEditsMultiple\r\n} from \"../common/common_func\";\r\nimport { workFlowUrl } from \"config\";\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport { mapUrl } from \"../mapviewer/config/map\";\r\nimport { Select, Button, Form } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { get } from \"lodash\";\r\nimport { querySetting } from \"../IdentifyComponnentCoord/Helpers\";\r\nimport { timeout } from \"d3\";\r\nimport { json } from \"d3\";\r\nconst { Option } = Select;\r\nconst tabsCm = [{ title: '1', key: \"1\" }, { title: '2', key: \"2\" }]\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k + offset}`,\r\n    content: `item ${k + offset}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: '2px',\r\n  fontSize: '20px',\r\n  marginRight: '13px',\r\n  float: 'right',\r\n  // change background colour if dragging\r\n  background: '#E0E0E0',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst dragStyle = {\r\n  float: 'right',\r\n  marginRight: '13px',\r\n  backgroundColor: '#E0E0E0',\r\n  padding: '2px'\r\n}\r\n\r\nconst getListStyle =\r\n  isDraggingOver => ({\r\n    //background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    padding: grid,\r\n    width: '100%',\r\n    height: '60px'\r\n  });\r\n\r\nconst itemContainerNorth = {\r\n  borderTop: '13px solid #008DFF',\r\n  margin: 'auto',\r\n  height: 'auto',\r\n  width: '500px',\r\n  backgroundColor: 'white',\r\n  boxShadow: '1px 1px 3px #505050',\r\n  cursor: 'pointer',\r\n  borderRadius: '10px',\r\n  padding: '5px',\r\n  minHeight: '152px',\r\n  overflow: 'auto'\r\n\r\n}\r\n\r\nconst itemContainerWeast = {\r\n  borderLeft: '13px solid red',\r\n  height: 'auto',\r\n  margin: 'auto',\r\n  width: '500px',\r\n  marginTop: '15px',\r\n  backgroundColor: 'white',\r\n  boxShadow: '1px 1px 3px #505050',\r\n  cursor: 'pointer',\r\n  borderRadius: '10px',\r\n  padding: '5px',\r\n  minHeight: '152px',\r\n  overflow: 'auto'\r\n\r\n}\r\n\r\nconst itemContainerEmpty = {\r\n  height: 'auto',\r\n  margin: '35px 88px auto',\r\n  width: '500px',\r\n  marginTop: '15px',\r\n  backgroundColor: 'white',\r\n  boxShadow: '1px 1px 3px #505050',\r\n  cursor: 'pointer',\r\n  borderRadius: '10px',\r\n  padding: '5px',\r\n  minHeight: '152px',\r\n  overflow: 'auto'\r\n\r\n}\r\n\r\nconst itemContainerEast = {\r\n  borderRight: '13px solid #8A8A8A',\r\n  height: 'auto',\r\n  width: '500px',\r\n  marginTop: '15px',\r\n  backgroundColor: 'white',\r\n  boxShadow: '1px 1px 3px #505050',\r\n  cursor: 'pointer',\r\n  borderRadius: '10px',\r\n  padding: '5px',\r\n  minHeight: '152px',\r\n  overflow: 'auto'\r\n\r\n}\r\n\r\nconst itemContainerSouth = {\r\n  borderBottom: '13px solid #09F869',\r\n  margin: 'auto',\r\n  height: 'auto',\r\n  width: '500px',\r\n  marginTop: '15px',\r\n  backgroundColor: 'white',\r\n  boxShadow: '1px 1px 3px #505050',\r\n  cursor: 'pointer',\r\n  borderRadius: '10px',\r\n  padding: '5px',\r\n  minHeight: '152px',\r\n  overflow: 'auto'\r\n\r\n}\r\nclass updateMapFiled extends Component {\r\n  props = {};\r\n  self = null;\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    self = this;\r\n    this.props = props;\r\n    this.cadData =\r\n      (this.props.input.value &&\r\n        this.props.input.value.temp &&\r\n        this.props.input.value.temp.cadData) ||\r\n      undefined;\r\n    this.state = {\r\n      polygons: [],\r\n      activeKey: \"1\",\r\n      mapLoaded: false,\r\n      serviceVal: null,\r\n      serviceSubTypeVal: null,\r\n      servicesSubTypes: [],\r\n      bufferDistance: null,\r\n      servicesTypes: [],\r\n      resultServices: [],\r\n      lands: [],\r\n      weastBoundries: [],\r\n      northBoundries: [],\r\n      eastBoundries: [],\r\n      southBoundries: []\r\n    };\r\n    this.baseState = this.state;\r\n\r\n    if (this.props.input && this.props.input.value && this.props.input.value.polygons) {\r\n      this.props.input.value.polygons.forEach((polygon, key) => {\r\n        this.state['north_Desc' + key] = polygon.north_Desc;\r\n        this.state['weast_Desc' + key] = polygon.weast_Desc;\r\n        this.state['south_Desc' + key] = polygon.south_Desc;\r\n        this.state['east_Desc' + key] = polygon.east_Desc;\r\n\r\n        this.state['parcel_Name' + key] = polygon.parcel_name;\r\n        this.state['parcel_area_desc' + key] = polygon.parcel_area_desc;\r\n\r\n        if (polygon.shtfa_northeast) {\r\n          this.state['shtfa_northeast'] = polygon.shtfa_northeast;\r\n        }\r\n        if (polygon.shtfa_northweast) {\r\n          this.state['shtfa_northweast'] = polygon.shtfa_northweast;\r\n        }\r\n        if (polygon.shtfa_southeast) {\r\n          this.state['shtfa_southeast'] = polygon.shtfa_southeast;\r\n        }\r\n        if (polygon.shtfa_southweast) {\r\n          this.state['shtfa_southweast'] = polygon.shtfa_southweast;\r\n        }\r\n\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A semi-generic way to handle multiple lists. Matches\r\n   * the IDs of the droppable container to the names of the\r\n   * source arrays stored in the state.\r\n   */\r\n  id2List = {\r\n    droppable_North: 'northBoundries',\r\n    droppable_South: 'southBoundries',\r\n    droppable_East: 'eastBoundries',\r\n    droppable_Weast: 'weastBoundries',\r\n  };\r\n\r\n  getList = id => this.state[this.id2List[id]];\r\n\r\n  onDragEnd = result => {\r\n    const { source, destination } = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const items = reorder(\r\n        this.getList(source.droppableId),\r\n        source.index,\r\n        destination.index\r\n      );\r\n\r\n      let state = { items };\r\n\r\n      if (source.droppableId === 'droppable_South') {\r\n        state = { southBoundries: items };\r\n      }\r\n      if (source.droppableId === 'droppable_North') {\r\n        state = { northBoundries: items };\r\n      }\r\n      if (source.droppableId === 'droppable_East') {\r\n        state = { eastBoundries: items };\r\n      }\r\n      if (source.droppableId === 'droppable_Weast') {\r\n        state = { weastBoundries: items };\r\n      }\r\n\r\n      this.setState(state);\r\n    } else {\r\n\r\n      const result = move(\r\n        this.getList(source.droppableId),\r\n        this.getList(destination.droppableId),\r\n        source,\r\n        destination\r\n      );\r\n\r\n      if (result.droppable_North) {\r\n        this.Polygons[(+this.state.activeKey) - 1].data[0].data =\r\n          result.droppable_North.map((item) => { return item.data });\r\n      }\r\n      if (result.droppable_Weast) {\r\n        this.Polygons[(+this.state.activeKey) - 1].data[3].data =\r\n          result.droppable_Weast.map((item) => { return item.data });\r\n      }\r\n      if (result.droppable_South) {\r\n        this.Polygons[(+this.state.activeKey) - 1].data[4].data =\r\n          result.droppable_South.map((item) => { return item.data });\r\n      }\r\n      if (result.droppable_East) {\r\n        this.Polygons[(+this.state.activeKey) - 1].data[1].data =\r\n          result.droppable_East.map((item) => { return item.data });\r\n      }\r\n\r\n\r\n      this.dropSuccess();\r\n      this.calculateLines();\r\n\r\n      this.setState({\r\n        northBoundries: result.droppable_North || this.state.northBoundries,\r\n        southBoundries: result.droppable_South || this.state.southBoundries,\r\n        eastBoundries: result.droppable_East || this.state.eastBoundries,\r\n        weastBoundries: result.droppable_Weast || this.state.weastBoundries,\r\n      });\r\n\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    getInfo(addedParcelMapServiceUrl).then((res) => {\r\n      // ////\r\n      this.LayerID = res;\r\n\r\n    });\r\n\r\n    window.updateMap = function () {\r\n      return new Promise((resolve, reject) => {\r\n\r\n        var landbase_layer = self.LayerID.Landbase_Parcel;\r\n        var landbase_history_layer = self.LayerID.Landbase_Parcel_H;\r\n\r\n        var where = self.props.mainObject.landData.landData.lands.parcels.map((d) => {\r\n          return \"( PARCEL_SPATIAL_ID =\" +\r\n            d.attributes.PARCEL_SPATIAL_ID +\r\n            \" and PARCEL_PLAN_NO = '\" +\r\n            d.attributes.PARCEL_PLAN_NO +\r\n            \"'\" + \")\"\r\n        });\r\n\r\n        let transactionList = [];\r\n\r\n        if (where.length > 0) {\r\n\r\n          queryTask({\r\n            url: addedParcelMapServiceUrl + \"/\" + self.LayerID.Landbase_Parcel,\r\n            where: where.join(\" or \"),\r\n            returnGeometry: true,\r\n            outFields: [\"*\"],\r\n            callbackResult: (res) => {\r\n\r\n              if (res.features.length > 0) {\r\n                res.features.forEach((f) => {\r\n                  //عملية حذف\r\n                  f.attributes.OPERATION_TYPE = 2;\r\n                  f.attributes.ORIGINAL_OBJECTID = f.attributes.OBJECTID;\r\n                  f.attributes.ARCHIVE_TIME = new Date().toLocaleString().replace(\",\", \"\");\r\n                  f.attributes.USER_NAME = \"gis\";\r\n                });\r\n\r\n                //add to history\r\n                transactionList.push({\r\n                  id: landbase_history_layer,\r\n                  adds: res.features.map((x) => {\r\n                    return {\r\n                      attributes: x.attributes,\r\n                      geometry: x.geometry,\r\n                    };\r\n                  }),\r\n                });\r\n\r\n                var updatedFeatures = [];\r\n\r\n                self.Polygons.filter((p) => {\r\n                  return p.polygon.layer == \"boundry\"\r\n                }).forEach((polygon) => {\r\n\r\n                  var polygonClass = new esri.geometry.Polygon(polygon.polygon);\r\n                  var graphic = new esri.Graphic(polygonClass, null, null, null);\r\n                  let objectId = res.features.find((x) => x.attributes.PARCEL_PLAN_NO == polygon.parcel_name)?.attributes.OBJECTID;\r\n                  graphic.attributes = { \"PARCEL_AREA\": polygon.area, \"OBJECTID\": objectId };\r\n                  updatedFeatures.push(graphic);\r\n\r\n                });\r\n\r\n                transactionList.push({\r\n                  id: landbase_layer,\r\n                  updates: updatedFeatures.map((x) => {\r\n                    return {\r\n                      attributes: { PARCEL_AREA: x.attributes.PARCEL_AREA, OBJECTID: x.attributes.OBJECTID },\r\n                      geometry: x.geometry,\r\n                    };\r\n                  }),\r\n                });\r\n\r\n                applyEditsMultiple(addedParcelMapServiceUrl, JSON.stringify(transactionList)).then(\r\n                  (data) => {\r\n                    resolve(true);\r\n                  },\r\n                  () => {\r\n                    reject();\r\n                    window.notifySystem(\"error\", \"حدث خطأ أثناء إنهاء المعاملة\");\r\n                  }\r\n                );\r\n\r\n              }\r\n              else {\r\n                reject();\r\n              }\r\n            }\r\n          })\r\n\r\n        }\r\n        else {\r\n          reject();\r\n        }\r\n\r\n      }\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  dragLength(event) {\r\n\r\n    console.log(event)\r\n    this.map.getLayer(\"editlengthGraphicLayer\").remove(event.graphic);\r\n    addParcelNo(event.mapPoint, this.map, \"\" + event.graphic.attributes[\"text\"],\r\n      \"editlengthGraphicLayer\", 35, null,\r\n      event.graphic.attributes[\"angle\"],\r\n      null, {\r\n      text: event.graphic.attributes[\"text\"],\r\n      angle: event.graphic.attributes[\"angle\"]\r\n    });\r\n  }\r\n\r\n  moveBoundries() {\r\n    window.onDragLengthLayer = [];\r\n    window.onDragLengthLayer.push(this.dragLength.bind(this));\r\n    this.map.disablePan();\r\n  }\r\n\r\n\r\n  mapLoaded = (map) => {\r\n    this.map = map;\r\n    this.moveBoundries();\r\n\r\n    console.log(this.props);\r\n\r\n    clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n    var polygons = this.props.mainObject.suggestParcel.suggestParcel.suggestParcels.polygons;\r\n\r\n    if (this.props.mainObject && this.props.mainObject.suggestParcel && this.props.mainObject.suggestParcel.suggestParcel.suggestParcels) {\r\n      setTimeout(() => {\r\n        polygons.forEach((f) => {\r\n\r\n          f.polygon = new esri.geometry.Polygon(f.polygon);\r\n\r\n          if (f.parcel_name != 'الزائده التنظيميه' && f.parcel_name != \"الزائدة\") {\r\n            addParcelNo(f.polygon.getExtent().getCenter(),\r\n              this.map, convertToArabic(f.parcel_name) + '',\r\n              \"ParcelPlanNoGraphicLayer\", 14, [0, 0, 0]);\r\n          }\r\n\r\n\r\n\r\n        })\r\n      }, 200);\r\n    }\r\n\r\n    if (this.cadData && !(this.props.input && this.props.input.value && this.props.input.value.polygons)) {\r\n      this.drawFeatures(this.cadData);\r\n\r\n    }\r\n    else if (polygons) {\r\n      this.drawPolygons(polygons);\r\n    }\r\n\r\n  };\r\n\r\n  isPointOrArc(point, polygonIndex, cadFeatures) {\r\n    var value = false;\r\n\r\n    var points = cadFeatures[polygonIndex];\r\n    for (var i = 0; i < points.length; i++) {\r\n      if (points[i][0] == point.x && points[i][1] == point.y) {\r\n        value = true;\r\n        break;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n\r\n  getLineLength(boundryFeaturesLen, point1, point2, isArc) {\r\n    return (\r\n      isArc &&\r\n      boundryFeaturesLen.find((d) => {\r\n        return (\r\n          (d.points[0].x.toFixed(4) == point1.x.toFixed(4) &&\r\n            d.points[0].y.toFixed(4) == point1.y.toFixed(4) &&\r\n            d.points[1].x.toFixed(4) == point2.x.toFixed(4) &&\r\n            d.points[1].y.toFixed(4) == point2.y.toFixed(4)) ||\r\n          (d.points[0].x.toFixed(4) == point2.x.toFixed(4) &&\r\n            d.points[0].y.toFixed(4) == point2.y.toFixed(4) &&\r\n            d.points[1].x.toFixed(4) == point1.x.toFixed(4) &&\r\n            d.points[1].y.toFixed(4) == point1.y.toFixed(4))\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getPacrelNoAngle(parcel) {\r\n    var xMin;\r\n    var xMax = 0;\r\n    var yMin;\r\n    var yMax = 0;\r\n\r\n    parcel.geometry.rings[0].forEach(function (point) {\r\n      if (point[0] > xMax) xMax = point[0];\r\n\r\n      if (!xMin || point[0] < xMin) xMin = point[0];\r\n\r\n      if (point[1] > yMax) yMax = point[1];\r\n\r\n      if (!yMin || point[1] < yMin) yMin = point[1];\r\n    });\r\n\r\n    return yMax - yMin > xMax - xMin ? 60 : -15;\r\n  }\r\n\r\n  calculateLines() {\r\n    this.Polygons.forEach((polygon) => {\r\n      polygon.data.forEach((lines) => {\r\n        lines.totalLength = 0;\r\n        lines.data.forEach((line) => {\r\n          if (!line.hide) lines.totalLength += line.text;\r\n        });\r\n        lines.totalLength = lines.totalLength.toFixed(2); //Math.floor(parseFloat(lines.totalLength) * 100) / 100;\r\n        //if((lines.totalLength+'').split('.')[1][1] == '9')\r\n        //  lines.totalLength = lines.totalLength.toFixed(2)\r\n      });\r\n    });\r\n  }\r\n\r\n  dropSuccess(Polyline) {\r\n    clearGraphicFromLayer(this.map, \"boundriesDirection\");\r\n    //clearGraphicLayer(\"PacrelNoGraphicLayer\", $scope.map);\r\n\r\n    var count = 0;\r\n\r\n    //var oldData = JSON.parse(JSON.stringify(this.layerParcels));\r\n\r\n    this.layerParcels = [];\r\n\r\n    //sortLines(sug.Polygons);\r\n\r\n    this.Polygons.forEach((polygon, key) => {\r\n      count++;\r\n      var parcelNumber = key + 1;\r\n\r\n      /*if (oldData[key]) {\r\n          polygon.corners = JSON.parse(JSON.stringify((oldData[key].corners)));\r\n      }\r\n      else\r\n          polygon.corners = [];*/\r\n\r\n      this.layerParcels.push(JSON.parse(JSON.stringify(polygon.polygon)));\r\n      this.layerParcels[this.layerParcels.length - 1].lines = [];\r\n      this.layerParcels[this.layerParcels.length - 1].corners = [];\r\n\r\n      if (polygon.data) {\r\n        polygon.data.forEach((boundry) => {\r\n\r\n          var lineDirection;\r\n          if (boundry.name != \"main\") {\r\n            var color = [0, 0, 255];\r\n\r\n            if (boundry.name == \"north\") {\r\n              color = [0, 141, 255];\r\n              lineDirection = 1;\r\n            }\r\n            else if (boundry.name == \"east\") {\r\n              color = [117, 114, 114];\r\n              lineDirection = 2;\r\n            }\r\n            else if (boundry.name == \"weast\") {\r\n              color = [255, 0, 0];\r\n              lineDirection = 4;\r\n            }\r\n            else if (boundry.name == \"south\") {\r\n              color = [0, 255, 0];\r\n              lineDirection = 3;\r\n            }\r\n\r\n\r\n            boundry.data.forEach((line) => {\r\n\r\n\r\n              if (line.lines) {\r\n                line.lines.forEach((innerLine) => {\r\n\r\n                  innerLine.color = color;\r\n                  innerLine.polygonNum = count;\r\n                  innerLine.lineDirection = lineDirection;\r\n\r\n                  var polyline = new esri.geometry.Polyline(innerLine);\r\n\r\n                  this.layerParcels[this.layerParcels.length - 1].lines.push(polyline);\r\n\r\n                  addGraphicToLayer(polyline, this.map, \"boundriesDirection\", color);\r\n                });\r\n              }\r\n\r\n              line.color = color;\r\n              line.polygonNum = count;\r\n              line.lineDirection = lineDirection;\r\n\r\n              var polyline = new esri.geometry.Polyline(line);\r\n\r\n              var point1 = {};\r\n              point1.x = line.paths[0][0][0];\r\n              point1.y = line.paths[0][0][1];\r\n\r\n              point1.x = Number(point1.x.toPrecision(12));\r\n              point1.y = Number(point1.y.toPrecision(12));\r\n\r\n              var latlng = esri.geometry.xyToLngLat(point1.x, point1.y);\r\n              point1.lat = latlng[0];\r\n              point1.lng = latlng[1];\r\n\r\n              var point2 = {};\r\n              point2.x = line.paths[0][1][0];\r\n              point2.y = line.paths[0][1][1];\r\n\r\n              point2.x = Number(point2.x.toPrecision(12));\r\n              point2.y = Number(point2.y.toPrecision(12));\r\n\r\n              latlng = esri.geometry.xyToLngLat(point2.x, point2.y);\r\n              point2.lat = latlng[0];\r\n              point2.lng = latlng[1];\r\n\r\n              /*var fromCornerIndex = sug.getCornersIndex(polygon.corners, point1);\r\n              if (fromCornerIndex == -1) {\r\n                  polygon.corners.push(point1);\r\n                  fromCornerIndex = polygon.corners.length;\r\n              }\r\n              var toCornerIndex = sug.getCornersIndex(polygon.corners, point2);\r\n              if (toCornerIndex == -1) {\r\n                  polygon.corners.push(point2);\r\n                  toCornerIndex = polygon.corners.length;\r\n              }*/\r\n\r\n              //line.from = fromCornerIndex;\r\n              //line.to = toCornerIndex;\r\n              line.BOUNDARY_NO = line.from;\r\n\r\n              var polyline1 = new esri.geometry.Polyline(line);\r\n\r\n              this.layerParcels[this.layerParcels.length - 1].lines.push(polyline);\r\n\r\n              var attr = {\r\n                \"parcelNumber\": parcelNumber\r\n              };\r\n\r\n              addGraphicToLayer(polyline1, this.map, \"boundriesDirection\", color, null, null, null, attr);\r\n            });\r\n\r\n          }\r\n\r\n        });\r\n      }\r\n\r\n    });\r\n\r\n\r\n\r\n  }\r\n  getSuggestLine(Polyline) {\r\n    this.Polygons.forEach(function (polygon) {\r\n      var polygonCenterPoint = polygon.polygon.getExtent().getCenter();\r\n      var polyg = new esri.geometry.Polygon(polygon.polygon);\r\n      polygon.data[2].data.forEach(function (boundry, key) {\r\n        // var line = new Polyline(boundry);\r\n        // var centerPointofLine = line.getExtent().getCenter();\r\n\r\n        // var diffrenceInXWithMaxPoint = Math.abs(\r\n        //   centerPointofLine.x - polygon.maxPoint.x\r\n        // );\r\n        // var diffrenceWithPolygonCenterPoint = Math.abs(\r\n        //   centerPointofLine.x - polygonCenterPoint.x\r\n        // );\r\n\r\n        // //east\r\n        // if (diffrenceInXWithMaxPoint < diffrenceWithPolygonCenterPoint) {\r\n        //   polygon.data[1].data.push(boundry);\r\n        // } else {\r\n        //   var diffrenceInXWithMinPoint = Math.abs(\r\n        //     centerPointofLine.x - polygon.minPoint.x\r\n        //   );\r\n        //   if (diffrenceInXWithMinPoint < diffrenceWithPolygonCenterPoint) {\r\n        //     polygon.data[3].data.push(boundry);\r\n        //   } else if (centerPointofLine.y > polygonCenterPoint.y) {\r\n        //     polygon.data[0].data.push(boundry);\r\n        //   } else {\r\n        //     polygon.data[4].data.push(boundry);\r\n        //   }\r\n        // }\r\n        let direction = computePointDirection(\r\n          polygon,\r\n          boundry.paths[0][0],\r\n          boundry.paths[0][1],\r\n          polyg\r\n        );\r\n        if (direction.direction == \"east\") {\r\n          polygon.data[1].data.push(boundry);\r\n        } else {\r\n          if (direction.direction == \"west\") {\r\n            polygon.data[3].data.push(boundry);\r\n          } else if (direction.direction == \"north\") {\r\n            polygon.data[0].data.push(boundry);\r\n          } else if (direction.direction == \"south\") {\r\n            polygon.data[4].data.push(boundry);\r\n          }\r\n        }\r\n      });\r\n\r\n      polygon.data[2].data = [];\r\n    });\r\n\r\n    this.dropSuccess(Polyline);\r\n    this.calculateLines();\r\n  }\r\n\r\n  settoStore(polygons) {\r\n    this.props.input.onChange({\r\n      polygons: polygons,\r\n      temp: {\r\n        cadData: this.cadData,\r\n      },\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n  drawLengths(polygons) {\r\n\r\n    this.Polygons.forEach((elem, key) => {\r\n\r\n      if (elem.data) {\r\n        elem.data.forEach((item) => {\r\n\r\n          item.data.forEach((boundry) => {\r\n\r\n            var attr = {\r\n              text: boundry.text.toFixed(2),\r\n              angle: null,\r\n            };\r\n            console.log(boundry)\r\n            addParcelNo(\r\n              new esri.geometry.Point(boundry.centroid), this.map,\r\n              \"\" + boundry.text.toFixed(2)\r\n              + \"\", \"editlengthGraphicLayer\",\r\n              30,\r\n              null,\r\n              null,\r\n              null,\r\n              attr\r\n            );\r\n          })\r\n\r\n        });\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  drawPolygons(polygons) {\r\n    this.Polygons = polygons;\r\n    console.log(this.Polygons)\r\n\r\n    this.Polygons.forEach((elem, key) => {\r\n      elem.polygon = new esri.geometry.Polygon(elem.polygon);\r\n      elem.polygon.type = \"polygon\";\r\n      console.log(elem.polygon)\r\n      if (elem.polygon.layer == \"boundry\") {\r\n        addGraphicToLayer(\r\n          elem.polygon,\r\n          this.map,\r\n          \"addedParclGraphicLayer\",\r\n          [0, 0, 255, 0.8],\r\n          null,\r\n          true\r\n        );\r\n      } else {\r\n        if (elem.polygon.rings.length) {\r\n          addGraphicToLayer(\r\n            elem.polygon,\r\n            this.map,\r\n            \"addedParclGraphicLayer\",\r\n            [0, 255, 0, 0.8],\r\n            null,\r\n            null,\r\n            null, null, null, null, true\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n\r\n    this.dropSuccess();\r\n\r\n\r\n    this.setState({\r\n      polygons: this.Polygons,\r\n      weastBoundries: this.Polygons[0].data[3].data.map((item, i) => {\r\n        return {\r\n          id: `item-${'weast_' + i}`,\r\n          content: item.text.toFixed(2),\r\n          data: item\r\n        }\r\n      }),\r\n      northBoundries: this.Polygons[0].data[0].data.map((item, i) => {\r\n        return {\r\n          id: `item-${'north_' + i}`,\r\n          content: item.text.toFixed(2),\r\n          data: item\r\n        }\r\n      }),\r\n      eastBoundries: this.Polygons[0].data[1].data.map((item, i) => {\r\n        return {\r\n          id: `item-${'east_' + i}`,\r\n          content: item.text.toFixed(2),\r\n          data: item\r\n        }\r\n      }),\r\n      southBoundries: this.Polygons[0].data[4].data.map((item, i) => {\r\n        return {\r\n          id: `item-${'south_' + i}`,\r\n          content: item.text.toFixed(2),\r\n          data: item\r\n        }\r\n      })\r\n    });\r\n\r\n    this.drawLengths();\r\n\r\n    this.settoStore(this.Polygons);\r\n\r\n    setTimeout(() => {\r\n      zoomToLayer(\"addedParclGraphicLayer\", this.map, 8);\r\n    }, 200);\r\n\r\n    //resizeMap(this.map);\r\n\r\n\r\n\r\n  }\r\n\r\n  drawFeatures(features) {\r\n    LoadModules([\r\n      \"esri/geometry/Point\",\r\n      \"esri/geometry/Polyline\",\r\n      \"esri/geometry/Polygon\",\r\n      \"esri/geometry/mathUtils\",\r\n      \"esri/SpatialReference\",\r\n    ]).then(([Point, Polyline, Polygon, mathUtils, SpatialReference]) => {\r\n      clearGraphicFromLayer(this.map, \"highlightBoundriesGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"boundriesGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"boundriesDirection\");\r\n      clearGraphicFromLayer(this.map, \"pictureGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelUnNamedGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"detailedGraphicLayer\");\r\n\r\n      this.layerParcels = [];\r\n      let pointsLength = [];\r\n\r\n      this.Polygons = [];\r\n\r\n      let lineFeatures = [];\r\n      if (features[0].lineFeatures) {\r\n        //draw details\r\n        features[0].lineFeatures.forEach((line, appartNumber) => {\r\n          var polyline = new Polyline(line);\r\n          lineFeatures.push(polyline);\r\n          addGraphicToLayer(\r\n            polyline,\r\n            this.map,\r\n            \"detailedGraphicLayer\",\r\n            [0, 0, 255, 0.5],\r\n            null,\r\n            null,\r\n            null\r\n          );\r\n        });\r\n      }\r\n\r\n      getPolygons(\r\n        features[0].shapeFeatures,\r\n        (polygon, esriModules, elem, key) => {\r\n          this.Polygons.push({\r\n            parcelName: \"\",\r\n            area: -1,\r\n            data: [\r\n              { name: \"north\", data: [], totalLength: 0 },\r\n              { name: \"east\", data: [], totalLength: 0 },\r\n              { name: \"main\", data: [], totalLength: 0 },\r\n              { name: \"weast\", data: [], totalLength: 0 },\r\n              { name: \"south\", data: [], totalLength: 0 },\r\n            ],\r\n          });\r\n          this.Polygons[key].parcelName = \"\";\r\n          if (elem.layer == \"plus\") {\r\n            this.Polygons[key].parcel_name = 'الزائده التنظيميه';\r\n            this.Polygons[key].layerName = \"plus\";\r\n          }\r\n          else {\r\n            this.Polygons[key].parcel_name = 'أرض رقم ' + (key + 1);\r\n          }\r\n          this.Polygons[key].PARCEL_SPATIAL_ID = \"\";\r\n          this.Polygons[key].area = elem.area;\r\n          this.Polygons[key].parcelNameHidden = \"\";\r\n\r\n          this.Polygons[key].notify = polygon.notify;\r\n          this.Polygons[key].polygon = polygon;\r\n          this.Polygons[key].min;\r\n          this.Polygons[key].active = false;\r\n          this.Polygons[key].max = 0;\r\n          this.Polygons[key].maxPointLineLen;\r\n          this.Polygons[key].minPointLineLen;\r\n          this.Polygons[key].minLineLen;\r\n\r\n          if (polygon.rings.length > 0) {\r\n            var arcLength = 0;\r\n            var arcPoints = [];\r\n            var arcLines = [];\r\n\r\n            for (var j = 0, n = polygon.rings[0].length - 1; j < n; j++) {\r\n              var point1 = new Point(\r\n                polygon.rings[0][j][0],\r\n                polygon.rings[0][j][1],\r\n                new SpatialReference({ wkid: polygon.spatialReference })\r\n              );\r\n              var point2 = new Point(\r\n                polygon.rings[0][j + 1][0],\r\n                polygon.rings[0][j + 1][1],\r\n                new SpatialReference({ wkid: polygon.spatialReference })\r\n              );\r\n\r\n              var length = mathUtils.getLength(point1, point2);\r\n              //length = Number(parseFloat(length).toFixed(2));\r\n\r\n              if (point1.x > this.Polygons[key].max) {\r\n                this.Polygons[key].max = point1.x;\r\n                this.Polygons[key].maxPoint = point1;\r\n              }\r\n\r\n              if (\r\n                !this.Polygons[key].min ||\r\n                point1.x < this.Polygons[key].min\r\n              ) {\r\n                this.Polygons[key].min = point1.x;\r\n                this.Polygons[key].minPoint = point1;\r\n              }\r\n\r\n              if (point2.x > this.Polygons[key].max) {\r\n                this.Polygons[key].max = point2.x;\r\n                this.Polygons[key].maxPoint = point2;\r\n              }\r\n\r\n              if (\r\n                !this.Polygons[key].min ||\r\n                point2.x < this.Polygons[key].min\r\n              ) {\r\n                this.Polygons[key].min = point2.x;\r\n                this.Polygons[key].minPoint = point2;\r\n              }\r\n\r\n              var path = {\r\n                paths: [[polygon.rings[0][j], polygon.rings[0][j + 1]]],\r\n                text: length,\r\n                spatialReference: polygon.spatialReference,\r\n              };\r\n\r\n              if (\r\n                !(\r\n                  this.isPointOrArc(point1, key, features[0].cadFeatures) &&\r\n                  this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n                )\r\n              ) {\r\n                if (this.isPointOrArc(point2, key, features[0].cadFeatures)) {\r\n                  //\r\n                  arcLength += length;\r\n                  arcPoints.push(point1);\r\n                  path = new Polyline(path);\r\n                  path.centroid = path.getExtent().getCenter();\r\n                  arcLines.push(new Polyline(path));\r\n                  path.text = arcLength || length;\r\n\r\n                  if (\r\n                    features[0].boundryFeaturesLen &&\r\n                    features[0].boundryFeaturesLen.length &&\r\n                    features[0].boundryFeaturesLen.length > 0\r\n                  ) {\r\n                    //\r\n                    var line = this.getLineLength(\r\n                      features[0].boundryFeaturesLen,\r\n                      arcPoints[0],\r\n                      point2,\r\n                      features[0].isArc\r\n                    );\r\n                    if (line) path.text = line.length;\r\n                  }\r\n\r\n                  length = path.text;\r\n                  path.lines = arcLines;\r\n                  arcLines = [];\r\n                  arcLength = 0;\r\n                  this.Polygons[key].data[2].data.push(path);\r\n                  this.Polygons[key].data[2].data[\r\n                    this.Polygons[key].data[2].data.length - 1\r\n                  ].centroid = path.getExtent().getCenter();\r\n                } else {\r\n                  path.hide = true;\r\n                  arcLength += length;\r\n                  arcPoints.push(point1);\r\n                  path = new Polyline(path);\r\n                  let polyline = new Polyline(path);\r\n                  path.centroid = polyline.getExtent().getCenter();\r\n                  arcLines.push(new Polyline(path));\r\n                }\r\n              }\r\n              if (\r\n                this.isPointOrArc(point1, key, features[0].cadFeatures) &&\r\n                this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n              ) {\r\n                if (\r\n                  features[0].boundryFeaturesLen &&\r\n                  features[0].boundryFeaturesLen.length &&\r\n                  features[0].boundryFeaturesLen.length > 0\r\n                ) {\r\n                  //\r\n                  let line = this.getLineLength(\r\n                    features[0].boundryFeaturesLen,\r\n                    point1,\r\n                    point2,\r\n                    features[0].isArc\r\n                  );\r\n\r\n                  if (line) path.text = line.length;\r\n\r\n                  length = path.text;\r\n                }\r\n                this.Polygons[key].data[2].data.push(path);\r\n              }\r\n\r\n              let polyline1 = new Polyline(path);\r\n\r\n              if (\r\n                !this.Polygons[key].minLineLen ||\r\n                this.Polygons[key].minLineLen > length\r\n              )\r\n                this.Polygons[key].minLineLen = length;\r\n\r\n              var pt = polyline1.getExtent().getCenter();\r\n\r\n              if (\r\n                !(\r\n                  this.isPointOrArc(point1, key, features[0].cadFeatures) &&\r\n                  this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n                )\r\n              ) {\r\n                if (this.isPointOrArc(point2, key, features[0].cadFeatures)) {\r\n                  if (arcPoints.length)\r\n                    pt = arcPoints[Math.floor(arcPoints.length / 2)];\r\n                }\r\n              }\r\n\r\n              if (\r\n                this.isPointOrArc(point1, key, features[0].cadFeatures) &&\r\n                this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n              ) {\r\n                this.Polygons[key].data[2].data[\r\n                  this.Polygons[key].data[2].data.length - 1\r\n                ].centroid = pt;\r\n              }\r\n\r\n              if (polygon.layer == \"boundry\") {\r\n                addGraphicToLayer(\r\n                  polyline1,\r\n                  this.map,\r\n                  \"boundriesGraphicLayer\",\r\n                  [0, 0, 255, 0.3]\r\n                );\r\n              } else {\r\n                addGraphicToLayer(\r\n                  polyline1,\r\n                  this.map,\r\n                  \"boundriesGraphicLayer\",\r\n                  [0, 255, 0, 1]\r\n                );\r\n              }\r\n\r\n              if (pt.length) {\r\n                pt.x = pt[0];\r\n                pt.y = pt[1];\r\n              }\r\n\r\n              let lineLengthFont = 30;\r\n\r\n              var attr = {\r\n                text: length.toFixed(2),\r\n                angle: this.getPacrelNoAngle({ geometry: polygon }),\r\n              };\r\n\r\n              // because there were similarity between points in fraction part 123.4567 , 123.4512\r\n              if (\r\n                !(\r\n                  pointsLength.indexOf(\r\n                    pt.x.toFixed(4) + \",\" + pt.y.toFixed(4)\r\n                  ) > -1\r\n                )\r\n              ) {\r\n                if (\r\n                  this.isPointOrArc(point1, key, features[0].cadFeatures) &&\r\n                  this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n                ) {\r\n                  pointsLength.push(pt.x.toFixed(4) + \",\" + pt.y.toFixed(4));\r\n\r\n                  //if(this.Polygons[key].layerName != \"plus\")\r\n                  //{\r\n                  addParcelNo(\r\n                    pt, this.map, \"\" + length.toFixed(2) + \"\", \"editlengthGraphicLayer\",\r\n                    lineLengthFont,\r\n                    null,\r\n                    this.getPacrelNoAngle({ geometry: polygon }),\r\n                    null,\r\n                    attr\r\n                  );\r\n                  //}\r\n\r\n                } else if (\r\n                  this.isPointOrArc(point2, key, features[0].cadFeatures)\r\n                ) {\r\n                  if (arcPoints.length)\r\n                    pt = arcPoints[Math.floor(arcPoints.length / 2)];\r\n\r\n                  //if(this.Polygons[key].layerName != \"plus\")\r\n                  //{\r\n                  addParcelNo(\r\n                    pt,\r\n                    this.map,\r\n                    \"\" + (length.toFixed(2)) + \"\",\r\n                    \"editlengthGraphicLayer\",\r\n                    lineLengthFont,\r\n                    null,\r\n                    this.getPacrelNoAngle({ geometry: polygon }),\r\n                    null,\r\n                    attr\r\n                  );\r\n                  //}\r\n                }\r\n              }\r\n\r\n              if (this.isPointOrArc(point2, key, features[0].cadFeatures)) {\r\n                arcPoints = [];\r\n              }\r\n            }\r\n\r\n            if (this.Polygons[key].layerName == \"plus\") {\r\n              addGraphicToLayer(\r\n                polygon,\r\n                this.map,\r\n                \"addedParclGraphicLayer\",\r\n                [0, 0, 255, 0.8],\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                null, null, true\r\n              );\r\n            }\r\n            else {\r\n              addGraphicToLayer(\r\n                polygon,\r\n                this.map,\r\n                \"addedParclGraphicLayer\",\r\n                [0, 0, 255, 0.8],\r\n                null,\r\n                true\r\n              );\r\n            }\r\n\r\n          }\r\n        }\r\n      );\r\n\r\n\r\n      setTimeout(() => {\r\n\r\n        // sug.getSuggestLine();\r\n        clearGraphicFromLayer(this.map, \"addedParclGraphicLayer\");\r\n\r\n        console.log(this.Polygons);\r\n        this.Polygons.forEach((elem, key) => {\r\n          if (elem.polygon.layer == \"boundry\") {\r\n            addGraphicToLayer(\r\n              elem.polygon,\r\n              this.map,\r\n              \"addedParclGraphicLayer\",\r\n              [0, 0, 255, 0.8],\r\n              null,\r\n              true\r\n            );\r\n          } else {\r\n            addGraphicToLayer(\r\n              elem.polygon,\r\n              this.map,\r\n              \"addedParclGraphicLayer\",\r\n              [0, 255, 0, 0.8],\r\n              null,\r\n              null,\r\n              null, null, null, null, true\r\n            );\r\n          }\r\n        });\r\n\r\n        this.getSuggestLine(Polyline);\r\n\r\n        zoomToLayer(\"boundriesGraphicLayer\", this.map, 8);\r\n        //resizeMap(this.map);\r\n\r\n        setTimeout(() => {\r\n\r\n          if (this.state['north_Desc0']) {\r\n            this.Polygons.forEach((polygon, key) => {\r\n              polygon.north_Desc = this.state['north_Desc' + key];\r\n              polygon.weast_Desc = this.state['weast_Desc' + key];\r\n              polygon.south_Desc = this.state['south_Desc' + key];\r\n              polygon.east_Desc = this.state['east_Desc' + key];\r\n\r\n              polygon.parcel_name = this.state['parcel_Name' + key];\r\n              polygon.parcel_area_desc = this.state['parcel_area_desc' + key];\r\n\r\n              if (this.state['shtfa_northeast']) {\r\n                polygon.shtfa_northeast = this.state['shtfa_northeast'];\r\n              }\r\n              if (this.state['shtfa_northweast']) {\r\n                polygon.shtfa_northweast = this.state['shtfa_northweast'];\r\n              }\r\n              if (this.state['shtfa_southeast']) {\r\n                polygon.shtfa_southeast = this.state['shtfa_southeast'];\r\n              }\r\n              if (this.state['shtfa_southweast']) {\r\n                polygon.shtfa_southweast = this.state['shtfa_southweast'];\r\n              }\r\n            })\r\n          }\r\n\r\n\r\n          this.settoStore(this.Polygons);\r\n\r\n        }, 1000);\r\n\r\n\r\n        this.setState({\r\n          polygons: this.Polygons,\r\n          weastBoundries: this.Polygons[0].data[3].data.map((item, i) => {\r\n            return {\r\n              id: `item-${'weast_' + i}`,\r\n              content: item.text.toFixed(2),\r\n              data: item\r\n            }\r\n          }),\r\n          northBoundries: this.Polygons[0].data[0].data.map((item, i) => {\r\n            return {\r\n              id: `item-${'north_' + i}`,\r\n              content: item.text.toFixed(2),\r\n              data: item\r\n            }\r\n          }),\r\n          eastBoundries: this.Polygons[0].data[1].data.map((item, i) => {\r\n            return {\r\n              id: `item-${'east_' + i}`,\r\n              content: item.text.toFixed(2),\r\n              data: item\r\n            }\r\n          }),\r\n          southBoundries: this.Polygons[0].data[4].data.map((item, i) => {\r\n            return {\r\n              id: `item-${'south_' + i}`,\r\n              content: item.text.toFixed(2),\r\n              data: item\r\n            }\r\n          })\r\n        });\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  resetAll() {\r\n    this.setState(this.baseState);\r\n  }\r\n\r\n  handleChange(e) {\r\n    //console.log(e.target.files[0])\r\n    var reader = new FileReader();\r\n    let self = this;\r\n    reader.readAsDataURL(e.target.files[0]);\r\n    reader.onload = () => {\r\n      //console.log(reader.result);\r\n      let queryConditions = [];\r\n      let isGuid = false;\r\n      let where = \"1=-1\";\r\n      let parcels = self.props.mainObject.landData.landData.lands.parcels;\r\n      parcels.forEach((elem) => {\r\n        queryConditions.push(\r\n          \"PARCEL_SPATIAL_ID  = \" + elem.attributes.PARCEL_SPATIAL_ID\r\n        );\r\n        if (typeof elem.attributes.PARCEL_SPATIAL_ID == \"string\") {\r\n          if (elem.attributes.PARCEL_SPATIAL_ID.indexOf(\"-\") > -1)\r\n            isGuid = true;\r\n        }\r\n      });\r\n      where = queryConditions.join(\" or \");\r\n\r\n      if (isGuid || parcels.length == 0) where = \"PARCEL_SPATIAL_ID = -1\";\r\n\r\n      queryTask({\r\n        ...querySetting(self.LayerID.Landbase_Parcel, where, true, [\"*\"]),\r\n        callbackResult: (res) => {\r\n          let obj = {};\r\n          obj.parcels = res;\r\n          if (obj.parcels.features.length == parcels.length || isGuid) {\r\n            obj.file = reader.result;\r\n            obj.type = \"cad\";\r\n            obj.url = \"split_merge/\";\r\n            post(workFlowUrl + \"/api/Upload\", obj).then((response) => {\r\n              self.cadData = response.data;\r\n\r\n              if (response.data[0].shapeFeatures.filter((feature) => { return feature.layer == \"boundry\" && feature.notify != \"mapview.parcels.NOTIFY_INTERSECT\" }).length > 0) {\r\n                message.error('هذة الأرض  خارج حدود الأراضي المختارة');\r\n              }\r\n              else {\r\n\r\n                //self.resetAll();\r\n                self.drawFeatures(response.data);\r\n              }\r\n            });\r\n          }\r\n        },\r\n      });\r\n    };\r\n    reader.onerror = function (error) {\r\n      console.log(\"Error: \", error);\r\n    };\r\n  }\r\n  onChange = activeKey => {\r\n    this.setState({\r\n      activeKey,\r\n      weastBoundries: this.Polygons[((+activeKey) - 1)].data[3].data.map((item, i) => {\r\n        return {\r\n          id: `item-${'weast_' + i}`,\r\n          content: item.text.toFixed(2),\r\n          data: item\r\n        }\r\n      }),\r\n      northBoundries: this.Polygons[((+activeKey) - 1)].data[0].data.map((item, i) => {\r\n        return {\r\n          id: `item-${'north_' + i}`,\r\n          content: item.text.toFixed(2),\r\n\r\n          data: item\r\n        }\r\n      }),\r\n      eastBoundries: this.Polygons[((+activeKey) - 1)].data[1].data.map((item, i) => {\r\n        return {\r\n          id: `item-${'east_' + i}`,\r\n          content: item.text.toFixed(2),\r\n\r\n          data: item\r\n        }\r\n      }),\r\n      southBoundries: this.Polygons[((+activeKey) - 1)].data[4].data.map((item, i) => {\r\n        return {\r\n          id: `item-${'south_' + i}`,\r\n          content: item.text.toFixed(2),\r\n\r\n          data: item\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  updateNorth_Desc = (polygon, key, evt) => {\r\n    polygon.north_Desc = evt.target.value;\r\n\r\n    console.log(polygon);\r\n    this.setState({\r\n      ['north_Desc' + key]: evt.target.value\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n  }\r\n\r\n  updateSouth_Desc = (polygon, key, evt) => {\r\n    polygon.south_Desc = evt.target.value;\r\n    console.log(polygon);\r\n    this.setState({\r\n      ['south_Desc' + key]: evt.target.value\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n  }\r\n\r\n  updateWeast_Desc = (polygon, key, evt) => {\r\n    polygon.weast_Desc = evt.target.value;\r\n    console.log(polygon);\r\n    this.setState({\r\n      ['weast_Desc' + key]: evt.target.value\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n  }\r\n\r\n  updateEast_Desc = (polygon, key, evt) => {\r\n    polygon.east_Desc = evt.target.value;\r\n    console.log(polygon);\r\n    this.setState({\r\n      ['east_Desc' + key]: evt.target.value\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n  }\r\n\r\n  updateInputValue = (key, evt) => {\r\n\r\n    this.state.polygons.filter((polygon) => { return polygon.polygon.layer == \"boundry\" })[0][key] = evt.target.value;\r\n\r\n    this.setState({\r\n      [key]: evt.target.value\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n  }\r\n\r\n  updateParcel = (polygon, key, evt) => {\r\n    polygon.parcel_name = evt.target.value;\r\n    console.log(polygon);\r\n    this.setState({\r\n      ['parcel_Name' + key]: evt.target.value\r\n    });\r\n\r\n    this.settoStore(this.state.polygons);\r\n\r\n\r\n    clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n    setTimeout(() => {\r\n\r\n      this.state.polygons.forEach((f) => {\r\n\r\n        if (f.parcel_name != 'الزائده التنظيميه' && f.parcel_name != \"الزائدة\") {\r\n          addParcelNo(f.polygon.getExtent().getCenter(),\r\n            this.map, convertToArabic(f.parcel_name) + '',\r\n            \"ParcelPlanNoGraphicLayer\", 14, [0, 0, 0]);\r\n        }\r\n      })\r\n\r\n    }, 200);\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  updateParcelDesc = (polygon, key, evt) => {\r\n    polygon.parcel_area_desc = evt.target.value;\r\n\r\n    this.setState({\r\n      ['parcel_area_desc' + key]: evt.target.value\r\n    });\r\n\r\n\r\n    this.settoStore(this.state.polygons);\r\n  }\r\n\r\n  render() {\r\n    const { mapLoaded, polygons } = this.state;\r\n\r\n    return (\r\n      <div>\r\n\r\n        <div>\r\n          <MapComponent mapload={this.mapLoaded.bind(this)}></MapComponent>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(updateMapFiled);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAkyDA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AA+HA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAm3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;AAMA;AAAA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AA5xCA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAuFA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAyoIA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"48.min.js","sources":["webpack:///./src/app/components/inputs/fields/selectedParcels/Component/style.css","webpack:///./src/app/components/inputs/fields/selectedParcels/Component/farz_suggested_parcels.js","webpack:///./src/app/components/inputs/fields/selectedParcels/Component/mapping.js","webpack:///./src/app/components/inputs/fields/selectedParcels/Component/style.css?6b59"],"sourcesContent":["exports = module.exports = require(\"../../../../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".titleSelectedParcel {\\r\\n  background: #00726f;\\r\\n  color: white;\\r\\n  text-align: right;\\r\\n  margin-top: 0px !important;\\r\\n  padding: 5px;\\r\\n  text-align: center;\\r\\n  font-size: 20px !important;\\r\\n}\\r\\n\\r\\n.add-gis {\\r\\n  background: #00726f !important;\\r\\n  float: none !important;\\r\\n  margin: 0 !important;\\r\\n  color: #fff !important;\\r\\n}\", \"\"]);\n\n","import React, { Component, useState } from \"react\";\r\nimport { mapStateToProps } from \"./mapping\";\r\nimport mapDispatchToProps from \"main_helpers/actions/main\";\r\nimport { postItem, fetchData } from \"app/helpers/apiMethods\";\r\nimport { connect } from \"react-redux\";\r\nimport { Select, Button, Form, message } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport applyFilters from \"main_helpers/functions/filters\";\r\nimport store from \"reducers\";\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n  isEmpty,\r\n} from \"lodash\";\r\nimport {\r\n  generateUUID,\r\n  convertToArabic,\r\n} from \"../../identify/Component/common/common_func\";\r\nimport \"./style.css\";\r\nclass farzSuggestedParcelsComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { input } = props;\r\n\r\n    this.suggestedParcels =\r\n      (input && input.value && input.value.suggestedParcels) || [];\r\n    this.state = {\r\n      suggestedParcels:\r\n        (input && input.value && input.value.suggestedParcels) || [],\r\n        reqType: [1971, 2068].indexOf(this.props.currentModule.record.workflow_id) != -1 && \"duplex\" || \"\"\r\n    };\r\n\r\n    this.parcel_fields_headers = [\r\n      {\r\n        name: `${[23].indexOf(this.props.currentModule.id) != -1 || [1968].indexOf(this.props.currentModule.record.workflow_id) != -1 ? \"PARCEL_PLAN_NO\" : \"PARCELNAME\"}`,\r\n        label: `${[23].indexOf(this.props.currentModule.id) != -1 || [1968].indexOf(this.props.currentModule.record.workflow_id) != -1 ? \"رقم الأرض\" : \"اسم الدوبلكس\"}`,\r\n        hidden: false,\r\n      },\r\n    ];\r\n    this.parcel_fields = [\r\n      {\r\n        name: `${[23].indexOf(this.props.currentModule.id) != -1 || [1968].indexOf(this.props.currentModule.record.workflow_id) != -1 ? \"PARCEL_PLAN_NO\" : \"PARCELNAME\"}`,\r\n        editable: false,\r\n        hidden: false,\r\n        toBeShown: undefined,\r\n      },\r\n    ];\r\n    this.parcelDataFields = {};\r\n\r\n    if ([23].indexOf(this.props.currentModule.id) != -1 || [1968].indexOf(this.props.currentModule.record.workflow_id) != -1) {\r\n      this.parcelDataFields[\"PARCEL_PLAN_NO\"] = {\r\n        label: \"أرض رقم\",\r\n        placeholder: \"من فضلك أدخل رقم الأرض\",\r\n        type: \"text\",\r\n        name: \"PARCEL_PLAN_NO\",\r\n        required: true,\r\n      };\r\n\r\n      this.parcelDataFields[\"NEW_PARCEL_AREA\"] = {\r\n        label: \"المساحة (م۲)\",\r\n        placeholder: \"المساحة (م۲)\",\r\n        type: \"text\",\r\n        name: \"NEW_PARCEL_AREA\",\r\n        required: true,\r\n      };\r\n\r\n      this.parcelDataFields[\"parcel_type\"] = {\r\n        label: \"عبارة عن\",\r\n        placeholder: \"من فضلك اخل نوع الأرض\",\r\n        type: \"text\",\r\n        name: \"parcel_type\",\r\n        required: true,\r\n      };\r\n    } else {\r\n      this.parcelDataFields[\"PARCELNAME\"] = {\r\n        label: \"دوبلكس\",\r\n        placeholder: \"دوبلكس\",\r\n        type: \"text\",\r\n        name: \"PARCELNAME\",\r\n        required: true,\r\n      };\r\n\r\n      this.parcelDataFields[\"AREA\"] = {\r\n        label: \"المساحة (م۲)\",\r\n        placeholder: \"المساحة (م۲)\",\r\n        type: \"text\",\r\n        name: \"AREA\",\r\n        required: true,\r\n      };\r\n\r\n      this.parcelDataFields[\"duplixType\"] = {\r\n        label: \"النوع\",\r\n        field: \"radio\",\r\n        options: [\r\n          { label: \"فلل منفصلة\", value: \"splited\" },\r\n          { label: \"فلل متصلة\", value: \"marged\" },\r\n        ],\r\n        name: \"duplixType\",\r\n        initValue: \"splited\",\r\n        required: true,\r\n      };\r\n    }\r\n\r\n    this.parcelDataFields[\"north_length\"] = {\r\n      label: \"طول الحد الشمالي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الشمالي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"north_length\",\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"north_desc\"] = {\r\n      label: \"وصف الحد الشمالي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشمالي\",\r\n      type: \"text\",\r\n      name: \"north_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"south_length\"] = {\r\n      label: \"طول الحد الجنوبي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الجنوبي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"south_length\",\r\n      required: true,\r\n    };\r\n    (this.parcelDataFields[\"south_desc\"] = {\r\n      label: \"وصف الحد الجنوبي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الجنوبي\",\r\n      type: \"text\",\r\n      name: \"south_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    }),\r\n      (this.parcelDataFields[\"east_length\"] = {\r\n        label: \"طول الحد الشرقي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الشرقي (م)\",\r\n        field: \"inputNumber\",\r\n        name: \"east_length\",\r\n        required: true,\r\n      });\r\n    this.parcelDataFields[\"east_desc\"] = {\r\n      label: \"وصف الحد الشرقي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشرقي\",\r\n      type: \"text\",\r\n      name: \"east_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"west_length\"] = {\r\n      label: \"طول الحد الغربي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الغربي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"west_length\",\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"west_desc\"] = {\r\n      label: \"وصف الحد الغربي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الغربي\",\r\n      type: \"text\",\r\n      name: \"west_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n  }\r\n\r\n  UpdateStore(parcels) {\r\n    const {\r\n      mainObject: {\r\n        landData: {\r\n          landData: {\r\n            lands: { selectedRequestType },\r\n          },\r\n        },\r\n      },\r\n    } = this.props;\r\n    var landsData = { suggestedParcels: [...parcels] };\r\n    if ([23].indexOf(this.props.currentModule.id) != -1 || [1968].indexOf(this.props.currentModule.record.workflow_id) != -1)\r\n      landsData[\"selectedRequestType\"] = selectedRequestType;\r\n\r\n    this.props.input.onChange({ ...landsData });\r\n    this.setState({ ...landsData });\r\n  }\r\n\r\n  addParcel = (item, isEdit, index) => {\r\n    var recordEdited = false;\r\n    const { t } = this.props;\r\n    var parcel_desc = get(\r\n      item,\r\n      `${[23].indexOf(this.props.currentModule.id) != -1 || [1968].indexOf(this.props.currentModule.record.workflow_id) != -1 ? \"PARCEL_PLAN_NO\" : \"PARCELNAME\"}`,\r\n      \"\"\r\n    );\r\n    if (\r\n      !_.find(this.suggestedParcels, function (d) {\r\n        return (\r\n          d.attributes.PARCEL_PLAN_NO == parcel_desc &&\r\n          d.attributes.PARCEL_SPATIAL_ID != item.PARCEL_SPATIAL_ID\r\n        );\r\n      }) &&\r\n      parcel_desc\r\n    ) {\r\n      if ([1971, 2068].indexOf(this.props.currentModule.record.workflow_id) != -1) {\r\n        if (item.duplixType == \"splited\") {\r\n          if (\r\n            +item.east_length >= 11.5 &&\r\n            +item.west_length >= 11.5 &&\r\n            +item.north_length >= 11.5 &&\r\n            +item.south_length >= 11.5\r\n          ) {\r\n            if (!isEdit) {\r\n              this.suggestedParcels.push({\r\n                attributes: { ...item, PARCEL_SPATIAL_ID: generateUUID() },\r\n              });\r\n            } else {\r\n              this.suggestedParcels[index].attributes = item;\r\n            }\r\n            recordEdited = true;\r\n          } else {\r\n            window.notifySystem(\"error\", t(\"DUPLIX_ERROR_MSG\"));\r\n            recordEdited = false;\r\n          }\r\n        }\r\n        if (item.duplixType == \"marged\") {\r\n          if (\r\n            +item.east_length >= 9.5 &&\r\n            +item.west_length >= 9.5 &&\r\n            +item.north_length >= 9.5 &&\r\n            +item.south_length >= 9.5\r\n          ) {\r\n            if (!isEdit) {\r\n              this.suggestedParcels.push({\r\n                attributes: { ...item, PARCEL_SPATIAL_ID: generateUUID() },\r\n              });\r\n            } else {\r\n              this.suggestedParcels[index].attributes = item;\r\n            }\r\n            recordEdited = true;\r\n          } else {\r\n            window.notifySystem(\"error\", t(\"DUPLIX_ERROR_MSG\"));\r\n            recordEdited = false;\r\n          }\r\n        }\r\n      } else {\r\n        if (!isEdit) {\r\n          this.suggestedParcels.push({\r\n            attributes: { ...item, PARCEL_SPATIAL_ID: generateUUID() },\r\n          });\r\n        } else {\r\n          this.suggestedParcels[index].attributes = item;\r\n        }\r\n        recordEdited = true;\r\n      }\r\n    } else {\r\n      window.notifySystem(\r\n        \"error\",\r\n        t([23].indexOf(this.props.currentModule.id) != -1 || [1968].indexOf(this.props.currentModule.record.workflow_id) != -1 ? \"PARCEL_UNIQUE\" : \"DUPLIX_UNIQUE\")\r\n      );\r\n      recordEdited = false;\r\n    }\r\n\r\n    this.UpdateStore(this.suggestedParcels);\r\n    return recordEdited;\r\n  };\r\n\r\n  remove = (index) => {\r\n    this.suggestedParcels.splice(index, 1);\r\n    this.UpdateStore(this.suggestedParcels);\r\n  };\r\n\r\n  openPopup = (item, index) => {\r\n    var fields = this.parcelDataFields;\r\n    var isEdit = !isEmpty(item);\r\n    var scope = this;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...item },\r\n          ok(values) {\r\n            if (scope.addParcel(values, isEdit, index)) {\r\n              return Promise.resolve(true);\r\n            } else {\r\n              return Promise.reject();\r\n            }\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { suggestedParcels, reqType } = this.state;\r\n\r\n    const {\r\n      parcel_fields,\r\n      parcel_fields_headers,\r\n      values,\r\n      multiple,\r\n      selectedRequestType,\r\n    } = this.props;\r\n    return (\r\n      <div style={{ gridColumn: \"1/3\" }}>\r\n        <Button className=\"add-gis\" onClick={this.openPopup.bind(this, {}, 0)}>\r\n          {[23].indexOf(this.props.currentModule.id) != -1 || [1968].indexOf(this.props.currentModule.record.workflow_id) != -1 ? \"إضافة الأرض\" : \"إضافة الدوبلكس\"}\r\n        </Button>\r\n        {suggestedParcels && suggestedParcels.length > 0 && (\r\n          <div>\r\n            <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n\r\n            <table className=\"table table-bordered\" style={{ marginTop: \"1%\" }}>\r\n              <thead>\r\n                <tr>\r\n                  {this.parcel_fields_headers.map((field_header, k) => {\r\n                    return (\r\n                      !field_header.hidden && <th>{field_header.label}</th>\r\n                    );\r\n                  })}\r\n                  <th> خيارات</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {suggestedParcels.map((e, i) => {\r\n                  return (\r\n                    <tr key={i}>\r\n                      {this.parcel_fields.map((field, k) => {\r\n                        return (\r\n                          !field.hidden && (\r\n                            <td key={k}>\r\n                              <div>\r\n                                {field.editable ? (\r\n                                  !this.state[field.name + \"_isEdit_\" + i] ? (\r\n                                    <span>\r\n                                      <span>\r\n                                        {convertToArabic(\r\n                                          e.attributes[field.name] || \"\"\r\n                                        )}\r\n                                      </span>\r\n                                      {this.showEditBtn(\r\n                                        field.name,\r\n                                        e.attributes[field.name]\r\n                                      ) && (\r\n                                        <span>\r\n                                          <button\r\n                                            className=\"btn\"\r\n                                            style={{\r\n                                              marginRight: e.attributes[\r\n                                                field.name\r\n                                              ]\r\n                                                ? \"20px\"\r\n                                                : \"0px\",\r\n                                            }}\r\n                                            onClick={this.enableEdit.bind(\r\n                                              this,\r\n                                              field.name,\r\n                                              i\r\n                                            )}\r\n                                          >\r\n                                            <i className=\"fas fa-edit\"></i>\r\n                                          </button>\r\n                                        </span>\r\n                                      )}\r\n                                    </span>\r\n                                  ) : (\r\n                                    <span\r\n                                      style={{\r\n                                        display: \"grid\",\r\n                                        gridTemplateColumns: \"1fr auto\",\r\n                                      }}\r\n                                    >\r\n                                      {field.type != \"select\" && (\r\n                                        <input\r\n                                          key={i}\r\n                                          className=\"form-control\"\r\n                                          type={field.type}\r\n                                          step=\"any\"\r\n                                          value={e.attributes[field.name]}\r\n                                          onChange={this.myChangeHandler.bind(\r\n                                            this,\r\n                                            field.name,\r\n                                            i,\r\n                                            e\r\n                                          )}\r\n                                        />\r\n                                      )}\r\n                                      {field.type == \"select\" && (\r\n                                        <Select\r\n                                          getPopupContainer={(trigger) =>\r\n                                            trigger.parentNode\r\n                                          }\r\n                                          value={e.attributes[field.name]}\r\n                                          onChange={this.selectOnchange.bind(\r\n                                            this,\r\n                                            field.name,\r\n                                            i,\r\n                                            e\r\n                                          )}\r\n                                          optionFilterProp=\"children\"\r\n                                          filterOption={(input, option) => {\r\n                                            if (option.props.children) {\r\n                                              return (\r\n                                                option.props.children\r\n                                                  ?.toLowerCase()\r\n                                                  ?.indexOf(\r\n                                                    convertToArabic(\r\n                                                      input.toLowerCase()\r\n                                                    )\r\n                                                  ) != -1\r\n                                              );\r\n                                            } else {\r\n                                              return false;\r\n                                            }\r\n                                          }}\r\n                                        >\r\n                                          {field.options.map((f, x) => (\r\n                                            <Option key={f.id} value={f.name}>\r\n                                              {convertToArabic(f.name)}\r\n                                            </Option>\r\n                                          ))}\r\n                                        </Select>\r\n                                      )}\r\n                                      <button\r\n                                        className=\"btn\"\r\n                                        style={{\r\n                                          marginRight: \"20px\",\r\n                                        }}\r\n                                        onClick={this.saveEdit.bind(\r\n                                          this,\r\n                                          e.attributes.PARCEL_SPATIAL_ID,\r\n                                          field.name,\r\n                                          i,\r\n                                          field.toBeShown\r\n                                        )}\r\n                                      >\r\n                                        <i className=\"fa fa-floppy-o\"></i>\r\n                                      </button>\r\n                                    </span>\r\n                                  )\r\n                                ) : (\r\n                                  <span>\r\n                                    <span>\r\n                                      {convertToArabic(\r\n                                        e.attributes[field.name] || \"\"\r\n                                      )}\r\n                                    </span>\r\n                                  </span>\r\n                                )}\r\n                              </div>\r\n                            </td>\r\n                          )\r\n                        );\r\n                      })}\r\n                      <td>\r\n                        <button\r\n                          className=\"btn follow\"\r\n                          style={{ margin: \"0px 5px\" }}\r\n                          onClick={() => {\r\n                            this.openPopup(e.attributes, i);\r\n                          }}\r\n                        >\r\n                          {[23].indexOf(this.props.currentModule.id) != -1 || [1968].indexOf(this.props.currentModule.record.workflow_id) != -1 ? \"تعديل\" : \"تعديل دوبلكس\"}\r\n                        </button>\r\n                        <button\r\n                          className=\" btn btn-danger \"\r\n                          onClick={this.remove.bind(this, i)}\r\n                        >\r\n                          حذف\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(farzSuggestedParcelsComponent);\r\n","import { formValueSelector } from \"redux-form\";\r\nimport { get } from \"lodash\";\r\nexport const mapStateToProps = (\r\n  {\r\n    mapReducer,\r\n    wizard: {\r\n      steps,\r\n      mainObject,\r\n      currentStep,\r\n      treeNode,\r\n      currentModule,\r\n      comments,\r\n      wizardSettings,\r\n    },\r\n    selectors = {},\r\n    ...state\r\n  },\r\n  { moduleName, path, value_key, ...props }\r\n) => {\r\n  return {\r\n    mainObject,\r\n    selectedRequestType: get(selectors[moduleName], \"selectedRequestType\", {}),\r\n    domainList: get(selectors[moduleName], \"domainList\", {}),\r\n    currentStep,\r\n    steps,\r\n    currentModule,\r\n  };\r\n};\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getValues(name = \"stepForm\") {\r\n      return formValueSelector(\"name\");\r\n    },\r\n    setSelectorEnability: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.disabled`,\r\n        data,\r\n      });\r\n    },\r\n    removeSelector: (moduleName) => {\r\n      dispatch({\r\n        type: \"removeSelectors\",\r\n        path: `${moduleName}`,\r\n      });\r\n    },\r\n    setSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}`,\r\n        data,\r\n      });\r\n    },\r\n    // setSelectedParcels: (path, data) => dispatch({type: 'setWizard', path: `mainObject.waseka_data.selectedParcels`, data})\r\n  };\r\n};\r\n","\nvar content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!./style.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!./style.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!./style.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAeA;AAIA;AACA;AACA;AACA;AAAA;AAmKA;AACA;AAAA;AAAA;AACA;AAKA;AAEA;AAIA;AAGA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1QA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AA6GA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AAMA;AACA;AAAA;AAEA;AAEA;AAAA;AAgBA;AACA;AACA;AAKA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAGA;AACA;AAMA;AACA;AACA;AAAA;AACA;AASA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAAA;AAiBA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAAA;AAOA;AAOA;AACA;AAEA;;;;;;;;;;;;;;;;;;;ACzeA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}
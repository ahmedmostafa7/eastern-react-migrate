(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[74],{

/***/ "./src/app/components/inputs/fields/identify/Component/krokiIdentifyComponnent/Helpers.js":
/*!************************************************************************************************!*\
  !*** ./src/app/components/inputs/fields/identify/Component/krokiIdentifyComponnent/Helpers.js ***!
  \************************************************************************************************/
/*! exports provided: selectDis, DataQuery, queryOption, querySetting, DataReqest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "selectDis", function() { return selectDis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataQuery", function() { return DataQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queryOption", function() { return queryOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "querySetting", function() { return querySetting; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataReqest", function() { return DataReqest; });
/* harmony import */ var esri_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! esri-loader */ "./node_modules/esri-loader/dist/umd/esri-loader.js");
/* harmony import */ var esri_loader__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(esri_loader__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _mapviewer_config_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mapviewer/config/map */ "./src/app/components/inputs/fields/identify/Component/mapviewer/config/map.js");


const options = {
  url: 'https://js.arcgis.com/3.13'
};
const selectDis = e => {
  var a = [];
  e.forEach(el => {
    el.features.forEach(element => {
      if (!a.find(t => t.attributes.PARCEL_SPATIAL_ID == element.attributes.PARCEL_SPATIAL_ID)) {
        a.push(element);
      }
    });
  });
  return a;
};
const DataQuery = (layerNum, QueryOptions, CallBack) => {
  Object(esri_loader__WEBPACK_IMPORTED_MODULE_0__["loadModules"])(["esri/symbols/SimpleLineSymbol", "esri/Color", "esri/layers/FeatureLayer", "esri/tasks/RelationshipQuery", "esri/tasks/QueryTask", "esri/tasks/query", "esri/request", "esri/geometry/Polygon", "esri/symbols/SimpleFillSymbol", "esri/graphic"], options).then(([SimpleLineSymbol, Color, FeatureLayer, RQuery, QueryTask, Query, request, Polygon, SimpleFillSymbol, Graphic]) => {
    var query = new Query();
    var qt = new QueryTask(_mapviewer_config_map__WEBPACK_IMPORTED_MODULE_1__["mapUrl"] + `/${layerNum}`);
    QueryOptions.forEach(e => {
      query[e.name] = e.value;
    });
    qt.execute(query, CallBack, res => {
      console.log(res);
    });
  });
};
const queryOption = (where, geo, outfields) => {
  return [{
    name: "where",
    value: where
  }, {
    name: "returnGeometry",
    value: geo
  }, {
    name: "outFields",
    value: outfields
  }];
};
const querySetting = (num, where, geo, outfields, url) => {
  return {
    url: (url || _mapviewer_config_map__WEBPACK_IMPORTED_MODULE_1__["mapUrl"]) + "/" + num,
    where,
    returnGeometry: geo,
    outFields: outfields
  };
};
const DataReqest = (url, callBack) => {
  Object(esri_loader__WEBPACK_IMPORTED_MODULE_0__["loadModules"])(["esri/request"], options).then(([request]) => {
    request({
      url: url,
      content: {
        f: "json"
      },
      handleAs: "json",
      callbackParamName: "callback"
    }).then(callBack);
  });
};

/***/ }),

/***/ "./src/app/components/inputs/fields/identify/Component/krokiIdentifyComponnent/index.js":
/*!**********************************************************************************************!*\
  !*** ./src/app/components/inputs/fields/identify/Component/krokiIdentifyComponnent/index.js ***!
  \**********************************************************************************************/
/*! exports provided: appMapDispatchToProps, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appMapDispatchToProps", function() { return appMapDispatchToProps; });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/extends.js");
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd_lib_button_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd/lib/button/style */ "./node_modules/antd/lib/button/style/index.js");
/* harmony import */ var antd_lib_button_style__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button_style__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd/lib/button */ "./node_modules/antd/lib/button/index.js");
/* harmony import */ var antd_lib_button__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd_lib_button__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var antd_lib_select_style__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! antd/lib/select/style */ "./node_modules/antd/lib/select/style/index.js");
/* harmony import */ var antd_lib_select_style__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(antd_lib_select_style__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! antd/lib/select */ "./node_modules/antd/lib/select/index.js");
/* harmony import */ var antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(antd_lib_select__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _common_esri_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/esri_request */ "./src/app/components/inputs/fields/identify/Component/common/esri_request.js");
/* harmony import */ var _common_common_func__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/common_func */ "./src/app/components/inputs/fields/identify/Component/common/common_func.js");
/* harmony import */ var _mapviewer_config_map__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../mapviewer/config/map */ "./src/app/components/inputs/fields/identify/Component/mapviewer/config/map.js");
/* harmony import */ var antd_dist_antd_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! antd/dist/antd.css */ "./node_modules/antd/dist/antd.css");
/* harmony import */ var antd_dist_antd_css__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(antd_dist_antd_css__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _MapComponent_MapComponent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../MapComponent/MapComponent */ "./src/app/components/inputs/fields/identify/Component/MapComponent/MapComponent.js");
/* harmony import */ var _MapBtnsComponent__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../MapBtnsComponent */ "./src/app/components/inputs/fields/identify/Component/MapBtnsComponent/index.js");
/* harmony import */ var _mapping__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../mapping */ "./src/app/components/inputs/fields/identify/Component/mapping.js");
/* harmony import */ var _main_helpers_actions_main__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../../../main_helpers/actions/main */ "./src/main_helpers/actions/main/index.js");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _Helpers__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Helpers */ "./src/app/components/inputs/fields/identify/Component/krokiIdentifyComponnent/Helpers.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../common */ "./src/app/components/inputs/fields/identify/Component/common/index.js");
/* harmony import */ var _common_esri_loader__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../common/esri_loader */ "./src/app/components/inputs/fields/identify/Component/common/esri_loader.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_19__);


















var uniqid = __webpack_require__(/*! uniqid */ "./node_modules/uniqid/index.js");


const {
  Option
} = antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a;
const appMapDispatchToProps = dispatch => {
  return {
    ...Object(_mapping__WEBPACK_IMPORTED_MODULE_13__["mapDispatchToProps"])(dispatch, "lands"),
    ...Object(_main_helpers_actions_main__WEBPACK_IMPORTED_MODULE_14__["default"])(dispatch)
  };
};
class krokiIdentifyComponnent extends react__WEBPACK_IMPORTED_MODULE_6__["Component"] {
  constructor(props) {
    var _props$input, _props$input$value, _props$input$value$te, _props$input2, _props$input2$value, _props$input2$value$t, _this$props$mainObjec4, _this$props$mainObjec5, _this$props$mainObjec6, _this$props, _this$props$input3, _this$props$input3$va, _this$props$input3$va2;
    super(props);
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "LayerID", []);
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "UpdateSubmissionDataObject", () => {
      const {
        parcelData
      } = this.state;
      var fields = {
        ...parcelData.fields
      };
      Object.keys(fields).map((key, index) => {
        parcelData[key] = fields[key].value;
      });
      this.state.landsData = {
        ...this.props.input.value,
        parcels: [...this.state.selectedLands],
        parcelData: {
          ...parcelData
        },
        domainLists: {
          ...this.state.domainLists
        }
        // lists: {
        //   subDivNames: [...this.state.subDivNames],
        //   MunicipalityNames: [...this.state.MunicipalityNames],
        //   subDivType: [...this.state.subDivType],
        //   PlanNum: [...this.state.PlanNum],
        //   blockNum: [...this.state.blockNum],
        // },
      };
      // this.props.input.onChange({ ...this.state.landsData });
      this.setState({
        parcelData: parcelData
      }, () => {
        this.setToStore();
      });
    });
    //   onMunChange = (e, callback) => {
    //     //
    //     clearGraphicFromLayer(this.map, "SelectLandsGraphicLayer");
    //     if (!callback) {
    //     this.setState({
    //       munval: e,
    //       planeval: undefined,
    //       subTypeval: undefined,
    //       subNameval: undefined,
    //       blockval: undefined,
    //       parcelval: undefined,
    //       selectedLands: [],
    //       selectedLandsT: [],
    //       PlanNum: [],
    //       blockNum: [],
    //       subDivNames: [],
    //       // subDivType: [],
    //       parcelId: null,
    //       parcelNum: [],
    //       parcelData: {},
    //     });
    //   }
    //     this.planId = null;
    // if (e) {
    //     queryTask({
    //       ...querySetting(
    //         this.LayerID.Municipality_Boundary,
    //         `MUNICIPALITY_NAME='${e}'`,
    //         true,
    //         ["MUNICIPALITY_NAME"]
    //       ),
    //       callbackResult: (res) => {
    //         this.pol = res.features[0];
    //         highlightFeature(res.features[0], this.map, {
    //           layerName: "SelectGraphicLayer",
    //           isZoom: true,
    //           isHiglightSymbol: true,
    //           highlighColor: [0, 0, 0, 0.25],
    //         });
    //       },
    //     });
    //     queryTask({
    //       ...querySetting(
    //         this.LayerID.Plan_Data,
    //         `MUNICIPALITY_NAME='${e}'`,
    //         false,
    //         ["PLAN_SPATIAL_ID", "PLAN_NO"]
    //       ),
    //       callbackResult: (res) => {
    //         this.setState({
    //           PlanNum: res.features.map((e, i) => {
    //             return {
    //               ...e,
    //               i: uniqid(),
    //             };
    //           }),
    //         });
    //       },
    //     });
    //   }
    //     this.resetGraphics();
    //     if (callback) {
    //       callback();
    //     }
    //   };
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "resetFields", () => {
      this.props.onChange([]);
      this.setState({
        selectedLands: [],
        selectedLandsT: []
      });
    });
    // onPlaneChange = (f, callback) => {
    //   clearGraphicFromLayer(this.map, "SelectLandsGraphicLayer");
    //   clearGraphicFromLayer(this.map, "SelectGraphicLayer");
    //   var planSpatialId = this.state.PlanNum.filter((m) => m.i == f)?.[0]?.attributes
    //     ?.PLAN_SPATIAL_ID;
    //     if (!callback) {
    //   this.setState({
    //     plan_no: this.state.PlanNum.filter((m) => m.i == f)?.[0]?.attributes?.PLAN_NO,
    //     planeval: f,
    //     subTypeval: undefined,
    //     subNameval: undefined,
    //     blockval: undefined,
    //     parcelval: undefined,
    //     blockNum: [],
    //     subDivNames: [],
    //     //subDivType: [],
    //     parcelId: null,
    //     parcelNum: [],
    //     parcelData: {},
    //   });
    // }
    // if (f) {
    //   queryTask({
    //     ...querySetting(
    //       this.LayerID.Plan_Data,
    //       `PLAN_SPATIAL_ID='${planSpatialId}'`,
    //       true,
    //       ["MUNICIPALITY_NAME"]
    //     ),
    //     callbackResult: (res) => {
    //       this.pol = res.features[0];
    //       highlightFeature(res.features[0], this.map, {
    //         layerName: "SelectGraphicLayer",
    //         isZoom: true,
    //         isHiglightSymbol: true,
    //         highlighColor: [0, 0, 0, 0.25],
    //       });
    //       this.planId = planSpatialId;
    //     },
    //   });
    //   queryTask({
    //     ...querySetting(
    //       this.LayerID.Survey_Block,
    //       `PLAN_SPATIAL_ID='${planSpatialId}'`,
    //       false,
    //       ["BLOCK_NO", "BLOCK_SPATIAL_ID"]
    //     ),
    //     callbackResult: (res) => {
    //       this.setState({ blockNum: res.features });
    //     },
    //   });
    //   queryTask({
    //     ...querySetting(
    //       this.LayerID.Landbase_Parcel,
    //       `PLAN_SPATIAL_ID='${planSpatialId}'`,
    //       false,
    //       ["*"]
    //     ),
    //     callbackResult: (res) => {
    //       this.setState({
    //         parcelSearch: null,
    //         parcelNum: res.features.map((e, i) => {
    //           return {
    //             ...e,
    //             i,
    //           };
    //         }),
    //       });
    //     },
    //   });
    // }
    //   this.resetGraphics();
    //   if (callback) {
    //     callback();
    //   }
    // };
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "resetGraphics", () => {
      this.state["selectedLands"] = [];
      this.state["selectedLandsT"] = [];
      this.parcelData = {};
      this.DrawGraph();
    });
    // onSubTypeChange = (e) => {
    //   clearGraphicFromLayer(this.map, "SelectLandsGraphicLayer");
    //   this.setState({
    //     subType_name: this.state.subDivType.filter((m) => m.code == e)[0].name,
    //     subTypeval: e,
    //     subNameval: undefined,
    //     blockval: undefined,
    //     parcelval: undefined,
    //   });
    //   queryTask({
    //     ...querySetting(
    //       this.LayerID.Subdivision,
    //       `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${this.planId}`,
    //       false,
    //       ["SUBDIVISION_DESCRIPTION", "SUBDIVISION_SPATIAL_ID"]
    //     ),
    //     callbackResult: (res) => {
    //       this.setState({ subDivNames: res.features });
    //     },
    //   });
    // };
    //   onSubTypeChange = (e, callback) => {
    //     this.onPlaneChange(this.state.planeval);
    //     if (!callback) {
    //     this.setState({
    //       subType_name: this.state.subDivType.filter((m) => m.code == e)[0].name,
    //       subTypeval: e,
    //     });
    //   }
    //   if (e) {
    //     queryTask({
    //       ...querySetting(
    //         this.LayerID.Subdivision,
    //         `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${this.planId}`,
    //         false,
    //         ["SUBDIVISION_DESCRIPTION", "SUBDIVISION_SPATIAL_ID"]
    //       ),
    //       callbackResult: (res) => {
    //         this.setState({ subDivNames: res.features });
    //       },
    //     });
    //   }
    //   if (callback) {
    //     callback();
    //   }
    //     // this.onSubNameChange(this.state.subNameval);
    //     // this.DrawGraph();
    //   };
    //   onSubNameChange = (e, callback) => {
    //     clearGraphicFromLayer(this.map, "SelectLandsGraphicLayer");
    // if (!callback) {
    //     this.setState({
    //       subName_name: this.state.subDivNames.filter(
    //         (m) => m.attributes.SUBDIVISION_SPATIAL_ID == e
    //       )?.[0]?.attributes?.SUBDIVISION_DESCRIPTION,
    //       subNameval: e,
    //       blockval: undefined,
    //       parcelval: undefined,
    //       parcelNum: [],
    //       parcelId: null,
    //     });
    //   }
    //   if (e){
    //     queryTask({
    //       ...querySetting(
    //         this.LayerID.Subdivision,
    //         `SUBDIVISION_SPATIAL_ID=${e}`,
    //         true,
    //         ["SUBDIVISION_SPATIAL_ID"]
    //       ),
    //       callbackResult: (res) => {
    //         this.pol = res.features[0];
    //         highlightFeature(res.features[0], this.map, {
    //           layerName: "SelectGraphicLayer",
    //           isZoom: true,
    //           isHiglightSymbol: true,
    //           highlighColor: [0, 0, 0, 0.25],
    //         });
    //       },
    //     });
    //     queryTask({
    //       ...querySetting(
    //         this.LayerID.Landbase_Parcel,
    //         `SUBDIVISION_SPATIAL_ID=${e}`,
    //         false,
    //         ["PARCEL_SPATIAL_ID", "PARCEL_PLAN_NO"]
    //       ),
    //       callbackResult: (res) => {
    //         this.setState({
    //           parcelSearch: null,
    //           parcelNum: res.features.map((e, i) => {
    //             return {
    //               ...e,
    //               i,
    //             };
    //           }),
    //         });
    //       },
    //     });
    //   }
    //     this.resetGraphics();
    //     if (callback) {
    //       callback();
    //     }
    //   };
    //   onBlockChange = (e,callback) => {
    //     clearGraphicFromLayer(this.map, "SelectLandsGraphicLayer");
    //     if (!callback) {
    //     this.setState({
    //       block_no: this.state.blockNum.filter(
    //         (m) => m.attributes.BLOCK_SPATIAL_ID == e
    //       )?.[0]?.attributes?.BLOCK_NO,
    //       blockval: e,
    //       parcelval: undefined,
    //       parcelId: null,
    //       parcelNum: [],
    //     });
    //   }
    //   if (e) {
    //     queryTask({
    //       ...querySetting(
    //         this.LayerID.Survey_Block,
    //         `BLOCK_SPATIAL_ID=${e}`,
    //         true,
    //         ["BLOCK_SPATIAL_ID"]
    //       ),
    //       callbackResult: (res) => {
    //         this.pol = res.features[0];
    //         highlightFeature(res.features[0], this.map, {
    //           layerName: "SelectGraphicLayer",
    //           isZoom: true,
    //           isHiglightSymbol: true,
    //           highlighColor: [0, 0, 0, 0.25],
    //         });
    //       },
    //     });
    //     queryTask({
    //       ...querySetting(
    //         this.LayerID.Landbase_Parcel,
    //         `BLOCK_SPATIAL_ID=${e}`,
    //         false,
    //         ["PARCEL_SPATIAL_ID", "PARCEL_PLAN_NO"]
    //       ),
    //       callbackResult: (res) => {
    //         this.setState({
    //           parcelSearch: null,
    //           parcelNum: res.features.map((e, i) => {
    //             return {
    //               ...e,
    //               i,
    //             };
    //           }),
    //         });
    //       },
    //     });
    //   }
    //     this.resetGraphics();
    //     if (callback) {
    //       callback();
    //     }
    //   };
    //   onLandParcelChange = (f,callback) => {
    //     if (!this.state.selectedLands.length) {
    //       var e = this.state.parcelNum.filter((m) => m.i === f)?.[0]?.attributes
    //         ?.PARCEL_SPATIAL_ID;
    //         if (!callback) {
    //       this.setState({ parcelId: e, parcelval: f });
    //         }
    //       this.RolBackPol = this.pol;
    //       this.RolBackParcelNum = this.state.parcelNum;
    // if (f) {
    //       queryTask({
    //         ...querySetting(
    //           this.LayerID.Landbase_Parcel,
    //           `PARCEL_SPATIAL_ID='${e}'`,
    //           true,
    //           ["PARCEL_SPATIAL_ID"]
    //         ),
    //         callbackResult: (res) => {
    //           this.selectedLandsT = [];
    //           highlightFeature(res.features[0], this.map, {
    //             layerName: "SelectGraphicLayer",
    //             strokeColor: [0, 0, 0],
    //             highlightWidth: 3,
    //             isHighlighPolygonBorder: true,
    //             isZoom: true,
    //             zoomFactor: 25,
    //           });
    //         },
    //       });
    //     }
    //     } else {
    //       // var g = this.state.parcelNum.filter((m) => m.i == f)[0];
    //       // this.setState({ parcelId: g.attributes.PARCEL_SPATIAL_ID });
    //       // highlightFeature(g, this.map, {
    //       //   layerName: "SelectGraphicLayer",
    //       //   strokeColor: [0, 0, 0],
    //       //   isHighlighPolygonBorder: true,
    //       //   highlightWidth: 3,
    //       // });
    //       // this.setState({ parcelval: f });
    //       var prevParcelId = this.state.parcelId;
    //       var g = this.state.parcelNum.filter((m) => m.i == f)[0];
    //       this.state["parcelId"] = g.attributes.PARCEL_SPATIAL_ID;
    //       this.LandHoverOff(
    //         this.map
    //           .getLayer("SelectGraphicLayer")
    //           .graphics.find(
    //             (prevGraphic) =>
    //               prevGraphic.attributes.PARCEL_SPATIAL_ID == prevParcelId
    //           )
    //       );
    //       this.setState({ parcelval: f });
    //     }
    //     if (callback) {
    //       callback();
    //     }
    //   };
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "addParcelToSelect", feature => {
      return new Promise((resolve, reject) => {
        // if (this.state.selectedLands && this.state.selectedLands.length > 0) {
        //   this.setState({
        //     parcelId:
        //       this.state.selectedLands[this.state.selectedLands.length - 1].id,
        //   });

        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["intersectQueryTask"])({
          outFields: ["OBJECTID", "MUNICIPALITY_NAME", "PARCEL_AREA", "PARCEL_LAT_COORD", "PARCEL_LONG_COORD", "PARCEL_MAIN_LUSE", "PLAN_NO", "PARCEL_PLAN_NO", "USING_SYMBOL", "PARCEL_SPATIAL_ID"],
          geometry: feature.geometry,
          url: _mapviewer_config_map__WEBPACK_IMPORTED_MODULE_9__["mapUrl"] + "/" + this.LayerID.Landbase_Parcel,
          where: "PARCEL_PLAN_NO is not null",
          callbackResult: res => {
            Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["getFeatureDomainName"])(res.features, this.LayerID.Landbase_Parcel).then(r => {
              res.features = res.features.map((e, i) => {
                return {
                  ...e,
                  i: uniqid()
                };
              });
              return resolve(res);
            });
          }
        });
      });
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "DrawGraph", () => {
      if (!this.state.selectedLands.length) {
        this.map.graphics.clear();
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["clearGraphicFromLayer"])(this.map, "SelectLandsGraphicLayer");
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["clearGraphicFromLayer"])(this.map, "editlengthGraphicLayer");
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["clearGraphicFromLayer"])(this.map, "PacrelNoGraphicLayer");
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["clearGraphicFromLayer"])(this.map, "SelectGraphicLayer");
        //this.onSubNameChange(this.state.subNameval);
        this.setToStore(null);
      } else {
        this.parcelDis = Object(_Helpers__WEBPACK_IMPORTED_MODULE_16__["selectDis"])(this.selectedLandsT);
        console.log(this.parcelDis);
        this.setAdjacentToStore(this.parcelDis);
        this.setState({
          parcelNum: this.parcelDis
        });
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["clearGraphicFromLayer"])(this.map, "SelectLandsGraphicLayer");
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["clearGraphicFromLayer"])(this.map, "SelectGraphicLayer");
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["clearGraphicFromLayer"])(this.map, "PacrelNoGraphicLayer");
        //clearGraphicFromLayer(this.map, "editlengthGraphicLayer");
        //drawLength(this.map, this.state.selectedLands);
        // highlightFeature(
        //   this.parcelDis.filter(
        //     (element) =>
        //       !this.state.selectedLands.find(
        //         (i) => i.id === element.attributes.PARCEL_SPATIAL_ID
        //       )
        //   ),
        //   this.map,
        //   {
        //     layerName: "SelectLandsGraphicLayer",
        //     noclear: false,
        //     isZoom: false,
        //     isHiglightSymbol: true,
        //     highlighColor: [0, 255, 0, 0.5],
        //     zoomFactor: 25,
        //   }
        // );

        this.parcelDis.filter(element => !this.state.selectedLands.find(i => i.id === element.attributes.PARCEL_SPATIAL_ID)).forEach(f => {
          Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["addParcelNo"])(f.geometry.getExtent().getCenter(), this.map, f.attributes.PARCEL_PLAN_NO + "", "PacrelNoGraphicLayer", 20, [0, 0, 0]);
        });
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["highlightFeature"])(this.parcelDis.filter(element => this.state.selectedLands.find(i => i.id === element.attributes.PARCEL_SPATIAL_ID)), this.map, {
          layerName: "SelectGraphicLayer",
          noclear: true,
          attr: {
            isParcel: true
          },
          isZoom: true,
          isHighlighPolygonBorder: true,
          zoomFactor: 25
        });
        this.parcelDis.filter(element => this.state.selectedLands.find(i => i.id === element.attributes.PARCEL_SPATIAL_ID)).forEach(f => {
          Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["addParcelNo"])(f.geometry.getExtent().getCenter(), this.map, f.attributes.PARCEL_PLAN_NO + "", "PacrelNoGraphicLayer", 20, [0, 0, 0]);
        });
      }
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "mapLoaded", map => {
      this.map = map;
      this.props.setMap(map);
      if (this.props.input && this.props.input.value && this.props.input.value.parcels) {
        var _this$props$mainObjec, _this$props$mainObjec2, _this$props$mainObjec3, _this$props$input$val14, _this$props$input$val15;
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["highlightFeature"])(this.props.input.value.parcels, this.map, {
          layerName: "SelectGraphicLayer",
          noclear: true,
          isZoom: true,
          attr: {
            isParcel: true
          },
          isHighlighPolygonBorder: true,
          zoomFactor: 25
        });
        setTimeout(() => {
          var _this$props$input$val, _this$props$input$val2, _this$props$input$val3, _this$props$input, _this$props$input$val12, _this$props$input$val13;
          this.props.input.value.parcels.forEach(f => {
            f.geometry = new esri.geometry.Polygon(f.geometry);
            Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["addParcelNo"])(f.geometry.getExtent().getCenter(), this.map, f.attributes.PARCEL_PLAN_NO + "", "PacrelNoGraphicLayer", 20, [0, 0, 0]);
          });

          //drawLength(this.map, this.props.input.value.parcels);
          if ((_this$props$input$val = this.props.input.value) !== null && _this$props$input$val !== void 0 && (_this$props$input$val2 = _this$props$input$val.temp) !== null && _this$props$input$val2 !== void 0 && (_this$props$input$val3 = _this$props$input$val2.parcelDis) !== null && _this$props$input$val3 !== void 0 && _this$props$input$val3.length) {
            var _this$props$input$val4, _this$props$input$val5, _this$props$input$val6, _this$props$input$val7, _this$props$input$val8, _this$props$input$val9, _this$props$input$val10, _this$props$input$val11;
            // highlightFeature(
            //   this.props.input.value?.temp?.parcelDis.filter(
            //     (element) =>
            //       !this.props.input.value.parcels.find(
            //         (i) =>
            //           i.attributes.PARCEL_SPATIAL_ID ===
            //           element.attributes.PARCEL_SPATIAL_ID
            //       )
            //   ),
            //   this.map,
            //   {
            //     layerName: "SelectLandsGraphicLayer",
            //     noclear: false,
            //     isZoom: false,
            //     isHiglightSymbol: true,
            //     highlighColor: [0, 255, 0, 0.5],
            //     zoomFactor: 25,
            //   }
            // );

            (_this$props$input$val4 = this.props.input.value) === null || _this$props$input$val4 === void 0 ? void 0 : (_this$props$input$val5 = _this$props$input$val4.temp) === null || _this$props$input$val5 === void 0 ? void 0 : (_this$props$input$val6 = _this$props$input$val5.parcelDis) === null || _this$props$input$val6 === void 0 ? void 0 : (_this$props$input$val7 = _this$props$input$val6.filter(element => !this.props.input.value.parcels.find(i => i.attributes.PARCEL_SPATIAL_ID === element.attributes.PARCEL_SPATIAL_ID))) === null || _this$props$input$val7 === void 0 ? void 0 : _this$props$input$val7.forEach(f => {
              if (!f.geometry.getExtent) {
                f.geometry = new esri.geometry.Polygon(f.geometry);
              }
              Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["addParcelNo"])(f.geometry.getExtent().getCenter(), this.map, f.attributes.PARCEL_PLAN_NO + "", "PacrelNoGraphicLayer", 20, [0, 0, 0]);
            });
            console.log((_this$props$input$val8 = this.props.input.value) === null || _this$props$input$val8 === void 0 ? void 0 : (_this$props$input$val9 = _this$props$input$val8.temp) === null || _this$props$input$val9 === void 0 ? void 0 : _this$props$input$val9.parcelDis);
            this.setState({
              parcelSearch: null,
              parcelNum: (_this$props$input$val10 = this.props.input.value) === null || _this$props$input$val10 === void 0 ? void 0 : (_this$props$input$val11 = _this$props$input$val10.temp) === null || _this$props$input$val11 === void 0 ? void 0 : _this$props$input$val11.parcelDis
            });
          } else if ((_this$props$input = this.props.input) !== null && _this$props$input !== void 0 && (_this$props$input$val12 = _this$props$input.value) !== null && _this$props$input$val12 !== void 0 && (_this$props$input$val13 = _this$props$input$val12.parcels) !== null && _this$props$input$val13 !== void 0 && _this$props$input$val13.length) {
            var _this$props$input2, _this$props$input2$va;
            Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["checkParcelAdjacents"])((_this$props$input2 = this.props.input) === null || _this$props$input2 === void 0 ? void 0 : (_this$props$input2$va = _this$props$input2.value) === null || _this$props$input2$va === void 0 ? void 0 : _this$props$input2$va.parcels);
          }
        }, 500);
        const {
          input: {
            value
          }
        } = this.props;
        this.state.landsData = {
          ...value,
          conditions: this.state.conditions,
          temp: {
            //map: this.map,
            mun: this.props.input.value.temp.mun,
            plan: ((_this$props$mainObjec = this.props.mainObject) === null || _this$props$mainObjec === void 0 ? void 0 : (_this$props$mainObjec2 = _this$props$mainObjec.landData) === null || _this$props$mainObjec2 === void 0 ? void 0 : (_this$props$mainObjec3 = _this$props$mainObjec2.landData) === null || _this$props$mainObjec3 === void 0 ? void 0 : _this$props$mainObjec3.PLAN_NO) || this.props.input.value.temp.plan,
            subTypeval: this.props.input.value.temp.subTypeval,
            subNameval: this.props.input.value.temp.subNameval,
            parcelDis: (_this$props$input$val14 = this.props.input.value) === null || _this$props$input$val14 === void 0 ? void 0 : (_this$props$input$val15 = _this$props$input$val14.temp) === null || _this$props$input$val15 === void 0 ? void 0 : _this$props$input$val15.parcelDis,
            blockval: this.props.input.value.temp.blockval,
            parcelval: this.props.input.value.temp.parcelval,
            subname: this.props.input.value.temp.subname,
            block_no: this.props.input.value.temp.block_no
          },
          parcels: [...this.props.input.value.parcels],
          parcelData: {
            ...this.props.input.value.parcelData
          },
          domainLists: {
            ...this.state.domainLists
          }
          // lists: {
          //   firstParcels: [...this.state.parcelNum],
          //   subDivNames: [...this.state.subDivNames],
          //   MunicipalityNames: [...this.state.MunicipalityNames],
          //   subDivType: [...this.state.subDivType],
          //   PlanNum: [...this.state.PlanNum],
          //   blockNum: [...this.state.blockNum],
          // },
        };
        this.props.input.onChange({
          ...this.state.landsData
        });
      }
      this.setState({
        mapLoaded: true
      });

      // this.map.on("click", (geo) => {
      //   intersectQueryTask({
      //     outFields: [
      //       "MUNICIPALITY_NAME",
      //       "PARCEL_MAIN_LUSE",
      //       "PARCEL_AREA",
      //       "PARCEL_LAT_COORD",
      //       "PARCEL_LONG_COORD",
      //       "PLAN_NO",
      //       "PARCEL_PLAN_NO",
      //       "USING_SYMBOL",
      //       "PARCEL_SPATIAL_ID",
      //     ],
      //     geometry: geo.mapPoint,
      //     url: mapUrl + "/" + this.LayerID.Landbase_Parcel,
      //     where: "PARCEL_PLAN_NO is not null",
      //     callbackResult: (res) => {
      //       if (res.features.length > 0) {
      //         this.setState({
      //           munval: res.features[0].attributes.MUNICIPALITY_NAME,
      //         });
      //         getFeatureDomainName(
      //           res.features,
      //           this.LayerID.Landbase_Parcel
      //         ).then((r) => {
      //           this.setState({
      //             parcelSearch: null,
      //             parcelNum: res.features.map((e, i) => {
      //               return {
      //                 ...e,
      //                 i,
      //               };
      //             }),
      //           });

      //           res.features = res.features.map((e, i) => {
      //             return {
      //               ...e,
      //               i,
      //             };
      //           });

      //           this.RolBackParcelNum = res.features.map((e, i) => {
      //             return {
      //               ...e,
      //               i,
      //             };
      //           });

      //           setTimeout(() => {
      //             if (
      //               this.selectedLandsT.length == 0 ||
      //               this.selectedLands.length == 0
      //             ) {
      //               this.selectedLandsT.push(res);

      //               this.DrawGraph(true);
      //               this.onLandParcelChange(0);
      //             }
      //           }, 500);
      //         });
      //       }
      //     },
      //   });
      // });

      this.props.setCurrentMap(map);
      //this.props.setMapLayers(mapLayers);
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "setValue", (item, event) => {
      item.value = event.target.value;
      this.UpdateSubmissionDataObject();
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "OnParcelSelect", () => {
      this.setState({
        parcelval: undefined
      });
      Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["clearGraphicFromLayer"])(this.map, "SelectGraphicLayer");
      Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["clearGraphicFromLayer"])(this.map, "SelectLandsGraphicLayer");
      if (!this.state.selectedLands.filter(e => e.id === this.state.parcelId).length) {
        // ["PARCEL_AREA", "PARCEL_MAIN_LUSE", "PARCEL_LAT_COORD", "PARCEL_LONG_COORD", "PLAN_NO", "PARCEL_PLAN_NO", "USING_SYMBOL", "PARCEL_BLOCK_NO", "DISTRICT_NAME", "SUBDIVISION_DESCRIPTION", "SUBDIVISION_TYPE", "PARCEL_SPATIAL_ID", "MUNICIPALITY_NAME"]
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["queryTask"])({
          ...Object(_Helpers__WEBPACK_IMPORTED_MODULE_16__["querySetting"])(this.LayerID.Landbase_Parcel, `PARCEL_SPATIAL_ID =${this.state.parcelId}`, true, ["*"]),
          callbackResult: res => {
            if (this.state.selectedLands && this.state.selectedLands.length == 0) {
              Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["queryTask"])({
                ...Object(_Helpers__WEBPACK_IMPORTED_MODULE_16__["querySetting"])(this.LayerID.Tbl_Parcel_Conditions, `USING_SYMBOL_CODE ='${res.features[0].attributes.USING_SYMBOL}'`, false, ["SLIDE_AREA", "MIN_FROT_OFFSET", "BUILDING_RATIO", "FRONT_OFFSET", "SIDE_OFFSET", "BACK_OFFSET", "FLOORS", "FLOOR_HEIGHT", "FAR", "ADD_FLOOR"]),
                callbackResult: condition => {
                  this.setState({
                    conditions: condition.features
                  });
                  Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["getFeatureDomainName"])(res.features, this.LayerID.Landbase_Parcel).then(r => {
                    this.addParcelToSelect(r[0]).then(res => {
                      this.setToStore(r);
                      this.setState({
                        parcelId: null
                      });
                      this.selectedLandsT.push(res);
                      this.DrawGraph();
                    }, () => {
                      this.state.selectedLands.pop();
                      this.setToStore();
                    });
                  });
                }
              });
            } else {
              Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["getFeatureDomainName"])(res.features, this.LayerID.Landbase_Parcel).then(r => {
                this.addParcelToSelect(r[0]).then(res => {
                  this.setToStore(r);
                  this.setState({
                    parcelId: null
                  });
                  this.selectedLandsT.push(res);
                  this.DrawGraph();
                }, () => {
                  this.state.selectedLands.pop();
                  this.setToStore();
                });
              });
            }
          }
        });
      }
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "setToStore", r => {
      const {
        input: {
          value
        }
      } = this.props;
      this.state.landsData = {
        ...value,
        mapGraphics: [],
        conditions: this.state.conditions,
        parcelData: {
          ...this.state.parcelData
        },
        temp: {
          //map: this.map,
          mun: this.state.munval,
          plan: this.state.planeval,
          subTypeval: this.state.subTypeval,
          subNameval: this.state.subNameval,
          subname: this.state.subName_name,
          parcelDis: this.parcelDis || this.RolBackParcelNum,
          block_no: this.state.block_no,
          blockval: this.state.blockval,
          parcelval: this.state.parcelval
        },
        domainLists: {
          ...this.state.domainLists
        }
        // parcels: [
        //   ...this.state.selectedLands,
        //   {
        //     attributes: r[0].attributes,
        //     id: this.state.parcelId,
        //     geometry: JSON.parse(JSON.stringify(r[0].geometry)),
        //   },
        // ],
        // lists: {
        //   subdivisions: [...this.state.subDivNames],
        //   MunicipalityNames: [...this.state.MunicipalityNames],
        //   subDivType: [...this.state.subDivType],
        //   PlanNum: [...this.state.PlanNum],
        //   blockNum: [...this.state.blockNum],
        // },
      };

      //  if (r) {
      //       r[0].attributes.PARCEL_AREA = "";
      //       this.state.selectedLands.push({
      //         geometry: r[0].geometry,
      //         attributes: r[0].attributes,
      //         id: this.state.parcelId,
      //       });
      //     }

      if (r) {
        r[0].attributes.PARCEL_AREA = "";
        this.state.selectedLands.push({
          geometry: r[0].geometry,
          attributes: r[0].attributes,
          id: this.state.parcelId
        });
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["map_object"])(this.state.selectedLands);
      }
      this.state.landsData["parcels"] = [...this.state.selectedLands];
      this.props.input.onChange({
        ...this.state.landsData
      });
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "setAdjacentToStore", r => {
      let store = this.props.input.value;
      store.temp.parcelDis = r;
      this.props.input.onChange(store);
    });
    // LandHoverOn = (f) => {
    //   if (this.state.selectedLands.length) {
    //     clearGraphicFromLayer(this.map, "SelectGraphicLayer");
    //     var parcel = this.state.parcelNum.filter((m) => m.i == f.key)[0];
    //     highlightFeature(parcel, this.map, {
    //       layerName: "SelectGraphicLayer",
    //       strokeColor: [0, 0, 0],
    //       isHighlighPolygonBorder: true,
    //       highlightWidth: 3,
    //     });
    //   }
    // };
    // LandHoverOff = (f) => {
    //   if (this.state.selectedLands.length) {
    //     clearGraphicFromLayer(this.map, "SelectGraphicLayer");
    //   }
    // };
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "LandHoverOn", f => {
      if (this.state.selectedLands.length) {
        var fitleredGraphics = this.map.getLayer("SelectGraphicLayer").graphics.filter(graphic => {
          var _graphic$attributes, _f$attributes;
          return (graphic === null || graphic === void 0 ? void 0 : (_graphic$attributes = graphic.attributes) === null || _graphic$attributes === void 0 ? void 0 : _graphic$attributes.OBJECTID) != (f === null || f === void 0 ? void 0 : (_f$attributes = f.attributes) === null || _f$attributes === void 0 ? void 0 : _f$attributes.OBJECTID);
        });
        fitleredGraphics = [...new Map(fitleredGraphics.map(item => {
          var _item$attributes;
          return [item === null || item === void 0 ? void 0 : (_item$attributes = item["attributes"]) === null || _item$attributes === void 0 ? void 0 : _item$attributes["OBJECTID"], item];
        })).values()];
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["clearGraphicFromLayer"])(this.map, "SelectGraphicLayer");
        fitleredGraphics.forEach(graphic => {
          this.map.getLayer("SelectGraphicLayer").add(graphic);
        });
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["highlightFeature"])([f], this.map, {
          layerName: "SelectGraphicLayer",
          noclear: true,
          isZoom: false,
          isHiglightSymbol: false,
          attr: true
        });
      }
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "LandHoverOff", f => {
      var _this$state$selectedL, _f$attributes2, _this$state;
      if (f && (_this$state$selectedL = this.state.selectedLands) !== null && _this$state$selectedL !== void 0 && _this$state$selectedL.length && (f === null || f === void 0 ? void 0 : (_f$attributes2 = f.attributes) === null || _f$attributes2 === void 0 ? void 0 : _f$attributes2.PARCEL_SPATIAL_ID) != ((_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.parcelId)) {
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["highlightFeature"])([f], this.map, {
          layerName: "SelectGraphicLayer",
          noclear: true,
          isZoom: false,
          isHiglightSymbol: true,
          highlighColor: [0, 255, 0, 0.5],
          attr: true
        });
      }
    });
    // remove = (item) => {
    //   this.state.parcelData = {};
    //   this.state.selectedLands.pop(item);
    //   const values = slice(this.props.input.value.parcels, 0, -1);
    //   this.props.input.onChange([...values]);
    //   if (this.state.selectedLandsT) {
    //     this.state.selectedLandsT.pop(item);
    //   }
    //   this.DrawGraph();
    //   this.UpdateSubmissionDataObject();
    // };
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "remove", item => {
      let {
        mainObject
      } = this.props;
      if (mainObject && mainObject.waseka) {
        delete mainObject.waseka;
      }
      this.state.parcelData = {};
      this.state.selectedLands.pop(item);
      //this.props.input.value.parcels = slice(this.props.input.value.parcels, 0, -1)
      // this.props.input.onChange([...values])
      if (this.state.selectedLandsT) {
        this.state.selectedLandsT.pop(item);
      }
      this.DrawGraph();
      this.UpdateSubmissionDataObject();
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "openPopup", scope => {
      var fields = this.parcelDataFields;
      this.props.setMain("Popup", {
        popup: {
          type: "create",
          childProps: {
            fields,
            initialValues: {
              ...scope.state.parcelData
            },
            ok(values) {
              scope.state["parcelData"] = values;
              scope.UpdateSubmissionDataObject();
              return Promise.resolve(true);
            }
          }
        }
      });
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "myChangeHandler", (name, i, e, event) => {
      // 
      if (event.target.value && +event.target.value > 0) {
        this["edit_" + name + i] = event.target.value;
        e.attributes[name] = event.target.value;
        //e.attributes["PARCEL_AREA"] = event.target.value;
      } else {
        this["edit_" + name + i] = "";
        e.attributes[name] = "";
      }
      this.setState({
        [name + "_isEdit_" + i]: true
      });
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "showEditBtn", (name, value) => {
      if (name == "USING_SYMBOL") {
        return value == null;
      } else {
        return ["PARCEL_AREA"].indexOf(name) > -1;
      }
    });
    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "enableEdit", (name, i) => {
      this.setState({
        [name + "_isEdit_" + i]: true
      });
    });
    this.PlanNum = [];
    this.planId = null;
    this.parcelTs = [];
    this.selectedLandsT = (props === null || props === void 0 ? void 0 : (_props$input = props.input) === null || _props$input === void 0 ? void 0 : (_props$input$value = _props$input.value) === null || _props$input$value === void 0 ? void 0 : (_props$input$value$te = _props$input$value.temp) === null || _props$input$value$te === void 0 ? void 0 : _props$input$value$te.parcelDis) && [{
      features: props === null || props === void 0 ? void 0 : (_props$input2 = props.input) === null || _props$input2 === void 0 ? void 0 : (_props$input2$value = _props$input2.value) === null || _props$input2$value === void 0 ? void 0 : (_props$input2$value$t = _props$input2$value.temp) === null || _props$input2$value$t === void 0 ? void 0 : _props$input2$value$t.parcelDis
    }] || [];
    this.selectedLands = [];
    this.selectionMode = false;
    this.parcel_fields_headers = ["رقم الأرض", "المساحة (م2)", "رمز الأستخدام"];
    this.parcel_fields = [{
      name: "PARCEL_PLAN_NO",
      editable: false
    }, {
      name: "PARCEL_AREA",
      editable: true
    }, {
      name: "USING_SYMBOL",
      editable: false
    }];
    this.parcelDataFields = {
      parcel_type: {
        label: "عبارة عن",
        placeholder: "من فضلك اخل نوع الأرض",
        type: "input",
        field: "select",
        name: "parcel_type",
        data: [{
          label: "أرض فضاء",
          value: "أرض فضاء"
        }, {
          label: "مبنى سكني",
          value: "مبنى سكني"
        }, {
          label: "ورشة",
          value: "ورشة"
        }, {
          label: "أخرى",
          value: "أخرى"
        }],
        required: true
      },
      other: {
        label: "أخرى",
        placeholder: "من فضلك ادخل وصف أخرى",
        field: "text",
        type: "input",
        name: "other",
        maxLength: 200,
        required: true,
        permission: {
          // show_match_value: { parcel_type: "أخرى" },
          show_values_equal_list: [{
            key: "parcel_type",
            value: "أخرى"
          }]
        }
      },
      north_length: {
        label: "طول الحد الشمالي (م)",
        placeholder: "من فضلك ادخل طول الحد الشمالي (م)",
        type: "number",
        name: "north_length",
        required: true
      },
      north_desc: {
        label: "وصف الحد الشمالي",
        placeholder: "من فضلك ادخل وصف الحد الشمالي",
        type: "text",
        name: "north_desc",
        maxLength: 200,
        required: true
      },
      south_length: {
        label: "طول الحد الجنوبي (م)",
        placeholder: "من فضلك ادخل طول الحد الجنوبي (م)",
        type: "number",
        name: "south_length",
        required: true
      },
      south_desc: {
        label: "وصف الحد الجنوبي",
        placeholder: "من فضلك ادخل وصف الحد الجنوبي",
        type: "text",
        name: "south_desc",
        maxLength: 200,
        required: true
      },
      east_length: {
        label: "طول الحد الشرقي (م)",
        placeholder: "من فضلك ادخل طول الحد الشرقي (م)",
        type: "number",
        name: "east_length",
        required: true
      },
      east_desc: {
        label: "وصف الحد الشرقي",
        placeholder: "من فضلك ادخل وصف الحد الشرقي",
        type: "text",
        name: "east_desc",
        maxLength: 200,
        required: true
      },
      west_length: {
        label: "طول الحد الغربي (م)",
        placeholder: "من فضلك ادخل طول الحد الغربي (م)",
        type: "number",
        name: "west_length",
        required: true
      },
      west_desc: {
        label: "وصف الحد الغربي",
        placeholder: "من فضلك ادخل وصف الحد الغربي",
        type: "text",
        name: "west_desc",
        maxLength: 200,
        required: true
      }
    };
    Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["map_object"])(props.input && props.input.value.parcels);
    this.state = {
      mapLoaded: false,
      munval: props.input && props.input.value.temp && props.input.value.temp.mun || undefined,
      planeval: ((_this$props$mainObjec4 = this.props.mainObject) === null || _this$props$mainObjec4 === void 0 ? void 0 : (_this$props$mainObjec5 = _this$props$mainObjec4.landData) === null || _this$props$mainObjec5 === void 0 ? void 0 : (_this$props$mainObjec6 = _this$props$mainObjec5.landData) === null || _this$props$mainObjec6 === void 0 ? void 0 : _this$props$mainObjec6.PLAN_NO) || props.input && props.input.value.temp && props.input.value.temp.plan || undefined,
      subTypeval: props.input && props.input.value.temp && props.input.value.temp.subTypeval || undefined,
      subNameval: props.input && props.input.value.temp && props.input.value.temp.subNameval || undefined,
      blockval: props.input && props.input.value.temp && props.input.value.temp.blockval || undefined,
      selectedLands: props.input && props.input.value.parcels || [],
      parcelval: props.input && props.input.value.temp && props.input.value.temp.parcelval || undefined,
      conditions: props.input && props.input.value.conditions || undefined,
      planSersh: null,
      blockNum: [],
      subDivNames: [],
      subDivType: [],
      MunicipalityNames: [],
      PlanNum: [],
      parcelNum: ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$input3 = _this$props.input) === null || _this$props$input3 === void 0 ? void 0 : (_this$props$input3$va = _this$props$input3.value) === null || _this$props$input3$va === void 0 ? void 0 : (_this$props$input3$va2 = _this$props$input3$va.temp) === null || _this$props$input3$va2 === void 0 ? void 0 : _this$props$input3$va2.parcelDis) || [],
      parcelNumS: [],
      parcelId: null,
      mapExtend: null,
      parcelSearch: null,
      poly: null,
      //parcelSideLengths: [],
      domainLists: props.input.value.domainLists || {},
      parcelData: props.input.value.parcelData || {},
      landsData: {}
    };
    this.isloaded = true;
  }
  componentDidMount() {
    window.filterUrl = _mapviewer_config_map__WEBPACK_IMPORTED_MODULE_9__["mapUrl"];
    Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["getInfo"])().then(res => {
      this.LayerID = res;
      Object(_common__WEBPACK_IMPORTED_MODULE_17__["getParcels"])(this, null, "", {
        returnDistinctValues: true
      }, ["MUNICIPALITY_NAME"]).then(features => {
        Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["getFeatureDomainName"])(features, this.LayerID.Landbase_Parcel).then(features => {
          this.setState({
            MunicipalityNames: features.filter(r => r.attributes.MUNICIPALITY_NAME).map(r => {
              return {
                code: r.attributes.MUNICIPALITY_NAME_Code,
                name: r.attributes.MUNICIPALITY_NAME
              };
            }),
            allParcels: features
          }, () => {
            this.loadLists = true;
            if (this.state.munval) {
              Object(_common__WEBPACK_IMPORTED_MODULE_17__["onMunChange"])(this, this.state.munval, () => {
                Object(_common__WEBPACK_IMPORTED_MODULE_17__["onPlaneChange"])(this, this.state.planeval, () => {
                  Object(_common__WEBPACK_IMPORTED_MODULE_17__["onSubTypeChange"])(this, this.state.subTypeval, () => {
                    Object(_common__WEBPACK_IMPORTED_MODULE_17__["onSubNameChange"])(this, this.state.subNameval, () => {
                      Object(_common__WEBPACK_IMPORTED_MODULE_17__["onBlockChange"])(this, this.state.blockval, () => {
                        Object(_common__WEBPACK_IMPORTED_MODULE_17__["onLandParcelChange"])(this, this.state.parcelval, () => {});
                      });
                    });
                  });
                });
              });
            }
            this.loadLists = false;
          });
        });
      });
      Object(_common_esri_request__WEBPACK_IMPORTED_MODULE_7__["esriRequest"])(_mapviewer_config_map__WEBPACK_IMPORTED_MODULE_9__["mapUrl"] + "/" + this.LayerID.Subdivision).then(response => {
        this.setState({
          subDivType: response.fields[7].domain.codedValues
        });
      });
    });
    this.isloaded = false;
    // if (
    //   this.props.mainObject &&
    //   this.props.mainObject.landData &&
    //   this.isloaded
    // ) {

    //   this.UpdateSubmissionDataObject();
    // }
  }
  replaceAll(str, find, replace) {
    return str.replace(new RegExp(find, "g"), replace);
  }
  saveEdit(id, name, i) {
    let findParcel = this.props.input.value.parcels.find(p => {
      var _p$attributes;
      return [p === null || p === void 0 ? void 0 : p.id, p === null || p === void 0 ? void 0 : (_p$attributes = p.attributes) === null || _p$attributes === void 0 ? void 0 : _p$attributes.PARCEL_SPATIAL_ID].indexOf(id) != -1;
    });
    findParcel.attributes[name] = this["edit_" + name + i] || findParcel.attributes[name];
    let selectLand = this.state.selectedLands.find(p => {
      var _p$attributes2;
      return [p === null || p === void 0 ? void 0 : p.id, p === null || p === void 0 ? void 0 : (_p$attributes2 = p.attributes) === null || _p$attributes2 === void 0 ? void 0 : _p$attributes2.PARCEL_SPATIAL_ID].indexOf(id) != -1;
    });
    selectLand.attributes[name] = this["edit_" + name + i] || selectLand.attributes[name];
    // 
    this.setState({
      [name + "_isEdit_" + i]: false,
      selectedLands: [...this.state.selectedLands]
    }, () => {
      this.UpdateSubmissionDataObject();
    });
  }
  render() {
    var _this$state$Municipal;
    const {
      parcelData,
      selectedLands,
      MunicipalityNames,
      subDivType,
      subDivNames,
      subNameval,
      blockNum,
      blockval,
      PlanNum,
      mapLoaded,
      planeval,
      parcelSearch,
      parcelNum,
      parcelval,
      conditions
    } = this.state;
    const {
      fullMapWidth
    } = this.props;
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", {
      className: !fullMapWidth ? "content-section implementation" : ""
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", null, mapLoaded && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", {
      style: {
        boxShadow: "1px 1px 3px black",
        paddingLeft: "15px",
        paddingTop: "30px",
        height: "487px"
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a, {
      getPopupContainer: trigger => trigger.parentNode,
      autoFocus: true,
      onChange: val => {
        Object(_common__WEBPACK_IMPORTED_MODULE_17__["onMunChange"])(this, val);
      },
      showSearch: true,
      value: this.state.munval,
      placeholder: "\u0627\u062E\u062A\u0631 \u0627\u0633\u0645 \u0627\u0644\u0628\u0644\u062F\u064A\u0647",
      disabled: !((_this$state$Municipal = this.state.MunicipalityNames) !== null && _this$state$Municipal !== void 0 && _this$state$Municipal.length),
      optionFilterProp: "children",
      filterOption: (input, option) => {
        if (option.props.children) {
          return option.props.children.find(i => {
            return i && i.indexOf(input.trim().toLowerCase()) >= 0;
          }) != null;
        } else {
          return false;
        }
      }
    }, MunicipalityNames === null || MunicipalityNames === void 0 ? void 0 : MunicipalityNames.map(e => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Option, {
      key: e.code,
      value: e.code
    }, e.name, " "))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a, {
      getPopupContainer: trigger => trigger.parentNode,
      onChange: val => {
        Object(_common__WEBPACK_IMPORTED_MODULE_17__["onPlaneChange"])(this, val);
      },
      showSearch: true,
      autoFocus: true,
      disabled: !PlanNum.length,
      optionFilterProp: "children",
      filterOption: (input, option) => {
        if (option.props.children) {
          var _option$props$childre;
          return ((_option$props$childre = option.props.children) === null || _option$props$childre === void 0 ? void 0 : _option$props$childre.indexOf(Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["convertToArabic"])(input))) != -1;
        } else {
          return false;
        }
      },
      value: planeval,
      placeholder: "\u0631\u0642\u0645 \u0627\u0644\u0645\u062E\u0637\u0637",
      notFoundContent: "not found"
    }, PlanNum
    //.slice(0, 100)
    .map((d, i) => {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Option, {
        key: i,
        value: d.i
      }, Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["convertToArabic"])(d.attributes.PLAN_NO));
    })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a, {
      getPopupContainer: trigger => trigger.parentNode,
      autoFocus: true,
      onChange: val => {
        Object(_common__WEBPACK_IMPORTED_MODULE_17__["onSubTypeChange"])(this, val);
      },
      showSearch: true,
      disabled: !subDivType.length,
      value: this.state.subTypeval,
      placeholder: "نوع التقسيم",
      optionFilterProp: "children",
      filterOption: (input, option) => {
        if (option.props.children) {
          var _option$props$childre2;
          return ((_option$props$childre2 = option.props.children) === null || _option$props$childre2 === void 0 ? void 0 : _option$props$childre2.indexOf(Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["convertToArabic"])(input))) != -1;
        } else {
          return false;
        }
      }
    }, subDivType
    //.slice(0, 100)
    .map((e, i) => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Option, {
      key: i,
      value: e.code
    }, " ", e.name, " "))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a, {
      getPopupContainer: trigger => trigger.parentNode,
      autoFocus: true,
      onChange: val => {
        Object(_common__WEBPACK_IMPORTED_MODULE_17__["onSubNameChange"])(this, val);
      },
      showSearch: true,
      disabled: !subDivNames.length,
      placeholder: "\u0627\u0633\u0645 \u0627\u0644\u062A\u0642\u0633\u064A\u0645",
      value: subNameval,
      optionFilterProp: "children",
      filterOption: (input, option) => {
        var _option$props$childre3;
        return ((_option$props$childre3 = option.props.children) === null || _option$props$childre3 === void 0 ? void 0 : _option$props$childre3.indexOf(Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["convertToArabic"])(input))) != -1;
      }
    }, subDivNames
    //.slice(0, 100)
    .map((e, i) => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Option, {
      key: i,
      value: e.attributes.SUBDIVISION_SPATIAL_ID
    }, " ", e.attributes.SUBDIVISION_DESCRIPTION))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a, {
      getPopupContainer: trigger => trigger.parentNode,
      autoFocus: true,
      onChange: val => {
        Object(_common__WEBPACK_IMPORTED_MODULE_17__["onBlockChange"])(this, val);
      },
      showSearch: true,
      disabled: !blockNum.length,
      value: blockval,
      placeholder: "\u0631\u0642\u0645 \u0627\u0644\u0628\u0644\u0643",
      optionFilterProp: "children",
      filterOption: (input, option) => {
        var _option$props$childre4;
        return ((_option$props$childre4 = option.props.children) === null || _option$props$childre4 === void 0 ? void 0 : _option$props$childre4.indexOf(Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["convertToArabic"])(input))) != -1;
      }
    }, blockNum
    //.slice(0, 100)
    .map((e, i) => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Option, {
      key: i,
      value: e.attributes.BLOCK_SPATIAL_ID
    }, Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["convertToArabic"])(e.attributes.BLOCK_NO)))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(antd_lib_select__WEBPACK_IMPORTED_MODULE_5___default.a, {
      // onBlur={() => {
      //   clearGraphicFromLayer(this.map, "SelectGraphicLayer");
      // }}
      getPopupContainer: trigger => trigger.parentNode,
      autoFocus: true,
      onFocus: () => {
        //clearGraphicFromLayer(this.map, "SelectLandsGraphicLayer");
        if (!this.state["parcelId"]) {
          Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["highlightFeature"])(parcelNum.filter((e, i) => {
            if (parcelSearch) {
              if (this.state.selectedLands.length) {
                return !this.state.selectedLands.find(tt => tt.attributes.PARCEL_SPATIAL_ID == e.attributes.PARCEL_SPATIAL_ID);
              } else {
                return e.attributes.PARCEL_PLAN_NO && e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(parcelSearch.toLowerCase()) >= 0;
              }
            } else {
              if (selectedLands.length) {
                return !selectedLands.find(tt => tt.attributes.PARCEL_PLAN_NO == e.attributes.PARCEL_PLAN_NO) && e.attributes.PARCEL_PLAN_NO;
              } else {
                return e.attributes.PARCEL_PLAN_NO;
              }
            }
          }),
          //.slice(0, 100),
          this.map, {
            layerName: "SelectGraphicLayer",
            noclear: false,
            isZoom: false,
            isHiglightSymbol: true,
            highlighColor: [0, 255, 0, 0.5],
            attr: true
          });
        }
      },
      onChange: val => {
        Object(_common__WEBPACK_IMPORTED_MODULE_17__["onLandParcelChange"])(this, val);
      },
      showSearch: true,
      disabled: parcelNum && !parcelNum.length,
      onSearch: e => {
        this.setState({
          parcelSearch: e
        });
        Object(_common__WEBPACK_IMPORTED_MODULE_17__["onSearch"])(this, e);
      },
      filterOption: (input, option) => {
        if (option.props.children) {
          var _option$props$childre5;
          return ((_option$props$childre5 = option.props.children) === null || _option$props$childre5 === void 0 ? void 0 : _option$props$childre5.indexOf(Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["convertToArabic"])(input))) != -1;
        } else {
          return false;
        }
      },
      value: parcelval,
      placeholder: "\u0631\u0642\u0645 \u0642\u0637\u0639\u0629 \u0627\u0644\u0627\u0631\u0636"
    }, parcelNum && parcelNum.filter((e, i) => {
      if (parcelSearch) {
        if (this.state.selectedLands.length) {
          return !this.state.selectedLands.find(tt => tt.attributes.PARCEL_SPATIAL_ID == e.attributes.PARCEL_SPATIAL_ID);
        } else {
          return e.attributes.PARCEL_PLAN_NO && e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(parcelSearch.toLowerCase()) >= 0;
        }
      } else {
        if (selectedLands.length) {
          return !selectedLands.find(tt => tt.attributes.PARCEL_PLAN_NO == e.attributes.PARCEL_PLAN_NO) && e.attributes.PARCEL_PLAN_NO;
        } else {
          return e.attributes.PARCEL_PLAN_NO;
        }
      }
    }).slice(0, 100).sort((a, b) => a.attributes.PARCEL_PLAN_NO > b.attributes.PARCEL_PLAN_NO ? 1 : -1).map((e, i) => {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(Option, {
        onMouseEnter: this.LandHoverOn.bind(this, e),
        onMouseLeave: this.LandHoverOff.bind(this, e),
        key: e.attributes.PARCEL_SPATIAL_ID,
        value: e.i
      }, Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["localizeNumber"])(e.attributes.PARCEL_PLAN_NO));
    })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(antd_lib_button__WEBPACK_IMPORTED_MODULE_2___default.a, {
      className: "add-gis",
      disabled: !this.state.parcelId,
      onClick: this.OnParcelSelect
    }, "\u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0623\u0631\u0636"))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_MapBtnsComponent__WEBPACK_IMPORTED_MODULE_12__["default"], this.props)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_MapComponent_MapComponent__WEBPACK_IMPORTED_MODULE_11__["default"], _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0___default()({
      mapload: this.mapLoaded.bind(this)
    }, this.props))))), mapLoaded && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", {
      style: {
        gridColumn: "1/3"
      }
    }, selectedLands && selectedLands.length > 0 && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("h1", {
      className: "titleSelectedParcel"
    }, "\u0627\u0644\u0623\u0631\u0627\u0636\u064A \u0627\u0644\u0645\u062E\u062A\u0627\u0631\u0629"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("table", {
      className: "table table-bordered",
      style: {
        marginTop: "1%"
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("thead", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("tr", null, this.parcel_fields_headers.map((field_header, k) => {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("th", null, field_header);
    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("th", null, " \u062E\u064A\u0627\u0631\u0627\u062A"))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("tbody", null, selectedLands.map((e, i) => {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("tr", {
        key: i
      }, this.parcel_fields.map((field, k) => {
        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("td", {
          key: k
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", null, field.editable ? !this.state[field.name + "_isEdit_" + i] ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span", null, Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["localizeNumber"])(e.attributes[field.name] || "")), this.showEditBtn(field.name, e.attributes[field.name]) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("button", {
          className: "btn",
          style: {
            marginRight: e.attributes[field.name] ? "20px" : "0px"
          },
          onClick: this.enableEdit.bind(this, field.name, i)
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("i", {
          className: "fas fa-edit"
        })))) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span", {
          style: {
            display: "grid",
            gridTemplateColumns: "1fr auto"
          }
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("input", {
          key: i,
          className: "form-control",
          type: "number",
          step: "any",
          value: e.attributes[field.name],
          onChange: this.myChangeHandler.bind(this, field.name, i, e)
        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("button", {
          className: "btn",
          style: {
            marginRight: "20px"
          },
          onClick: this.saveEdit.bind(this, e.attributes.PARCEL_SPATIAL_ID, field.name, i)
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("i", {
          className: "fa fa-floppy-o"
        }))) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span", null, Object(_common_common_func__WEBPACK_IMPORTED_MODULE_8__["localizeNumber"])(e.attributes[field.name] || "")))));
      }), i === selectedLands.length - 1 ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("td", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("button", {
        className: "btn follow",
        style: {
          margin: "0px 5px"
        },
        onClick: () => {
          this.openPopup(this);
        }
      }, "\u062D\u062F\u0648\u062F \u0648 \u0623\u0628\u0639\u0627\u062F \u0627\u0644\u0623\u0631\u0636"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("button", {
        className: " btn btn-danger ",
        onClick: this.remove.bind(this, e)
      }, "\u062D\u0630\u0641")) : "");
    }))))));
  }
}
/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_15__["connect"])(_mapping__WEBPACK_IMPORTED_MODULE_13__["mapStateToProps"], appMapDispatchToProps)(krokiIdentifyComponnent));

/***/ })

}]);
//# sourceMappingURL=74.min.js.map
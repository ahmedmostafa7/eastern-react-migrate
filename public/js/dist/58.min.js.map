{"version":3,"file":"58.min.js","sources":["webpack:///./src/app/components/inputs/fields/table/index.js","webpack:///./src/app/components/inputs/fields/table/mapping.js","webpack:///./src/app/components/inputs/fields/table/tableActionFunctions.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Table, Alert, Popconfirm, Button, Icon } from \"antd\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"./mapping\";\r\nimport { connect } from \"react-redux\";\r\nimport { assign, map, isEqual, get } from \"lodash\";\r\nimport * as tableActionFunctions from \"./tableActionFunctions\";\r\nimport * as fieldValues from \"app/helpers/fieldValues\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { withRouter } from \"react-router\";\r\nimport axios from \"axios\";\r\n\r\nclass tableComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { fields } = props;\r\n    this.state = {\r\n      unfilteredData: {},\r\n      columns: [{}],\r\n    };\r\n    this.tableHeight = 500;\r\n    this.getMoreData = this.getMoreData.bind(this);\r\n\r\n    // this.colWidth = 100/(fields.length + 1)+'%';\r\n  }\r\n\r\n  tableRenderFunction(field, text, record) {\r\n    return get(fieldValues, field.field, (text) => text)(\r\n      text,\r\n      record,\r\n      field,\r\n      this.props\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { fields, tableActions, t } = this.props;\r\n\r\n    let columns = fields.map((field) => {\r\n      const { name, label, sorter } = field;\r\n      return {\r\n        title: t(label),\r\n        key: name,\r\n        dataIndex: name,\r\n        // width: this.colWidth,\r\n        render: this.tableRenderFunction.bind(this, field),\r\n        sorter: sorter\r\n          ? (a, b) => get(tableActionFunctions, sorter, null)(a, b, name)\r\n          : null,\r\n      };\r\n    });\r\n\r\n    const actions = tableActions\r\n      ? {\r\n          title: \"Actions\",\r\n          dataIndex: \"actions\",\r\n          key: \"actions\",\r\n          render: (text, record, index) => {\r\n            return (\r\n              <span>\r\n                {map(tableActions, (action) => (\r\n                  <span key={action.name}>\r\n                    {/* <Divider type='vertical'/> */}\r\n                    <Popconfirm\r\n                      title={action.title}\r\n                      onConfirm={get(\r\n                        tableActionFunctions,\r\n                        action.function,\r\n                        () => (\r\n                          <Alert message=\"not a valid action function\" banner />\r\n                        )\r\n                      ).bind(this, record, index, action, this.props)}\r\n                      icon={\r\n                        <Icon\r\n                          type={action.icon}\r\n                          style={{ color: action.color }}\r\n                        />\r\n                      }\r\n                    >\r\n                      <Button type={action.type}>{t(action.label)}</Button>\r\n                    </Popconfirm>\r\n                  </span>\r\n                ))}\r\n              </span>\r\n            );\r\n          },\r\n        }\r\n      : null;\r\n\r\n    actions ? (columns = [...columns, actions]) : null;\r\n    if (this.state.columns !== columns) {\r\n      this.setState({ columns });\r\n    }\r\n\r\n    this.fetchTableData();\r\n  }\r\n\r\n  fetchTableData(recievedUrl) {\r\n    const {\r\n      fillData,\r\n      tableData: { method, fetchUrl, queryParams },\r\n      results,\r\n    } = this.props;\r\n    const url = recievedUrl && results ? recievedUrl : fetchUrl;\r\n\r\n    if (recievedUrl || !results) {\r\n      //setLoading(true)\r\n      axios[method](url, { ...queryParams }).then(({ data }) => {\r\n        const recievedData = data.results.map((singleResult) =>\r\n          assign(singleResult, { key: singleResult.id })\r\n        );\r\n        const newResults = results\r\n          ? [...recievedData, ...results]\r\n          : recievedData;\r\n        fillData({ ...data, results: newResults });\r\n        //setLoading(false)\r\n      });\r\n    }\r\n\r\n    if (!recievedUrl) {\r\n      !this.tableContent\r\n        ? this.setScrollEvents()\r\n        : (this.tableContent.scrollTop = 0);\r\n    }\r\n  }\r\n\r\n  setScrollEvents() {\r\n    this.tableContent = document.querySelector(\".ant-table-body\");\r\n    this.tableContent.addEventListener(\"scroll\", this.getMoreData);\r\n  }\r\n\r\n  getMoreData(event) {\r\n    const { next, count, results = [] } = this.props;\r\n    let maxScroll = event.target.scrollHeight - event.target.clientHeight;\r\n    let currentScroll = event.target.scrollTop;\r\n    if (Math.ceil(currentScroll) >= maxScroll - 20) {\r\n      if (next && results.length < count) {\r\n        this.fetchTableData(next.replace(\"/GISBusinessAPI\", \"\"));\r\n        this.tableContent.scrollTop = this.tableContent.scrollTop - 50;\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { removeData } = this.props;\r\n    removeData();\r\n    this.tableContent\r\n      ? this.tableContent.removeEventListener(\"scroll\", this.getMoreData)\r\n      : null;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (!isEqual(prevProps.results, this.props.results)) {\r\n      this.fetchTableData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { results = [] } = this.props;\r\n    const { columns } = this.state;\r\n    const { tableHeight } = this;\r\n\r\n    return (\r\n      <div>\r\n        <Table\r\n          bordered\r\n          rowKey={\"id\"}\r\n          dataSource={results}\r\n          columns={columns}\r\n          scroll={{ y: tableHeight }}\r\n          pagination={false}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(withTranslation(\"labels\")(tableComponent))\r\n);\r\n","import { get } from 'lodash';\r\n\r\nexport const mapStateToProps = ({ mainApp :{inputTable={}} }) => ({\r\n    ...inputTable\r\n})\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fillData:(data) => {\r\n            dispatch({\r\n                type:'setMainApp',\r\n                path: `inputTable`,\r\n                data\r\n            })\r\n        },\r\n        removeData:() => {\r\n            dispatch({\r\n                type:'removeMainApp',\r\n                path:'inputTable'\r\n            })\r\n        },\r\n        removeItemInResults:(index) => {\r\n            dispatch({\r\n                type: 'removeMainApp',\r\n                path: `inputTable.results`,\r\n                index\r\n            })\r\n        }\r\n    }\r\n}","import {workFlowUrl} from 'configFiles/config'\r\nimport axios from 'axios'\r\n\r\nexport function deleteFunc({id}, index, action) {\r\n    const {removeItemInResults, t} = this.props\r\n    const {url} = action\r\n    const deleteUrl = `${url}${id}`\r\n\r\n    axios.delete(workFlowUrl+ deleteUrl)\r\n        .then(()=>{\r\n            window.notifySystem('success', t('Succesfully deleted'))\r\n            removeItemInResults(index)\r\n        }).catch(() => {\r\n            window.notifySystem('error', t('Failed to delete'))\r\n        })\r\n\r\n\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAGA;AACA;AAIA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAMA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AAEA;;;;;;;;;;;;AC9KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;;;;A","sourceRoot":""}
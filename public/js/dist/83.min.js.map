{"version":3,"file":"83.min.js","sources":["webpack:///./src/app/components/inputs/fields/property_removal_compensationShake.js","webpack:///./src/app/components/inputs/mapping.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { workFlowUrl } from \"config\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport renderField from \"app/components/inputs\";\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  addParcelNo,\r\n  getPacrelNoAngle,\r\n  drawLength,\r\n  convertToEnglish,\r\n  map_object,\r\n  delete_null_object,\r\n  checkParcelAdjacents,\r\n  convertToArabic,\r\n  uploadGISFile,\r\n} from \"./identify/Component/common/common_func\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport store from \"reducers\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport {\r\n  Select,\r\n  Button,\r\n  Form,\r\n  message,\r\n  Tooltip,\r\n  Divider,\r\n  Collapse,\r\n} from \"antd\";\r\n// import \"antd/dist/antd.css\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchData } from \"../../../helpers/apiMethods\";\r\nimport { fetchAllData } from \"../../../helpers/functions\";\r\nimport { serverFieldMapper } from \"app/helpers/functions\";\r\nimport { map } from \"lodash\";\r\nconst { Option } = Select;\r\nconst Panel = Collapse.Panel;\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"lands\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\n\r\nclass propertyRemoval_compensationShakeComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.lists = [\r\n      [\r\n        {\r\n          name: \"MUNICIPALITY_NAME\",\r\n          hideLabel: true,\r\n          visible: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          placeholder: \"البلدية\",\r\n          colSpan: null,\r\n        },\r\n        {\r\n          name: \"PLAN_NO\",\r\n          hideLabel: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          visible: true,\r\n          placeholder: \"رقم المخطط\",\r\n          colSpan: null,\r\n        },\r\n        {\r\n          name: \"PARCEL_PLAN_NO\",\r\n          hideLabel: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          visible: true,\r\n          placeholder: \"رقم قطعة الأرض\",\r\n          colSpan: null,\r\n        },\r\n        {\r\n          name: \"DISTRICT_NAME\",\r\n          hideLabel: true,\r\n          editable: (!this.props.isView && true) || false,\r\n          field: \"text\",\r\n          visible: false,\r\n          placeholder: \"الحي\",\r\n          colSpan: null,\r\n        },\r\n        {\r\n          name: \"SUBDIVISION_TYPE\",\r\n          hideLabel: true,\r\n          editable: false,\r\n          field: \"select\",\r\n          visible: false,\r\n          placeholder: \"نوع التقسيم\",\r\n          colSpan: null,\r\n        },\r\n        {\r\n          name: \"SUBDIVISION_DESCRIPTION\",\r\n          hideLabel: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          visible: false,\r\n          placeholder: \"وصف التقسيم\",\r\n          colSpan: null,\r\n        },\r\n      ],\r\n      [\r\n        {\r\n          name: \"PARCEL_AREA\",\r\n          hideLabel: true,\r\n          visible: true,\r\n          editable: false,\r\n          field: \"text\",\r\n          placeholder: \"المساحة (م٢)\",\r\n          colSpan: \"1\",\r\n        },\r\n        {\r\n          name: \"COMPENSATION_ATTACHMENT\",\r\n          hideLabel: true,\r\n          editable: true,\r\n          field: \"simpleUploader\",\r\n          uploadUrl: `${host}/uploadMultifiles`,\r\n          fileType: \"image/*,.pdf\",\r\n          multiple: true,\r\n          visible: true,\r\n          placeholder: \"مرفق خطاب الصرف\",\r\n          colSpan: \"1\",\r\n          disabled: this.props.disabled\r\n        },\r\n        {\r\n          name: \"CHEQUE_ATTACHMENT\",\r\n          hideLabel: true,\r\n          editable: true,\r\n          field: \"simpleUploader\",\r\n          uploadUrl: `${host}/uploadMultifiles`,\r\n          fileType: \"image/*,.pdf\",\r\n          multiple: true,\r\n          visible: true,\r\n          placeholder: \"مرفق شيك الصرف\",\r\n          colSpan: \"1\",\r\n          disabled: this.props.disabled\r\n        },\r\n      ],\r\n    ];\r\n\r\n    this.lists.forEach((list) => {\r\n      list = map(list, (value, key) => ({\r\n        name: key,\r\n        ...serverFieldMapper(value),\r\n      }));\r\n    });\r\n\r\n    map_object(\r\n      props?.input?.value?.selectedLands ||\r\n        props?.mainObject.landData.landData.lands?.parcels ||\r\n        []\r\n    );\r\n    this.state = {\r\n      selectedLands:\r\n        props?.input?.value?.selectedLands ||\r\n        props?.mainObject.landData.landData.lands?.parcels ||\r\n        [],\r\n    };\r\n\r\n    this.isloaded = true;\r\n  }\r\n\r\n  setToStore = (polygon) => {\r\n    const {\r\n      input: { value },\r\n    } = this.props;\r\n\r\n    let landIndex = this.state.selectedLands.find(\r\n      (r) =>\r\n        r.attributes.PARCEL_SPATIAL_ID ==\r\n          polygon.attributes.PARCEL_SPATIAL_ID &&\r\n        r.attributes.PARCEL_PLAN_NO == polygon.attributes.PARCEL_PLAN_NO\r\n    );\r\n    if (polygon && landIndex == -1) {\r\n      polygon.attributes.PARCEL_AREA = (+polygon.attributes\r\n        .PARCEL_AREA).toFixed(2);\r\n\r\n      this.state.selectedLands.push({\r\n        geometry: polygon.geometry,\r\n        attributes: polygon.attributes,\r\n      });\r\n    } else {\r\n      this.state.selectedLands[landIndex] = polygon;\r\n    }\r\n    this.setState({ selectedLands: this.state.selectedLands });\r\n    this.props.input.onChange({ selectedLands: this.state.selectedLands });\r\n  };\r\n\r\n  enableEdit = (name, i) => {\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  showEditBtn = (name, value, attributes) => {\r\n    let editables = [\"COMPENSATION_ATTACHMENT\", \"CHEQUE_ATTACHMENT\"];\r\n\r\n    return editables.indexOf(name) > -1;\r\n  };\r\n\r\n  myChangeHandler = (url, name, i, e) => {\r\n    // this[\"edit_\" + name + i] =\r\n    //   (typeof event != \"object\" && event) || event.target.value;\r\n    debugger;\r\n    if (e.attributes) {\r\n      e.attributes[name] = url;\r\n    } else {\r\n      e[name] = url;\r\n    }\r\n    //e.attributes['PARCEL_AREA'] = event.target.value;\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  selectOnchange = (name, i, e, value) => {\r\n    // this[\"edit_\" + name + i] = value;\r\n    e.attributes[name] = value;\r\n    //e.attributes['PARCEL_AREA'] = event.target.value;\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  saveEdit(id, name, i) {\r\n    let selectLand = this.state.selectedLands.find((p) => {\r\n      return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n    });\r\n    // selectLand.attributes[\"TOTAL_PARCEL_CUT_PRICE\"] =\r\n    //   (selectLand.attributes[\"PARCEL_METER_PRICE\"] &&\r\n    //     (\r\n    //       +selectLand.attributes[\"PARCEL_METER_PRICE\"] *\r\n    //       +selectLand.attributes[\"PARCEL_CUT_AREA\"]\r\n    //     ).toFixed(2)) ||\r\n    //   \"\";\r\n\r\n    // let pricing_table_totals = [\r\n    //   {\r\n    //     total_of_totals_of_cut_areas: this.state.selectedLands\r\n    //       .reduce((a, b) => a + +(b.attributes.PARCEL_CUT_AREA || 0), 0)\r\n    //       .toFixed(2),\r\n    //     total_of_totals_of_cut_prices: this.state.selectedLands\r\n    //       .reduce((a, b) => a + +(b.attributes.TOTAL_PARCEL_CUT_PRICE || 0), 0)\r\n    //       .toFixed(2),\r\n    //   },\r\n    // ];\r\n\r\n    // this.props.change(\r\n    //   \"primary_pricing.pricing_table_totals\",\r\n    //   pricing_table_totals\r\n    // );\r\n    this.setState(\r\n      {\r\n        [name + \"_isEdit_\" + i]: false,\r\n      },\r\n      () => {\r\n        this.setToStore(selectLand);\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { selectedLands } = this.state;\r\n    return (\r\n      <div>\r\n        {\r\n          <div style={{ gridColumn: \"1/3\" }}>\r\n            {selectedLands && selectedLands.length > 0 && (\r\n              <div>\r\n                <div>\r\n                  <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n                  <Collapse\r\n                    className=\"Collapse\"\r\n                    defaultActiveKey={[...selectedLands.map((e, i) => i)]}\r\n                  >\r\n                    {selectedLands.map((e, i) => {\r\n                      return (\r\n                        <Panel\r\n                          header={convertToArabic(\r\n                            `قطعة الأرض رقم  ${e.attributes.PARCEL_PLAN_NO}`\r\n                          )}\r\n                          forceRender={true}\r\n                          style={{ margin: \"5px\" }}\r\n                          key={i}\r\n                        >\r\n                          <table\r\n                            className=\"table table-bordered\"\r\n                            style={{ marginTop: \"1%\" }}\r\n                          >\r\n                            <tbody>\r\n                              {this.lists.map((list, listIndex) => (\r\n                                <tr key={i}>\r\n                                  {list.map((field, k) => {\r\n                                    return (\r\n                                      field.visible &&\r\n                                      ((\r\n                                        <>\r\n                                          <th\r\n                                            style={{\r\n                                              width:\r\n                                                (listIndex == 0 && \"10%\") || \"\",\r\n                                            }}\r\n                                          >\r\n                                            {field.placeholder}\r\n                                          </th>\r\n                                          <td\r\n                                            key={k}\r\n                                            colSpan={field.colSpan}\r\n                                            style={{\r\n                                              width:\r\n                                                (listIndex == 0 && \"10%\") || \"\",\r\n                                            }}\r\n                                          >\r\n                                            <div>\r\n                                              {field.editable ? (\r\n                                                // !this.state[\r\n                                                //   field.name + \"_isEdit_\" + i\r\n                                                // ] ? (\r\n                                                //   <span>\r\n                                                //     <span>\r\n                                                //       {<Field\r\n                                                //         init_data={(props) => {\r\n                                                //           props.input.onChange(\r\n                                                //             e.attributes[\r\n                                                //               field.name\r\n                                                //             ]\r\n                                                //           );\r\n                                                //         }}\r\n                                                //         name={`${field.name}${i}`}\r\n                                                //         component={renderField}\r\n                                                //         className=\"form-control\"\r\n                                                //         {...{ field }}\r\n                                                //         field={\r\n                                                //           field.type ||\r\n                                                //           field.field\r\n                                                //         }\r\n                                                //         uploadUrl={\r\n                                                //           field.uploadUrl\r\n                                                //         }\r\n                                                //         fileType={\r\n                                                //           field.fileType\r\n                                                //         }\r\n                                                //         label={\r\n                                                //           field.placeholder\r\n                                                //         }\r\n                                                //         hideLabel={true}\r\n                                                //         value={\r\n                                                //           e.attributes[\r\n                                                //             field.name\r\n                                                //           ]\r\n                                                //         }\r\n                                                //         disabled={true}\r\n                                                //       />}\r\n                                                //     </span>\r\n                                                //     {!this.props?.field\r\n                                                //       ?.isReadOnly &&\r\n                                                //       this.showEditBtn(\r\n                                                //         field.name,\r\n                                                //         e.attributes[\r\n                                                //           field.name\r\n                                                //         ],\r\n                                                //         e.attributes\r\n                                                //       ) && (\r\n                                                //         <span>\r\n                                                //           <button\r\n                                                //             className=\"btn\"\r\n                                                //             style={{\r\n                                                //               marginRight: e\r\n                                                //                 .attributes[\r\n                                                //                 field.name\r\n                                                //               ]\r\n                                                //                 ? \"20px\"\r\n                                                //                 : \"0px\",\r\n                                                //             }}\r\n                                                //             onClick={this.enableEdit.bind(\r\n                                                //               this,\r\n                                                //               field.name,\r\n                                                //               i\r\n                                                //             )}\r\n                                                //           >\r\n                                                //             <i className=\"fas fa-edit\"></i>\r\n                                                //           </button>\r\n                                                //         </span>\r\n                                                //       )}\r\n                                                //   </span>\r\n                                                // ) : (\r\n                                                //   <span\r\n                                                //     style={{\r\n                                                //       display: \"grid\",\r\n                                                //       gridTemplateColumns:\r\n                                                //         \"1fr auto\",\r\n                                                //     }}\r\n                                                //   >\r\n                                                //     {field.field !=\r\n                                                //       \"select\" && (\r\n                                                //       <Field\r\n                                                //         init_data={(props) => {\r\n                                                //           props.input.onChange(\r\n                                                //             e.attributes[\r\n                                                //               field.name\r\n                                                //             ]\r\n                                                //           );\r\n                                                //         }}\r\n                                                //         name={`${field.name}${i}`}\r\n                                                //         component={renderField}\r\n                                                //         className=\"form-control\"\r\n                                                //         {...{ field }}\r\n                                                //         field={\r\n                                                //           field.type ||\r\n                                                //           field.field\r\n                                                //         }\r\n                                                //         uploadUrl={\r\n                                                //           field.uploadUrl\r\n                                                //         }\r\n                                                //         fileType={\r\n                                                //           field.fileType\r\n                                                //         }\r\n                                                //         label={\r\n                                                //           field.placeholder\r\n                                                //         }\r\n                                                //         hideLabel={true}\r\n                                                //         value={\r\n                                                //           e.attributes[\r\n                                                //             field.name\r\n                                                //           ]\r\n                                                //         }\r\n                                                //         postRequest={(url) => {\r\n                                                //           debugger;\r\n                                                //           this.myChangeHandler(\r\n                                                //             url,\r\n                                                //             field.name,\r\n                                                //             i,\r\n                                                //             e\r\n                                                //           );\r\n                                                //           this.saveEdit(\r\n                                                //             e.attributes\r\n                                                //               .PARCEL_SPATIAL_ID,\r\n                                                //             field.name,\r\n                                                //             i\r\n                                                //           )\r\n                                                //         }}\r\n                                                //       />\r\n                                                //     )}\r\n                                                //     {field.field ==\r\n                                                //       \"select\" && (\r\n                                                //       <Select\r\n                                                //         value={\r\n                                                //           e.attributes[\r\n                                                //             field.name\r\n                                                //           ]\r\n                                                //         }\r\n                                                //         onChange={this.selectOnchange.bind(\r\n                                                //           this,\r\n                                                //           field.name,\r\n                                                //           i,\r\n                                                //           e\r\n                                                //         )}\r\n                                                //         optionFilterProp=\"children\"\r\n                                                //         filterOption={(\r\n                                                //           input,\r\n                                                //           option\r\n                                                //         ) =>\r\n                                                //           convertToEnglish(\r\n                                                //             option.props\r\n                                                //               .children\r\n                                                //           )\r\n                                                //             ?.toLowerCase()\r\n                                                //             ?.indexOf(\r\n                                                //               input.toLowerCase()\r\n                                                //             ) >= 0\r\n                                                //         }\r\n                                                //       >\r\n                                                //         {field?.options?.map(\r\n                                                //           (e, i) => (\r\n                                                //             <Option\r\n                                                //               key={i}\r\n                                                //               value={e.name}\r\n                                                //             >\r\n                                                //               {convertToArabic(\r\n                                                //                 e.name\r\n                                                //               )}\r\n                                                //             </Option>\r\n                                                //           )\r\n                                                //         )}\r\n                                                //       </Select>\r\n                                                //     )}\r\n                                                //     <button\r\n                                                //       className=\"btn\"\r\n                                                //       style={{\r\n                                                //         marginRight: \"20px\",\r\n                                                //       }}\r\n                                                //       onClick={this.saveEdit.bind(\r\n                                                //         this,\r\n                                                //         e.attributes\r\n                                                //           .PARCEL_SPATIAL_ID,\r\n                                                //         field.name,\r\n                                                //         i\r\n                                                //       )}\r\n                                                //     >\r\n                                                //       <i className=\"fa fa-floppy-o\"></i>\r\n                                                //     </button>\r\n                                                //   </span>\r\n                                                // )\r\n                                                <Field\r\n                                                  init={(props) => {\r\n                                                    props.input.onChange(\r\n                                                      e.attributes[field.name]\r\n                                                    );\r\n                                                  }}\r\n                                                  name={`${field.name}${i}`}\r\n                                                  component={renderField}\r\n                                                  className=\"form-control\"\r\n                                                  {...{ field }}\r\n                                                  field={\r\n                                                    field.type || field.field\r\n                                                  }\r\n                                                  uploadUrl={field.uploadUrl}\r\n                                                  fileType={field.fileType}\r\n                                                  label={field.placeholder}\r\n                                                  hideLabel={true}\r\n                                                  value={\r\n                                                    e.attributes[field.name]\r\n                                                  }\r\n                                                  postRequest={(url) => {\r\n                                                    debugger;\r\n                                                    this.myChangeHandler(\r\n                                                      url,\r\n                                                      field.name,\r\n                                                      i,\r\n                                                      e\r\n                                                    );\r\n                                                    this.saveEdit(\r\n                                                      e.attributes\r\n                                                        .PARCEL_SPATIAL_ID,\r\n                                                      field.name,\r\n                                                      i\r\n                                                    );\r\n                                                  }}\r\n                                                />\r\n                                              ) : (\r\n                                                <span>\r\n                                                  <span>\r\n                                                    {convertToArabic(\r\n                                                      e.attributes[\r\n                                                        field.name\r\n                                                      ] || \"غير متوفر\"\r\n                                                    )}\r\n                                                  </span>\r\n                                                </span>\r\n                                              )}\r\n                                            </div>\r\n                                          </td>\r\n                                        </>\r\n                                      ) || <td></td>)\r\n                                    );\r\n                                  })}\r\n                                </tr>\r\n                              ))}\r\n                            </tbody>\r\n                          </table>\r\n                        </Panel>\r\n                      );\r\n                    })}\r\n                  </Collapse>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(withTranslation(\"labels\")(propertyRemoval_compensationShakeComponent));\r\n","import { get } from \"lodash\";\r\nimport { formValueSelector } from \"redux-form\";\r\nimport { copyUser } from \"./fields/identify/Component/common/common_func\";\r\nexport const mapStateToProps = (\r\n  {\r\n    wizard: {\r\n      currentStep,\r\n      wizardSettings,\r\n      steps,\r\n      mainObject,\r\n      comments,\r\n      currentModule,\r\n    },\r\n    selectors = {},\r\n    mainApp,\r\n    user,\r\n    mapViewer,\r\n    ...state\r\n  },\r\n  { moduleName, path, value_key, ...props }\r\n) => {\r\n  return {\r\n    data: props.data || get(state, path),\r\n    lang: mainApp.language,\r\n    selectors,\r\n    apps: mainApp.apps,\r\n    info: get(mapViewer, \"info.info\", {}),\r\n    ...(selectors[moduleName] || {}),\r\n    value_key: get(selectors[moduleName], \"value_key\", value_key),\r\n    currentStep,\r\n    steps,\r\n    mainObject,\r\n    currentModule,\r\n    user: get(user, \"user\", {}),\r\n    comments,\r\n    wizardSettings,\r\n    //allNotes,\r\n    mainApp,\r\n    record: get(currentModule, \"record\") || [],\r\n  };\r\n};\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n  return {\r\n    getValues(name = \"stepForm\") {\r\n      return formValueSelector(\"name\");\r\n    },\r\n    setSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}`,\r\n        data,\r\n      });\r\n    },\r\n    setValueLabelKeys: (label_key, value_key) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.label_key`,\r\n        data: label_key,\r\n      });\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.value_key`,\r\n        data: value_key,\r\n      });\r\n    },\r\n    setData: (data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.data`,\r\n        data,\r\n      });\r\n    },\r\n    addToData: (data, index, operation) => {\r\n      dispatch({\r\n        type: \"insertInArraySelectors\",\r\n        path: `${moduleName}.data`,\r\n        operation,\r\n        index,\r\n        data,\r\n      });\r\n    },\r\n    setNextUrl: (nextUrl) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.links.nextLink`,\r\n        data: nextUrl,\r\n      });\r\n    },\r\n    addNewSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: moduleName,\r\n        data,\r\n      });\r\n    },\r\n    removeSelector: (moduleName) => {\r\n      dispatch({\r\n        type: \"removeSelectors\",\r\n        path: moduleName,\r\n      });\r\n    },\r\n    setCurrentModule: (data) => {\r\n      dispatch({\r\n        type: \"setWizard\",\r\n        path: \"currentModule\",\r\n        data,\r\n      });\r\n    },\r\n    removeMainObject: () => {\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"mainObject\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"currentStep\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"comments\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"allNotes\",\r\n      });\r\n    },\r\n    setMainObject: (data, step, user) => {\r\n      dispatch({\r\n        type: \"setWizard\",\r\n        path: `mainObject.${step}`,\r\n        data,\r\n      });\r\n\r\n      if (user) {\r\n        // user = { ...user, currentDate: moment().format(\"iYYYY/iM/iD\") };\r\n\r\n        dispatch({\r\n          type: \"setWizard\",\r\n          path: `mainObject.${step}.user`,\r\n          data: copyUser({ user }),\r\n        });\r\n      }\r\n    },\r\n  };\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAyHA;AACA;AAAA;AAAA;AACA;AAEA;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AA5KA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAIA;AAEA;AACA;AA0DA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AACA;AAAA;AAGA;AAEA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAKA;AACA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAMA;AAMA;AAAA;AAkBA;AAOA;AASA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChksourceRoot":""}
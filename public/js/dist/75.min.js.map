{"version":3,"file":"75.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/serviceIdentifyComponnent/Helpers.js","webpack:///./src/app/components/inputs/fields/identify/Component/serviceIdentifyComponnent/index.js"],"sourcesContent":["\r\nimport { loadModules } from 'esri-loader';\r\nimport{mapUrl}from\"../mapviewer/config/map\"\r\n\r\nconst options = {\r\n    url: 'https://js.arcgis.com/3.13'\r\n};\r\n\r\nexport const selectDis=(e)=>{\r\nvar a=[];\r\n\r\ne.forEach(el => {\r\n    el.features.forEach(element=>{\r\n        if(!a.find((t=>t.attributes.PARCEL_SPATIAL_ID==element.attributes.PARCEL_SPATIAL_ID))){\r\n            a.push(element)\r\n        }\r\n    })\r\n});\r\nreturn a;\r\n}\r\n\r\nexport const DataQuery=(layerNum,QueryOptions,CallBack)=>{\r\n    loadModules([\"esri/symbols/SimpleLineSymbol\",\"esri/Color\",\"esri/layers/FeatureLayer\",\"esri/tasks/RelationshipQuery\",\"esri/tasks/QueryTask\",\"esri/tasks/query\",\"esri/request\",\"esri/geometry/Polygon\",\"esri/symbols/SimpleFillSymbol\",\"esri/graphic\"], options)\r\n    .then(([SimpleLineSymbol,Color,FeatureLayer,RQuery,QueryTask,Query,request,Polygon,SimpleFillSymbol,Graphic]) => {\r\n\r\n     var query = new Query()\r\n     var qt = new QueryTask(mapUrl+`/${layerNum}`)\r\n    QueryOptions.forEach(e=>{\r\n        query[e.name]=e.value\r\n    })\r\n     qt.execute(query,CallBack,(res)=>{console.log(res)})\r\n    })\r\n}\r\nexport const queryOption=(where,geo,outfields)=>{\r\n       return [{name:\"where\",value:where},\r\n       {name:\"returnGeometry\",value:geo},\r\n       {name:\"outFields\",value:outfields}\r\n      ]\r\n}\r\nexport const querySetting=(num,where,geo,outfields, url)=>{\r\n    \r\n    \r\n    return {\r\n        url:(url || mapUrl)+\"/\"+num,\r\n        where,\r\n        returnGeometry:geo,\r\n        outFields:outfields\r\n}\r\n\r\n}\r\nexport const DataReqest=(url,callBack)=>{\r\n    loadModules([\"esri/request\"], options)\r\n    .then(([request]) => {\r\n        request({\r\n            url: url,\r\n            content: {f:\"json\"},\r\n            handleAs: \"json\",\r\n            callbackParamName:\"callback\"\r\n        }).then(callBack);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport { esriRequest } from \"../common/esri_request\";\r\nimport { toArabicWord } from \"number-to-arabic-words/dist/index-node.js\";\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  addParcelNo,\r\n  convertToEnglish,\r\n  localizeNumber,\r\n  convertToArabic,\r\n  resetMapData,\r\n  reformatNumLetters,\r\n} from \"../common/common_func\";\r\nimport {\r\n  getParcels,\r\n  onBlockChange,\r\n  onLandParcelChange,\r\n  onMunChange,\r\n  onPlaneChange,\r\n  onSearch,\r\n  onSubNameChange,\r\n  onSubTypeChange,\r\n} from \"../common/filters_objects\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faMapPin,\r\n  faSearchPlus,\r\n  faTrash,\r\n  faArrowsAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport applyFilters from \"main_helpers/functions/filters\";\r\nimport { geometryServiceUrl, mapUrl } from \"../mapviewer/config/map\";\r\nimport {\r\n  Select,\r\n  Button,\r\n  Form,\r\n  message,\r\n  InputNumber,\r\n  Tooltip,\r\n  Icon,\r\n  Divider,\r\n} from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nvar uniqid = require(\"uniqid\");\r\nimport { StickyContainer, Sticky } from \"react-sticky\";\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n  isEmpty,\r\n} from \"lodash\";\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport axios from \"axios\";\r\nimport { fetchData } from \"app/helpers/apiMethods\";\r\nimport { handleErrorMessages } from \"app/helpers/errors\";\r\nconst { Option } = Select;\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"serviceLands\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\nclass ServiceIdentifyComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.isLoaded = true;\r\n    this.PlanNum = [];\r\n    this.planId = null;\r\n    this.parcelTs = [];\r\n    this.selectedLandsT = [];\r\n    this.selectedLands = [];\r\n    this.selectionMode = false;\r\n    this.parcel_fields = [\r\n      \"PARCEL_PLAN_NO\",\r\n      \"PARCEL_AREA\",\r\n      \"PARCEL_AREA_TEXT\",\r\n      \"PARCEL_BLOCK_NO\",\r\n      \"DISTRICT_NAME\",\r\n      \"SUBDIVISION_TYPE\",\r\n      \"SUBDIVISION_DESCRIPTION\",\r\n      \"PARCEL_MAIN_LUSE\",\r\n      \"USING_SYMBOL\",\r\n      \"DETAILED_LANDUSE\",\r\n      \"SRVC_SUBTYPE\",\r\n    ];\r\n    this.parcelData = {\r\n      label: \"حدود الموقع حسب الصك\",\r\n      className: \"parcelInfo\",\r\n      type: \"inputs\",\r\n      required: true,\r\n      fields: {\r\n        north_length: {\r\n          label: \"طول الحد الشمالي\",\r\n          value: 0,\r\n          required: true,\r\n          field: \"inputNumber\",\r\n          onClick: (props, val) => {\r\n            debugger;\r\n            props.change(\r\n              \"north_length_text\",\r\n              reformatNumLetters(toArabicWord(val), \"متر\")\r\n            );\r\n          },\r\n        },\r\n        north_length_text: {\r\n          label: \"طول الحد الشمالي بالأحرف\",\r\n          value: 0,\r\n          required: true,\r\n          disabled: true,\r\n        },\r\n        north_desc: {\r\n          label: \"وصف الحد الشمالي\",\r\n          value: \"\",\r\n          required: true,\r\n        },\r\n        south_length: {\r\n          label: \"طول الحد الجنوبي\",\r\n          value: 0,\r\n          required: true,\r\n          field: \"inputNumber\",\r\n          onClick: (props, val) => {\r\n            debugger;\r\n            props.change(\r\n              \"south_length_text\",\r\n              reformatNumLetters(toArabicWord(val), \"متر\")\r\n            );\r\n          },\r\n        },\r\n        south_length_text: {\r\n          label: \"طول الحد الجنوبي بالأحرف\",\r\n          value: 0,\r\n          required: true,\r\n          disabled: true,\r\n        },\r\n        south_desc: {\r\n          label: \"وصف الحد الجنوبي\",\r\n          value: \"\",\r\n          required: true,\r\n        },\r\n        east_length: {\r\n          label: \"طول الحد الشرقي\",\r\n          value: 0,\r\n          required: true,\r\n          field: \"inputNumber\",\r\n          onClick: (props, val) => {\r\n            debugger;\r\n            props.change(\r\n              \"east_length_text\",\r\n              reformatNumLetters(toArabicWord(val), \"متر\")\r\n            );\r\n          },\r\n        },\r\n        east_length_text: {\r\n          label: \"طول الحد الشرقي بالأحرف\",\r\n          value: 0,\r\n          required: true,\r\n          disabled: true,\r\n        },\r\n        east_desc: {\r\n          label: \"وصف الحد الشرقي\",\r\n          value: \"\",\r\n          required: true,\r\n        },\r\n        west_length: {\r\n          label: \"طول الحد الغربي\",\r\n          value: 0,\r\n          required: true,\r\n          field: \"inputNumber\",\r\n          onClick: (props, val) => {\r\n            debugger;\r\n            props.change(\r\n              \"west_length_text\",\r\n              reformatNumLetters(toArabicWord(val), \"متر\")\r\n            );\r\n          },\r\n        },\r\n        west_length_text: {\r\n          label: \"طول الحد الغربي بالأحرف\",\r\n          value: 0,\r\n          required: true,\r\n          disabled: true,\r\n        },\r\n        west_desc: {\r\n          label: \"وصف الحد الغربي\",\r\n          value: \"\",\r\n          required: true,\r\n        },\r\n      },\r\n    };\r\n\r\n    this.parcelShatfa = {\r\n      label: \"الشطفات\",\r\n      fields: {\r\n        SHATFA_NORTH_EAST_DIRECTION: {\r\n          label: \"مساحة الشطفة في إتجاة (شمال / شرق) \",\r\n          placeholder: \" من فضلك ادخل مساحة الشطفة في إتجاة (شمال / شرق) \",\r\n          field: \"inputNumber\",\r\n          name: \"SHATFA_NORTH_EAST_DIRECTION\",\r\n          required: false,\r\n        },\r\n        SHATFA_NORTH_WEST_DIRECTION: {\r\n          label: \"مساحة الشطفة في إتجاة (شمال / غرب) \",\r\n          placeholder: \"من فضلك ادخل مساحة الشطفة في إتجاة (شمال / غرب)\",\r\n          field: \"inputNumber\",\r\n          name: \"SHATFA_NORTH_WEST_DIRECTION\",\r\n          required: false,\r\n        },\r\n        SHATFA_SOUTH_EAST_DIRECTION: {\r\n          label: \"مساحة الشطفة في إتجاة (جنوب / شرق) \",\r\n          placeholder: \"من فضلك ادخل مساحة الشطفة في إتجاة (جنوب / شرق)\",\r\n          field: \"inputNumber\",\r\n          name: \"SHATFA_SOUTH_EAST_DIRECTION\",\r\n          required: false,\r\n        },\r\n        SHATFA_SOUTH_WEST_DIRECTION: {\r\n          label: \"مساحة الشطفة في إتجاة (جنوب / غرب) \",\r\n          placeholder: \"من فضلك ادخل مساحة الشطفة في إتجاة (جنوب / غرب)\",\r\n          field: \"inputNumber\",\r\n          name: \"SHATFA_SOUTH_WEST_DIRECTION\",\r\n          required: false,\r\n        },\r\n      },\r\n    };\r\n\r\n    this.parcelElectric = {\r\n      label: \"مساحة غرفة الكهرباء\",\r\n      // fields: {\r\n      //   electric_room_area: {\r\n      //     label: \"مساحة غرفة الكهرباء\",\r\n      //     placeholder: \"من فضلك ادخل مساحة غرفة الكهرباء\",\r\n      //     field: \"inputNumber\",\r\n      //     name: \"electric_room_area\",\r\n      //     required: false,\r\n      //   },\r\n      //   electric_room_place: {\r\n      //     label: \"مكان غرفة الكهرباء\",\r\n      //     placeholder: \"من فضلك ادخل مكان غرفة الكهرباء\",\r\n      //     field: \"select\",\r\n      //     init: (props) => {\r\n      //       props.setData([\r\n      //         { label: \"(شمال / شرق)\", value: \"(شمال / شرق)\" },\r\n      //         { label: \"(شمال / غرب)\", value: \"(شمال / غرب)\" },\r\n      //         { label: \"(جنوب / شرق)\", value: \"(جنوب / شرق)\" },\r\n      //         { label: \"(جنوب / غرب)\", value: \"(جنوب / غرب)\" },\r\n      //       ])\r\n      //     },\r\n      //     name: \"electric_room_place\",\r\n      //     required: false,\r\n      //     label_key: \"label\",\r\n      //     value_key: \"value\",\r\n      //   },\r\n      // },\r\n      fields: {\r\n        ELEC_NORTH_EAST_DIRECTION: {\r\n          label: \"مساحة غرفة الكهرباء في إتجاة (شمال / شرق) \",\r\n          placeholder:\r\n            \" من فضلك ادخل مساحة غرفة الكهرباء في إتجاة (شمال / شرق) \",\r\n          field: \"inputNumber\",\r\n          name: \"ELEC_NORTH_EAST_DIRECTION\",\r\n          required: false,\r\n        },\r\n        ELEC_NORTH_WEST_DIRECTION: {\r\n          label: \"مساحة غرفة الكهرباء في إتجاة (شمال / غرب) \",\r\n          placeholder: \"من فضلك ادخل مساحة غرفة الكهرباء في إتجاة (شمال / غرب)\",\r\n          field: \"inputNumber\",\r\n          name: \"ELEC_NORTH_WEST_DIRECTION\",\r\n          required: false,\r\n        },\r\n        ELEC_SOUTH_EAST_DIRECTION: {\r\n          label: \"مساحة غرفة الكهرباء في إتجاة (جنوب / شرق) \",\r\n          placeholder: \"من فضلك ادخل مساحة غرفة الكهرباء في إتجاة (جنوب / شرق)\",\r\n          field: \"inputNumber\",\r\n          name: \"ELEC_SOUTH_EAST_DIRECTION\",\r\n          required: false,\r\n        },\r\n        ELEC_SOUTH_WEST_DIRECTION: {\r\n          label: \"مساحة غرفة الكهرباء في إتجاة (جنوب / غرب) \",\r\n          placeholder: \"من فضلك ادخل مساحة غرفة الكهرباء في إتجاة (جنوب / غرب)\",\r\n          field: \"inputNumber\",\r\n          name: \"ELEC_SOUTH_WEST_DIRECTION\",\r\n          required: false,\r\n        },\r\n      },\r\n    };\r\n\r\n    let serviceParcel;\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n    console.log(values);\r\n    //;\r\n    // if (values.landData?.landData_type == 2) {\r\n    //   //;\r\n    serviceParcel = props.input?.value?.parcels?.find((parcel) => {\r\n      return (\r\n        parcel.munval?.code == props.input.value?.temp?.mun &&\r\n        parcel.planeval?.code == props.input.value?.temp?.planeval &&\r\n        parcel.subNameval?.code == props.input.value?.temp?.subname &&\r\n        parcel.blockval?.code == props.input.value?.temp?.block\r\n      );\r\n    });\r\n    //}\r\n\r\n    props.input?.value?.parcels?.forEach((r) => {\r\n      if (r.selectedLands.length) {\r\n        r.selectedLands.forEach((d) => {\r\n          d.attributes.PARCEL_AREA_TEXT = reformatNumLetters(\r\n            toArabicWord((+d.attributes.PARCEL_AREA).toFixed(2)),\r\n            \"متر مربع\"\r\n          );\r\n        });\r\n      }\r\n    });\r\n\r\n    this.state = {\r\n      whereClause: `USING_SYMBOL = 'خ'`,\r\n      mapLoaded: false,\r\n      munval:\r\n        serviceParcel?.munval?.code ||\r\n        props.input.value?.temp?.mun ||\r\n        undefined,\r\n      planeval:\r\n        serviceParcel?.planeval?.code ||\r\n        props.input.value?.temp?.planeval ||\r\n        undefined,\r\n      plan_no:\r\n        serviceParcel?.planeval?.name ||\r\n        props.input.value?.temp?.plan ||\r\n        undefined,\r\n      subTypeval:\r\n        serviceParcel?.subTypeval?.code ||\r\n        props.input.value?.temp?.subtype ||\r\n        undefined,\r\n      subType_name:\r\n        serviceParcel?.subTypeval?.name ||\r\n        props.input.value?.temp?.subtype ||\r\n        undefined,\r\n      subNameval:\r\n        serviceParcel?.subNameval?.code ||\r\n        props.input.value?.temp?.subname ||\r\n        undefined,\r\n      subName_name:\r\n        serviceParcel?.subNameval?.name ||\r\n        props.input.value?.temp?.subname ||\r\n        undefined,\r\n      blockval:\r\n        serviceParcel?.blockval?.code ||\r\n        props.input.value?.temp?.block ||\r\n        undefined,\r\n      block_no:\r\n        serviceParcel?.blockval?.name ||\r\n        props.input.value?.temp?.block ||\r\n        undefined,\r\n      serviceData: props.input?.value?.parcels || [],\r\n      parcelval: props.input.value?.temp?.parcel || undefined,\r\n      blockNum: serviceParcel?.blockNum || [],\r\n      subDivNames: serviceParcel?.subDivNames || [],\r\n      subDivType: serviceParcel?.subDivType || [],\r\n      parcelNum: serviceParcel?.parcelNum || [],\r\n      MunicipalityNames: [],\r\n      PlanNum: serviceParcel?.PlanNum || [],\r\n      parcelId: null,\r\n      mapExtend: null,\r\n      parcelSearch: null,\r\n      poly: null,\r\n      landsData: {},\r\n      noOfParcels:\r\n        (serviceParcel &&\r\n          serviceParcel.landData_type == 2 &&\r\n          serviceParcel.noOfParcels) ||\r\n        0,\r\n    };\r\n  }\r\n  LayerID = [];\r\n\r\n  convertToArabic(num) {\r\n    if (num) {\r\n      var id = [\"۰\", \"۱\", \"۲\", \"۳\", \"٤\", \"٥\", \"٦\", \"۷\", \"۸\", \"۹\"];\r\n      return num.replace(/[0-9]/g, function (w) {\r\n        return id[+w];\r\n      });\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  replaceAll(str, find, replace) {\r\n    return str.replace(new RegExp(find, \"g\"), replace);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const {\r\n      input,\r\n      mainObject,\r\n      currentModule: { id },\r\n    } = this.props;\r\n    if (input.value.isReset) {\r\n      input.value.isReset = false;\r\n      this.resetFields();\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    const {\r\n      currentModule: { id },\r\n    } = this.props;\r\n    if (window.isAkarApp) {\r\n      console.log(\"window\", window);\r\n      this.parcel_fields = [\r\n        \"PARCEL_PLAN_NO\",\r\n        \"PARCEL_AREA\",\r\n        \"PARCEL_AREA_TEXT\",\r\n        \"PARCEL_BLOCK_NO\",\r\n        \"DISTRICT_NAME\",\r\n        \"SUBDIVISION_TYPE\",\r\n        \"SUBDIVISION_DESCRIPTION\",\r\n        \"USING_SYMBOL\",\r\n        \"DETAILED_LANDUSE\",\r\n        \"SRVC_SUBTYPE\",\r\n      ];\r\n    }\r\n    getInfo().then((res) => {\r\n      this.LayerID = res;\r\n\r\n      getParcels(this, null, \"\", { returnDistinctValues: true }, [\r\n        \"MUNICIPALITY_NAME\",\r\n      ]).then((features) => {\r\n        getFeatureDomainName(features, this.LayerID.Landbase_Parcel).then(\r\n          (features) => {\r\n            debugger;\r\n            let fcs = features\r\n              .filter((r) => r.attributes.MUNICIPALITY_NAME)\r\n              // .reduce((a, b) => {\r\n              //   if (!a.find(r => r.attributes.MUNICIPALITY_NAME_Code == b.attributes.MUNICIPALITY_NAME_Code)) {\r\n              //     a.push(b);\r\n              //   }\r\n              //   return a;\r\n              // }, [])\r\n              .map((r) => {\r\n                return {\r\n                  code: r.attributes.MUNICIPALITY_NAME_Code,\r\n                  name: r.attributes.MUNICIPALITY_NAME,\r\n                  ...r,\r\n                };\r\n              });\r\n            this.setState(\r\n              {\r\n                MunicipalityNames:\r\n                  [2188].indexOf(this.props.currentModule.record.workflow_id) ==\r\n                  -1\r\n                    ? fcs\r\n                    : fcs.filter((codeValue) => {\r\n                        if (\r\n                          this.props.currentModule.record.workflow_id == 2188 &&\r\n                          codeValue?.code == 10506\r\n                        ) {\r\n                          return codeValue;\r\n                        }\r\n                      }),\r\n              },\r\n              () => {\r\n                this.resetFilters();\r\n              }\r\n            );\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  // onMunChange = (e) => {\r\n  //   //\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n  //   let serviceDataItem =\r\n  //     this.state.serviceData?.find(\r\n  //       (item) =>\r\n  //         item.munval?.code == e &&\r\n  //         item.planeval?.code == undefined &&\r\n  //         item.subNameval?.code == undefined &&\r\n  //         item.blockval?.code == undefined\r\n  //     ) || {};\r\n  //   const {\r\n  //     values,\r\n  //     currentModule: { id },\r\n  //   } = this.props;\r\n  //   this.setState({\r\n  //     munval: e,\r\n  //     planeval: undefined,\r\n  //     plan_no: undefined,\r\n  //     subTypeval: undefined,\r\n  //     subType_name: undefined,\r\n  //     subNameval: undefined,\r\n  //     subName_name: undefined,\r\n  //     blockval: undefined,\r\n  //     block_no: undefined,\r\n  //     parcelval: undefined,\r\n  //     PlanNum: [],\r\n  //     blockNum: [],\r\n  //     subDivNames: [],\r\n  //     subDivType: [],\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //     parcelData: this.parcelData,\r\n  //     parcelElectricData: this.parcelElectricData,\r\n  //     parcelShatfaData: this.parcelShatfaData,\r\n  //     plan_no: undefined,\r\n  //     noOfParcels: serviceDataItem?.noOfParcels || 0,\r\n  //   });\r\n  //   this.planId = null;\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Municipality_Boundary,\r\n  //       `MUNICIPALITY_NAME='${e}'`,\r\n  //       true,\r\n  //       [\"MUNICIPALITY_NAME\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //     },\r\n  //   });\r\n  //   this.GetPlansByMunID(e).then(() => {});\r\n  //   this.getServiceParcels(e, null, null, null);\r\n  // };\r\n\r\n  // GetPlansByMunID = (e) => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Plan_Data,\r\n  //         `MUNICIPALITY_NAME='${e}'`,\r\n  //         false,\r\n  //         [\"PLAN_SPATIAL_ID\", \"PLAN_NO\"]\r\n  //       ),\r\n  //       callbackResult: (res) => {\r\n  //         let plans = res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i: uniqid(),\r\n  //           };\r\n  //         });\r\n  //         this.setState({\r\n  //           PlanNum: plans,\r\n  //         });\r\n  //         return resolve(plans);\r\n  //       },\r\n  //     });\r\n  //   });\r\n  // };\r\n\r\n  resetFields = () => {\r\n    resetMapData(this.map);\r\n    onMunChange(this, undefined, () => {});\r\n    this.props.input.onChange({});\r\n    this.setState({ serviceData: [] });\r\n  };\r\n\r\n  getServiceParcels = (munval, planeval, subNameval, blockval) => {\r\n    var plan = this.state.PlanNum.filter(\r\n      (m) => m.i == planeval //|| m?.attributes?.PLAN_NO == planeval\r\n    );\r\n    let whereStr = `PARCEL_MAIN_LUSE IN (20, 30, 40)`;\r\n    if (munval) {\r\n      whereStr +=\r\n        (munval && ` ${whereStr ? \" AND \" : \" \"}MUNICIPALITY_NAME=${munval}`) ||\r\n        \"\";\r\n    }\r\n    if (plan?.[0]?.attributes?.PLAN_SPATIAL_ID) {\r\n      whereStr +=\r\n        (plan &&\r\n          ` ${whereStr ? \" AND \" : \" \"}PLAN_SPATIAL_ID=${\r\n            plan?.[0]?.attributes?.PLAN_SPATIAL_ID\r\n          } AND PARCEL_PLAN_NO IS NOT NULL`) ||\r\n        \"\";\r\n    }\r\n    if (subNameval) {\r\n      whereStr +=\r\n        (subNameval &&\r\n          ` ${whereStr ? \" AND \" : \" \"}SUBDIVISION_SPATIAL_ID=${subNameval}`) ||\r\n        \"\";\r\n    }\r\n    if (blockval) {\r\n      whereStr +=\r\n        (blockval &&\r\n          ` ${whereStr ? \" AND \" : \" \"}BLOCK_SPATIAL_ID=${blockval}`) ||\r\n        \"\";\r\n    }\r\n    this.parcelFilterWhere = whereStr;\r\n    queryTask({\r\n      ...querySetting(this.LayerID.Landbase_Parcel, `${whereStr}`, false, [\r\n        \"*\",\r\n      ]),\r\n      returnGeometry: true,\r\n      callbackResult: (res) => {\r\n        let mun = this.state.MunicipalityNames?.filter(\r\n          (e) => e?.code == munval\r\n        ).map((e) => ({ code: e.code, name: e.name }))[0];\r\n        let plan = this.state.PlanNum.filter((d, i) => d.i == planeval).map(\r\n          (e) => ({\r\n            code: e.i,\r\n            name: e?.attributes?.PLAN_NO,\r\n          })\r\n        )[0];\r\n        let block = this.state.blockNum\r\n          .filter((block) => block?.attributes?.BLOCK_SPATIAL_ID == blockval)\r\n          ?.map((e) => ({\r\n            code: e?.attributes?.BLOCK_SPATIAL_ID,\r\n            name: e?.attributes?.BLOCK_NO,\r\n          }))[0];\r\n        let subName = this.state.subDivNames\r\n          .filter((e, i) => e.attributes.SUBDIVISION_SPATIAL_ID == subNameval)\r\n          .map((e) => ({\r\n            code: e.attributes.SUBDIVISION_SPATIAL_ID,\r\n            name: e.attributes.SUBDIVISION_DESCRIPTION,\r\n          }))[0];\r\n\r\n        let index = this.state.serviceData.findIndex(\r\n          (serviceDataItem) =>\r\n            serviceDataItem.munval?.code == munval &&\r\n            serviceDataItem.planeval?.code == planeval &&\r\n            serviceDataItem.subNameval?.code == subNameval &&\r\n            serviceDataItem.blockval?.code == blockval\r\n        );\r\n\r\n        //;\r\n        if (\r\n          index == -1 &&\r\n          res.features.filter(\r\n            (parcel) => parcel.attributes.PARCEL_PLAN_NO != null\r\n          ).length &&\r\n          this.state.parcelId\r\n        ) {\r\n          this.setState({\r\n            parcelSearch: null,\r\n            parcelNum: res.features.map((e, i) => {\r\n              return {\r\n                ...e,\r\n                i,\r\n              };\r\n            }),\r\n            serviceData: [\r\n              ...this.state.serviceData,\r\n              {\r\n                munval: mun,\r\n                planeval: plan,\r\n                subNameval: subName,\r\n                blockval: block,\r\n                selectedLands: [],\r\n                selectedLandsT: [],\r\n                parcelNum: res.features.map((e, i) => {\r\n                  return {\r\n                    ...e,\r\n                    i,\r\n                  };\r\n                }),\r\n                noOfAvailableServiceParcels: res.features?.length || 0,\r\n              },\r\n            ],\r\n          });\r\n        } else {\r\n          this.setState({\r\n            parcelSearch: null,\r\n            parcelNum: res.features.map((e, i) => {\r\n              return {\r\n                ...e,\r\n                i,\r\n              };\r\n            }),\r\n          });\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n  // onPlaneChange = (f) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n  //   let serviceDataItem =\r\n  //     this.state.serviceData?.find(\r\n  //       (item) =>\r\n  //         item.munval?.code == this.state.munval &&\r\n  //         item.planeval?.code == f &&\r\n  //         item.subNameval?.code == undefined &&\r\n  //         item.blockval?.code == undefined\r\n  //     ) || {};\r\n  //   const {\r\n  //     values,\r\n  //     currentModule: { id },\r\n  //   } = this.props;\r\n\r\n  //   var planSpatialId = this.state.PlanNum.filter((m) => m.i == f)?.[0]\r\n  //     ?.attributes?.PLAN_SPATIAL_ID;\r\n  //   this.setState({\r\n  //     plan_no: this.state.PlanNum.filter((m) => m.i == f)?.[0]?.attributes\r\n  //       ?.PLAN_NO,\r\n  //     planeval: f,\r\n  //     subTypeval: undefined,\r\n  //     subType_name: undefined,\r\n  //     subNameval: undefined,\r\n  //     subName_name: undefined,\r\n  //     blockval: undefined,\r\n  //     block_no: undefined,\r\n  //     parcelval: undefined,\r\n  //     blockNum: [],\r\n  //     subDivNames: [],\r\n  //     subDivType: [],\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //     parcelData: this.parcelData,\r\n  //     parcelElectricData: this.parcelElectricData,\r\n  //     parcelShatfaData: this.parcelShatfaData,\r\n  //     noOfParcels: serviceDataItem?.noOfParcels || 0,\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Plan_Data,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       true,\r\n  //       [\"MUNICIPALITY_NAME\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //       this.planId = planSpatialId;\r\n  //     },\r\n  //   });\r\n  //   this.GetBlocksByPlanID(planSpatialId);\r\n  //   this.getServiceParcels(this.state.munval, f, null, null);\r\n  //   esriRequest(mapUrl + \"/\" + this.LayerID.Subdivision).then((response) => {\r\n  //     this.setState({ subDivType: response.fields[7].domain.codedValues });\r\n  //   });\r\n  // };\r\n\r\n  // GetBlocksByPlanID = (planSpatialId) => {\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Survey_Block,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       false,\r\n  //       [\"*\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       console.log(res.features);\r\n  //       let blocks = [];\r\n  //       res.features.forEach((feature) => {\r\n  //         if (feature.attributes.BLOCK_NO) {\r\n  //           blocks.push(feature);\r\n  //         }\r\n  //       });\r\n  //       this.setState({ blockNum: blocks });\r\n  //     },\r\n  //   });\r\n  // };\r\n  // onSubTypeChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n  //   let serviceDataItem =\r\n  //     this.state.serviceData?.find(\r\n  //       (item) =>\r\n  //         item.munval?.code == this.state.munval &&\r\n  //         item.planeval?.code == this.state.planeval &&\r\n  //         item.subTypeval?.code == e &&\r\n  //         item.blockval?.code == undefined\r\n  //     ) || {};\r\n  //   this.setState({\r\n  //     subType_name: this.state.subDivType.filter((m) => m?.code == e)[0].name,\r\n  //     subTypeval: e,\r\n  //     subNameval: undefined,\r\n  //     subName_name: undefined,\r\n  //     blockval: undefined,\r\n  //     block_no: undefined,\r\n  //     parcelval: undefined,\r\n  //     noOfParcels: serviceDataItem?.noOfParcels || 0,\r\n  //   });\r\n  //   this.getSubNamesBySubType(e);\r\n  // };\r\n\r\n  // getSubNamesBySubType = (e) => {\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Subdivision,\r\n  //       `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${this.planId}`,\r\n  //       false,\r\n  //       [\"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({ subDivNames: res.features });\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  // onSubNameChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n  //   let serviceDataItem =\r\n  //     this.state.serviceData?.find(\r\n  //       (item) =>\r\n  //         item.munval?.code == this.state.munval &&\r\n  //         item.planeval?.code == this.state.planeval &&\r\n  //         item.subNameval?.code == e &&\r\n  //         item.blockval?.code == undefined\r\n  //     ) || {};\r\n\r\n  //   const {\r\n  //     values,\r\n  //     currentModule: { id },\r\n  //   } = this.props;\r\n\r\n  //   this.setState({\r\n  //     subName_name: this.state.subDivNames.filter(\r\n  //       (m) => m.attributes.SUBDIVISION_SPATIAL_ID == e\r\n  //     )?.[0]?.attributes?.SUBDIVISION_DESCRIPTION,\r\n  //     subNameval: e,\r\n  //     blockval: undefined,\r\n  //     block_no: undefined,\r\n  //     parcelval: undefined,\r\n  //     parcelNum: [],\r\n  //     parcelId: null,\r\n  //     noOfParcels: serviceDataItem?.noOfParcels || 0,\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Subdivision,\r\n  //       `SUBDIVISION_SPATIAL_ID=${e}`,\r\n  //       true,\r\n  //       [\"SUBDIVISION_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //     },\r\n  //   });\r\n  //   this.getServiceParcels(this.state.munval, this.state.planeval, e, null);\r\n  // };\r\n\r\n  // onBlockChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n  //   let serviceDataItem =\r\n  //     this.state.serviceData?.find(\r\n  //       (item) =>\r\n  //         item.munval?.code == this.state.munval &&\r\n  //         item.planeval?.code == this.state.planeval &&\r\n  //         item.subNameval?.code == this.state.subNameval &&\r\n  //         item.blockval?.code == e\r\n  //     ) || {};\r\n\r\n  //   const {\r\n  //     values,\r\n  //     currentModule: { id },\r\n  //   } = this.props;\r\n\r\n  //   this.setState({\r\n  //     block_no: this.state.blockNum.filter(\r\n  //       (m) => m.attributes.BLOCK_SPATIAL_ID == e\r\n  //     )?.[0]?.attributes?.BLOCK_NO,\r\n  //     blockval: e,\r\n  //     parcelval: undefined,\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //     noOfParcels: serviceDataItem?.noOfParcels || 0,\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Survey_Block,\r\n  //       `BLOCK_SPATIAL_ID=${e}`,\r\n  //       true,\r\n  //       [\"BLOCK_SPATIAL_ID\"]\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //     },\r\n  //   });\r\n\r\n  //   this.getServiceParcels(\r\n  //     this.state.munval,\r\n  //     this.state.planeval,\r\n  //     this.state.subNameval,\r\n  //     e\r\n  //   );\r\n  // };\r\n\r\n  // onLandParcelChange = (f) => {\r\n  //   let serviceDataItem = this.state.serviceData?.find(\r\n  //     (item) =>\r\n  //       item.munval?.code == this.state.munval &&\r\n  //       item.planeval?.code == this.state.planeval &&\r\n  //       item.subNameval?.code == this.state.subNameval &&\r\n  //       item.blockval?.code == this.state.blockval\r\n  //   );\r\n  //   let selectedLands = serviceDataItem?.selectedLands || [];\r\n\r\n  //   var e = (serviceDataItem?.parcelNum || this.state.parcelNum)?.filter(\r\n  //     (m) => m.i === f\r\n  //   )?.[0]?.attributes?.PARCEL_SPATIAL_ID;\r\n  //   this.setState({\r\n  //     parcelId: e,\r\n  //     parcelval: f,\r\n  //     noOfParcels: serviceDataItem?.noOfParcels || this.state.noOfParcels || 0,\r\n  //   });\r\n  //   this.RolBackPol = this.pol;\r\n  //   this.RolBackParcelNum =\r\n  //     serviceDataItem?.parcelNum || this.state.parcelNum || [];\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Landbase_Parcel,\r\n  //       `PARCEL_SPATIAL_ID='${e}'`,\r\n  //       true,\r\n  //       [\"PARCEL_SPATIAL_ID\"]\r\n  //     ),\r\n  //     returnGeometry: true,\r\n  //     callbackResult: (res) => {\r\n  //       if (serviceDataItem && !selectedLands.length) {\r\n  //         serviceDataItem.selectedLandsT = [];\r\n  //       }\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         strokeColor: [0, 0, 0],\r\n  //         highlightWidth: 3,\r\n  //         isHighlighPolygonBorder: true,\r\n  //         isZoom: true,\r\n  //         zoomFactor: 50,\r\n  //       });\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  onLandParcelChangeById = (f) => {\r\n    //;\r\n    let serviceDataItem = this.state.serviceData?.find(\r\n      (item) =>\r\n        item.munval?.code == this.state.munval &&\r\n        item.planeval?.code == this.state.planeval &&\r\n        item.subNameval?.code == this.state.subNameval &&\r\n        item.blockval?.code == this.state.blockval\r\n    );\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n\r\n    this.setState({\r\n      parcelId: f,\r\n      // parcelval: serviceDataItem?.parcelNum?.findIndex(\r\n      //   (m) => m.attributes.PARCEL_SPATIAL_ID === f\r\n      // )?.toString(),\r\n      noOfParcels: serviceDataItem?.noOfParcels || this.state.noOfParcels || 0,\r\n    });\r\n    this.RolBackPol = this.pol;\r\n    this.RolBackParcelNum = serviceDataItem?.parcelNum || [];\r\n    queryTask({\r\n      ...querySetting(\r\n        this.LayerID.Landbase_Parcel,\r\n        `PARCEL_SPATIAL_ID='${f}'`,\r\n        true,\r\n        [\"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"]\r\n      ),\r\n      returnGeometry: true,\r\n      callbackResult: (res) => {\r\n        if (serviceDataItem && !selectedLands.length) {\r\n          serviceDataItem.selectedLandsT = [];\r\n        }\r\n        clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n        clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n        clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n        highlightFeature(res.features[0], this.map, {\r\n          layerName: \"SelectGraphicLayer\",\r\n          strokeColor: [0, 0, 0],\r\n          highlightWidth: 3,\r\n          isHighlighPolygonBorder: true,\r\n          isZoom: true,\r\n          zoomFactor: 50,\r\n        });\r\n        addParcelNo(\r\n          new esri.geometry.Polygon(res.features[0].geometry)\r\n            .getExtent()\r\n            .getCenter(),\r\n          this.map,\r\n          res.features[0].attributes.PARCEL_PLAN_NO + \"\",\r\n          \"ParcelPlanNoGraphicLayer\",\r\n          14,\r\n          [0, 0, 0]\r\n        );\r\n      },\r\n    });\r\n  };\r\n\r\n  addParcelToSelect = () => {\r\n    let serviceDataItem = this.state.serviceData?.find(\r\n      (item) =>\r\n        item.munval?.code == this.state.munval &&\r\n        item.planeval?.code == this.state.planeval &&\r\n        item.subNameval?.code == this.state.subNameval &&\r\n        item.blockval?.code == this.state.blockval\r\n    );\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n    if (selectedLands && selectedLands.length > 0) {\r\n      this.setState({\r\n        parcelId: selectedLands[selectedLands.length - 1]?.id,\r\n      });\r\n\r\n      // highlightFeature(selectedLands[selectedLands.length - 1], this.map, {\r\n      //   layerName: \"SelectGraphicLayer\",\r\n      //   strokeColor: [0, 0, 0],\r\n      //   highlightWidth: 3,\r\n      //   isHighlighPolygonBorder: true,\r\n      //   isZoom: true,\r\n      //   zoomFactor: 50,\r\n      // });\r\n      // addParcelNo(\r\n      //   new esri.geometry.Polygon(selectedLands[selectedLands.length - 1].geometry)\r\n      //     .getExtent()\r\n      //     .getCenter(),\r\n      //   this.map,\r\n      //   selectedLands[selectedLands.length - 1].attributes.PARCEL_PLAN_NO + \"\",\r\n      //   \"ParcelPlanNoGraphicLayer\",\r\n      //   14,\r\n      //   [0, 0, 0]\r\n      // );\r\n\r\n      intersectQueryTask({\r\n        outFields: [\r\n          \"MUNICIPALITY_NAME\",\r\n          \"PARCEL_AREA\",\r\n          \"PARCEL_LAT_COORD\",\r\n          \"PARCEL_LONG_COORD\",\r\n          \"PARCEL_MAIN_LUSE\",\r\n          \"PLAN_NO\",\r\n          \"PARCEL_PLAN_NO\",\r\n          \"USING_SYMBOL\",\r\n          \"PARCEL_SPATIAL_ID\",\r\n        ],\r\n        geometry: new esri.geometry.Polygon(\r\n          selectedLands[selectedLands.length - 1].geometry\r\n        ),\r\n        url: mapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n        where:\r\n          \"PARCEL_PLAN_NO is not null AND (USING_SYMBOL = 'خ' OR USING_SYMBOL = 'م' OR USING_SYMBOL like '%ت%')\",\r\n        callbackResult: (res) => {\r\n          getFeatureDomainName(res.features, this.LayerID.Landbase_Parcel).then(\r\n            (r) => {\r\n              debugger;\r\n              res.features = res.features\r\n                .filter((r) => r.attributes.PARCEL_SPATIAL_ID)\r\n                .map((e, i) => {\r\n                  return {\r\n                    ...e,\r\n                    i: e.attributes.PARCEL_SPATIAL_ID?.toString(),\r\n                  };\r\n                });\r\n              debugger;\r\n              serviceDataItem.selectedLandsT.push(res);\r\n              this.DrawGraph();\r\n            }\r\n          );\r\n        },\r\n      });\r\n      //this.DrawGraph();\r\n    }\r\n  };\r\n\r\n  DrawGraph = () => {\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n    let serviceDataItem = this.state.serviceData?.find(\r\n      (item) =>\r\n        item.munval?.code == this.state.munval &&\r\n        item.planeval?.code == this.state.planeval &&\r\n        item.subNameval?.code == this.state.subNameval &&\r\n        item.blockval?.code == this.state.blockval\r\n    );\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n    if (!selectedLands.length) {\r\n      this.map.graphics.clear();\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n\r\n      highlightFeature(this.RolBackPol, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        isZoom: true,\r\n        isHiglightSymbol: true,\r\n        highlighColor: [255, 0, 0, 0.25],\r\n      });\r\n\r\n      this.setState({\r\n        parcelSearch: null,\r\n        parcelNum: this.RolBackParcelNum,\r\n        parcelval: undefined,\r\n      });\r\n    } else {\r\n      this.parcelDis = selectDis(serviceDataItem?.selectedLandsT || []);\r\n      // console.log(this.parcelDis);\r\n      this.setAdjacentToStore(this.parcelDis);\r\n      this.setState({ parcelSearch: null }); //, parcelNum: this.parcelDis\r\n\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n      // highlightFeature(\r\n      //   this.parcelDis.filter(\r\n      //     (element) =>\r\n      //       !selectedLands.find(\r\n      //         (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n      //       )\r\n      //   ),\r\n      //   this.map,\r\n      //   {\r\n      //     layerName: \"SelectLandsGraphicLayer\",\r\n      //     noclear: false,\r\n      //     isZoom: false,\r\n      //     isHiglightSymbol: true,\r\n      //     highlighColor: [0, 255, 0, 0.5],\r\n      //     zoomFactor: 50,\r\n      //   }\r\n      // );\r\n\r\n      // this.parcelDis\r\n      //   .filter(\r\n      //     (element) =>\r\n      //       !selectedLands.find(\r\n      //         (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n      //       )\r\n      //   )\r\n      //   .forEach((f) => {\r\n      //     addParcelNo(\r\n      //       f.geometry.getExtent().getCenter(),\r\n      //       this.map,\r\n      //       f.attributes.PARCEL_PLAN_NO + \"\",\r\n      //       \"ParcelPlanNoGraphicLayer\",\r\n      //       14,\r\n      //       [0, 0, 0]\r\n      //     );\r\n      //   });\r\n\r\n      highlightFeature(\r\n        this.parcelDis.filter((element) =>\r\n          selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectLandsGraphicLayer\",\r\n          noclear: true,\r\n          attr: { isParcel: true },\r\n          isZoom: true,\r\n          isHighlighPolygonBorder: true,\r\n          zoomFactor: 50,\r\n        }\r\n      );\r\n\r\n      this.parcelDis\r\n        .filter((element) =>\r\n          selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"ParcelPlanNoGraphicLayer\",\r\n            14,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  mapload = (map) => {\r\n    this.map = map;\r\n    setTimeout(() => {\r\n      if (this.state?.serviceData?.length) {\r\n        if (this.state?.serviceData?.[0]?.selectedLands?.length) {\r\n          this.highlight(\r\n            this.state?.serviceData?.[0]?.selectedLands?.[0],\r\n            this.state?.serviceData?.[0],\r\n            null\r\n          );\r\n        } else if (this.state?.serviceData?.[0]?.currentExtent) {\r\n          this.highlight(\r\n            this.state?.serviceData?.[0]?.currentExtent,\r\n            this.state?.serviceData?.[0],\r\n            null\r\n          );\r\n        }\r\n      }\r\n    }, 1500);\r\n\r\n    this.setState({ mapLoaded: true });\r\n    this.props.setCurrentMap(map);\r\n  };\r\n\r\n  myChangeHandler = (name, mainIndex, i, e, event) => {\r\n    if (name == \"PARCEL_AREA\" && event.target.value) {\r\n      e.attributes.PARCEL_AREA_TEXT = reformatNumLetters(\r\n        toArabicWord((+event.target.value).toFixed(2)),\r\n        \"متر مربع\"\r\n      );\r\n    }\r\n    this[\"edit_\" + name + \"_\" + mainIndex + \"_\" + i] = event.target.value;\r\n  };\r\n\r\n  enableEdit(name, mainIndex, i) {\r\n    this.setState({ [name + \"_isEdit_\" + mainIndex + \"_\" + i]: true });\r\n  }\r\n\r\n  showEditBtn(name, value) {\r\n    if (name == \"USING_SYMBOL\") {\r\n      return value == null;\r\n    } else {\r\n      const {\r\n        currentModule: { id },\r\n      } = this.props;\r\n      let editables = [\r\n        \"PARCEL_BLOCK_NO\",\r\n        \"DISTRICT_NAME\",\r\n        \"SUBDIVISION_TYPE\",\r\n        \"SUBDIVISION_DESCRIPTION\",\r\n        \"Natural_Area\",\r\n        \"DETAILED_LANDUSE\",\r\n      ];\r\n\r\n      if (id == 92) {\r\n        editables = [\"PARCEL_AREA\", \"PARCEL_AREA_TEXT\", ...editables];\r\n      }\r\n\r\n      return editables.indexOf(name) > -1;\r\n    }\r\n  }\r\n\r\n  saveEdit(id, name, mainIndex, i) {\r\n    let serviceDataItem = this.state.serviceData[mainIndex];\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n    let findParcel = selectedLands[i];\r\n    findParcel.attributes[name] =\r\n      this[\"edit_\" + name + \"_\" + mainIndex + \"_\" + i] ||\r\n      findParcel.attributes[name];\r\n    let selectLand = selectedLands.find((p) => {\r\n      return [p?.id, p?.attributes?.PARCEL_SPATIAL_ID].indexOf(id) != -1;\r\n    });\r\n    selectLand.attributes[name] =\r\n      this[\"edit_\" + name + \"_\" + mainIndex + \"_\" + i] ||\r\n      selectLand.attributes[name];\r\n    this.state.landsData = {\r\n      ...this.props.input.value,\r\n      parcels: [...this.state.serviceData],\r\n    };\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n    this.setState({\r\n      [name + \"_isEdit_\" + mainIndex + \"_\" + i]: false,\r\n      serviceData: [...this.state.serviceData],\r\n    });\r\n  }\r\n\r\n  validation = (item) => {\r\n    const { t } = this.props;\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .post(\r\n          host +\r\n            \"/IsHasSubmission/\" +\r\n            item.attributes.PARCEL_SPATIAL_ID +\r\n            \"/\" +\r\n            (this.props.currentModule.record.id || 0),\r\n          {\r\n            PARCEL_PLAN_NO: item.attributes.PARCEL_PLAN_NO,\r\n            PARCEL_BLOCK_NO: item.attributes.PARCEL_BLOCK_NO,\r\n            PLAN_NO: item.attributes.PLAN_NO,\r\n          }\r\n        )\r\n        .then(\r\n          (data) => {\r\n            if (data.status == 204 || item.attributes.IS_EDITED_Code != 1) {\r\n              return resolve();\r\n            } else {\r\n              window.notifySystem(\r\n                \"warning\",\r\n                t(\"messages:global.PARCELSWARNING\")\r\n              );\r\n              return reject();\r\n            }\r\n          },\r\n          (err) => {\r\n            window.notifySystem(\r\n              \"warning\",\r\n              t(\r\n                `messages:${\r\n                  err.msg ||\r\n                  (err &&\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.msg)\r\n                }`\r\n              )\r\n            );\r\n            return reject();\r\n          }\r\n        );\r\n      // if (item.attributes.IS_EDITED_Code != 1) {\r\n      //   return resolve();\r\n      // } else {\r\n      //   window.notifySystem(\"warning\", t(\"messages:PARCELSWARNING\"));\r\n      //   return reject();\r\n      // }\r\n    });\r\n  };\r\n\r\n  checkAllocated = () => {\r\n    return new Promise((resolve, reject) => {\r\n      fetchData(\r\n        `/submission/CheckAllocated?spatialId=${\r\n          this.state.parcelId\r\n        }&submissionId=${this.props.currentModule.record.id || 0}`\r\n      ).then(\r\n        (result) => {\r\n          resolve(result);\r\n        },\r\n        (err) => {\r\n          handleErrorMessages(err, t);\r\n          reject();\r\n        }\r\n      );\r\n    });\r\n  };\r\n  OnParcelSelect = () => {\r\n    this.checkAllocated().then((result) => {\r\n      if (!result) {\r\n        const values = applyFilters({\r\n          key: \"FormValues\",\r\n          form: \"stepForm\",\r\n        });\r\n        if (values?.landData?.landData_type == 2 && !this.state.noOfParcels) {\r\n          window.notifySystem(\"error\", \"يجب ادخال عدد الأراضي الغير معلومة\", 5);\r\n          return;\r\n        }\r\n        this.setState({ parcelval: undefined });\r\n        clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n        clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n        let serviceDataItem = this.state.serviceData?.find(\r\n          (item) =>\r\n            item.munval?.code == this.state.munval &&\r\n            item.planeval?.code == this.state.planeval &&\r\n            item.subNameval?.code == this.state.subNameval &&\r\n            item.blockval?.code == this.state.blockval\r\n        );\r\n\r\n        let selectedLands = serviceDataItem?.selectedLands || [];\r\n        if (!selectedLands.filter((e) => e.id === this.state.parcelId).length) {\r\n          queryTask({\r\n            ...querySetting(\r\n              this.LayerID.Landbase_Parcel,\r\n              `PARCEL_SPATIAL_ID =${this.state.parcelId}`,\r\n              true,\r\n              [\r\n                \"PARCEL_AREA\",\r\n                \"PARCEL_MAIN_LUSE\",\r\n                \"PARCEL_LAT_COORD\",\r\n                \"PARCEL_LONG_COORD\",\r\n                \"PLAN_NO\",\r\n                \"PARCEL_PLAN_NO\",\r\n                \"USING_SYMBOL\",\r\n                \"PARCEL_BLOCK_NO\",\r\n                \"DISTRICT_NAME\",\r\n                \"SUBDIVISION_DESCRIPTION\",\r\n                \"SUBDIVISION_TYPE\",\r\n                \"PARCEL_SPATIAL_ID\",\r\n                \"MUNICIPALITY_NAME\",\r\n                \"DETAILED_LANDUSE\",\r\n                \"SUB_MUNICIPALITY_NAME\",\r\n                \"PARCEL_SUB_LUSE\",\r\n              ]\r\n            ),\r\n            callbackResult: (res) => {\r\n              //this.validation(res.features[0]).then((result) => {\r\n              getFeatureDomainName(\r\n                res.features,\r\n                this.LayerID.Landbase_Parcel\r\n              ).then((r) => {\r\n                intersectQueryTask({\r\n                  outFields: [\"SRVC_SUBTYPE\"],\r\n                  geometry: new esri.geometry.Polygon(r[0].geometry),\r\n                  url: mapUrl + \"/\" + this.LayerID.Service_Data,\r\n                  callbackResult: (serviceRes) => {\r\n                    //\r\n                    getFeatureDomainName(\r\n                      serviceRes.features,\r\n                      this.LayerID.Service_Data\r\n                    ).then((serviceDomainsRes) => {\r\n                      r[0].attributes = {\r\n                        ...r[0].attributes,\r\n                        SRVC_SUBTYPE:\r\n                          (serviceDomainsRes.length &&\r\n                            serviceDomainsRes[0].attributes.SRVC_SUBTYPE) ||\r\n                          null,\r\n                        // SRVC_SUBTYPE_DESC:\r\n                        //   (serviceDomainsRes.length &&\r\n                        //     serviceDomainsRes[0].attributes.SRVC_SUBTYPE) +\r\n                        //     ` (${r[0].attributes.DETAILED_LANDUSE})` || null,\r\n                        SRVC_SUBTYPE_Code:\r\n                          (serviceDomainsRes.length &&\r\n                            serviceDomainsRes[0].attributes\r\n                              .SRVC_SUBTYPE_Code) ||\r\n                          null,\r\n                        PARCEL_AREA_TEXT: reformatNumLetters(\r\n                          toArabicWord(r[0].attributes.PARCEL_AREA),\r\n                          \"متر مربع\"\r\n                        ),\r\n                      };\r\n                      //\r\n                      this.setToStore(r, values?.landData?.landData_type);\r\n                      this.addParcelToSelect();\r\n                      //this.DrawGraph();\r\n                    });\r\n                  },\r\n                });\r\n              });\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        window.notifySystem(\"error\", \"تم تخصيص الأرض من قبل\", 5);\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  setToStore = (r, landData_type) => {\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n\r\n    let index = this.state.serviceData?.findIndex(\r\n      (item) =>\r\n        item.munval?.code == this.state.munval &&\r\n        item.planeval?.code == this.state.planeval &&\r\n        item.subNameval?.code == this.state.subNameval &&\r\n        item.blockval?.code == this.state.blockval\r\n    );\r\n    const {\r\n      input: { value },\r\n    } = this.props;\r\n\r\n    let mun = this.state.MunicipalityNames?.filter(\r\n      (e) => e?.code == this.state.munval\r\n    ).map((e) => ({ code: e.code, name: e.name }))[0];\r\n    let plan = this.state.PlanNum.filter(\r\n      (d, i) => d.i == this.state.planeval\r\n    ).map((e) => ({ code: e.i, name: e?.attributes?.PLAN_NO }))[0];\r\n    let block = this.state.blockNum\r\n      .filter(\r\n        (block) => block?.attributes?.BLOCK_SPATIAL_ID == this.state.blockval\r\n      )\r\n      ?.map((e) => ({\r\n        code: e?.attributes?.BLOCK_SPATIAL_ID,\r\n        name: e?.attributes?.BLOCK_NO,\r\n      }))[0];\r\n    let subName = this.state.subDivNames\r\n      .filter(\r\n        (e, i) => e.attributes.SUBDIVISION_SPATIAL_ID == this.state.subNameval\r\n      )\r\n      .map((e) => ({\r\n        code: e.attributes.SUBDIVISION_SPATIAL_ID,\r\n        name: e.attributes.SUBDIVISION_DESCRIPTION,\r\n      }))[0];\r\n\r\n    let subType = this.state.subDivType\r\n      .filter((e, i) => e.code == this.state.subTypeval)\r\n      .map((e) => ({\r\n        code: e.code,\r\n        name: e.name,\r\n      }))[0];\r\n\r\n    if (r && landData_type == 1) {\r\n      if (index != -1) {\r\n        this.state.serviceData[index].selectedLands = [\r\n          ...this.state.serviceData[index].selectedLands,\r\n          {\r\n            attributes: r[0].attributes,\r\n            id: this.state.parcelId,\r\n            geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n          },\r\n        ];\r\n      } else {\r\n        this.state.serviceData.push({\r\n          munval: mun,\r\n          planeval: plan,\r\n          subNameval: subName,\r\n          blockval: block,\r\n          subTypeval: subType,\r\n          landData_type: values?.landData?.landData_type,\r\n          PlanNum: this.state.PlanNum,\r\n          parcelNum: this.state?.parcelNum || [],\r\n          blockNum: this.state?.blockNum || [],\r\n          subDivNames: this.state?.subDivNames || [],\r\n          subDivType: this.state?.subDivType || [],\r\n          selectedLands: [\r\n            {\r\n              attributes: r[0].attributes,\r\n              id: this.state.parcelId,\r\n              geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n            },\r\n          ],\r\n          selectedLandsT: [],\r\n        });\r\n      }\r\n    } else if (r && landData_type == 2) {\r\n      //;\r\n      if (index != -1) {\r\n        this.state.serviceData[index].noOfParcels =\r\n          r.noOfParcels || this.state.serviceData[index]?.noOfParcels;\r\n        this.state.serviceData[index].noOfAvailableServiceParcels =\r\n          this.state?.parcelNum?.length || 0;\r\n        if (r?.[0] != undefined) {\r\n          this.state.serviceData[index].selectedLands =\r\n            (!this.state.serviceData[index].selectedLands.length && [\r\n              {\r\n                attributes: r[0].attributes,\r\n                id: this.state.parcelId,\r\n                geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n              },\r\n            ]) || [\r\n              ...this.state.serviceData[index].selectedLands,\r\n              {\r\n                attributes: r[0].attributes,\r\n                id: this.state.parcelId,\r\n                geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n              },\r\n            ] ||\r\n            [];\r\n        }\r\n      } else {\r\n        this.state.serviceData.push({\r\n          munval: mun,\r\n          planeval: plan,\r\n          subNameval: subName,\r\n          blockval: block,\r\n          subTypeval: subType,\r\n          landData_type: values?.landData?.landData_type,\r\n          noOfParcels: r.noOfParcels || this.state?.noOfParcels,\r\n          currentExtent: r.currentExtent || this.pol,\r\n          noOfAvailableServiceParcels: this.state?.parcelNum?.length || 0,\r\n          PlanNum: this.state.PlanNum,\r\n          parcelNum: this.state?.parcelNum || [],\r\n          blockNum: this.state?.blockNum || [],\r\n          subDivNames: this.state?.subDivNames || [],\r\n          subDivType: this.state?.subDivType || [],\r\n          selectedLands:\r\n            (r?.[0] != undefined && [\r\n              {\r\n                attributes: r[0].attributes,\r\n                id: this.state.parcelId,\r\n                geometry: JSON.parse(JSON.stringify(r[0].geometry)),\r\n              },\r\n            ]) ||\r\n            [],\r\n          selectedLandsT: [],\r\n        });\r\n      }\r\n    }\r\n\r\n    //;\r\n    this.state.landsData = {\r\n      ...value,\r\n      mapGraphics: [],\r\n      submission_data: { ...this.state.submission_data },\r\n      temp: {\r\n        mun: this.state.munval,\r\n        plan: this.state.plan_no,\r\n        planeval: this.state.planeval,\r\n        subtype: this.state.subType_name,\r\n        subname: this.state.subName_name,\r\n        parcelDis: this.RolBackParcelNum,\r\n        block: this.state.block_no,\r\n        parcel: this.state.parcelval,\r\n      },\r\n      parcels: [...this.state.serviceData],\r\n    };\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n    this.setState({ serviceData: [...this.state.serviceData] });\r\n  };\r\n\r\n  setAdjacentToStore = (r) => {\r\n    let store = this.props.input.value;\r\n    store.temp.parcelDis = r;\r\n    this.props.input.onChange(store);\r\n  };\r\n\r\n  resetFilters = () => {\r\n    debugger;\r\n    this.loadLists = true;\r\n    if (this.state.munval) {\r\n      onMunChange(this, this.state.munval, () => {\r\n        onPlaneChange(this, this.state.planeval, () => {\r\n          onSubTypeChange(this, this.state.subTypeval, () => {\r\n            onSubNameChange(this, this.state.subNameval, () => {\r\n              onBlockChange(this, this.state.blockval, () => {\r\n                onLandParcelChange(this, this.state.parcelval, () => {});\r\n              });\r\n            });\r\n          });\r\n        });\r\n      });\r\n    }\r\n    this.loadLists = false;\r\n  };\r\n\r\n  LandHoverOn = (f) => {\r\n    let serviceDataItem = this.state.serviceData?.find(\r\n      (item) =>\r\n        item.munval?.code == this.state.munval &&\r\n        item.planeval?.code == this.state.planeval &&\r\n        item.subNameval?.code == this.state.subNameval &&\r\n        item.blockval?.code == this.state.blockval\r\n    );\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n    if (selectedLands.length) {\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      var parcel = serviceDataItem?.parcelNum?.filter((m) => m.i == f.key)[0];\r\n      highlightFeature(parcel, this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        strokeColor: [0, 0, 0],\r\n        isHighlighPolygonBorder: true,\r\n        highlightWidth: 3,\r\n      });\r\n    }\r\n  };\r\n\r\n  LandHoverOff = (f) => {\r\n    let serviceDataItem = this.state.serviceData?.find(\r\n      (item) =>\r\n        item.munval?.code == this.state.munval &&\r\n        item.planeval?.code == this.state.planeval &&\r\n        item.subNameval?.code == this.state.subNameval &&\r\n        item.blockval?.code == this.state.blockval\r\n    );\r\n    let selectedLands = serviceDataItem?.selectedLands || [];\r\n    if (selectedLands.length) {\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    }\r\n  };\r\n\r\n  remove = (mainIndex, index) => {\r\n    const {\r\n      input: { value },\r\n    } = this.props;\r\n\r\n    if (index != -1) {\r\n      this.state.serviceData[mainIndex].selectedLands.splice(index, 1);\r\n      if (!this.state.serviceData[mainIndex].selectedLands.length) {\r\n        clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n        clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n        clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n        // onMunChange(\r\n        //   this,\r\n        //   this.state.serviceData[mainIndex].munval.code,\r\n        //   () => {}\r\n        // );\r\n        // onPlaneChange(this.state.serviceData[mainIndex].planeval.code);\r\n        this.resetFilters();\r\n        // highlightFeature(this.pol, this.map, {\r\n        //   layerName: \"SelectGraphicLayer\",\r\n        //   isZoom: true,\r\n        //   isHiglightSymbol: true,\r\n        //   highlighColor: [0, 0, 0, 0.25],\r\n        // });\r\n        debugger;\r\n        this.getServiceParcels(\r\n          this.state.munval,\r\n          this.state.planeval,\r\n          this.state.subNameval,\r\n          this.state.blockval\r\n        );\r\n      } else {\r\n        let length = this.state.serviceData[mainIndex].selectedLands.length;\r\n        this.doHighlightOrZoom(\r\n          this.state.serviceData[mainIndex].selectedLands[length - 1],\r\n          this.state.serviceData[mainIndex],\r\n          false\r\n        );\r\n      }\r\n    } else {\r\n      this.state.serviceData.splice(mainIndex, 1);\r\n    }\r\n\r\n    // if (this.state.serviceDataT?.length) {\r\n    //   this.state.serviceDataT.pop(item);\r\n    // }\r\n\r\n    this.state.landsData = {\r\n      ...value,\r\n      mapGraphics: [],\r\n      submission_data: { ...this.state.submission_data },\r\n      temp: {\r\n        mun: this.state.munval,\r\n        planeval: this.state.planeval,\r\n        plan: this.state.plan_no,\r\n        subtype: this.state.subType_name,\r\n        subname: this.state.subName_name,\r\n        parcelDis: this.RolBackParcelNum,\r\n        block: this.state.block_no,\r\n        parcel: this.state.parcelval,\r\n      },\r\n      parcels: [...this.state.serviceData],\r\n    };\r\n\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n    this.setState({ serviceData: [...this.state.serviceData] });\r\n    this.DrawGraph();\r\n  };\r\n\r\n  setNoOfParcels = (evt) => {\r\n    //;\r\n    this.setState({ noOfParcels: evt.target.value });\r\n  };\r\n\r\n  assignNoOfParcels = () => {\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n    this.setToStore(\r\n      { noOfParcels: this.state.noOfParcels, currentExtent: this.pol },\r\n      values?.landData?.landData_type\r\n    );\r\n  };\r\n\r\n  openPopup = (mainIndex, index, fieldsObj) => {\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n    var fields = this?.[fieldsObj]?.fields;\r\n    let thisScope = this;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: {\r\n            ...(this.state.serviceData[mainIndex].selectedLands[index]?.[\r\n              fieldsObj\r\n            ] || {}),\r\n          },\r\n          ok(values) {\r\n            thisScope.state.serviceData[mainIndex].selectedLands[index][\r\n              fieldsObj\r\n            ] = values;\r\n            thisScope.setToStore(null, values?.landData?.landData_type);\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  zoom = (e, serviceDataItem, evt) => {\r\n    this.doHighlightOrZoom(e, serviceDataItem, false);\r\n  };\r\n\r\n  doHighlightOrZoom = (e, serviceDataItem, isHighlight) => {\r\n    const {\r\n      currentModule: { id },\r\n    } = this.props;\r\n    // let planeval;\r\n    // this.state.munval = serviceDataItem?.munval?.code;\r\n    // this.state.blockval = serviceDataItem?.blockval?.code;\r\n    // this.state.subNameval = serviceDataItem?.subNameval?.code;\r\n    // this.state.subTypeval = serviceDataItem?.subTypeval?.code;\r\n    clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n    highlightFeature(e, this.map, {\r\n      layerName: \"SelectLandsGraphicLayer\",\r\n      noclear: false,\r\n      isZoom: true,\r\n      isHiglightSymbol: isHighlight,\r\n      highlighColor: [0, 255, 0, 0.5],\r\n      zoomFactor: 50,\r\n    });\r\n\r\n    //;\r\n    this.setState({\r\n      noOfParcels: serviceDataItem?.noOfParcels,\r\n      munval: serviceDataItem?.munval?.code || undefined,\r\n      planeval: serviceDataItem?.planeval?.code || undefined,\r\n      plan_no: serviceDataItem?.planeval?.name || undefined,\r\n      subTypeval: serviceDataItem?.subTypeval?.code || undefined,\r\n      subNameval: serviceDataItem?.subNameval?.code || undefined,\r\n      blockval: serviceDataItem?.blockval?.code || undefined,\r\n      parcelId: e?.id || undefined,\r\n      PlanNum: serviceDataItem?.PlanNum || [],\r\n      blockNum: serviceDataItem?.blockNum || [],\r\n      subDivNames: serviceDataItem?.subDivNames || [],\r\n      subDivType: serviceDataItem?.subDivType || [],\r\n      parcelNum: serviceDataItem?.parcelNum || [],\r\n    });\r\n\r\n    if (serviceDataItem?.selectedLands.length) {\r\n      this.onLandParcelChangeById(e?.id);\r\n    } else {\r\n      this.state.parcelId = null;\r\n      this.getServiceParcels(\r\n        serviceDataItem?.munval?.code,\r\n        serviceDataItem?.planeval?.code,\r\n        serviceDataItem?.subNameval?.code,\r\n        serviceDataItem?.blockval?.code\r\n      );\r\n    }\r\n\r\n    // if (serviceDataItem?.munval?.code && serviceDataItem?.planeval?.name) {\r\n    //   this.GetPlansByMunID(serviceDataItem?.munval?.code).then((plans) => {\r\n    //     if (serviceDataItem?.planeval?.name) {\r\n    //       planeval = plans.find(\r\n    //         (plan) => plan.attributes.PLAN_NO == serviceDataItem?.planeval?.name\r\n    //       )?.i;\r\n\r\n    //       this.state.planeval = planeval;\r\n    //       this.state.plan_no = serviceDataItem?.planeval?.name;\r\n    //       this.planId = plans.find(\r\n    //         (plan) => plan.attributes.PLAN_NO == serviceDataItem?.planeval?.name\r\n    //       )?.attributes.PLAN_SPATIAL_ID;\r\n\r\n    //       if (serviceDataItem?.blockval?.code) {\r\n    //         this.GetBlocksByPlanID(this.planId);\r\n    //       }\r\n    //     }\r\n\r\n    //     if (\r\n    //       serviceDataItem?.subNameval?.code &&\r\n    //       serviceDataItem?.subTypeval?.code\r\n    //     ) {\r\n    //       this.getSubNamesBySubType(serviceDataItem?.subTypeval?.code);\r\n    //     }\r\n\r\n    //     if (serviceDataItem?.selectedLands.length) {\r\n    //       this.state.parcelNum = serviceDataItem?.parcelNum || [];\r\n    //       this.onLandParcelChangeById(e?.id);\r\n    //     } else {\r\n    //       this.state.parcelId = null;\r\n    //       this.getServiceParcels(\r\n    //         serviceDataItem?.munval?.code,\r\n    //         serviceDataItem?.planeval?.name,\r\n    //         serviceDataItem?.subNameval?.code,\r\n    //         serviceDataItem?.blockval?.code\r\n    //       );\r\n    //     }\r\n    //     if (serviceDataItem?.landData_type == 2) {\r\n    //       this.setState({ noOfParcels: serviceDataItem?.noOfParcels });\r\n    //     }\r\n    //   });\r\n    // } else {\r\n    //   if (serviceDataItem?.selectedLands.length) {\r\n    //     this.state.parcelNum = serviceDataItem?.parcelNum || [];\r\n    //     this.onLandParcelChangeById(e?.id);\r\n    //   } else {\r\n    //     this.state.parcelId = null;\r\n    //     this.getServiceParcels(\r\n    //       serviceDataItem?.munval?.code,\r\n    //       serviceDataItem?.planeval?.name,\r\n    //       serviceDataItem?.subNameval?.code,\r\n    //       serviceDataItem?.blockval?.code\r\n    //     );\r\n    //   }\r\n    //   if (serviceDataItem?.landData_type == 2) {\r\n    //     this.setState({ noOfParcels: serviceDataItem?.noOfParcels });\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  highlight = (e, serviceDataItem, evt) => {\r\n    this.doHighlightOrZoom(e, serviceDataItem, true);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      parcelData,\r\n      parcelElectricData,\r\n      parcelShatfaData,\r\n      serviceData,\r\n      MunicipalityNames,\r\n      subDivType,\r\n      subDivNames,\r\n      subNameval,\r\n      blockNum,\r\n      blockval,\r\n      PlanNum,\r\n      mapLoaded,\r\n      planeval,\r\n      parcelSearch,\r\n      parcelNum,\r\n      parcelval,\r\n      noOfParcels,\r\n    } = this.state;\r\n    let serviceDataItem =\r\n      serviceData?.find(\r\n        (item) =>\r\n          item.munval?.code == this.state.munval &&\r\n          item.planeval?.code == this.state.planeval &&\r\n          item.subNameval?.code == this.state.subNameval &&\r\n          item.blockval?.code == this.state.blockval\r\n      ) || {};\r\n    const {\r\n      fullMapWidth,\r\n      currentModule: { id },\r\n      t,\r\n    } = this.props;\r\n    const values = applyFilters({\r\n      key: \"FormValues\",\r\n      form: \"stepForm\",\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <StickyContainer style={{ direction: \"ltr\" }}>\r\n          <Sticky bottomOffset={80}>\r\n            {({ style }) => (\r\n              <MapBtnsComponent\r\n                style={style}\r\n                {...this.props}\r\n              ></MapBtnsComponent>\r\n            )}\r\n          </Sticky>\r\n        </StickyContainer>\r\n        {/* <div className=\"btn-fixed\">\r\n          <MapBtnsComponent {...this.props}></MapBtnsComponent>\r\n        </div> */}\r\n\r\n        <div\r\n          className={\r\n            !fullMapWidth && id != 92 ? \"content-section implementation\" : \"\"\r\n          }\r\n        >\r\n          {mapLoaded && id != 92 && (\r\n            <div style={{ padding: \"10px\" }}>\r\n              <Select\r\n                getPopupContainer={(trigger) => trigger.parentNode}\r\n                autoFocus\r\n                onChange={(val) => {\r\n                  onMunChange(this, val);\r\n                }}\r\n                showSearch\r\n                value={this.state.munval}\r\n                placeholder=\"اختر اسم البلديه\"\r\n                disabled={\r\n                  !values?.landData?.landData_type ||\r\n                  (values?.landData?.landData_type && this.state.munval) ||\r\n                  !this.state.MunicipalityNames?.length\r\n                }\r\n                optionFilterProp=\"children\"\r\n                filterOption={(input, option) => {\r\n                  if (option.props.children) {\r\n                    return (\r\n                      option.props.children.find((i) => {\r\n                        return i && i.indexOf(input.trim().toLowerCase()) >= 0;\r\n                      }) != null\r\n                    );\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                }}\r\n              >\r\n                {MunicipalityNames?.map((e) => (\r\n                  <Option key={e.code} value={e.code}>\r\n                    {e.name}{\" \"}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n\r\n              <Select\r\n                getPopupContainer={(trigger) => trigger.parentNode}\r\n                onChange={(val) => {\r\n                  onPlaneChange(this, val);\r\n                }}\r\n                showSearch\r\n                autoFocus\r\n                disabled={!PlanNum.length}\r\n                optionFilterProp=\"children\"\r\n                filterOption={(input, option) => {\r\n                  if (option.props.children) {\r\n                    return (\r\n                      convertToEnglish(option.props.children)\r\n                        .replaceAll(\" \", \"\")\r\n                        .indexOf(input.replaceAll(\" \", \"\")) != -1\r\n                    );\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                }}\r\n                value={planeval}\r\n                placeholder=\"رقم المخطط\"\r\n                notFoundContent=\"not found\"\r\n              >\r\n                {(id == 91 &&\r\n                  serviceData.length &&\r\n                  serviceData.find(\r\n                    (item) => item?.planeval?.code != undefined\r\n                  ) != undefined &&\r\n                  PlanNum\r\n                    //.slice(0, 100)\r\n                    .map((d, i) => {\r\n                      return (\r\n                        serviceData.find(\r\n                          (item) => item?.planeval?.code == d.i\r\n                        ) != undefined && (\r\n                          <Option\r\n                            key={d.attributes.PLAN_SPATIAL_ID}\r\n                            value={d.i}\r\n                          >\r\n                            {localizeNumber(d.attributes.PLAN_NO)}\r\n                          </Option>\r\n                        )\r\n                      );\r\n                    })) ||\r\n                  PlanNum.map((d, i) => {\r\n                    return (\r\n                      <Option key={d.attributes.PLAN_SPATIAL_ID} value={d.i}>\r\n                        {localizeNumber(d.attributes.PLAN_NO)}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n              </Select>\r\n              {!blockval && (\r\n                <>\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onChange={(val) => {\r\n                      onSubTypeChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    disabled={\r\n                      [90, 91].indexOf(id) == -1 ||\r\n                      !values?.landData?.landData_type ||\r\n                      !subDivType.length\r\n                    }\r\n                    value={this.state.subTypeval}\r\n                    placeholder={\"نوع التقسيم\"}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) => {\r\n                      if (option.props.children) {\r\n                        return (\r\n                          option.props.children?.indexOf(\r\n                            convertToArabic(input)\r\n                          ) != -1\r\n                        );\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    }}\r\n                  >\r\n                    {subDivType\r\n                      //.slice(0, 100)\r\n                      .map((e, i) => (\r\n                        <Option key={i} value={e.code}>\r\n                          {\" \"}\r\n                          {e.name}{\" \"}\r\n                        </Option>\r\n                      ))}\r\n                  </Select>\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onChange={(val) => {\r\n                      onSubNameChange(this, val);\r\n                    }}\r\n                    showSearch\r\n                    disabled={\r\n                      [90, 91].indexOf(id) == -1 ||\r\n                      !values?.landData?.landData_type ||\r\n                      !subDivNames.length\r\n                    }\r\n                    placeholder=\"اسم التقسيم\"\r\n                    value={subNameval}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) => {\r\n                      return (\r\n                        option.props.children?.indexOf(\r\n                          convertToArabic(input)\r\n                        ) != -1\r\n                      );\r\n                    }}\r\n                  >\r\n                    {subDivNames\r\n                      //.slice(0, 100)\r\n                      .map((e, i) => (\r\n                        <Option\r\n                          key={e.attributes.SUBDIVISION_SPATIAL_ID}\r\n                          value={e.i}\r\n                        >\r\n                          {e.attributes.SUBDIVISION_DESCRIPTION}\r\n                        </Option>\r\n                      ))}\r\n                  </Select>\r\n                </>\r\n              )}\r\n              {!this.state.subTypeval && (\r\n                <Select\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  autoFocus\r\n                  onChange={(val) => {\r\n                    onBlockChange(this, val);\r\n                  }}\r\n                  showSearch\r\n                  disabled={\r\n                    [90, 91].indexOf(id) == -1 ||\r\n                    !values?.landData?.landData_type ||\r\n                    !blockNum.length\r\n                  }\r\n                  value={\r\n                    this.state.blockNum?.filter(\r\n                      (m) => m.attributes.BLOCK_SPATIAL_ID == blockval\r\n                    )?.[0]?.i\r\n                  }\r\n                  placeholder=\"رقم البلك\"\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) =>\r\n                    option.props.children?.indexOf(convertToArabic(input)) != -1\r\n                  }\r\n                >\r\n                  {blockNum\r\n                    //.slice(0, 100)\r\n                    .map((e, i) => (\r\n                      <Option key={e.attributes.BLOCK_SPATIAL_ID} value={e.i}>\r\n                        {localizeNumber(e.attributes.BLOCK_NO)}\r\n                      </Option>\r\n                    ))}\r\n                </Select>\r\n              )}\r\n              {values?.landData?.landData_type == 2 && (\r\n                <>\r\n                  <InputNumber\r\n                    type=\"number\"\r\n                    placeholder=\"عدد قطع الأراضي\"\r\n                    value={noOfParcels}\r\n                    onBlur={this.setNoOfParcels.bind(this)}\r\n                    disabled={\r\n                      (id == 91 &&\r\n                        values?.landData?.landData_type == 2 &&\r\n                        noOfParcels != 0 &&\r\n                        noOfParcels != \"\" &&\r\n                        noOfParcels != undefined) ||\r\n                      !this.state.munval\r\n                    }\r\n                    style={{\r\n                      minWidth: \"350px\",\r\n                      marginTop: \"4px\",\r\n                      height: \"40px\",\r\n                    }}\r\n                  />\r\n                  {id == 90 && (\r\n                    <Button\r\n                      className=\"add-gis\"\r\n                      disabled={!noOfParcels}\r\n                      onClick={this.assignNoOfParcels.bind(this)}\r\n                    >\r\n                      إضافة الأرض\r\n                    </Button>\r\n                  )}\r\n                </>\r\n              )}\r\n              {(id == 91 || values?.landData?.landData_type == 1) && (\r\n                <>\r\n                  <Select\r\n                    getPopupContainer={(trigger) => trigger.parentNode}\r\n                    autoFocus\r\n                    onChange={(val) => {\r\n                      this.setState({ isOnSearch: false }, () => {\r\n                        onLandParcelChange(this, val);\r\n                      });\r\n                    }}\r\n                    showSearch\r\n                    disabled={\r\n                      (!this.state.isOnSearch &&\r\n                        parcelNum &&\r\n                        !parcelNum.filter(\r\n                          (parcel) => parcel.attributes.PARCEL_PLAN_NO != null\r\n                        ).length) ||\r\n                      (values?.landData?.landData_type == 1 &&\r\n                        this.props.currentModule.id != 90)\r\n                    }\r\n                    // onSearch={(e) => {\r\n                    //   this.setState(\r\n                    //     { parcelSearch: e, isOnSearch: true },\r\n                    //     () => {\r\n                    //       onSearch(this, e);\r\n                    //     }\r\n                    //   );\r\n                    // }}\r\n                    filterOption={(input, option) => {\r\n                      if (option.props.children) {\r\n                        return (\r\n                          option.props.children?.indexOf(\r\n                            convertToArabic(input)\r\n                          ) != -1\r\n                        );\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    }}\r\n                    value={parcelval}\r\n                    placeholder=\"رقم قطعة الارض\"\r\n                  >\r\n                    {parcelNum &&\r\n                      parcelNum\r\n                        .filter((e, i) => {\r\n                          if (parcelSearch) {\r\n                            if (serviceDataItem?.selectedLands?.length) {\r\n                              return !serviceDataItem?.selectedLands?.find(\r\n                                (tt) =>\r\n                                  tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                  e.attributes.PARCEL_SPATIAL_ID\r\n                              );\r\n                            } else {\r\n                              return (\r\n                                e.attributes.PARCEL_PLAN_NO &&\r\n                                e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                                  parcelSearch.toLowerCase()\r\n                                ) >= 0\r\n                              );\r\n                            }\r\n                          } else {\r\n                            if (serviceDataItem?.selectedLands?.length) {\r\n                              return (\r\n                                !serviceDataItem?.selectedLands?.find(\r\n                                  (tt) =>\r\n                                    tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                    e.attributes.PARCEL_SPATIAL_ID\r\n                                ) && e.attributes.PARCEL_PLAN_NO\r\n                              );\r\n                            } else {\r\n                              return e.attributes.PARCEL_PLAN_NO;\r\n                            }\r\n                          }\r\n                        })\r\n                        .slice(0, 100)\r\n                        .map((e, i) => {\r\n                          return (\r\n                            <Option\r\n                              onMouseEnter={this.LandHoverOn}\r\n                              onMouseLeave={this.LandHoverOff}\r\n                              key={e.attributes.PARCEL_SPATIAL_ID}\r\n                              value={e.i}\r\n                            >\r\n                              {localizeNumber(e.attributes.PARCEL_PLAN_NO)}\r\n                            </Option>\r\n                          );\r\n                        })}\r\n                  </Select>\r\n\r\n                  <Button\r\n                    className=\"add-gis\"\r\n                    disabled={this.state.parcelId === null}\r\n                    onClick={this.OnParcelSelect}\r\n                  >\r\n                    إضافة الأرض\r\n                  </Button>\r\n                </>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          <MapComponent\r\n            mapload={this.mapload.bind(this)}\r\n            {...this.props}\r\n          ></MapComponent>\r\n        </div>\r\n        {mapLoaded && (\r\n          <div style={{ gridColumn: \"1/3\" }}>\r\n            {serviceData && serviceData.length > 0 && (\r\n              <div>\r\n                <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n\r\n                <table\r\n                  className=\"table table-bordered\"\r\n                  style={{ marginTop: \"1%\" }}\r\n                >\r\n                  <tbody>\r\n                    {serviceData.map((serviceDataItem, mainIndex) => {\r\n                      return (\r\n                        ((serviceDataItem?.landData_type == 1 &&\r\n                          serviceDataItem?.selectedLands?.length > 0) ||\r\n                          serviceDataItem?.landData_type == 2) && (\r\n                          <>\r\n                            <tr key={mainIndex}>\r\n                              <td>البلدية</td>\r\n                              <td>{serviceDataItem?.munval?.name}</td>\r\n                              {serviceDataItem?.planeval?.name && (\r\n                                <>\r\n                                  <td>المخطط</td>\r\n                                  <td>\r\n                                    {convertToArabic(\r\n                                      serviceDataItem?.planeval?.name\r\n                                    )}\r\n                                  </td>\r\n                                </>\r\n                              )}\r\n                              {serviceDataItem?.subNameval?.name && (\r\n                                <>\r\n                                  <td>التقسيم</td>\r\n                                  <td>\r\n                                    {convertToArabic(\r\n                                      serviceDataItem?.subNameval?.name\r\n                                    )}\r\n                                  </td>\r\n                                </>\r\n                              )}\r\n                              {serviceDataItem?.blockval?.name && (\r\n                                <>\r\n                                  <td>البلك</td>\r\n                                  <td>\r\n                                    {convertToArabic(\r\n                                      serviceDataItem?.blockval?.name\r\n                                    )}\r\n                                  </td>\r\n                                </>\r\n                              )}\r\n                              {serviceDataItem.noOfParcels && (\r\n                                <>\r\n                                  <td>عدد الأراضي</td>\r\n                                  <td>\r\n                                    {convertToArabic(\r\n                                      serviceDataItem.noOfParcels\r\n                                    )}\r\n                                  </td>\r\n                                </>\r\n                              )}\r\n                              {serviceDataItem.landData_type == 2 && (\r\n                                <td>\r\n                                  <span\r\n                                    key={mainIndex}\r\n                                    className=\"toolsBtnStyle center\"\r\n                                    style={{\r\n                                      width: \"100%\",\r\n                                      position: \"relative\",\r\n                                      display: \"flex\",\r\n                                      justifyContent: \"center\",\r\n                                    }}\r\n                                  >\r\n                                    {serviceDataItem.currentExtent &&\r\n                                      !serviceDataItem?.selectedLands\r\n                                        ?.length && (\r\n                                        // <button\r\n                                        //   className=\" btn btn-primary \"\r\n                                        //   onClick={this.zoom.bind(\r\n                                        //     this,\r\n                                        //     serviceDataItem.currentExtent,\r\n                                        //     serviceDataItem\r\n                                        //   )}\r\n                                        // >\r\n                                        //   اختيار\r\n                                        // </button>\r\n                                        <>\r\n                                          <Tooltip\r\n                                            placement=\"bottom\"\r\n                                            title={t(`actions:Zoom`)}\r\n                                          >\r\n                                            <span\r\n                                              style={{\r\n                                                cursor: \"pointer\",\r\n                                              }}\r\n                                              onClick={this.zoom.bind(\r\n                                                this,\r\n                                                serviceDataItem.currentExtent,\r\n                                                serviceDataItem\r\n                                              )}\r\n                                            >\r\n                                              <FontAwesomeIcon\r\n                                                icon={faSearchPlus}\r\n                                                size={\"1x\"}\r\n                                              />\r\n                                            </span>\r\n                                            {/* </a> */}\r\n                                          </Tooltip>\r\n                                          <Divider type=\"vertical\" />\r\n                                        </>\r\n                                      )}\r\n                                    {id != 92 && (\r\n                                      <>\r\n                                        <Tooltip\r\n                                          placement=\"bottom\"\r\n                                          title={t(`actions:Delete`)}\r\n                                        >\r\n                                          <span\r\n                                            style={{\r\n                                              cursor: \"pointer\",\r\n                                            }}\r\n                                            onClick={this.remove.bind(\r\n                                              this,\r\n                                              mainIndex,\r\n                                              -1\r\n                                            )}\r\n                                          >\r\n                                            <FontAwesomeIcon\r\n                                              icon={faTrash}\r\n                                              size={\"1x\"}\r\n                                            />\r\n                                          </span>\r\n                                        </Tooltip>\r\n                                        <Divider type=\"vertical\" />\r\n                                      </>\r\n                                    )}\r\n                                  </span>\r\n                                </td>\r\n                              )}\r\n                            </tr>\r\n                            {serviceDataItem?.selectedLands?.length > 0 && (\r\n                              <tr>\r\n                                <td colSpan={\"100%\"}>\r\n                                  <table\r\n                                    className=\"table table-bordered\"\r\n                                    style={{ marginTop: \"1%\" }}\r\n                                  >\r\n                                    <thead>\r\n                                      <tr>\r\n                                        <th>رقم القطعه</th>\r\n                                        <th>المساحة من الصك م٢</th>\r\n                                        <th>المساحة بالحروف (م٢)</th>\r\n                                        <th>رقم البلك</th>\r\n                                        <th>الحي</th>\r\n                                        <th>نوع التقسيم</th>\r\n                                        <th>اسم التقسيم</th>\r\n                                        <th>الاستخدام الرئيسي</th>\r\n                                        <th>رمز الاستخدام</th>\r\n                                        <th>الإستخدام التفصيلي</th>\r\n                                        <th>الغرض من الأرض</th>\r\n                                        <th> خيارات</th>\r\n                                      </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                      {serviceDataItem.selectedLands.map(\r\n                                        (e, i) => {\r\n                                          return (\r\n                                            <tr key={i}>\r\n                                              {this.parcel_fields.map(\r\n                                                (field, k) => {\r\n                                                  return (\r\n                                                    <td key={k}>\r\n                                                      <div>\r\n                                                        {!this.state[\r\n                                                          field +\r\n                                                            \"_isEdit_\" +\r\n                                                            mainIndex +\r\n                                                            \"_\" +\r\n                                                            i\r\n                                                        ] ? (\r\n                                                          <span>\r\n                                                            <span>\r\n                                                              {convertToArabic(\r\n                                                                (field ==\r\n                                                                  \"PARCEL_AREA\" &&\r\n                                                                  (+e\r\n                                                                    .attributes?.[\r\n                                                                    field\r\n                                                                  ])?.toFixed(\r\n                                                                    2\r\n                                                                  )) ||\r\n                                                                  e.attributes[\r\n                                                                    field\r\n                                                                  ] ||\r\n                                                                  \"غير متوفر\"\r\n                                                              )}\r\n                                                            </span>\r\n                                                            {this.showEditBtn(\r\n                                                              field,\r\n                                                              e.attributes[\r\n                                                                field\r\n                                                              ]\r\n                                                            ) && (\r\n                                                              <span>\r\n                                                                <button\r\n                                                                  className=\"btn\"\r\n                                                                  style={{\r\n                                                                    marginRight:\r\n                                                                      \"20px\",\r\n                                                                  }}\r\n                                                                  onClick={this.enableEdit.bind(\r\n                                                                    this,\r\n                                                                    field,\r\n                                                                    mainIndex,\r\n                                                                    i\r\n                                                                  )}\r\n                                                                >\r\n                                                                  <i className=\"fas fa-edit\"></i>\r\n                                                                </button>\r\n                                                              </span>\r\n                                                            )}\r\n                                                          </span>\r\n                                                        ) : (\r\n                                                          <span\r\n                                                            style={{\r\n                                                              display: \"grid\",\r\n                                                              gridTemplateColumns:\r\n                                                                \"1fr auto\",\r\n                                                            }}\r\n                                                          >\r\n                                                            <input\r\n                                                              key={i}\r\n                                                              className=\"form-control\"\r\n                                                              type=\"text\"\r\n                                                              defaultValue={\r\n                                                                this[\r\n                                                                  \"edit_\" +\r\n                                                                    field +\r\n                                                                    \"_\" +\r\n                                                                    mainIndex +\r\n                                                                    \"_\" +\r\n                                                                    i\r\n                                                                ] ||\r\n                                                                e.attributes[\r\n                                                                  field\r\n                                                                ] ||\r\n                                                                \"غير متوفر\"\r\n                                                              }\r\n                                                              onChange={this.myChangeHandler.bind(\r\n                                                                this,\r\n                                                                field,\r\n                                                                mainIndex,\r\n                                                                i,\r\n                                                                e\r\n                                                              )}\r\n                                                            />\r\n                                                            <button\r\n                                                              className=\"btn\"\r\n                                                              style={{\r\n                                                                marginRight:\r\n                                                                  \"20px\",\r\n                                                              }}\r\n                                                              onClick={this.saveEdit.bind(\r\n                                                                this,\r\n                                                                e.id,\r\n                                                                field,\r\n                                                                mainIndex,\r\n                                                                i\r\n                                                              )}\r\n                                                            >\r\n                                                              <i className=\"fa fa-floppy-o\"></i>\r\n                                                            </button>\r\n                                                          </span>\r\n                                                        )}\r\n                                                      </div>\r\n                                                    </td>\r\n                                                  );\r\n                                                }\r\n                                              )}\r\n                                              <td>\r\n                                                {/* {id == 92 && (\r\n                                                  <button\r\n                                                    className=\"btn follow\"\r\n                                                    style={{\r\n                                                      margin: \"0px 5px\",\r\n                                                    }}\r\n                                                    onClick={this.openPopup.bind(\r\n                                                      this,\r\n                                                      mainIndex,\r\n                                                      i\r\n                                                    )}\r\n                                                  >\r\n                                                    حدود و أبعاد الأرض\r\n                                                  </button>\r\n                                                )} */}\r\n                                                <span\r\n                                                  key={i}\r\n                                                  className=\"toolsBtnStyle center\"\r\n                                                  style={{\r\n                                                    width: \"100%\",\r\n                                                    position: \"relative\",\r\n                                                    display: \"flex\",\r\n                                                    justifyContent: \"center\",\r\n                                                  }}\r\n                                                >\r\n                                                  {id == 92 && (\r\n                                                    <>\r\n                                                      {/* <Tooltip\r\n                                                        placement=\"bottom\"\r\n                                                        title={\r\n                                                          \"حدود و أبعاد الأرض\"\r\n                                                        }\r\n                                                      >\r\n                                                        <span\r\n                                                          style={{\r\n                                                            cursor: \"pointer\",\r\n                                                          }}\r\n                                                          onClick={this.openPopup.bind(\r\n                                                            this,\r\n                                                            mainIndex,\r\n                                                            i\r\n                                                          )}\r\n                                                        >\r\n                                                          <FontAwesomeIcon\r\n                                                            icon={faArrowsAlt}\r\n                                                            size={\"1x\"}\r\n                                                          />\r\n                                                        </span>\r\n                                                      </Tooltip> */}\r\n                                                      <button\r\n                                                        className=\"btn follow\"\r\n                                                        onClick={this.openPopup.bind(\r\n                                                          this,\r\n                                                          mainIndex,\r\n                                                          i,\r\n                                                          \"parcelData\"\r\n                                                        )}\r\n                                                      >\r\n                                                        حدود و أبعاد الأرض\r\n                                                      </button>\r\n                                                      <Divider type=\"vertical\" />\r\n                                                      <button\r\n                                                        className=\"btn follow\"\r\n                                                        style={{\r\n                                                          margin: \"0px 5px\",\r\n                                                        }}\r\n                                                        onClick={this.openPopup.bind(\r\n                                                          this,\r\n                                                          mainIndex,\r\n                                                          i,\r\n                                                          \"parcelShatfa\"\r\n                                                        )}\r\n                                                      >\r\n                                                        الشطفات\r\n                                                      </button>\r\n                                                      <Divider type=\"vertical\" />\r\n                                                      <button\r\n                                                        className=\"btn follow\"\r\n                                                        style={{\r\n                                                          margin: \"0px 5px\",\r\n                                                        }}\r\n                                                        onClick={this.openPopup.bind(\r\n                                                          this,\r\n                                                          mainIndex,\r\n                                                          i,\r\n                                                          \"parcelElectric\"\r\n                                                        )}\r\n                                                      >\r\n                                                        غرفة الكهرباء\r\n                                                      </button>\r\n                                                      <Divider type=\"vertical\" />\r\n                                                    </>\r\n                                                  )}\r\n\r\n                                                  {/* {id != 92 && (\r\n                                                  <button\r\n                                                    className=\" btn btn-danger \"\r\n                                                    onClick={this.remove.bind(\r\n                                                      this,\r\n                                                      mainIndex,\r\n                                                      i\r\n                                                    )}\r\n                                                  >\r\n                                                    حذف\r\n                                                  </button>\r\n                                                )} */}\r\n                                                  {/* <button\r\n                                                  className=\" btn btn-primary \"\r\n                                                  onClick={this.zoom.bind(\r\n                                                    this,\r\n                                                    e,\r\n                                                    serviceDataItem\r\n                                                  )}\r\n                                                >\r\n                                                  اختيار\r\n                                                </button>\r\n                                                <button\r\n                                                  className=\" btn btn-primary \"\r\n                                                  onClick={this.highlight.bind(\r\n                                                    this,\r\n                                                    e,\r\n                                                    serviceDataItem\r\n                                                  )}\r\n                                                >\r\n                                                  تحديد\r\n                                                </button> */}\r\n\r\n                                                  <Tooltip\r\n                                                    placement=\"bottom\"\r\n                                                    title={t(`actions:Zoom`)}\r\n                                                  >\r\n                                                    <span\r\n                                                      style={{\r\n                                                        cursor: \"pointer\",\r\n                                                      }}\r\n                                                      onClick={this.highlight.bind(\r\n                                                        this,\r\n                                                        e,\r\n                                                        serviceDataItem\r\n                                                      )}\r\n                                                    >\r\n                                                      <FontAwesomeIcon\r\n                                                        icon={faSearchPlus}\r\n                                                        size={\"1x\"}\r\n                                                      />\r\n                                                    </span>\r\n                                                    {/* </a> */}\r\n                                                  </Tooltip>\r\n                                                  <Divider type=\"vertical\" />\r\n                                                  {id != 92 && (\r\n                                                    <>\r\n                                                      <Tooltip\r\n                                                        placement=\"bottom\"\r\n                                                        title={t(\r\n                                                          `actions:Delete`\r\n                                                        )}\r\n                                                      >\r\n                                                        <span\r\n                                                          style={{\r\n                                                            cursor: \"pointer\",\r\n                                                          }}\r\n                                                          onClick={this.remove.bind(\r\n                                                            this,\r\n                                                            mainIndex,\r\n                                                            i\r\n                                                          )}\r\n                                                        >\r\n                                                          <FontAwesomeIcon\r\n                                                            icon={faTrash}\r\n                                                            size={\"1x\"}\r\n                                                          />\r\n                                                        </span>\r\n                                                      </Tooltip>\r\n\r\n                                                      <Divider type=\"vertical\" />\r\n                                                    </>\r\n                                                  )}\r\n                                                </span>\r\n                                              </td>\r\n                                            </tr>\r\n                                          );\r\n                                        }\r\n                                      )}\r\n                                    </tbody>\r\n                                  </table>\r\n                                </td>\r\n                              </tr>\r\n                            )}\r\n                          </>\r\n                        )\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(ServiceIdentifyComponent);\r\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AAcA;AAUA;AACA;AAMA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAsuDA;AAAA;AAAA;AACA;AACA;AAQA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AAuyDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAavBA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AA+mBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAWA;AAEA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AAGA;AAAA;AAEA;AAEA;AAAA;AAAA;AAGA;AACA;AAAA;AAMA;AAEA;AACA;AAAA;AAAA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAKA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAKA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AAIA;AACA;AACA;AAAA;AAUA;AAAA;AAKA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAKA;AAAA;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AAKA;AAAA;AAMA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AAIA;AAAA;AASA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAqBA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAkCA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AAAA;AAOA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAcA;AAMA;AAGA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AAAA;AAOA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA2BA;AACA;AAKA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAIA;AAAA;AAsCA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AAKA;AAAA;AAIA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AAKA;AAAA;AAOA;AAUA;AASA;AACA;AACA;;;;A","sourceRoot":""}
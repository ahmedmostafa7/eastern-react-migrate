{"version":3,"file":"8.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/common/filters_objects.js"],"sourcesContent":["import { querySetting } from \"../propertyCheckIdentifyComponnent/Helpers\";\r\nvar uniqid = require(\"uniqid\");\r\nimport {\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  highlightFeature,\r\n  queryTask,\r\n} from \"./common_func\";\r\nimport { esriRequest } from \"./esri_request\";\r\nvar uniqid = require(\"uniqid\");\r\n\r\nexport const onSearch = async (scope, filterValue) => {\r\n  if (\r\n    !scope.state.serviceData?.find(\r\n      (item) =>\r\n        item.munval?.code == scope.state.munval &&\r\n        item.planeval?.code == scope.state.planeval &&\r\n        item.subNameval?.code == scope.state.subNameval &&\r\n        item.blockval?.code == scope.state.blockval\r\n    )?.selectedLands?.length &&\r\n    filterValue != \"\"\r\n  ) {\r\n    if (scope.searchTimeOut) clearTimeout(scope.searchTimeOut);\r\n    //if (!scope.state.parcelNum?.length) return;\r\n    scope.searchTimeOut = setTimeout(async () => {\r\n      debugger;\r\n      let filterQuery = [];\r\n      filterQuery.push(scope.parcelFilterWhere);\r\n      filterQuery.push(\"PARCEL_PLAN_NO like '%\" + filterValue + \"%'\");\r\n\r\n      let filterWhere = filterQuery.join(\" and \");\r\n      console.log(filterWhere);\r\n      queryTask({\r\n        ...querySetting(\r\n          scope.LayerID.Landbase_Parcel,\r\n          filterWhere,\r\n          false,\r\n          [\"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"],\r\n          scope.mapUrl\r\n        ),\r\n        returnGeometry: false,\r\n        callbackResult: (res) => {\r\n          res.features = res.features.map((e, i) => {\r\n            return {\r\n              ...e,\r\n              i: e.attributes.PARCEL_SPATIAL_ID,\r\n            };\r\n          });\r\n          scope.setState({\r\n            parcelId: null,\r\n            parcelNum: res.features,\r\n          });\r\n        },\r\n      });\r\n    }, 500);\r\n  }\r\n};\r\n\r\nexport const getParcels = (\r\n  scope,\r\n  featureToBeBuffered,\r\n  where,\r\n  settings = {},\r\n  outFields = [\"*\"]\r\n) => {\r\n  return new Promise((resolve, reject) => {\r\n    //if (!scope.state.allParcels) {\r\n    //scope.parcelFilterWhere = where || \"\";\r\n    if (scope.getParcelsWithinBufferedArea && featureToBeBuffered) {\r\n      scope\r\n        .getParcelsWithinBufferedArea(\r\n          featureToBeBuffered,\r\n          where,\r\n          false,\r\n          [...outFields],\r\n          settings\r\n        )\r\n        .then((resps) => {\r\n          resolve(resps.features);\r\n        });\r\n    } else {\r\n      queryTask({\r\n        ...querySetting(\r\n          scope.LayerID.UnplannedParcels || scope.LayerID.Landbase_Parcel,\r\n          where,\r\n          false,\r\n          [...outFields],\r\n          (scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl) ||\r\n            mapUrl\r\n        ),\r\n        callbackResult: (res) => {\r\n          resolve(res.features);\r\n        },\r\n        ...settings,\r\n      });\r\n    }\r\n    // } else {\r\n    //   resolve(scope.state.allParcels);\r\n    // }\r\n  });\r\n};\r\n\r\nexport const onDistrictChange = (scope, e, callback) => {\r\n  if (\r\n    (!callback || (callback && typeof callback == \"object\")) &&\r\n    !scope.loadLists\r\n  ) {\r\n    clearGraphicFromLayer(scope.map, \"SelectLandsGraphicLayer\");\r\n    clearGraphicFromLayer(scope.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n    const {\r\n      values,\r\n      currentModule: { id },\r\n    } = scope.props;\r\n\r\n    scope.setState({\r\n      districtval: e,\r\n      parcelval: undefined,\r\n      parcelId: null,\r\n      parcelNum: [],\r\n      parcelData: scope.parcelData,\r\n      plan_no: undefined,\r\n    });\r\n\r\n    queryTask({\r\n      url:\r\n        ((scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl) ||\r\n          mapUrl) +\r\n        \"/\" +\r\n        scope.LayerID.District_Boundary,\r\n      where: `DISTRICT_NAME ='${e}'`,\r\n      outFields: [\"DISTRICT_NAME\"],\r\n      returnGeometry: true,\r\n      callbackResult: (res) => {\r\n        scope.pol = res.features[0];\r\n        highlightFeature(res.features[0], scope.map, {\r\n          layerName: \"SelectGraphicLayer\",\r\n          isZoom: true,\r\n          isHiglightSymbol: true,\r\n          highlighColor: [0, 0, 0, 0.25],\r\n        });\r\n      },\r\n    });\r\n\r\n    scope.getServiceParcels(scope.state.munval, e, null, null);\r\n  } else {\r\n    if (e) {\r\n      scope.pol = scope.state.Districts.filter((r) => r.code == e)?.[0];\r\n      scope.getServiceParcels(scope.state.munval, e, null, null);\r\n    } else {\r\n      if (callback && typeof callback == \"function\") {\r\n        callback();\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const onMunChange = (scope, e, callback) => {\r\n  let serviceDataItem = scope.state.serviceData?.find(\r\n    (item) =>\r\n      item.munval?.code == e &&\r\n      item.planeval?.code == undefined &&\r\n      item.subNameval?.code == undefined &&\r\n      item.blockval?.code == undefined\r\n  );\r\n  if (\r\n    (!callback || (callback && typeof callback == \"object\")) &&\r\n    !scope.loadLists\r\n  ) {\r\n    clearGraphicFromLayer(scope.map, \"SelectLandsGraphicLayer\");\r\n    clearGraphicFromLayer(scope.map, \"ParcelPlanNoGraphicLayer\");\r\n    const {\r\n      values,\r\n      currentModule: { id },\r\n    } = scope.props;\r\n    scope.setState({\r\n      munval: e,\r\n      districtval: undefined,\r\n      planeval: undefined,\r\n      parcelval: undefined,\r\n      parcelId: null,\r\n      parcelNum: [],\r\n      parcelData: scope.parcelData,\r\n      plan_no: undefined,\r\n    });\r\n    scope.planId = null;\r\n\r\n    queryTask({\r\n      url:\r\n        ((scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl) ||\r\n          mapUrl) +\r\n        \"/\" +\r\n        scope.LayerID.Municipality_Boundary,\r\n      where: `MUNICIPALITY_NAME='${e}'`,\r\n      outFields: [\"MUNICIPALITY_NAME\"],\r\n      returnGeometry: true,\r\n      callbackResult: (res) => {\r\n        scope.pol = res.features[0];\r\n        highlightFeature(res.features[0], scope.map, {\r\n          layerName: \"SelectGraphicLayer\",\r\n          isZoom: true,\r\n          isHiglightSymbol: true,\r\n          highlighColor: [0, 0, 0, 0.25],\r\n        });\r\n      },\r\n    });\r\n    if (scope.props.currentModule.record.app_id == 27) {\r\n      GetDistrictByMunID(scope, e, () => {});\r\n    } else {\r\n      GetPlansByMunID(scope, e, () => {});\r\n    }\r\n    scope.getServiceParcels(e, null, null, null);\r\n  } else {\r\n    debugger;\r\n    scope.pol = scope.state.MunicipalityNames.filter((m) => m.code == e)?.[0];\r\n    // queryTask({\r\n    //   url:\r\n    //     ((scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl) ||\r\n    //       mapUrl) +\r\n    //     \"/\" +\r\n    //     scope.LayerID.Municipality_Boundary,\r\n    //   where: `MUNICIPALITY_NAME='${e}'`,\r\n    //   outFields: [\"MUNICIPALITY_NAME\"],\r\n    //   returnGeometry: true,\r\n    //   callbackResult: (res) => {\r\n    //     scope.pol = res.features[0];\r\n    if (e) {\r\n      if (scope.props.currentModule.record.app_id == 27) {\r\n        GetDistrictByMunID(scope, e, callback);\r\n      } else {\r\n        GetPlansByMunID(scope, e, callback);\r\n      }\r\n      // if (\r\n      //   !serviceDataItem?.selectedLands?.length &&\r\n      //   scope.state.munval &&\r\n      //   !scope.state.planeval &&\r\n      //   !scope.state.subNameval &&\r\n      //   !scope.state.blockval\r\n      // ) {\r\n      //   highlightFeature(scope.pol, scope.map, {\r\n      //     layerName: \"SelectGraphicLayer\",\r\n      //     isZoom: true,\r\n      //     isHiglightSymbol: true,\r\n      //     highlighColor: [0, 0, 0, 0.25],\r\n      //   });\r\n      //   //scope.getServiceParcels(e, null, null, null);\r\n      // }\r\n    } else {\r\n      if (callback && typeof callback == \"function\") {\r\n        callback();\r\n      }\r\n    }\r\n    //   },\r\n    // });\r\n  }\r\n};\r\n\r\nexport const GetDistrictByMunID = (scope, e, callback) => {\r\n  getParcels(\r\n    scope,\r\n    scope.state.MunicipalityNames?.filter((m) => m?.code == e)?.[0],\r\n    `MUNICIPALITY_NAME='${e}'`,\r\n    { returnDistinctValues: true },\r\n    [\"DISTRICT_NAME\"]\r\n  ).then((features) => {\r\n    getFeatureDomainName(\r\n      features,\r\n      scope.LayerID.UnplannedParcels || scope.LayerID.Landbase_Parcel,\r\n      false,\r\n      (scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl) || mapUrl\r\n    ).then((res) => {\r\n      scope.setState(\r\n        {\r\n          Districts: res.map((r) => {\r\n            return {\r\n              code: r.attributes.DISTRICT_NAME_Code,\r\n              name: r.attributes.DISTRICT_NAME,\r\n            };\r\n          }),\r\n        },\r\n        callback\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nexport const GetPlansByMunID = (scope, e, callback) => {\r\n  getParcels(\r\n    scope,\r\n    scope.state.MunicipalityNames?.filter((m) => m?.code == e)?.[0],\r\n    `MUNICIPALITY_NAME='${e}'`,\r\n    { returnDistinctValues: true },\r\n    [\"PLAN_SPATIAL_ID\", \"PLAN_NO\"]\r\n  ).then((features) => {\r\n    scope.setState(\r\n      {\r\n        PlanNum: features\r\n          .filter((r) => r.attributes.PLAN_SPATIAL_ID && r.attributes.PLAN_NO)\r\n          .map((e, i) => {\r\n            return {\r\n              ...e,\r\n              i: e.attributes.PLAN_SPATIAL_ID,\r\n            };\r\n          }),\r\n      },\r\n      callback\r\n    );\r\n  });\r\n};\r\nexport const onPlaneChange = (scope, f, callback) => {\r\n  var planSpatialId = scope.state.PlanNum.filter((m) => m.i == f)?.[0]\r\n    ?.attributes?.PLAN_SPATIAL_ID;\r\n  let serviceDataItem = scope.state.serviceData?.find(\r\n    (item) =>\r\n      item.munval?.code == scope.state.munval &&\r\n      item.planeval?.code == f &&\r\n      item.subNameval?.code == undefined &&\r\n      item.blockval?.code == undefined\r\n  );\r\n  debugger;\r\n  if (\r\n    (!callback || (callback && typeof callback == \"object\")) &&\r\n    !scope.loadLists\r\n  ) {\r\n    clearGraphicFromLayer(scope.map, \"SelectLandsGraphicLayer\");\r\n    clearGraphicFromLayer(scope.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n    // if (\r\n    //   scope.state.serviceData.length &&\r\n    //   !scope.state.serviceData?.find(\r\n    //     (item) =>\r\n    //       item.munval?.code == scope.state.munval && item.planeval?.code == f\r\n    //   )\r\n    // ) {\r\n    //   window.notifySystem(\"warning\", \"يجب اختيار مخطط واحد فقط\");\r\n    //   return;\r\n    // }\r\n\r\n    const {\r\n      values,\r\n      currentModule: { id },\r\n    } = scope.props;\r\n\r\n    scope.setState({\r\n      plan_no: scope.state.PlanNum.filter((m) => m.i == f)?.[0]?.attributes\r\n        ?.PLAN_NO,\r\n      planeval: f,\r\n      subTypeval: undefined,\r\n      subType_name: undefined,\r\n      subNameval: undefined,\r\n      subName_name: undefined,\r\n      blockval: undefined,\r\n      block_no: undefined,\r\n      parcelval: undefined,\r\n      blockNum: [],\r\n      subDivNames: [],\r\n      subDivType: [],\r\n      parcelId: null,\r\n      parcelNum: [],\r\n      parcelData: scope.parcelData,\r\n    });\r\n\r\n    queryTask({\r\n      ...querySetting(\r\n        scope.LayerID.Plan_Data,\r\n        `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n        true,\r\n        [\"MUNICIPALITY_NAME\"]\r\n      ),\r\n      callbackResult: (res) => {\r\n        scope.pol = res.features[0];\r\n        highlightFeature(res.features[0], scope.map, {\r\n          layerName: \"SelectGraphicLayer\",\r\n          isZoom: true,\r\n          isHiglightSymbol: true,\r\n          highlighColor: [0, 0, 0, 0.25],\r\n        });\r\n        scope.planId = planSpatialId;\r\n      },\r\n    });\r\n\r\n    GetBlocksByPlanID(scope, f, planSpatialId, callback);\r\n    scope.getServiceParcels(scope.state.munval, f, null, null);\r\n    esriRequest(\r\n      ((scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl) ||\r\n        mapUrl) +\r\n        \"/\" +\r\n        scope.LayerID.Subdivision\r\n    ).then((response) => {\r\n      scope.setState({ subDivType: response.fields[7].domain.codedValues });\r\n    });\r\n    if (scope.checkDrawAvailability) {\r\n      scope.checkDrawAvailability();\r\n    }\r\n  } else {\r\n    scope.pol = scope.state.PlanNum.filter(\r\n      (m) =>\r\n        (m.attributes?.PLAN_SPATIAL_ID && m.i == f) || m.attributes.PLAN_NO == f\r\n    )?.[0];\r\n\r\n    if (f) {\r\n      GetBlocksByPlanID(scope, f, planSpatialId, callback);\r\n      // if (\r\n      //   !serviceDataItem?.selectedLands?.length &&\r\n      //   scope.state.munval &&\r\n      //   scope.state.planeval &&\r\n      //   !scope.state.subNameval &&\r\n      //   !scope.state.blockval\r\n      // ) {\r\n      //   highlightFeature(scope.pol, scope.map, {\r\n      //     layerName: \"SelectGraphicLayer\",\r\n      //     isZoom: true,\r\n      //     isHiglightSymbol: true,\r\n      //     highlighColor: [0, 0, 0, 0.25],\r\n      //   });\r\n      //   // scope.getServiceParcels(scope.state.munval, f, null, null);\r\n      // }\r\n      esriRequest(\r\n        ((scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl) ||\r\n          mapUrl) +\r\n          \"/\" +\r\n          scope.LayerID.Subdivision\r\n      ).then((response) => {\r\n        scope.setState({ subDivType: response.fields[7].domain.codedValues });\r\n      });\r\n      if (scope.checkDrawAvailability) {\r\n        scope.checkDrawAvailability();\r\n      }\r\n    } else {\r\n      if (callback && typeof callback == \"function\") {\r\n        callback();\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const GetBlocksByPlanID = (scope, f, planSpatialId, callback) => {\r\n  getParcels(\r\n    scope,\r\n    scope.state.PlanNum.filter(\r\n      (m) =>\r\n        (m.attributes?.PLAN_SPATIAL_ID && m.i == f) || m.attributes.PLAN_NO == f\r\n    )?.[0],\r\n    `PLAN_SPATIAL_ID='${planSpatialId}' AND PARCEL_BLOCK_NO IS NOT NULL AND LOWER(PARCEL_BLOCK_NO) <> 'null'`,\r\n    { returnDistinctValues: true },\r\n    [\"PARCEL_BLOCK_NO\", \"BLOCK_SPATIAL_ID\"]\r\n  ).then((features) => {\r\n    scope.setState(\r\n      {\r\n        blockNum: features\r\n          .filter(\r\n            (r) => r.attributes.BLOCK_SPATIAL_ID && r.attributes.PARCEL_BLOCK_NO\r\n          )\r\n          .map((e, i) => {\r\n            return {\r\n              attributes: {\r\n                BLOCK_NO: e.attributes.PARCEL_BLOCK_NO, //e.attributes.BLOCK_SPATIAL_ID,   ||\r\n                BLOCK_SPATIAL_ID: e.attributes.BLOCK_SPATIAL_ID,\r\n              },\r\n              i: e.attributes.BLOCK_SPATIAL_ID,\r\n            };\r\n          }),\r\n      },\r\n      callback\r\n    );\r\n  });\r\n};\r\nexport const onSubTypeChange = (scope, e, callback) => {\r\n  let serviceDataItem = scope.state.serviceData?.find(\r\n    (item) =>\r\n      item.munval?.code == scope.state.munval &&\r\n      item.planeval?.code == scope.state.planeval &&\r\n      item.subTypeval?.code == e &&\r\n      item.blockval?.code == undefined\r\n  );\r\n  if (\r\n    (!callback || (callback && typeof callback == \"object\")) &&\r\n    !scope.loadLists\r\n  ) {\r\n    clearGraphicFromLayer(scope.map, \"SelectLandsGraphicLayer\");\r\n    clearGraphicFromLayer(scope.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n    scope.setState({\r\n      subType_name: scope.state.subDivType.filter((m) => m?.code == e)[0].name,\r\n      subTypeval: e,\r\n      subNameval: undefined,\r\n      subName_name: undefined,\r\n      blockval: undefined,\r\n      block_no: undefined,\r\n      parcelval: undefined,\r\n    });\r\n    getSubNamesBySubType(scope, e, callback);\r\n  } else {\r\n    if (e) {\r\n      getSubNamesBySubType(scope, e, callback); // callback\r\n    } else {\r\n      if (callback && typeof callback == \"function\") {\r\n        callback();\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const getSubNamesBySubType = (scope, e, callback) => {\r\n  getParcels(\r\n    scope,\r\n    scope.state.subDivType?.filter((m) => m?.code == e)?.[0],\r\n    `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${scope.planId}`,\r\n    { returnDistinctValues: true },\r\n    [\"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_SPATIAL_ID\"]\r\n  ).then((features) => {\r\n    scope.setState(\r\n      {\r\n        subDivNames: features\r\n          .filter(\r\n            (r) =>\r\n              r.attributes.SUBDIVISION_SPATIAL_ID != null &&\r\n              r.attributes.SUBDIVISION_DESCRIPTION != null\r\n          )\r\n          .reduce((a, b) => {\r\n            if (\r\n              !a.find(\r\n                (r) =>\r\n                  r.attributes.SUBDIVISION_SPATIAL_ID ==\r\n                  b.attributes.SUBDIVISION_SPATIAL_ID\r\n              )\r\n            ) {\r\n              a.push(b);\r\n            }\r\n            return a;\r\n          }, [])\r\n          .map((e, i) => {\r\n            return {\r\n              attributes: {\r\n                SUBDIVISION_SPATIAL_ID: e.attributes.SUBDIVISION_SPATIAL_ID, //  e.attributes.PARCEL_BLOCK_NO ||\r\n                SUBDIVISION_DESCRIPTION: e.attributes.SUBDIVISION_DESCRIPTION,\r\n              },\r\n              i: e.attributes.SUBDIVISION_SPATIAL_ID,\r\n            };\r\n          }),\r\n      },\r\n      callback\r\n    );\r\n    //scope.setState({ subDivNames: features }, callback);\r\n  });\r\n};\r\n\r\nexport const onSubNameChange = (scope, e, callback) => {\r\n  let subName = scope.state.subDivNames.filter(\r\n    (m) => m.attributes.SUBDIVISION_SPATIAL_ID == e || m.i == e\r\n  )?.[0];\r\n  let serviceDataItem = scope.state.serviceData?.find(\r\n    (item) =>\r\n      item.munval?.code == scope.state.munval &&\r\n      item.planeval?.code == scope.state.planeval &&\r\n      item.subNameval?.code == subName?.attributes?.SUBDIVISION_SPATIAL_ID &&\r\n      item.blockval?.code == undefined\r\n  );\r\n\r\n  if (\r\n    (!callback || (callback && typeof callback == \"object\")) &&\r\n    !scope.loadLists\r\n  ) {\r\n    clearGraphicFromLayer(scope.map, \"SelectLandsGraphicLayer\");\r\n    clearGraphicFromLayer(scope.map, \"ParcelPlanNoGraphicLayer\");\r\n    const {\r\n      values,\r\n      currentModule: { id },\r\n    } = scope.props;\r\n    scope.setState({\r\n      subName_name: subName?.attributes?.SUBDIVISION_DESCRIPTION,\r\n      subNameval: subName?.attributes?.SUBDIVISION_SPATIAL_ID,\r\n      blockval: undefined,\r\n      block_no: undefined,\r\n      parcelval: undefined,\r\n      parcelNum: [],\r\n      parcelId: null,\r\n    });\r\n\r\n    queryTask({\r\n      ...querySetting(\r\n        scope.LayerID.Subdivision,\r\n        `SUBDIVISION_SPATIAL_ID=${subName?.attributes?.SUBDIVISION_SPATIAL_ID}`,\r\n        true,\r\n        [\"SUBDIVISION_SPATIAL_ID\"]\r\n      ),\r\n      callbackResult: (res) => {\r\n        scope.pol = res.features[0];\r\n        highlightFeature(res.features[0], scope.map, {\r\n          layerName: \"SelectGraphicLayer\",\r\n          isZoom: true,\r\n          isHiglightSymbol: true,\r\n          highlighColor: [0, 0, 0, 0.25],\r\n        });\r\n      },\r\n    });\r\n    scope.getServiceParcels(\r\n      scope.state.munval,\r\n      scope.state.districtval || scope.state.planeval,\r\n      subName?.attributes?.SUBDIVISION_SPATIAL_ID,\r\n      null\r\n    );\r\n  } else {\r\n    scope.pol = subName;\r\n    // if (\r\n    //   !serviceDataItem?.selectedLands?.length &&\r\n    //   scope.state.munval &&\r\n    //   scope.state.planeval &&\r\n    //   scope.state.subNameval &&\r\n    //   !scope.state.blockval\r\n    // ) {\r\n    //   highlightFeature(scope.pol, scope.map, {\r\n    //     layerName: \"SelectGraphicLayer\",\r\n    //     isZoom: true,\r\n    //     isHiglightSymbol: true,\r\n    //     highlighColor: [0, 0, 0, 0.25],\r\n    //   });\r\n    // scope.getServiceParcels(\r\n    //   scope.state.munval,\r\n    //   scope.state.districtval || scope.state.planeval,\r\n    //   subName?.attributes?.SUBDIVISION_SPATIAL_ID,\r\n    //   null\r\n    // );\r\n    //}\r\n    if (callback && typeof callback == \"function\") {\r\n      callback();\r\n    }\r\n  }\r\n};\r\n\r\nexport const onBlockChange = (scope, e, callback) => {\r\n  let blockObj = scope.state.blockNum.filter(\r\n    (m) => m.attributes.BLOCK_SPATIAL_ID == e || m.i == e\r\n  )?.[0];\r\n  let serviceDataItem = scope.state.serviceData?.find(\r\n    (item) =>\r\n      item.munval?.code == scope.state.munval &&\r\n      item.planeval?.code == scope.state.planeval &&\r\n      item.subNameval?.code == scope.state.subNameval &&\r\n      item.blockval?.code == blockObj?.attributes?.BLOCK_SPATIAL_ID\r\n  );\r\n  if (\r\n    (!callback || (callback && typeof callback == \"object\")) &&\r\n    !scope.loadLists\r\n  ) {\r\n    clearGraphicFromLayer(scope.map, \"SelectLandsGraphicLayer\");\r\n    clearGraphicFromLayer(scope.map, \"ParcelPlanNoGraphicLayer\");\r\n\r\n    const {\r\n      values,\r\n      currentModule: { id },\r\n    } = scope.props;\r\n\r\n    scope.setState({\r\n      block_no: blockObj?.attributes?.BLOCK_NO,\r\n      blockval: blockObj?.attributes?.BLOCK_SPATIAL_ID,\r\n      parcelval: undefined,\r\n      parcelId: null,\r\n      parcelNum: [],\r\n    });\r\n\r\n    queryTask({\r\n      ...querySetting(\r\n        scope.LayerID.Survey_Block,\r\n        `BLOCK_SPATIAL_ID=${blockObj?.attributes?.BLOCK_SPATIAL_ID}`,\r\n        true,\r\n        [\"BLOCK_SPATIAL_ID\"]\r\n      ),\r\n      callbackResult: (res) => {\r\n        scope.pol = res.features[0];\r\n        highlightFeature(res.features[0], scope.map, {\r\n          layerName: \"SelectGraphicLayer\",\r\n          isZoom: true,\r\n          isHiglightSymbol: true,\r\n          highlighColor: [0, 0, 0, 0.25],\r\n        });\r\n      },\r\n    });\r\n\r\n    scope.getServiceParcels(\r\n      scope.state.munval,\r\n      scope.state.districtval || scope.state.planeval,\r\n      null,\r\n      blockObj?.attributes?.BLOCK_SPATIAL_ID\r\n    );\r\n  } else {\r\n    scope.pol = blockObj;\r\n    // getParcels(scope, scope.pol, `BLOCK_SPATIAL_ID=${e}`).then((features) => {\r\n    //   scope.setState({\r\n    //     parcelSearch: null,\r\n    //     parcelNum: features\r\n    //       .filter((r) => r.attributes.BLOCK_SPATIAL_ID == e)\r\n    //       .map((e, i) => {\r\n    //         return {\r\n    //           ...e,\r\n    //           i,\r\n    //         };\r\n    //       }),\r\n    //   });\r\n    // });\r\n    // if (\r\n    //   !serviceDataItem?.selectedLands?.length &&\r\n    //   scope.state.munval &&\r\n    //   scope.state.planeval &&\r\n    //   !scope.state.subNameval &&\r\n    //   scope.state.blockval\r\n    // ) {\r\n    //   highlightFeature(scope.pol, scope.map, {\r\n    //     layerName: \"SelectGraphicLayer\",\r\n    //     isZoom: true,\r\n    //     isHiglightSymbol: true,\r\n    //     highlighColor: [0, 0, 0, 0.25],\r\n    //   });\r\n    // scope.getServiceParcels(\r\n    //   scope.state.munval,\r\n    //   scope.state.districtval || scope.state.planeval,\r\n    //   null,\r\n    //   blockObj?.attributes?.BLOCK_SPATIAL_ID\r\n    // );\r\n    // }\r\n    if (callback && typeof callback == \"function\") {\r\n      callback();\r\n    }\r\n  }\r\n};\r\n\r\nexport const onLandParcelChange = (scope, f, callback) => {\r\n  //;\r\n  let serviceDataItem = scope.state.serviceData?.find(\r\n    (item) =>\r\n      item.munval?.code == scope.state.munval &&\r\n      item.planeval?.code == scope.state.planeval &&\r\n      item.subNameval?.code == scope.state.subNameval &&\r\n      item.blockval?.code == scope.state.blockval\r\n  );\r\n  let selectedLands = serviceDataItem?.selectedLands || [];\r\n\r\n  var e = serviceDataItem?.parcelNum?.filter((m) => m.i === f)?.[0]?.attributes\r\n    ?.PARCEL_SPATIAL_ID;\r\n  if (!e) {\r\n    e = scope.state.parcelNum?.filter((m) => m.i === f)?.[0]?.attributes\r\n      ?.PARCEL_SPATIAL_ID;\r\n    scope.RolBackParcelNum = scope.state.parcelNum || [];\r\n  } else {\r\n    scope.RolBackParcelNum = serviceDataItem?.parcelNum;\r\n  }\r\n\r\n  var s = serviceDataItem?.parcelNum?.filter((m) => m.i === f)?.[0]?.attributes\r\n    ?.SUBMISSIONNO;\r\n\r\n  if (!s) {\r\n    s = scope.state.parcelNum?.filter((m) => m.i === f)?.[0]?.attributes\r\n      ?.PARCEL_SPATIAL_ID;\r\n  }\r\n\r\n  if (\r\n    (!callback || (callback && typeof callback == \"object\")) &&\r\n    !scope.loadLists\r\n  ) {\r\n    scope.setState({\r\n      parcelId: e,\r\n      parcelval: f,\r\n      SUBMISSIONNO: s,\r\n    });\r\n    scope.RolBackPol = scope.pol;\r\n\r\n    if (e) {\r\n      queryTask({\r\n        url:\r\n          ((scope.LayerID.UnplannedParcels && window.propetryCheckMapUrl) ||\r\n            mapUrl) +\r\n          \"/\" +\r\n          (scope.LayerID.UnplannedParcels || scope.LayerID.Landbase_Parcel),\r\n        where: `PARCEL_SPATIAL_ID='${e}'`,\r\n        outFields: [\"PARCEL_SPATIAL_ID\"],\r\n        returnGeometry: true,\r\n        callbackResult: (res) => {\r\n          if (serviceDataItem && !selectedLands.length) {\r\n            serviceDataItem.selectedLandsT = [];\r\n          }\r\n          highlightFeature(res.features[0], scope.map, {\r\n            layerName: \"SelectGraphicLayer\",\r\n            strokeColor: [0, 0, 0],\r\n            highlightWidth: 3,\r\n            isHighlighPolygonBorder: true,\r\n            isZoom: true,\r\n            zoomFactor: 50,\r\n          });\r\n        },\r\n      });\r\n    }\r\n  } else {\r\n    // clearGraphicFromLayer(scope.map, \"SelectGraphicLayer\");\r\n    if (f) {\r\n      var prevParcelId = scope.state.parcelId;\r\n      var g = serviceDataItem?.parcelNum?.filter((m) => m.i === f)?.[0];\r\n\r\n      if (!g) {\r\n        g = scope.state.parcelNum?.filter((m) => m.i === f)?.[0];\r\n      }\r\n      scope.state[\"parcelId\"] = g?.attributes?.PARCEL_SPATIAL_ID;\r\n      //scope.setState({ parcelId: g.attributes.PARCEL_SPATIAL_ID });\r\n\r\n      scope.LandHoverOff(\r\n        scope.map\r\n          .getLayer(\"SelectGraphicLayer\")\r\n          .graphics.find(\r\n            (prevGraphic) =>\r\n              prevGraphic?.attributes?.PARCEL_SPATIAL_ID == prevParcelId\r\n          )\r\n      );\r\n\r\n      scope.setState({ parcelval: f });\r\n    }\r\n  }\r\n\r\n  if (callback && typeof callback == \"function\") {\r\n    callback();\r\n  }\r\n};\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AAEA;AAAA;AACA;AAEA;AAAA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAIA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAIA;AAAA;AAGA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AAIA;AAAA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAIA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AAAA;AACA;AAGA;AAAA;AAGA;AAEA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAIA;AAAA;AAGA;AAEA;AAOA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AAAA;AAIA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AAAA;AAIA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;A","sourceRoot":""}
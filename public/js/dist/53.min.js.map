{"version":3,"file":"53.min.js","sources":["webpack:///./src/app/components/inputs/fields/identify/Component/FilterComponentInvest/index.js","webpack:///./src/app/components/inputs/fields/identify/Component/InvestIdentifyComponnent/Helpers.js","webpack:///./src/app/components/inputs/fields/identify/Component/InvestIdentifyComponnent/index.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Select, Input, message, Spin } from \"antd\";\r\nimport { investMapUrl, investMapLayers, layersSetting, InvestMunicpality } from \"../mapviewer/config\";\r\nimport {\r\n  getFeatureDomainName,\r\n  getLayerId,\r\n  isLayerExist,\r\n  queryTask,\r\n  showLoading,\r\n  zoomToFeatureByFilter,\r\n  clearGraphicFromLayer,\r\n  convertToArabic,\r\n} from \"../common/common_func\";\r\n\r\nclass FilterComponentInvest extends Component {\r\n  state = {\r\n    searchLayer: null,\r\n    searchLayers: [],\r\n    formValues: {},\r\n    searchFields: [],\r\n    isActiveBufferSearch: false,\r\n    showInfo: false,\r\n    noData: false,\r\n  };\r\n  self = this;\r\n  mapPoint = null;\r\n\r\n  componentDidMount() {\r\n\r\n    //\r\n    this.setState({\r\n      searchLayers: Object.keys(investMapLayers)\r\n        .map((key) => {\r\n          return {\r\n            layerName: key,\r\n            layer: investMapLayers[key],\r\n            name: investMapLayers[key].name,\r\n          };\r\n        })\r\n        .filter((l) => {\r\n          return (\r\n            l.layer.searchFields &&\r\n            isLayerExist(this.props.map.__mapInfo, l.layerName)\r\n          );\r\n        }),\r\n    });\r\n\r\n    if (this.props.searchLayer) {\r\n      this.updateSearchSelect(this.props.searchLayer)\r\n    }\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    clearGraphicFromLayer(this.props.map, \"ZoomGraphicLayer\");\r\n  }\r\n  handleSearchSelect = () => (layer) => {\r\n    this.updateSearchSelect(layer);\r\n  };\r\n\r\n  updateSearchSelect = (layer) => {\r\n    this.setState({\r\n      searchLayer: layer,\r\n      showInfo: false,\r\n      noData: false,\r\n      formValues: {},\r\n      searchFields: [],\r\n      isActiveBufferSearch: false,\r\n    });\r\n    this.props.setSelectMapLayer(layer)\r\n    this.getListsValue(layer);\r\n  }\r\n\r\n  getListsValue = (layer, getListsAfterFieldName, parentFilter) => {\r\n    //\r\n    //get all filters\r\n    let promiseQueries = [];\r\n    let fieldsName = [];\r\n    let layerdId = getLayerId(this.props.map.__mapInfo, layer);\r\n    let uniqueFieldsFilter = [];\r\n\r\n    investMapLayers[layer]?.searchFields\r\n      ?.filter((x) => !x.isSearch)\r\n      .forEach((item, index) => {\r\n        if (!getListsAfterFieldName) {\r\n          fieldsName.push(item.field);\r\n\r\n          let filterQuery = parentFilter\r\n            ? parentFilter + \" and \" + item.field + \" is not null\"\r\n            : \"MUNICIPALITY_NAME in (\" + InvestMunicpality + \")\";\r\n\r\n          uniqueFieldsFilter.push(item.field);\r\n\r\n          promiseQueries.push(\r\n            queryTask({\r\n              url: investMapUrl + \"/\" + layerdId,\r\n              where: filterQuery,\r\n              outFields:\r\n                item.zoomLayer &&\r\n                  item.zoomLayer.filterField &&\r\n                  !item.zoomLayer.isNotSameAttributeNameInLayer\r\n                  ? [item.field, item.zoomLayer.filterField]\r\n                  : [item.field],\r\n              returnGeometry: false,\r\n              returnExecuteObject: true,\r\n              returnDistinctValues: true,\r\n            })\r\n          );\r\n        } else {\r\n          if (item.field == getListsAfterFieldName)\r\n            getListsAfterFieldName = null;\r\n        }\r\n      });\r\n\r\n    if (promiseQueries.length > 0) showLoading(true);\r\n    else {\r\n      this.setState({\r\n        searchFields: investMapLayers[layer]?.searchFields?.filter(\r\n          (x) => !x.isSearch\r\n        ),\r\n      });\r\n    }\r\n\r\n    /*if (!this.state.formValues[\"MUNICIPALITY_NAME\"]) {\r\n      promiseQueries = [promiseQueries[0]];\r\n      fieldsName = [fieldsName[0]]\r\n    }*/\r\n\r\n    Promise.all(promiseQueries).then((resultsData) => {\r\n      this.mapResultWithDomain(resultsData, fieldsName, layerdId).then(\r\n        (data) => {\r\n          data.forEach((item, index) => {\r\n            let searchField = investMapLayers[layer]?.searchFields?.find(\r\n              (x) => x.field == fieldsName[index]\r\n            );\r\n\r\n            let key = uniqueFieldsFilter[index];\r\n\r\n            \r\n            let arrayUniqueByKey = [...new Map(item.features.map(item =>\r\n              [item.attributes[key], item])).values()];\r\n\r\n            item.features = [...arrayUniqueByKey];\r\n\r\n            if (item.features.length > 0) {\r\n              searchField.dataList =\r\n                fieldsName[index] === \"MUNICIPALITY_NAME\"\r\n                  ? [\r\n                    ...item.features\r\n                      .filter(\r\n                        (f) =>\r\n                          typeof f.attributes[\"MUNICIPALITY_NAME\"] ===\r\n                          \"string\"\r\n                      )\r\n                      .sort((a, b) =>\r\n                        a.attributes[\"MUNICIPALITY_NAME\"].localeCompare(\r\n                          b.attributes[\"MUNICIPALITY_NAME\"],\r\n                          \"ar\"\r\n                        )\r\n                      ),\r\n                  ]\r\n                  : [...item.features];\r\n            } else {\r\n              searchField.dataList = [];\r\n            }\r\n          });\r\n          showLoading(false);\r\n          this.setState({\r\n            searchFields: investMapLayers[layer]?.searchFields?.filter((x) => !x.isSearch)\r\n            , formValues: { ...this.state.formValues },\r\n          });\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  mapResultWithDomain = (results, fieldsName, layerId) => {\r\n    return new Promise((resolve, reject) => {\r\n      let count = fieldsName.length;\r\n\r\n      results.forEach((item, index) => {\r\n        getFeatureDomainName(item.features, layerId, false, investMapUrl).then((domainResult) => {\r\n          if (domainResult)\r\n            item.features = domainResult;\r\n\r\n          --count;\r\n          if (count < 1) {\r\n            resolve(results);\r\n          }\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  selectChange = (name, listData, item) => (e) => {\r\n    this.setState({ showInfo: false, noData: false });\r\n    if (!e) {\r\n      clearGraphicFromLayer(this.props.map, 'ZoomGraphicLayer');\r\n      this.setState({ [name]: undefined })\r\n    }\r\n    this.setState(\r\n      { formValues: { ...this.state.formValues, [name]: e }, },\r\n      () => {\r\n        let searchField = investMapLayers[\r\n          this.state.searchLayer\r\n        ].searchFields.find((i) => i.field == name && !i.isSearch);\r\n        if (searchField) {\r\n          let filterQuery = [];\r\n\r\n          if (searchField.zoomLayer) {\r\n            let item = searchField.dataList.find(\r\n              (x) =>\r\n                (x.attributes[name + \"_Code\"] || x.attributes[name]) ==\r\n                this.state.formValues[name]\r\n            );\r\n\r\n            if (item) {\r\n              let where = \"\";\r\n              if (searchField.zoomLayer.isNotSameAttributeNameInLayer) {\r\n                where =\r\n                  searchField.zoomLayer.filterField +\r\n                  \"=\" +\r\n                  \"'\" +\r\n                  (item.attributes[searchField.field + \"_Code\"] ||\r\n                    item.attributes[searchField.zoomLayer.field]) +\r\n                  \"'\";\r\n              } else {\r\n                where =\r\n                  searchField.zoomLayer.filterField +\r\n                  \"=\" +\r\n                  \"'\" +\r\n                  (item.attributes[\r\n                    searchField.zoomLayer.filterField + \"_Code\"\r\n                  ] || item.attributes[searchField.zoomLayer.filterField]) +\r\n                  \"'\";\r\n              }\r\n\r\n              if (e) {\r\n                zoomToFeatureByFilter(\r\n                  where,\r\n                  searchField.zoomLayer.name,\r\n                  this.props.map,\r\n                  null,\r\n                  (data) => {\r\n                    if (item) {\r\n                      item.attributes[\"OBJECTID\"] = data.attributes[\"OBJECTID\"];\r\n                      item.geometry = data.geometry;\r\n                      this.state[name + '_Object'] = item;\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            }\r\n          }\r\n\r\n          this.state.formValues = this.deleteChildValues(name);\r\n\r\n          Object.keys(this.state.formValues).forEach((key) => {\r\n            if (this.state.formValues[key])\r\n              filterQuery.push(key + \"='\" + this.state.formValues[key] + \"'\");\r\n          });\r\n\r\n          this.getListsValue(\r\n            this.state.searchLayer,\r\n            name,\r\n            filterQuery.join(\" and \")\r\n          );\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  deleteChildValues = (name) => {\r\n    let found = false;\r\n    investMapLayers[this.state.searchLayer].searchFields.forEach((item) => {\r\n      if (found) {\r\n        delete this.state.formValues[item.field];\r\n        delete this.state[item.field];\r\n      }\r\n      if (item.field == name) {\r\n        found = true;\r\n      }\r\n    });\r\n\r\n    return this.state.formValues;\r\n  };\r\n\r\n  handleChangeInput = (e) => {\r\n    this.setState({\r\n      showInfo: false,\r\n      noData: false,\r\n      formValues: { ...this.state.formValues, [e.target.name]: e.target.value },\r\n    });\r\n  };\r\n\r\n  handleBufferSearch = (e) => {\r\n    this.setState({\r\n      showInfo: false,\r\n      noData: false,\r\n      buffer_distance: e.target.value,\r\n    });\r\n  };\r\n\r\n  searchForData = (e) => {\r\n\r\n    let searchFields = investMapLayers[this.state.searchLayer].searchFields;\r\n    let selectedFeature = this.state[searchFields[searchFields.length - 1].field + \"_Object\"];\r\n\r\n    let layerdId = getLayerId(this.props.map.__mapInfo, this.state.searchLayer);\r\n\r\n    queryTask({\r\n      url: this.props.map.getLayer(\"basemap\").url.split('?')[0] + \"/\" + layerdId,\r\n      where: \"OBJECTID = \" + selectedFeature.attributes[\"OBJECTID\"],\r\n      outFields: investMapLayers[this.state.searchLayer].outFields.map((x) => x.name),\r\n      returnGeometry: false,\r\n      callbackResult: ({ features }) => {\r\n        if (features.length > 0) {\r\n\r\n          getFeatureDomainName(features, layerdId, false, investMapUrl).then((res) => {\r\n            selectedFeature.attributes = { ...res[0].attributes };\r\n            selectedFeature.layerName = this.state.searchLayer;\r\n            this.props.addFeature(selectedFeature);\r\n            this.state.formValues[searchFields[searchFields.length - 1].field] = null;\r\n\r\n            this.setState({ formValues: { ...this.state.formValues } });\r\n          });\r\n\r\n        }\r\n      },\r\n      callbackError(error) { },\r\n    });\r\n\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({ isActiveBufferSearch: !this.state.isActiveBufferSearch });\r\n  };\r\n  changeDate = (name) => (e) => {\r\n    this.setState({ formValues: { ...this.state.formValues, [name]: e } });\r\n  };\r\n\r\n  onSearch = (item, filterValue) => {\r\n\r\n    if (item.isServerSideSearch) {\r\n      if (this.searchTimeOut) clearTimeout(this.searchTimeOut);\r\n\r\n      this.searchTimeOut = setTimeout(() => {\r\n        this.setState({ fetching: true });\r\n\r\n        let filterQuery = [];\r\n\r\n        Object.keys(this.state.formValues).forEach((key) => {\r\n          if (\r\n            this.state.formValues[key] &&\r\n            key != item.field &&\r\n            key != item.isServerSideSearch\r\n          )\r\n            filterQuery.push(key + \"='\" + this.state.formValues[key] + \"'\");\r\n        });\r\n\r\n        if (filterValue) {\r\n          filterQuery.push(item.field + \" like '%\" + filterValue + \"%'\");\r\n        }\r\n\r\n        let layerdId = getLayerId(\r\n          this.props.map.__mapInfo,\r\n          this.state.searchLayer\r\n        );\r\n\r\n        queryTask({\r\n          url: investMapUrl + \"/\" + layerdId,\r\n          where: filterQuery.join(\" and \"),\r\n          outFields: [item.field, item.zoomLayer.filterField],\r\n          returnDistinctValues: true,\r\n          returnGeometry: false,\r\n          callbackResult: ({ features }) => {\r\n            let searchField = investMapLayers[\r\n              this.state.searchLayer\r\n            ].searchFields.find((x) => x.field == item.field);\r\n\r\n            if (features.length > 0) searchField.dataList = [...features];\r\n\r\n            this.setState({\r\n              searchFields: [\r\n                ...investMapLayers[this.state.searchLayer].searchFields.filter(\r\n                  (x) => !x.isSearch\r\n                ),\r\n              ],\r\n              formValues: { ...this.state.formValues },\r\n              fetching: false,\r\n            });\r\n          },\r\n        });\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  isActive = () => {\r\n    let searchFields = investMapLayers[this.state.searchLayer].searchFields;\r\n    return !this.state.formValues[searchFields[searchFields.length - 1].field];\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const filterText =\r\n      this.state.searchLayer &&\r\n      investMapLayers[this.state.searchLayer].searchFields.find(\r\n        (x) => x.isSearch\r\n      );\r\n    return (\r\n      <div style={{ textAlign: \"right\", paddingRight: '10px' }}>\r\n        <div style={{ display: \"grid\", direction: 'rtl' }}>\r\n\r\n          {this.state.searchFields.map((item, index) => {\r\n            return (\r\n              <div style={{ display: \"grid\" }} key={index}>\r\n\r\n                <Select\r\n                  style={{ width: '50%' }}\r\n                  virtual={false}\r\n                  disabled={item.dataList && item.dataList.length == 0}\r\n                  showSearch\r\n                  allowClear\r\n                  notFoundContent={\r\n                    this.state.fetching ? <Spin size=\"small\" /> : null\r\n                  }\r\n                  onChange={this.selectChange(\r\n                    item.field,\r\n                    item.dataList,\r\n                    item\r\n                  )}\r\n                  value={this.state.formValues[item.field]}\r\n                  placeholder={item.alias}\r\n                  /*onSearch={(e) => {\r\n                    this.setState({ [item.field]: e });\r\n                    this.onSearch(item, e);\r\n                  }}*/\r\n                  getPopupContainer={(trigger) => trigger.parentNode}\r\n                  optionFilterProp=\"v\"\r\n                >\r\n                  {item.dataList &&\r\n                    item.dataList\r\n                      .filter((e, i) => {\r\n                        if (this.state[item.field]) {\r\n                          return (\r\n                            e.attributes[item.field] &&\r\n                            e.attributes[item.field]\r\n                              .toLowerCase()\r\n                              .indexOf(\r\n                                convertToArabic(this.state[item.field].toLowerCase())\r\n                              ) >= 0\r\n                          );\r\n                        } else {\r\n                          return i < 100 && e.attributes[item.field];\r\n                        }\r\n                      })\r\n                      .slice(0, 50)\r\n                      .map((m, i) => {\r\n                        return (\r\n                          <Select.Option\r\n                            key={m.attributes[item.field] + i}\r\n                            v={m.attributes[item.field]}\r\n                            value={\r\n                              m.attributes[item.field + \"_Code\"] ||\r\n                              m.attributes[item.field]\r\n                            }\r\n                          >\r\n                            {convertToArabic(m.attributes[item.field])}\r\n                          </Select.Option>\r\n                        );\r\n                      })}\r\n                </Select>\r\n\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {this.state.searchLayer && this.state.searchFields.length ? (\r\n          <div>\r\n            {filterText && (\r\n              <div style={{ display: \"grid\" }}>\r\n                <label className=\"selectLabelStyle\">{filterText.alias}</label>\r\n\r\n                <Input\r\n                  name={filterText.field}\r\n                  onChange={this.handleChangeInput}\r\n                  value={this.state.formValues[filterText.field]}\r\n                  placeholder={filterText.alias}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <div style={{ display: \"grid\" }}>\r\n\r\n              <div style={{ textAlign: \"center\" }}>\r\n                <button\r\n                  onClick={this.searchForData}\r\n                  size=\"large\"\r\n                  className=\"add-gis\"\r\n                  style={{ padding: '5px' }}\r\n                  disabled={this.isActive()}\r\n                  htmlType=\"submit\"\r\n                >\r\n                  إضافة الأرض\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : <></>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default FilterComponentInvest;\r\n","\r\nimport { loadModules } from 'esri-loader';\r\nimport{mapUrl}from\"../mapviewer/config/map\"\r\n\r\nconst options = {\r\n    url: 'https://js.arcgis.com/3.13'\r\n};\r\n\r\nexport const selectDis=(e)=>{\r\nvar a=[];\r\n\r\ne.forEach(el => {\r\n    el.features.forEach(element=>{\r\n        if(!a.find((t=>t.attributes.PARCEL_SPATIAL_ID==element.attributes.PARCEL_SPATIAL_ID))){\r\n            a.push(element)\r\n        }\r\n    })\r\n});\r\nreturn a;\r\n}\r\n\r\nexport const DataQuery=(layerNum,QueryOptions,CallBack)=>{\r\n    loadModules([\"esri/symbols/SimpleLineSymbol\",\"esri/Color\",\"esri/layers/FeatureLayer\",\"esri/tasks/RelationshipQuery\",\"esri/tasks/QueryTask\",\"esri/tasks/query\",\"esri/request\",\"esri/geometry/Polygon\",\"esri/symbols/SimpleFillSymbol\",\"esri/graphic\"], options)\r\n    .then(([SimpleLineSymbol,Color,FeatureLayer,RQuery,QueryTask,Query,request,Polygon,SimpleFillSymbol,Graphic]) => {\r\n\r\n     var query = new Query()\r\n     var qt = new QueryTask(mapUrl+`/${layerNum}`)\r\n    QueryOptions.forEach(e=>{\r\n        query[e.name]=e.value\r\n    })\r\n     qt.execute(query,CallBack,(res)=>{console.log(res)})\r\n    })\r\n}\r\nexport const queryOption=(where,geo,outfields)=>{\r\n       return [{name:\"where\",value:where},\r\n       {name:\"returnGeometry\",value:geo},\r\n       {name:\"outFields\",value:outfields}\r\n      ]\r\n}\r\nexport const querySetting=(num,where,geo,outfields,customMapUrl)=>{\r\n    \r\n    let url=(customMapUrl || mapUrl)+\"/\"+num\r\n    return {\r\n        url:(customMapUrl || mapUrl)+\"/\"+num,\r\n        where,\r\n        returnGeometry:geo,\r\n        outFields:outfields\r\n}\r\n\r\n}\r\nexport const DataReqest=(url,callBack)=>{\r\n    loadModules([\"esri/request\"], options)\r\n    .then(([request]) => {\r\n        request({\r\n            url: url,\r\n            content: {f:\"json\"},\r\n            handleAs: \"json\",\r\n            callbackParamName:\"callback\"\r\n        }).then(callBack);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport { esriRequest, getMapInfo } from \"../common/esri_request\";\r\nimport {\r\n  queryTask,\r\n  getInfo,\r\n  highlightFeature,\r\n  clearGraphicFromLayer,\r\n  getFeatureDomainName,\r\n  intersectQueryTask,\r\n  addParcelNo,\r\n  convertToArabic,\r\n  getPacrelNoAngle,\r\n  drawLength,\r\n  convertToEnglish,\r\n  map_object,\r\n  delete_null_object,\r\n  checkParcelAdjacents,\r\n  localizeNumber,\r\n  uploadGISFile,\r\n  project,\r\n} from \"../common/common_func\";\r\nimport store from \"reducers\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { geometryServiceUrl, investMapUrl } from \"../mapviewer/config/map\";\r\nimport { Select, Button, Form, message, Row, Col, Input } from \"antd\";\r\n\r\nimport { Tabs, Tab, Container } from \"react-bootstrap\";\r\n// import \"antd/dist/antd.css\";\r\nimport MapComponent from \"../MapComponent/MapComponent\";\r\nimport MapBtnsComponent from \"../MapBtnsComponent\";\r\nimport { mapDispatchToProps, mapStateToProps } from \"../mapping\";\r\nimport mapDispatchToProps1 from \"main_helpers/actions/main\";\r\nimport { connect } from \"react-redux\";\r\nimport { querySetting, selectDis } from \"./Helpers\";\r\nimport { StickyContainer, Sticky } from \"react-sticky\";\r\nimport {\r\n  faSearchPlus,\r\n  faEdit,\r\n  faStar,\r\n  faTrash,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nvar uniqid = require(\"uniqid\");\r\nimport {\r\n  slice,\r\n  map,\r\n  get,\r\n  pickBy,\r\n  mapKeys,\r\n  replace,\r\n  assign,\r\n  pick,\r\n  includes,\r\n  orderBy,\r\n  isEqual,\r\n  reject,\r\n} from \"lodash\";\r\nimport { LoadModules } from \"../common/esri_loader\";\r\nimport axios from \"axios\";\r\nimport { host } from \"config\";\r\nimport FilterComponentInvest from \"../FilterComponentInvest\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { InvestMunicpality } from \"../mapviewer/config\";\r\nimport {\r\n  getParcels,\r\n  onBlockChange,\r\n  onLandParcelChange,\r\n  onMunChange,\r\n  onPlaneChange,\r\n  onSearch,\r\n  onSubNameChange,\r\n  onSubTypeChange,\r\n} from \"../common\";\r\nconst { Option } = Select;\r\nconst investSugges = \"SITE_ACTIVITY\";\r\nexport const appMapDispatchToProps = (dispatch) => {\r\n  return {\r\n    ...mapDispatchToProps(dispatch, \"lands\"),\r\n    ...mapDispatchToProps1(dispatch),\r\n  };\r\n};\r\n\r\nclass InvestIdentifyComponnent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.PlanNum = [];\r\n    this.planId = null;\r\n    this.parcelTs = [];\r\n    this.selectedLandsT = [];\r\n    this.selectedLands = [];\r\n    this.selectionMode = false;\r\n\r\n    this.parcel_fields_headers = this.props.parcel_fields_headers || [\r\n      \"البلدية\",\r\n      \"البلدية الفرعية\",\r\n      \"الحي\",\r\n      \"رقم المخطط\",\r\n      \"رقم الأرض\",\r\n      \"المساحة التقريبية (م۲)\",\r\n      \"اسم التقسيم\",\r\n      \"وصف التقسيم\",\r\n      \"رمز الإستخدام\",\r\n      \"النشاط الرئيسي\",\r\n      \"النشاط المقترح\",\r\n      \"الإحداثي السيني\",\r\n      \"الإحداثي الصادي\",\r\n      \"رابط الوصول بخرائط جوجل\",\r\n    ];\r\n    this.parcel_fields = this.props.parcel_fields || [\r\n      {\r\n        name: \"MUNICIPALITY_NAME\",\r\n        editable:\r\n          ((!this.props.isView && true) || false) &&\r\n          !this.props?.currentModule?.record?.is_returned,\r\n        type: \"select\",\r\n      },\r\n      {\r\n        name: \"SUB_MUNICIPALITY_NAME\",\r\n        editable:\r\n          ((!this.props.isView && true) || false) &&\r\n          !this.props?.currentModule?.record?.is_returned,\r\n        type: \"select\",\r\n      },\r\n      {\r\n        name: \"DISTRICT_NAME\",\r\n        editable:\r\n          ((!this.props.isView && true) || false) &&\r\n          !this.props?.currentModule?.record?.is_returned,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        name: \"PLAN_NO\",\r\n        editable:\r\n          ((!this.props.isView && true) || false) &&\r\n          !this.props?.currentModule?.record?.is_returned,\r\n        type: \"text\",\r\n      },\r\n      { name: \"PARCEL_PLAN_NO\", editable: false, type: \"text\" },\r\n      {\r\n        name: \"PARCEL_AREA\",\r\n        editable:\r\n          ((!this.props.isView && true) || false) &&\r\n          !this.props?.currentModule?.record?.is_returned,\r\n        type: \"number\",\r\n      },\r\n      { name: \"SUBDIVISION_TYPE\", editable: false },\r\n      { name: \"SUBDIVISION_DESCRIPTION\", editable: false },\r\n      { name: \"USING_SYMBOL\", editable: false },\r\n      {\r\n        name: \"PARCEL_MAIN_LUSE\",\r\n        editable:\r\n          ((!this.props.isView &&\r\n            this.props.mainObject.investType.invest_type.SelectedLayer ==\r\n            \"Landbase_Parcel\") ||\r\n            false) &&\r\n          !this.props?.currentModule?.record?.is_returned,\r\n        type: \"select\",\r\n      },\r\n      {\r\n        name: investSugges,\r\n        editable:\r\n          (!this.props.isView && true) ||\r\n          false ||\r\n          this.props?.currentModule?.record?.is_returned,\r\n        type: \"select\",\r\n      },\r\n      {\r\n        name: \"X\",\r\n        editable: false,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        name: \"Y\",\r\n        editable: false,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        name: \"googleLink\",\r\n        editable: false,\r\n        type: \"button\",\r\n      },\r\n    ];\r\n\r\n    this.parcelDataFields = {};\r\n\r\n    if (\r\n      ([22, 23].indexOf(props.currentModule.id) != -1 ||\r\n        [1928].indexOf(props.currentModule.record.workflow_id) != -1) &&\r\n      props.is_parcel_type\r\n    ) {\r\n      this.parcelDataFields[\"parcel_type\"] = {\r\n        label: \"عبارة عن\",\r\n        placeholder: \"من فضلك اخل نوع الأرض\",\r\n        type: \"text\",\r\n        name: \"parcel_type\",\r\n        required: true,\r\n      };\r\n    }\r\n    this.parcelDataFields[\"north_length\"] = {\r\n      label: \"طول الحد الشمالي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الشمالي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"north_length\",\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"north_desc\"] = {\r\n      label: \"وصف الحد الشمالي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشمالي\",\r\n      type: \"text\",\r\n      name: \"north_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"south_length\"] = {\r\n      label: \"طول الحد الجنوبي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الجنوبي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"south_length\",\r\n      required: true,\r\n    };\r\n    (this.parcelDataFields[\"south_desc\"] = {\r\n      label: \"وصف الحد الجنوبي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الجنوبي\",\r\n      type: \"text\",\r\n      name: \"south_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    }),\r\n      (this.parcelDataFields[\"east_length\"] = {\r\n        label: \"طول الحد الشرقي (م)\",\r\n        placeholder: \"من فضلك ادخل طول الحد الشرقي (م)\",\r\n        field: \"inputNumber\",\r\n        name: \"east_length\",\r\n        required: true,\r\n      });\r\n    this.parcelDataFields[\"east_desc\"] = {\r\n      label: \"وصف الحد الشرقي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الشرقي\",\r\n      type: \"text\",\r\n      name: \"east_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"west_length\"] = {\r\n      label: \"طول الحد الغربي (م)\",\r\n      placeholder: \"من فضلك ادخل طول الحد الغربي (م)\",\r\n      field: \"inputNumber\",\r\n      name: \"west_length\",\r\n      required: true,\r\n    };\r\n    this.parcelDataFields[\"west_desc\"] = {\r\n      label: \"وصف الحد الغربي\",\r\n      placeholder: \"من فضلك ادخل وصف الحد الغربي\",\r\n      type: \"text\",\r\n      name: \"west_desc\",\r\n      maxLength: 200,\r\n      required: true,\r\n    };\r\n\r\n    map_object(props.input && props.input.value.parcels);\r\n\r\n    this.state = {\r\n      formValues: {},\r\n      boundariesBtnIsVisible:\r\n        this.props.boundariesBtnIsVisible != undefined\r\n          ? this.props.boundariesBtnIsVisible\r\n          : true,\r\n      mapLoaded: false,\r\n      munval:\r\n        (props.input && props.input.value.temp && props.input.value.temp.mun) ||\r\n        undefined,\r\n      planeval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.plan) ||\r\n        undefined,\r\n      subTypeval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.subTypeval) ||\r\n        undefined,\r\n      subNameval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.subNameval) ||\r\n        undefined,\r\n      blockval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.blockval) ||\r\n        undefined,\r\n      selectedLands: (props.input && props.input.value.parcels) || [],\r\n      parcelval:\r\n        (props.input &&\r\n          props.input.value.temp &&\r\n          props.input.value.temp.parcelval) ||\r\n        undefined,\r\n      blockNum:\r\n        (props.input.value.lists && props.input.value.lists.blockNum) || [],\r\n      conditions: (props.input && props.input.value.conditions) || undefined,\r\n      planSersh: null,\r\n      subDivNames:\r\n        (props.input.value.lists && props.input.value.lists.subDivNames) || [],\r\n      subDivType:\r\n        (props.input.value.lists && props.input.value.lists.subDivType) || [],\r\n      parcelNum: [],\r\n      parcelNumS: [],\r\n      MunicipalityNames:\r\n        (props.input.value.lists &&\r\n          props.input.value.lists.MunicipalityNames) ||\r\n        [],\r\n      requestTypes: [\r\n        { code: 1, name: \"فرز\", key: \"\" },\r\n        { code: 2, name: \"دمج\", key: \"\" },\r\n        { code: 3, name: \"تقسيم\", key: \"\" },\r\n      ],\r\n      PlanNum:\r\n        (props.input.value.lists && props.input.value.lists.PlanNum) || [],\r\n      parcelId: null,\r\n      mapExtend: null,\r\n      parcelSearch: null,\r\n      poly: null,\r\n      selectedRequestType:\r\n        props?.input?.value?.selectedRequestType ||\r\n        ([2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n          -1 &&\r\n          1) ||\r\n        props?.mainObject?.landData?.requestType ||\r\n        \"\",\r\n      parcelData: props.input.value.parcelData || {},\r\n      landsData: {},\r\n      domainLists: props.input.value.domainLists || {},\r\n    };\r\n\r\n    this.isloaded = true;\r\n  }\r\n  LayerID = [];\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      formValues: { ...this.state.formValues, [e.target.name]: e.target.value },\r\n    });\r\n  };\r\n\r\n  CoordinateSearch = (e) => {\r\n    e.preventDefault();\r\n    this.onPublicUserDecimalSubmit(this.state.formValues);\r\n  };\r\n  degSearch = (e) => {\r\n    e.preventDefault();\r\n    this.onPublicUserDegreesSubmit(this.state.formValues);\r\n  };\r\n\r\n  showGoogleLink = (googleLink) => {\r\n    window.open(googleLink, \"_blank\");\r\n  };\r\n\r\n  UpdateSubmissionDataObject = () => {\r\n    const { parcelData } = this.state;\r\n    var fields = { ...parcelData.fields };\r\n    Object.keys(fields).map((key, index) => {\r\n      parcelData[key] = fields[key].value;\r\n    });\r\n    this.state.landsData = {\r\n      ...this.props.input.value,\r\n      parcels: [...this.state.selectedLands],\r\n      parcelData: { ...parcelData },\r\n      domainLists: { ...this.state.domainLists },\r\n      lists: {\r\n        firstParcels: [...this.state.parcelNum],\r\n        subDivNames: [...this.state.subDivNames],\r\n        MunicipalityNames: [...this.state.MunicipalityNames],\r\n        subDivType: [...this.state.subDivType],\r\n        PlanNum: [...this.state.PlanNum],\r\n        blockNum: [...this.state.blockNum],\r\n      },\r\n    };\r\n\r\n    this.state.landsData[\"selectedRequestType\"] =\r\n      (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n        [1928].indexOf(this.props?.currentModule?.record?.workflow_id) != -1) &&\r\n        [2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n        -1 &&\r\n        this.state.selectedRequestType) ||\r\n      ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"فرد\") ||\r\n      ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"اصدار الكروكي (المواطن)\") ||\r\n      3;\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n    this.setState({ parcelData: parcelData });\r\n  };\r\n\r\n  parcelQueryTask = (value) => {\r\n    this.setState({\r\n      selectedLands: [],\r\n      selectedLandsT: [],\r\n      parcelId: null,\r\n      parcelNum: [],\r\n      parcelData: {},\r\n      selectedRequestType: value,\r\n    });\r\n    esriRequest(investMapUrl + \"/\" + this.LayerID[\"Landbase_Parcel\"]).then(\r\n      (response) => {\r\n        let { domainLists } = this.state;\r\n        domainLists.usingSymbols = [];\r\n        domainLists.districtNames = [];\r\n        domainLists.SUB_MUNICIPALITY_NAME_Domains = [];\r\n        domainLists.cityNames = [];\r\n        response.fields.forEach(function (val) {\r\n          //;\r\n          if (val.name === \"USING_SYMBOL\") {\r\n            // list.push(val.domain);\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              // ////\r\n              domainLists.usingSymbols.push(domain);\r\n            });\r\n          } else if (val.name === \"DISTRICT_NAME\") {\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              // ////\r\n              domainLists.districtNames.push(domain);\r\n            });\r\n          } else if (val.name === \"SUB_MUNICIPALITY_NAME\") {\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              // ////\r\n              domainLists.SUB_MUNICIPALITY_NAME_Domains.push(domain);\r\n            });\r\n          } else if (val.name === \"CITY_NAME\") {\r\n            val.domain.codedValues.forEach(function (domain) {\r\n              domainLists.cityNames.push(domain);\r\n            });\r\n          }\r\n        });\r\n        this.DrawGraph();\r\n        this.UpdateSubmissionDataObject();\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (\r\n      this.props.mainObject.investType.invest_type.SelectedLayer ==\r\n      \"Invest_Site_Polygon\"\r\n    ) {\r\n      this.parcel_fields_headers[7] = \"النشاط المستثمر\";\r\n    } else {\r\n      this.parcel_fields_headers[7] = \"النشاط الرئيسي\";\r\n    }\r\n\r\n    getInfo(investMapUrl).then((res) => {\r\n      //\r\n      this.LayerID = res;\r\n      this.mapUrl = investMapUrl;\r\n\r\n      getParcels(this, null, \"\", { returnDistinctValues: true }, [\r\n        \"MUNICIPALITY_NAME\",\r\n      ]).then((features) => {\r\n\r\n        getFeatureDomainName(features, this.LayerID.Landbase_Parcel, false, investMapUrl).then(\r\n          (features) => {\r\n\r\n            let fcs = features\r\n              .filter((r) => r.attributes.MUNICIPALITY_NAME)\r\n              .map((r) => {\r\n\r\n                return {\r\n                  code: r.attributes.MUNICIPALITY_NAME_Code,\r\n                  name: r.attributes.MUNICIPALITY_NAME,\r\n                };\r\n              });\r\n            this.setState(\r\n              {\r\n                MunicipalityNames: fcs.filter(\r\n                  (x) => InvestMunicpality.indexOf(x.code) > -1\r\n                ),\r\n                allParcels: features,\r\n              },\r\n              () => {\r\n                this.loadLists = true;\r\n                window.filterUrl = investMapUrl;\r\n                if (this.state.munval) {\r\n                  onMunChange(this, this.state.munval, () => {\r\n                    onPlaneChange(this, this.state.planeval, () => {\r\n                      onSubTypeChange(this, this.state.subTypeval, () => {\r\n                        onSubNameChange(this, this.state.subNameval, () => {\r\n                          onBlockChange(this, this.state.blockval, () => {\r\n                            onLandParcelChange(\r\n                              this,\r\n                              this.state.parcelval,\r\n                              () => { }\r\n                            );\r\n                          });\r\n                        });\r\n                      });\r\n                    });\r\n                  });\r\n                }\r\n                this.loadLists = false;\r\n              }\r\n            );\r\n          }\r\n        );\r\n      });\r\n      // esriRequest(investMapUrl + \"/\" + this.LayerID.Municipality_Boundary).then(\r\n      //   (response) => {\r\n      //     //\r\n      //     this.setState({\r\n      //       MunicipalityNames:\r\n      //         response.types[0].domains.MUNICIPALITY_NAME.codedValues.filter(\r\n      //           (x) => InvestMunicpality.indexOf(x.code) > -1\r\n      //         ),\r\n      //     });\r\n      //   }\r\n      // );\r\n      /*esriRequest(mapUrl + \"/\" + this.LayerID.Subdivision).then((response) => {\r\n        this.setState({ subDivType: response.fields[7].domain.codedValues });\r\n        if (this.parcel_fields[4]) {\r\n          this.parcel_fields[4].options = response.fields[7].domain.codedValues;\r\n        }\r\n      });*/\r\n      //\r\n      esriRequest(investMapUrl + \"/\" + this.LayerID.Invest_Site_Polygon).then(\r\n        (response) => {\r\n          //\r\n          if (this.parcel_fields.find((x) => x.name == investSugges)) {\r\n            this.parcel_fields.find((x) => x.name == investSugges).options =\r\n              response.fields.find(\r\n                (x) => x.name == investSugges\r\n              ).domain.codedValues;\r\n          }\r\n        }\r\n      );\r\n      //\r\n      // let i = 0;\r\n      // this.props.mainObject?.landData?.landData?.lands?.parcels.forEach(\r\n      //   (parcel) => {\r\n      //     i++;\r\n      //     this.addParcelToSelect(parcel).then((res) => {\r\n      //       this.selectedLandsT.push(res);\r\n      //\r\n      //       if (\r\n      //         this.props.mainObject?.landData?.landData?.lands?.parcels.length == i\r\n      //       ) {\r\n      //         this.DrawGraph();\r\n      //       }\r\n      //     });\r\n      //   }\r\n      // );\r\n    });\r\n\r\n    if (\r\n      this.props.mainObject &&\r\n      this.props.mainObject.landData &&\r\n      this.isloaded\r\n    ) {\r\n      this.isloaded = false;\r\n      //this.DrawGraph();\r\n\r\n      this.UpdateSubmissionDataObject();\r\n    }\r\n  }\r\n\r\n  // onMunChange = (e) => {\r\n  //   //\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   this.setState({\r\n  //     munval: e,\r\n  //     planeval: undefined,\r\n  //     subTypeval: undefined,\r\n  //     subNameval: undefined,\r\n  //     blockval: undefined,\r\n  //     parcelval: undefined,\r\n  //     // selectedLands: [],\r\n  //     // selectedLandsT: [],\r\n  //     PlanNum: [],\r\n  //     blockNum: [],\r\n  //     subDivNames: [],\r\n  //     //subDivType: [],\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //     parcelData: {},\r\n  //   });\r\n  //   this.planId = null;\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Municipality_Boundary,\r\n  //       `MUNICIPALITY_NAME='${e}'`,\r\n  //       true,\r\n  //       [\"*\"],\r\n  //       investMapUrl\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(this.pol, this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //       this.setState({ city_name: this.pol?.attributes?.CITY_NAME_A || \"\" });\r\n  //     },\r\n  //   });\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Plan_Data,\r\n  //       `MUNICIPALITY_NAME='${e}'`,\r\n  //       false,\r\n  //       [\"PLAN_SPATIAL_ID\", \"PLAN_NO\"],\r\n  //       investMapUrl\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({\r\n  //         PlanNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i: uniqid(),\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     },\r\n  //   });\r\n\r\n  //   this.resetGraphics();\r\n  // };\r\n\r\n  resetFields = () => {\r\n    this.props.onChange([]);\r\n    this.setState({ selectedLands: [], selectedLandsT: [] });\r\n  };\r\n\r\n  // onPlaneChange = (f) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n\r\n  //   var planSpatialId = this.state.PlanNum.filter((m) => m.i == f)[0].attributes\r\n  //     .PLAN_SPATIAL_ID;\r\n  //   this.setState({\r\n  //     plan_no: this.state.PlanNum.filter((m) => m.i == f)[0].attributes.PLAN_NO,\r\n  //     planeval: f,\r\n  //     subTypeval: undefined,\r\n  //     subNameval: undefined,\r\n  //     blockval: undefined,\r\n  //     parcelval: undefined,\r\n  //     blockNum: [],\r\n  //     subDivNames: [],\r\n  //     // subDivType: [],\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //     parcelData: {},\r\n  //     // selectedLands: [],\r\n  //     // selectedLandsT: [],\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Plan_Data,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       true,\r\n  //       [\"MUNICIPALITY_NAME\"],\r\n  //       investMapUrl\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //       this.planId = planSpatialId;\r\n  //     },\r\n  //   });\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Survey_Block,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       false,\r\n  //       [\"BLOCK_NO\", \"BLOCK_SPATIAL_ID\"],\r\n  //       investMapUrl\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       // var blocks = [];\r\n  //       // if (res.features) {\r\n  //       //   res.features.forEach((feature, index) => {\r\n  //       //     if (feature.attributes.Block_NO) {\r\n  //       //       blocks.splice(0, 0, feature);\r\n  //       //     }\r\n  //       //   });\r\n  //       // }\r\n  //       // this.setState({ blockNum: blocks });\r\n  //       this.setState({ blockNum: res.features });\r\n  //     },\r\n  //   });\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Landbase_Parcel,\r\n  //       `PLAN_SPATIAL_ID='${planSpatialId}'`,\r\n  //       false,\r\n  //       [\"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"],\r\n  //       investMapUrl\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     },\r\n  //   });\r\n\r\n  //   this.resetGraphics();\r\n  // };\r\n  // onSubTypeChange = (e) => {\r\n  //   this.onPlaneChange(this.state.planeval);\r\n  //   this.setState({\r\n  //     subType_name: this.state.subDivType.filter((m) => m.code == e)[0].name,\r\n  //     subTypeval: e,\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Subdivision,\r\n  //       `SUBDIVISION_TYPE=${e} AND PLAN_SPATIAL_ID=${this.planId}`,\r\n  //       false,\r\n  //       [\"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_SPATIAL_ID\"],\r\n  //       investMapUrl\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({ subDivNames: res.features });\r\n  //     },\r\n  //   });\r\n\r\n  //   // this.onSubNameChange(this.state.subNameval);\r\n  //   // this.DrawGraph();\r\n  // };\r\n\r\n  resetGraphics = () => {\r\n    this.state[\"selectedLands\"] = [];\r\n    this.state[\"selectedLandsT\"] = [];\r\n    this.DrawGraph();\r\n  };\r\n  // onSubNameChange = (value) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   var selectedSubDivName = this.state.subDivNames.filter(\r\n  //     (m) =>\r\n  //       m.attributes.SUBDIVISION_SPATIAL_ID == value ||\r\n  //       m.attributes.SUBDIVISION_DESCRIPTION == value\r\n  //   )[0];\r\n  //   //if (selectedSubDivName) {\r\n  //   var e = selectedSubDivName?.attributes?.SUBDIVISION_SPATIAL_ID;\r\n\r\n  //   this.setState({\r\n  //     subName_name: selectedSubDivName?.attributes?.SUBDIVISION_DESCRIPTION,\r\n  //     subNameval: e,\r\n  //     blockval: undefined,\r\n  //     parcelval: undefined,\r\n  //     parcelNum: [],\r\n  //     parcelId: null,\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Subdivision,\r\n  //       `SUBDIVISION_SPATIAL_ID=${e}`,\r\n  //       true,\r\n  //       [\"SUBDIVISION_SPATIAL_ID\"],\r\n  //       investMapUrl\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       if (res) {\r\n  //         this.pol = res.features[0];\r\n  //         highlightFeature(res.features[0], this.map, {\r\n  //           layerName: \"SelectGraphicLayer\",\r\n  //           isZoom: true,\r\n  //           isHiglightSymbol: true,\r\n  //           highlighColor: [0, 0, 0, 0.25],\r\n  //         });\r\n  //       }\r\n  //     },\r\n  //   });\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Landbase_Parcel,\r\n  //       `SUBDIVISION_SPATIAL_ID=${e}`,\r\n  //       false,\r\n  //       [\"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"],\r\n  //       investMapUrl\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       if (res) {\r\n  //         this.setState({\r\n  //           parcelSearch: null,\r\n  //           parcelNum: res.features.map((e, i) => {\r\n  //             return {\r\n  //               ...e,\r\n  //               i,\r\n  //             };\r\n  //           }),\r\n  //         });\r\n  //       }\r\n  //     },\r\n  //   });\r\n\r\n  //   this.resetGraphics();\r\n  //   //}\r\n  // };\r\n\r\n  // onBlockChange = (e) => {\r\n  //   clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n  //   this.setState({\r\n  //     block_no: this.state.blockNum.filter(\r\n  //       (m) => m.attributes.BLOCK_SPATIAL_ID == e\r\n  //     )[0].attributes.BLOCK_NO,\r\n  //     blockval: e,\r\n  //     parcelval: undefined,\r\n  //     parcelId: null,\r\n  //     parcelNum: [],\r\n  //     // selectedLands: [],\r\n  //     // selectedLandsT: [],\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Survey_Block,\r\n  //       `BLOCK_SPATIAL_ID=${e}`,\r\n  //       true,\r\n  //       [\"BLOCK_SPATIAL_ID\"],\r\n  //       investMapUrl\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.pol = res.features[0];\r\n  //       highlightFeature(res.features[0], this.map, {\r\n  //         layerName: \"SelectGraphicLayer\",\r\n  //         isZoom: true,\r\n  //         isHiglightSymbol: true,\r\n  //         highlighColor: [0, 0, 0, 0.25],\r\n  //       });\r\n  //     },\r\n  //   });\r\n\r\n  //   queryTask({\r\n  //     ...querySetting(\r\n  //       this.LayerID.Landbase_Parcel,\r\n  //       `BLOCK_SPATIAL_ID=${e}`,\r\n  //       false,\r\n  //       [\"PARCEL_SPATIAL_ID\", \"PARCEL_PLAN_NO\"],\r\n  //       investMapUrl\r\n  //     ),\r\n  //     callbackResult: (res) => {\r\n  //       this.setState({\r\n  //         parcelSearch: null,\r\n  //         parcelNum: res.features.map((e, i) => {\r\n  //           return {\r\n  //             ...e,\r\n  //             i,\r\n  //           };\r\n  //         }),\r\n  //       });\r\n  //     },\r\n  //   });\r\n\r\n  //   this.resetGraphics();\r\n  // };\r\n\r\n  // onLandParcelChange = (f) => {\r\n  //   if (!this.state.selectedLands.length) {\r\n  //     var e = this.state.parcelNum.filter((m) => m.i === f)[0].attributes\r\n  //       .PARCEL_SPATIAL_ID;\r\n  //     this.setState({ parcelId: e, parcelval: f });\r\n  //     this.RolBackPol = this.pol;\r\n  //     this.RolBackParcelNum = this.state.parcelNum;\r\n\r\n  //     queryTask({\r\n  //       ...querySetting(\r\n  //         this.LayerID.Landbase_Parcel,\r\n  //         `PARCEL_SPATIAL_ID='${e}'`,\r\n  //         true,\r\n  //         [\"PARCEL_SPATIAL_ID\"],\r\n  //         investMapUrl\r\n  //       ),\r\n  //       callbackResult: (res) => {\r\n  //         this.selectedLandsT = [];\r\n  //         highlightFeature(res.features[0], this.map, {\r\n  //           layerName: \"SelectGraphicLayer\",\r\n  //           strokeColor: [0, 0, 0],\r\n  //           highlightWidth: 3,\r\n  //           isHighlighPolygonBorder: true,\r\n  //           isZoom: true,\r\n  //           zoomFactor: 10,\r\n  //         });\r\n  //       },\r\n  //     });\r\n  //   } else {\r\n  //     // clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n  //     var prevParcelId = this.state.parcelId;\r\n  //     var g = this.state.parcelNum.filter((m) => m.i == f)[0];\r\n  //     this.state[\"parcelId\"] = g.attributes.PARCEL_SPATIAL_ID;\r\n  //     //this.setState({ parcelId: g.attributes.PARCEL_SPATIAL_ID });\r\n\r\n  //     this.LandHoverOff(\r\n  //       this.map\r\n  //         .getLayer(\"SelectGraphicLayer\")\r\n  //         .graphics.find(\r\n  //           (prevGraphic) =>\r\n  //             prevGraphic.attributes.PARCEL_SPATIAL_ID == prevParcelId\r\n  //         )\r\n  //     );\r\n  //     // if (\r\n  //     //   this.state.selectedLands.map(\r\n  //     //     ((land) =>\r\n  //     //       land.attributes.OBJECTID ==\r\n  //     //       this.state.parcelval.attributes.OBJECTID).length == 0\r\n  //     //   )\r\n  //     // ) {\r\n  //     //   highlightFeature([this.state.parcelval], this.map, {\r\n  //     //     layerName: \"SelectGraphicLayer\",\r\n  //     //     noclear: true,\r\n  //     //     isZoom: false,\r\n  //     //     isHiglightSymbol: true,\r\n  //     //     highlighColor: [0, 255, 0, 0.5],\r\n  //     //     attr: true,\r\n  //     //   });\r\n  //     // }\r\n  //     // // highlightFeature(g, this.map, {\r\n  //     // //   layerName: \"SelectGraphicLayer\",\r\n  //     // //   strokeColor: [0, 0, 0],\r\n  //     // //   isHighlighPolygonBorder: true,\r\n  //     // //   highlightWidth: 3,\r\n  //     // // });\r\n\r\n  //     this.setState({ parcelval: f });\r\n  //   }\r\n  // };\r\n\r\n  validation = (item) => {\r\n    const { t } = this.props;\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .post(\r\n          host +\r\n          \"/IsHasSubmission/\" +\r\n          item.attributes.PARCEL_SPATIAL_ID +\r\n          \"/\" +\r\n          (this.props.currentModule.record.id || 0),\r\n          {\r\n            PARCEL_PLAN_NO: item.attributes.PARCEL_PLAN_NO,\r\n            PARCEL_BLOCK_NO: item.attributes.PARCEL_BLOCK_NO,\r\n            PLAN_NO: item.attributes.PLAN_NO,\r\n          }\r\n        )\r\n        .then(\r\n          (data) => {\r\n            if (data.status == 204 || item.attributes.IS_EDITED_Code != 1) {\r\n              return resolve();\r\n            } else {\r\n              window.notifySystem(\r\n                \"warning\",\r\n                t(\"messages:global.PARCELSWARNING\")\r\n              );\r\n              return reject();\r\n            }\r\n          },\r\n          (err) => {\r\n            window.notifySystem(\r\n              \"warning\",\r\n              t(\r\n                `messages:${err.msg ||\r\n                (err &&\r\n                  err.response &&\r\n                  err.response.data &&\r\n                  err.response.data.msg)\r\n                }`\r\n              )\r\n            );\r\n            return reject();\r\n          }\r\n        );\r\n      // if (item.attributes.IS_EDITED_Code != 1) {\r\n      //   return resolve();\r\n      // } else {\r\n      //   window.notifySystem(\"warning\", t(\"messages:PARCELSWARNING\"));\r\n      //   return reject();\r\n      // }\r\n    });\r\n  };\r\n\r\n  addParcelToSelect = (feature) => {\r\n    return new Promise((resolve, reject) => {\r\n      //if (this.state.selectedLands && this.state.selectedLands.length > 0) {\r\n      intersectQueryTask({\r\n        outFields: [\r\n          \"OBJECTID\",\r\n          \"MUNICIPALITY_NAME\",\r\n          \"SUB_MUNICIPALITY_NAME\",\r\n          \"PARCEL_AREA\",\r\n          \"PARCEL_LAT_COORD\",\r\n          \"PARCEL_LONG_COORD\",\r\n          \"PARCEL_MAIN_LUSE\",\r\n          \"PLAN_NO\",\r\n          \"PARCEL_PLAN_NO\",\r\n          \"USING_SYMBOL\",\r\n          \"PARCEL_SPATIAL_ID\",\r\n        ],\r\n        distance: 20,\r\n        geometry: feature.geometry,\r\n        url: investMapUrl + \"/\" + this.LayerID.Landbase_Parcel,\r\n        where: \"PARCEL_PLAN_NO is not null\",\r\n        callbackResult: (res) => {\r\n          getFeatureDomainName(\r\n            res.features,\r\n            this.LayerID.Landbase_Parcel,\r\n            false,\r\n            investMapUrl\r\n          ).then((r) => {\r\n            res.features = res.features.map((e, i) => {\r\n              return {\r\n                ...e,\r\n                i: uniqid(),\r\n              };\r\n            });\r\n\r\n            if (\r\n              [20, 21].indexOf(this.props?.currentModule?.record.app_id) ==\r\n              -1 &&\r\n              [2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n              -1\r\n            ) {\r\n              this.validation(feature, this.props).then(\r\n                () => {\r\n                  return resolve(res);\r\n                },\r\n                () => {\r\n                  return reject();\r\n                }\r\n              );\r\n            } else {\r\n              return resolve(res);\r\n            }\r\n          });\r\n        },\r\n      });\r\n      //}\r\n    });\r\n  };\r\n\r\n  DrawGraph = () => {\r\n    if (!this.state.selectedLands.length) {\r\n      this.map.graphics.clear();\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"ZoomGraphicLayer\");\r\n\r\n      //this.onSubNameChange(this.state.subNameval);\r\n      this.setToStore(null);\r\n    } else {\r\n      this.parcelDis = selectDis(this.selectedLandsT);\r\n      console.log(this.parcelDis);\r\n      //this.setAdjacentToStore(this.parcelDis);\r\n      //this.setState({ parcelNum: this.parcelDis });\r\n\r\n      clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"PacrelNoGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      clearGraphicFromLayer(this.map, \"ZoomGraphicLayer\");\r\n      //clearGraphicFromLayer(this.map, \"editlengthGraphicLayer\")\r\n      drawLength(this.map, this.state.selectedLands);\r\n      // highlightFeature(\r\n      //   this.parcelDis.filter(\r\n      //     (element) =>\r\n      //       !this.state.selectedLands.find(\r\n      //         (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n      //       )\r\n      //   ),\r\n      //   this.map,\r\n      //   {\r\n      //     layerName: \"SelectLandsGraphicLayer\",\r\n      //     noclear: false,\r\n      //     isZoom: false,\r\n      //     isHiglightSymbol: true,\r\n      //     highlighColor: [0, 255, 0, 0.5],\r\n      //     zoomFactor: 10,\r\n      //   }\r\n      // );\r\n\r\n      this.parcelDis\r\n        .filter(\r\n          (element) =>\r\n            !this.state.selectedLands.find(\r\n              (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n            )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"PacrelNoGraphicLayer\",\r\n            20,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n\r\n      highlightFeature(\r\n        this.parcelDis.filter((element) =>\r\n          this.state.selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        ),\r\n        this.map,\r\n        {\r\n          layerName: \"SelectGraphicLayer\",\r\n          noclear: true,\r\n          attr: { isParcel: true },\r\n          isZoom: true,\r\n          isHighlighPolygonBorder: true,\r\n          zoomFactor: 10,\r\n        }\r\n      );\r\n\r\n      this.parcelDis\r\n        .filter((element) =>\r\n          this.state.selectedLands.find(\r\n            (i) => i.id === element.attributes.PARCEL_SPATIAL_ID\r\n          )\r\n        )\r\n        .forEach((f) => {\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"PacrelNoGraphicLayer\",\r\n            20,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  replaceAll(str, find, replace) {\r\n    return str.replace(new RegExp(find, \"g\"), replace);\r\n  }\r\n\r\n  setSelectMapLayer = (layer) => {\r\n    this.props.setSelectMapLayer(layer);\r\n  };\r\n\r\n  mapLoaded = (map) => {\r\n    this.map = map;\r\n    getMapInfo(investMapUrl).then((response) => {\r\n      map.__mapInfo = response;\r\n      this.setState({ mapLoaded: true });\r\n    });\r\n\r\n    this.props.setSelectMapLayer(\"Landbase_Parcel\");\r\n\r\n    this.props.setMap(map);\r\n    if (\r\n      this.props.input &&\r\n      this.props.input.value &&\r\n      this.props.input.value.parcels &&\r\n      this.props.input.value.temp\r\n    ) {\r\n      setTimeout(() => {\r\n        this.props.input.value.parcels.forEach((f) => {\r\n          f.geometry = new esri.geometry.Polygon(f.geometry);\r\n          addParcelNo(\r\n            f.geometry.getExtent().getCenter(),\r\n            this.map,\r\n            f.attributes.PARCEL_PLAN_NO + \"\",\r\n            \"PacrelNoGraphicLayer\",\r\n            20,\r\n            [0, 0, 0]\r\n          );\r\n        });\r\n\r\n        drawLength(this.map, this.props.input.value.parcels);\r\n        if (this.props.input.value?.temp?.parcelDis?.length) {\r\n          // highlightFeature(\r\n          //   this.props.input.value.temp.parcelDis.filter(\r\n          //     (element) =>\r\n          //       !this.props.input.value.parcels.find(\r\n          //         (i) =>\r\n          //           i.attributes.PARCEL_SPATIAL_ID ===\r\n          //           element.attributes.PARCEL_SPATIAL_ID\r\n          //       )\r\n          //   ),\r\n          //   this.map,\r\n          //   {\r\n          //     layerName: \"SelectLandsGraphicLayer\",\r\n          //     noclear: false,\r\n          //     isZoom: false,\r\n          //     isHiglightSymbol: true,\r\n          //     highlighColor: [0, 255, 0, 0.5],\r\n          //     zoomFactor: 10,\r\n          //   }\r\n          // );\r\n\r\n          this.props.input.value.temp.parcelDis\r\n            .filter(\r\n              (element) =>\r\n                !this.props.input.value.parcels.find(\r\n                  (i) =>\r\n                    i.attributes.PARCEL_SPATIAL_ID ===\r\n                    element.attributes.PARCEL_SPATIAL_ID\r\n                )\r\n            )\r\n            .forEach((f) => {\r\n              if (!f.geometry.getExtent) {\r\n                f.geometry = new esri.geometry.Polygon(f.geometry);\r\n              }\r\n              addParcelNo(\r\n                f.geometry.getExtent().getCenter(),\r\n                this.map,\r\n                f.attributes.PARCEL_PLAN_NO + \"\",\r\n                \"PacrelNoGraphicLayer\",\r\n                20,\r\n                [0, 0, 0]\r\n              );\r\n            });\r\n\r\n          console.log(this.props.input.value.temp.parcelDis);\r\n          this.setState({\r\n            parcelSearch: null,\r\n            parcelNum: this.props.input.value.temp.parcelDis,\r\n          });\r\n        } else if (this.props.input?.value?.parcels?.length) {\r\n          checkParcelAdjacents(this.props.input?.value?.parcels);\r\n        }\r\n      }, 500);\r\n\r\n      const {\r\n        input: { value },\r\n      } = this.props;\r\n      this.state.landsData = {\r\n        ...value,\r\n        conditions: this.state.conditions,\r\n        temp: {\r\n          //map: this.map,\r\n          mun: this.props.input.value.temp.mun,\r\n          plan: this.props.input.value.temp.plan,\r\n          subTypeval: this.props.input.value.temp.subTypeval,\r\n          subNameval: this.props.input.value.temp.subNameval,\r\n          parcelDis: this.props.input.value.temp.parcelDis,\r\n          blockval: this.props.input.value.temp.blockval,\r\n          parcelval: this.props.input.value.temp.parcelval,\r\n          subname: this.props.input.value.temp.subname,\r\n          block_no: this.props.input.value.temp.block_no,\r\n          city_name: this.props.input.value.temp.city_name,\r\n        },\r\n        parcels: [...this.props.input.value.parcels],\r\n        parcelData: { ...this.props.input.value.parcelData },\r\n        domainLists: { ...this.state.domainLists },\r\n        lists: {\r\n          firstParcels: [...this.state.parcelNum],\r\n          subDivNames: [...this.state.subDivNames],\r\n          MunicipalityNames: [...this.state.MunicipalityNames],\r\n          subDivType: [...this.state.subDivType],\r\n          PlanNum: [...this.state.PlanNum],\r\n          blockNum: [...this.state.blockNum],\r\n        },\r\n      };\r\n\r\n      this.state.landsData[\"selectedRequestType\"] =\r\n        (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n          [1928].indexOf(this.props?.currentModule?.record?.workflow_id) !=\r\n          -1) &&\r\n          [2190, 2191].indexOf(\r\n            this.props?.currentModule?.record?.workflow_id\r\n          ) == -1 &&\r\n          this.state.selectedRequestType) ||\r\n        ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n          \"فرد\") ||\r\n        ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n          \"اصدار الكروكي (المواطن)\") ||\r\n        3;\r\n\r\n      this.props.input.onChange({ ...this.state.landsData });\r\n    }\r\n\r\n    this.props.setCurrentMap(map);\r\n\r\n    if (this.props.input.value.parcels) {\r\n      setTimeout(() => {\r\n        highlightFeature([this.props.input.value.parcels[0]], this.map, {\r\n          layerName: \"SelectGraphicLayer\",\r\n          noclear: true,\r\n          isZoom: true,\r\n          attr: { isParcel: true },\r\n          isHighlighPolygonBorder: true,\r\n          zoomFactor: 10,\r\n        });\r\n      }, 1000);\r\n    }\r\n\r\n    //this.props.setMapLayers(mapLayers);\r\n    store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n  };\r\n\r\n  setValue = (item, event) => {\r\n    item.value = event.target.value;\r\n\r\n    this.UpdateSubmissionDataObject();\r\n  };\r\n\r\n  addSelectedFeaturesFromMap = () => {\r\n    this.props.selectedFeaturesOnMap.forEach((f) => {\r\n\r\n      if (\r\n        this.props.mainObject.investType.invest_type.SelectedLayer ==\r\n        \"Invest_Site_Polygon\"\r\n      ) {\r\n        f.attributes.PARCEL_MAIN_LUSE = f.attributes[investSugges];\r\n        f.attributes[investSugges] = null;\r\n        f.attributes.PARCEL_AREA = f.attributes[\"SITE_AREA\"];\r\n      }\r\n\r\n      f.id = f.attributes.PARCEL_SPATIAL_ID;\r\n\r\n      this.setToStore([f]).then(() => {\r\n        this.setState({\r\n          parcelId: null,\r\n        });\r\n\r\n        var res = {\r\n          features: [\r\n            {\r\n              ...f,\r\n              i: uniqid(),\r\n            },\r\n          ],\r\n        };\r\n\r\n        this.selectedLandsT.push(res);\r\n        this.DrawGraph();\r\n      });\r\n    });\r\n\r\n    this.props.setSelectedFeaturesOnMap([]);\r\n  };\r\n\r\n  addFeature = (feature) => {\r\n    feature.attributes.PARCEL_SPATIAL_ID =\r\n      feature.attributes.SITE_GEOSPATIAL_ID;\r\n\r\n    this.setState({ parcelId: feature.attributes.SITE_GEOSPATIAL_ID }, () => {\r\n      this.OnParcelSelect();\r\n    });\r\n  };\r\n\r\n  OnParcelSelect = () => {\r\n    //\r\n    this.setState({ parcelval: undefined });\r\n    clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n    clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n\r\n    if (\r\n      !this.state.selectedLands.filter((e) => e.id === this.state.parcelId)\r\n        .length\r\n    ) {\r\n      // [\"PARCEL_AREA\", \"PARCEL_MAIN_LUSE\", \"PARCEL_LAT_COORD\", \"PARCEL_LONG_COORD\", \"PLAN_NO\", \"PARCEL_PLAN_NO\", \"USING_SYMBOL\", \"PARCEL_BLOCK_NO\", \"DISTRICT_NAME\", \"SUBDIVISION_DESCRIPTION\", \"SUBDIVISION_TYPE\", \"PARCEL_SPATIAL_ID\", \"MUNICIPALITY_NAME\"]\r\n\r\n      let layerId = this.LayerID.Landbase_Parcel;\r\n      let filterField = \"PARCEL_SPATIAL_ID\";\r\n\r\n      if (\r\n        this.props.mainObject.investType.invest_type.SelectedLayer ==\r\n        \"Invest_Site_Polygon\"\r\n      ) {\r\n        layerId = this.LayerID.Invest_Site_Polygon;\r\n        filterField = \"SITE_GEOSPATIAL_ID\";\r\n      }\r\n\r\n      queryTask({\r\n        ...querySetting(\r\n          layerId,\r\n          `${filterField} =${this.state.parcelId}`,\r\n          true,\r\n          [\"*\"],\r\n          investMapUrl\r\n        ),\r\n        callbackResult: (res) => {\r\n\r\n          if (res.features.length > 0) {\r\n\r\n            if (res.features[0].attributes.PARCELOWNER == 2) {\r\n              window.notifySystem(\"warning\", \"عذرا لا يمكن تقديم معاملة طرح مواقع استثمارية على هذة الأرض حيث تم الإفادة مسبقًا بأن الأرض غير عائدة للأمانة\");\r\n            }\r\n            else {\r\n              if (\r\n                this.state.selectedLands &&\r\n                this.state.selectedLands.length == 0\r\n              ) {\r\n                queryTask({\r\n                  ...querySetting(\r\n                    this.LayerID.Tbl_Parcel_Conditions,\r\n                    `USING_SYMBOL_CODE ='${res.features[0].attributes.USING_SYMBOL}'`,\r\n                    false,\r\n                    [\r\n                      \"SLIDE_AREA\",\r\n                      \"MIN_FROT_OFFSET\",\r\n                      \"BUILDING_RATIO\",\r\n                      \"FRONT_OFFSET\",\r\n                      \"SIDE_OFFSET\",\r\n                      \"BACK_OFFSET\",\r\n                      \"FLOORS\",\r\n                      \"FLOOR_HEIGHT\",\r\n                      \"FAR\",\r\n                      \"ADD_FLOOR\",\r\n                    ],\r\n                    investMapUrl\r\n                  ),\r\n                  callbackResult: (condition) => {\r\n                    this.setState({\r\n                      conditions: condition.features,\r\n                    });\r\n                    getFeatureDomainName(\r\n                      res.features,\r\n                      layerId,\r\n                      false,\r\n                      investMapUrl\r\n                    ).then((r) => {\r\n\r\n                      if (\r\n                        this.props.mainObject.investType.invest_type\r\n                          .SelectedLayer == \"Invest_Site_Polygon\"\r\n                      ) {\r\n                        r[0].attributes.PARCEL_MAIN_LUSE =\r\n                          r[0].attributes[investSugges];\r\n                        r[0].attributes.PARCEL_AREA = r[0].attributes[\"SITE_AREA\"];\r\n                        r[0].attributes[investSugges] = null;\r\n                      }\r\n\r\n                      this.setToStore(r).then(() => {\r\n                        this.setState({\r\n                          parcelId: null,\r\n                        });\r\n                        this.selectedLandsT.push(res);\r\n                        this.DrawGraph();\r\n\r\n                        //this.state.selectedLands.pop();\r\n                      });\r\n                    });\r\n                  },\r\n                });\r\n              } else {\r\n                getFeatureDomainName(\r\n                  res.features,\r\n                  layerId,\r\n                  false,\r\n                  investMapUrl\r\n                ).then((r) => {\r\n\r\n                  if (\r\n                    this.props.mainObject.investType.invest_type.SelectedLayer ==\r\n                    \"Invest_Site_Polygon\"\r\n                  ) {\r\n                    r[0].attributes.PARCEL_MAIN_LUSE =\r\n                      r[0].attributes[investSugges];\r\n                    r[0].attributes[investSugges] = null;\r\n                    r[0].attributes.PARCEL_AREA = r[0].attributes[\"SITE_AREA\"];\r\n                  }\r\n\r\n                  this.setToStore(r).then(() => {\r\n                    this.setState({\r\n                      parcelId: null,\r\n                    });\r\n                    this.selectedLandsT.push(res);\r\n                    this.DrawGraph();\r\n\r\n                    //this.state.selectedLands.pop();\r\n                  });\r\n                });\r\n              }\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  setToStore = (r) => {\r\n    return new Promise((resolve, reject) => {\r\n      const {\r\n        input: { value },\r\n      } = this.props;\r\n\r\n      if (\r\n        value?.parcels?.find(\r\n          (x) => x.attributes[\"OBJECTID\"] == (r && r[0].attributes[\"OBJECTID\"])\r\n        )\r\n      ) {\r\n        window.notifySystem(\"warning\", \"هذة الأرض تم اختيارها من قبل\");\r\n      } else {\r\n        this.state.landsData = {\r\n          ...value,\r\n          mapGraphics: [],\r\n          conditions: this.state.conditions,\r\n          parcelData: { ...this.state.parcelData },\r\n          temp: {\r\n            //map: this.map,\r\n            // ...value,\r\n            mun: this.state.munval,\r\n            plan: this.state.planeval,\r\n            subTypeval: this.state.subTypeval,\r\n            subNameval: this.state.subNameval,\r\n            subname: this.state.subName_name,\r\n            parcelDis: this.RolBackParcelNum,\r\n            block_no: this.state.block_no,\r\n            blockval: this.state.blockval,\r\n            parcelval: this.state.parcelval,\r\n            city_name: this.state.city_name,\r\n          },\r\n          domainLists: { ...this.state.domainLists },\r\n          lists: {\r\n            firstParcels: [...this.state.parcelNum],\r\n            subDivNames: [...this.state.subDivNames],\r\n            MunicipalityNames: [...this.state.MunicipalityNames],\r\n            subDivType: [...this.state.subDivType],\r\n            PlanNum: [...this.state.PlanNum],\r\n            blockNum: [...this.state.blockNum],\r\n          },\r\n        };\r\n\r\n        if (r) {\r\n          //r[0].attributes.PARCEL_AREA = \"\";\r\n\r\n          let geometry = new esri.geometry.Polygon(r[0].geometry);\r\n          let pt = geometry.getExtent().getCenter();\r\n\r\n          project([pt], 4326, (res) => {\r\n            //\r\n\r\n            r[0].attributes.X = pt.x;\r\n            r[0].attributes.Y = pt.y;\r\n            r[0].attributes.lat = res[0].y;\r\n            r[0].attributes.long = res[0].x;\r\n            r[0].attributes.googleLink =\r\n              \"https://maps.google.com/?q=\" + res[0].y + \",\" + res[0].x;\r\n\r\n            this.state.selectedLands.push({\r\n              geometry: r[0].geometry,\r\n              attributes: r[0].attributes,\r\n              id: this.state.parcelId || r[0].attributes.PARCEL_SPATIAL_ID,\r\n            });\r\n\r\n            map_object(this.state.selectedLands);\r\n\r\n            this[\"edit_PARCEL_AREA\" + (this.state.selectedLands.length - 1)] =\r\n              r[0].attributes.PARCEL_AREA;\r\n            this[\r\n              \"edit_PARCEL_BLOCK_NO\" + (this.state.selectedLands.length - 1)\r\n            ] = r[0].attributes.PARCEL_BLOCK_NO || r[0].attributes.BLOCK_NO;\r\n            this[\"edit_DISTRICT_NAME\" + (this.state.selectedLands.length - 1)] =\r\n              r[0].attributes.DISTRICT_NAME;\r\n            this[\r\n              \"edit_SUBDIVISION_TYPE\" + (this.state.selectedLands.length - 1)\r\n            ] = r[0].attributes.SUBDIVISION_TYPE;\r\n            this[\r\n              \"edit_SUBDIVISION_DESCRIPTION\" +\r\n              (this.state.selectedLands.length - 1)\r\n            ] = r[0].attributes.SUBDIVISION_DESCRIPTION;\r\n\r\n            this.updateSelectParcels();\r\n            resolve();\r\n          });\r\n        } else {\r\n          this.updateSelectParcels();\r\n          resolve();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  updateSelectParcels = () => {\r\n    this.state.landsData[\"parcels\"] = [...this.state.selectedLands];\r\n\r\n    this.state.landsData[\"selectedRequestType\"] =\r\n      (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n        [1928].indexOf(this.props?.currentModule?.record?.workflow_id) != -1) &&\r\n        [2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n        -1 &&\r\n        this.state.selectedRequestType) ||\r\n      ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"فرد\") ||\r\n      ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"اصدار الكروكي (المواطن)\") ||\r\n      3;\r\n\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n  };\r\n\r\n  setAdjacentToStore = (r) => {\r\n    let store_value = this.props.input.value;\r\n    store_value.temp.parcelDis = r;\r\n    this.props.input.onChange(store_value);\r\n  };\r\n\r\n  LandHoverOn = (f) => {\r\n    if (this.state.selectedLands.length) {\r\n      var fitleredGraphics = this.map\r\n        .getLayer(\"SelectGraphicLayer\")\r\n        .graphics.filter((graphic) => {\r\n          return graphic.attributes.OBJECTID != f.attributes.OBJECTID;\r\n        });\r\n\r\n      fitleredGraphics = [\r\n        ...new Map(\r\n          fitleredGraphics.map((item) => [item[\"attributes\"][\"OBJECTID\"], item])\r\n        ).values(),\r\n      ];\r\n\r\n      clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n      fitleredGraphics.forEach((graphic) => {\r\n        this.map.getLayer(\"SelectGraphicLayer\").add(graphic);\r\n      });\r\n\r\n      highlightFeature([f], this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: false,\r\n        isHiglightSymbol: false,\r\n        attr: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  LandHoverOff = (f) => {\r\n    if (\r\n      f &&\r\n      this.state.selectedLands.length &&\r\n      f.attributes.PARCEL_SPATIAL_ID != this.state.parcelId\r\n    ) {\r\n      highlightFeature([f], this.map, {\r\n        layerName: \"SelectGraphicLayer\",\r\n        noclear: true,\r\n        isZoom: false,\r\n        isHiglightSymbol: true,\r\n        highlighColor: [0, 255, 0, 0.5],\r\n        attr: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  zoomToFeature(feature) {\r\n    var opacity = 1;\r\n    if (feature?.geometry?.type == \"polygon\") {\r\n      opacity = 0.5;\r\n    }\r\n\r\n    highlightFeature(feature, this.map, {\r\n      layerName: \"highlightGraphicLayer\",\r\n      isZoom: true,\r\n      zoomFactor: 20,\r\n      isHiglightSymbol: true,\r\n      highlighColor: [0, 255, 255, opacity],\r\n    });\r\n  }\r\n\r\n  remove = (item) => {\r\n    let { mainObject } = this.props;\r\n    if (mainObject && mainObject.waseka) {\r\n      delete mainObject.waseka;\r\n    }\r\n    this.state.parcelData = {};\r\n    //this.state.selectedLands.pop(item);\r\n\r\n    let filterField = \"SITE_GEOSPATIAL_ID\";\r\n\r\n    if (!item.attributes[\"SITE_GEOSPATIAL_ID\"]) {\r\n      filterField = \"PARCEL_SPATIAL_ID\";\r\n    }\r\n    this.state.selectedLands = this.state.selectedLands.filter(\r\n      (x) => x.attributes[filterField] != item.attributes[filterField]\r\n    );\r\n    //this.props.input.value.parcels = slice(this.props.input.value.parcels, 0, -1)\r\n    // this.props.input.onChange([...values])\r\n    if (this.state.selectedLandsT) {\r\n      this.state.selectedLandsT.filter(\r\n        (x) => x.attributes[filterField] != item.attributes[filterField]\r\n      );\r\n\r\n      //this.state.selectedLandsT.pop(item);\r\n    }\r\n    this.DrawGraph();\r\n    this.UpdateSubmissionDataObject();\r\n  };\r\n\r\n  saveEdit(id, name, i) {\r\n    let filterField = \"PARCEL_SPATIAL_ID\";\r\n\r\n    if (\r\n      this.props.mainObject.investType.invest_type.SelectedLayer ==\r\n      \"Invest_Site_Polygon\"\r\n    ) {\r\n      filterField = \"SITE_GEOSPATIAL_ID\";\r\n    }\r\n\r\n    let findParcel = this.props.input.value.parcels.find((p) => {\r\n      return [p?.id, p?.attributes[filterField]].indexOf(id) != -1;\r\n    });\r\n    findParcel.attributes[name] =\r\n      this[\"edit_\" + name + i] || findParcel.attributes[name];\r\n    let selectLand = this.state.selectedLands.find((p) => {\r\n      return [p?.id, p?.attributes[filterField]].indexOf(id) != -1;\r\n    });\r\n    selectLand.attributes[name] =\r\n      this[\"edit_\" + name + i] || selectLand.attributes[name];\r\n    this.state.landsData = {\r\n      ...this.props.input.value,\r\n      parcels: [...this.state.selectedLands],\r\n      parcelData: { ...this.state.parcelData },\r\n      domainLists: { ...this.state.domainLists },\r\n      lists: {\r\n        firstParcels: [...this.state.parcelNum],\r\n        subDivNames: [...this.state.subDivNames],\r\n        MunicipalityNames: [...this.state.MunicipalityNames],\r\n        subDivType: [...this.state.subDivType],\r\n        PlanNum: [...this.state.PlanNum],\r\n        blockNum: [...this.state.blockNum],\r\n      },\r\n    };\r\n\r\n    this.state.landsData[\"selectedRequestType\"] =\r\n      (([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n        [1928].indexOf(this.props?.currentModule?.record?.workflow_id) != -1) &&\r\n        [2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n        -1 &&\r\n        this.state.selectedRequestType) ||\r\n      ([2190].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"فرد\") ||\r\n      ([2191].indexOf(this.props?.currentModule?.record?.workflow_id) != -1 &&\r\n        \"اصدار الكروكي (المواطن)\") ||\r\n      3;\r\n\r\n    this.props.input.onChange({ ...this.state.landsData });\r\n    this.setState({\r\n      [name + \"_isEdit_\" + i]: false,\r\n      selectedLands: [...this.state.selectedLands],\r\n    });\r\n  }\r\n\r\n  openPopup = (scope) => {\r\n    var fields = this.parcelDataFields;\r\n    this.props.setMain(\"Popup\", {\r\n      popup: {\r\n        type: \"create\",\r\n        childProps: {\r\n          fields,\r\n          initialValues: { ...scope.state.parcelData },\r\n          ok(values) {\r\n            scope.state[\"parcelData\"] = values;\r\n            scope.UpdateSubmissionDataObject();\r\n            return Promise.resolve(true);\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  myChangeHandler = (name, i, e, event) => {\r\n    this[\"edit_\" + name + i] = event.target.value;\r\n    e.attributes[name] = event.target.value;\r\n    //e.attributes['PARCEL_AREA'] = event.target.value;\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  selectOnchange = (name, i, e, value) => {\r\n    this[\"edit_\" + name + i] = value;\r\n    e.attributes[name] = value;\r\n\r\n    if (name == investSugges) {\r\n      e.attributes[name + \"_Code\"] = this.parcel_fields\r\n        .find((x) => x.name == investSugges)\r\n        .options.find((x) => x.name == value).code;\r\n    }\r\n\r\n    //e.attributes['PARCEL_AREA'] = event.target.value;\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  showEditBtn = (name, value) => {\r\n    if (name == \"USING_SYMBOL\") {\r\n      return value == null;\r\n    } else {\r\n      return (\r\n        [\r\n          \"PARCEL_AREA\",\r\n          \"PARCEL_BLOCK_NO\",\r\n          \"DISTRICT_NAME\",\r\n          \"SUBDIVISION_TYPE\",\r\n          \"SUBDIVISION_DESCRIPTION\",\r\n          investSugges,\r\n        ].indexOf(name) > -1\r\n      );\r\n    }\r\n  };\r\n\r\n  enableEdit = (name, i) => {\r\n    this.setState({ [name + \"_isEdit_\" + i]: true });\r\n  };\r\n\r\n  exportCad = () => {\r\n    console.log(this.state.selectedLands);\r\n\r\n    var polygons = this.state.selectedLands;\r\n    var cadPolygons = [];\r\n\r\n    polygons.forEach((polygon) => {\r\n      delete polygon.geometry.cache;\r\n      var jsonParcel = {\r\n        geometry: polygon.geometry,\r\n        attributes: {\r\n          Layer: \"floor\",\r\n          Color: 1,\r\n          LyrColor: 1,\r\n        },\r\n      };\r\n      cadPolygons.push(jsonParcel);\r\n    });\r\n\r\n    var jsonParcel = {\r\n      attributes: {\r\n        Layer: \"plus\",\r\n        Color: 2,\r\n        LyrColor: 2,\r\n      },\r\n    };\r\n    uploadGISFile(\r\n      `${window.restServicesPath}/ExportGeoDataToCAD/GPServer/ExportGeoDataToCAD`,\r\n      {\r\n        ParcelsToExport: JSON.stringify(cadPolygons), //`[${featuresList.join(\", \")}]` ,\r\n      },\r\n      (data) => {\r\n        //store.dispatch({ type: \"Show_Loading_new\", loading: false });\r\n        data.value.split(\",\").forEach((item) => {\r\n          //setTimeout(() => {\r\n\r\n          var file_path =\r\n            window.filesHost +\r\n            \"/\" +\r\n            item.replaceAll(/\\s/g, \"\").replaceAll(\"\\\\\", \"/\");\r\n          var a = document.createElement(\"A\");\r\n          a.href = file_path;\r\n          a.download = file_path.substr(file_path.lastIndexOf(\"/\") + 1);\r\n          document.body.appendChild(a);\r\n          a.click();\r\n          document.body.removeChild(a);\r\n          //}, 1000);\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  setSelectMapLayer = (layer) => {\r\n    this.props.setSelectMapLayer(layer);\r\n  };\r\n\r\n  onPublicUserDegreesSubmit = (values) => {\r\n    // convert (deg, min, sec) to value of (lat,lng)\r\n    this.zoomToDegreePoint(values);\r\n  };\r\n\r\n  zoomToDegreePoint = (values) => {\r\n    let latitudeResult =\r\n      +values.latitudeDeg +\r\n      +values.latitudeMinutes / 60 +\r\n      +values.latitudeSeconds / 3600;\r\n    let longitudeResult =\r\n      +values.longitudeDeg +\r\n      +values.longitudeMinutes / 60 +\r\n      +values.longitudeSeconds / 3600;\r\n\r\n    this.zoomToLatLng(latitudeResult, longitudeResult);\r\n  };\r\n\r\n  zoomToLatLng = (lat, lng) => {\r\n    let point = new esri.geometry.Point({\r\n      latitude: lat,\r\n      longitude: lng,\r\n    });\r\n\r\n    this.checkPointInAmana(point);\r\n  };\r\n\r\n  checkPointInAmana = (point) => {\r\n\r\n    project([point], this.map.spatialReference.wkid, (res) => {\r\n      highlightFeature(res[0], this.map, {\r\n        layerName: \"ZoomGraphicLayer\",\r\n        isZoom: true,\r\n        pointZoomFactor: 10,\r\n        isZoomOnly: true,\r\n        isLocation: true,\r\n      });\r\n    });\r\n\r\n    /*project([point], this.map.spatialReference.wkid, (res) => {\r\n      queryTask({\r\n        url: investMapUrl + \"/\" + this.LayerID[\"Province_Boundary\"],\r\n        geometry: res[0],\r\n        outFields: [\"OBJECTID\"],\r\n        returnGeometry: false,\r\n        callbackResult: ({ features }) => {\r\n          if (!features.length) {\r\n            message.warning(\"هذة النقطة خارج حدود الأمانة\");\r\n          } else {\r\n            highlightFeature(res[0], this.map, {\r\n              layerName: \"ZoomGraphicLayer\",\r\n              isZoom: true,\r\n              pointZoomFactor: 10,\r\n              isZoomOnly: true,\r\n              isLocation: true,\r\n            });\r\n          }\r\n        },\r\n      });\r\n    });*/\r\n  };\r\n\r\n  onPublicUserDecimalSubmit = (values) => {\r\n    if (values.latitude && values.longitude) {\r\n      let point = new esri.geometry.Point({\r\n        latitude: +values.latitude,\r\n        longitude: +values.longitude,\r\n      });\r\n      this.checkPointInAmana(point);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      parcelData,\r\n      selectedLands,\r\n      MunicipalityNames,\r\n      subDivType,\r\n      subDivNames,\r\n      subNameval,\r\n      blockNum,\r\n      blockval,\r\n      PlanNum,\r\n      mapLoaded,\r\n      planeval,\r\n      parcelSearch,\r\n      parcelNum,\r\n      parcelval,\r\n      conditions,\r\n      requestTypes,\r\n      selectedRequestType,\r\n      boundariesBtnIsVisible,\r\n      formValues,\r\n    } = this.state;\r\n\r\n    const { t, fullMapWidth, selectedFeaturesOnMap, mainObject } = this.props;\r\n\r\n    var parcelBtnDisabled = false; // this.props?.currentModule?.record?.workflow_id\r\n    if (\r\n      ([22, 23].indexOf(this.props.currentModule.id) != -1 ||\r\n        [1928].indexOf(this.props?.currentModule?.record?.workflow_id) != -1) &&\r\n      [2190, 2191].indexOf(this.props?.currentModule?.record?.workflow_id) ==\r\n      -1 &&\r\n      selectedRequestType == 1 &&\r\n      selectedLands.length > 0\r\n    ) {\r\n      parcelBtnDisabled = true;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className={!fullMapWidth ? \"content-section implementation\" : \"\"}>\r\n          <div\r\n            style={\r\n              (!this.props.isView && {\r\n                display: \"flex\",\r\n                marginTop: \"35px\",\r\n              }) || {\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }\r\n            }\r\n            className=\"removeActive\"\r\n          >\r\n            {(mapLoaded && !this.props.isView && (\r\n              <div\r\n                style={{\r\n                  direction: \"ltr\", width: \"95%\"\r\n                }}>\r\n                <Tabs\r\n                  defaultActiveKey=\"searchLands\"\r\n                  style={{ direction: \"rtl\" }}>\r\n                  <Tab\r\n                    className=\"tabsPaddingLand\"\r\n                    eventKey=\"searchLands\"\r\n                    title=\"بحث عن أرض\"\r\n                    style={{ paddingTop: \"10px\", padding: \"10px\" }}>\r\n                    {mainObject.investType.invest_type.SelectedLayer ==\r\n                      \"Landbase_Parcel\" ? (\r\n                      <>\r\n                        <Select\r\n                          getPopupContainer={(trigger) => trigger.parentNode}\r\n                          autoFocus\r\n                          onChange={(val) => {\r\n                            onMunChange(this, val);\r\n                          }}\r\n                          showSearch\r\n                          value={this.state.munval}\r\n                          placeholder=\"اختر اسم البلديه\"\r\n                          disabled={!this.state.MunicipalityNames.length}\r\n                          optionFilterProp=\"children\"\r\n                          filterOption={(input, option) => {\r\n                            if (option.props.children) {\r\n                              return (\r\n                                option.props.children.find((i) => {\r\n                                  return (\r\n                                    i.indexOf(input.trim().toLowerCase()) >= 0\r\n                                  );\r\n                                }) != null\r\n                              );\r\n                            } else {\r\n                              return false;\r\n                            }\r\n                          }}>\r\n                          {MunicipalityNames.map((e) => (\r\n                            <Option key={e.code} value={e.code}>\r\n                              {e.name}{\" \"}\r\n                            </Option>\r\n                          ))}\r\n                        </Select>\r\n                        <Select\r\n                          onChange={(val) => {\r\n                            onPlaneChange(this, val);\r\n                          }}\r\n                          showSearch\r\n                          getPopupContainer={(trigger) => trigger.parentNode}\r\n                          autoFocus\r\n                          disabled={!PlanNum.length}\r\n                          optionFilterProp=\"children\"\r\n                          filterOption={(input, option) => {\r\n                            if (option.props.children) {\r\n                              return (\r\n                                option.props.children\r\n                                  ?.toLowerCase()\r\n                                  ?.indexOf(\r\n                                    convertToArabic(input.toLowerCase())\r\n                                  ) != -1\r\n                              );\r\n                            } else {\r\n                              return false;\r\n                            }\r\n                          }}\r\n                          value={planeval}\r\n                          placeholder=\"رقم المخطط\"\r\n                          notFoundContent=\"not found\"\r\n                        >\r\n                          {PlanNum\r\n                            //.slice(0, 100)\r\n                            .map((d, i) => {\r\n                              return (\r\n                                <Option key={i} value={d.i}>\r\n                                  {convertToArabic(d.attributes.PLAN_NO)}\r\n                                </Option>\r\n                              );\r\n                            })}\r\n                        </Select>\r\n                        <Select\r\n                          getPopupContainer={(trigger) => trigger.parentNode}\r\n                          autoFocus\r\n                          onChange={(val) => {\r\n                            onSubTypeChange(this, val);\r\n                          }}\r\n                          showSearch\r\n                          disabled={!subDivType.length}\r\n                          value={this.state.subTypeval}\r\n                          placeholder={\"نوع التقسيم\"}\r\n                          optionFilterProp=\"children\"\r\n                          filterOption={(input, option) => {\r\n                            if (option.props.children) {\r\n                              return (\r\n                                option.props.children\r\n                                  ?.toLowerCase()\r\n                                  ?.indexOf(\r\n                                    convertToArabic(input.toLowerCase())\r\n                                  ) != -1\r\n                              );\r\n                            } else {\r\n                              return false;\r\n                            }\r\n                          }}\r\n                        >\r\n                          {subDivType\r\n                            //.slice(0, 100)\r\n                            .map((e, i) => (\r\n                              <Option key={i} value={e.code}>\r\n                                {\" \"}\r\n                                {e.name}{\" \"}\r\n                              </Option>\r\n                            ))}\r\n                        </Select>\r\n                        <Select\r\n                          getPopupContainer={(trigger) => trigger.parentNode}\r\n                          autoFocus\r\n                          onChange={(val) => {\r\n                            onSubNameChange(this, val);\r\n                          }}\r\n                          showSearch\r\n                          disabled={!subDivNames.length}\r\n                          placeholder=\"اسم التقسيم\"\r\n                          value={subNameval}\r\n                          optionFilterProp=\"children\"\r\n                          filterOption={(input, option) => {\r\n                            if (option.props.children) {\r\n                              return (\r\n                                option.props.children\r\n                                  ?.toLowerCase()\r\n                                  ?.indexOf(\r\n                                    convertToArabic(input.toLowerCase())\r\n                                  ) != -1\r\n                              );\r\n                            } else {\r\n                              return false;\r\n                            }\r\n                          }}\r\n                        >\r\n                          {subDivNames\r\n                            //.slice(0, 100)\r\n                            .map((e, i) => (\r\n                              <Option\r\n                                key={i}\r\n                                value={e.attributes.SUBDIVISION_SPATIAL_ID}>\r\n                                {\" \"}\r\n                                {e.attributes.SUBDIVISION_DESCRIPTION}\r\n                              </Option>\r\n                            ))}\r\n                        </Select>\r\n                        <Select\r\n                          getPopupContainer={(trigger) => trigger.parentNode}\r\n                          autoFocus\r\n                          onChange={(val) => {\r\n                            onBlockChange(this, val);\r\n                          }}\r\n                          showSearch\r\n                          disabled={!blockNum.length}\r\n                          value={blockval}\r\n                          placeholder=\"رقم البلك\"\r\n                          optionFilterProp=\"children\"\r\n                          filterOption={(input, option) => {\r\n                            if (option.props.children) {\r\n                              return (\r\n                                option.props.children\r\n                                  ?.toLowerCase()\r\n                                  ?.indexOf(\r\n                                    convertToArabic(input.toLowerCase())\r\n                                  ) != -1\r\n                              );\r\n                            } else {\r\n                              return false;\r\n                            }\r\n                          }}\r\n                        >\r\n                          {blockNum\r\n                            //.slice(0, 100)\r\n                            .map((e, i) => (\r\n                              <Option\r\n                                key={i}\r\n                                value={e.attributes.BLOCK_SPATIAL_ID}>\r\n                                {convertToArabic(e.attributes.BLOCK_NO)}\r\n                              </Option>\r\n                            ))}\r\n                        </Select>\r\n                        <Select\r\n                          // onBlur={() => {\r\n                          //   clearGraphicFromLayer(this.map, \"SelectGraphicLayer\");\r\n                          // }}\r\n                          getPopupContainer={(trigger) => trigger.parentNode}\r\n                          autoFocus\r\n                          onFocus={() => {\r\n                            //clearGraphicFromLayer(this.map, \"SelectLandsGraphicLayer\");\r\n                            if (!this.state[\"parcelId\"]) {\r\n                              highlightFeature(\r\n                                parcelNum.filter((e, i) => {\r\n                                  if (parcelSearch) {\r\n                                    if (this.state.selectedLands.length) {\r\n                                      return !this.state.selectedLands.find(\r\n                                        (tt) =>\r\n                                          tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                          e.attributes.PARCEL_SPATIAL_ID\r\n                                      );\r\n                                    } else {\r\n                                      return (\r\n                                        e.attributes.PARCEL_PLAN_NO &&\r\n                                        e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                                          parcelSearch.toLowerCase()\r\n                                        ) >= 0\r\n                                      );\r\n                                    }\r\n                                  } else {\r\n                                    if (selectedLands.length) {\r\n                                      return (\r\n                                        !selectedLands.find(\r\n                                          (tt) =>\r\n                                            tt.attributes.PARCEL_PLAN_NO ==\r\n                                            e.attributes.PARCEL_PLAN_NO\r\n                                        ) && e.attributes.PARCEL_PLAN_NO\r\n                                      );\r\n                                    } else {\r\n                                      return e.attributes.PARCEL_PLAN_NO;\r\n                                    }\r\n                                  }\r\n                                }),\r\n                                // .slice(0, 100),\r\n                                this.map,\r\n                                {\r\n                                  layerName: \"SelectGraphicLayer\",\r\n                                  noclear: false,\r\n                                  isZoom: false,\r\n                                  isHiglightSymbol: true,\r\n                                  highlighColor: [0, 255, 0, 0.5],\r\n                                  attr: true,\r\n                                }\r\n                              );\r\n                            }\r\n                          }}\r\n                          onChange={(val) => {\r\n                            onLandParcelChange(this, val);\r\n                          }}\r\n                          showSearch\r\n                          disabled={parcelNum && !parcelNum.length}\r\n                          onSearch={(e) => {\r\n                            this.setState({ parcelSearch: e });\r\n                            onSearch(this, e);\r\n                          }}\r\n                          filterOption={(input, option) => {\r\n                            if (option.props.children) {\r\n                              return (\r\n                                option.props.children\r\n                                  ?.toLowerCase()\r\n                                  ?.indexOf(\r\n                                    convertToArabic(input.toLowerCase())\r\n                                  ) != -1\r\n                              );\r\n                            } else {\r\n                              return false;\r\n                            }\r\n                          }}\r\n                          value={parcelval}\r\n                          placeholder=\"رقم قطعة الارض\">\r\n                          {parcelNum &&\r\n                            parcelNum\r\n                              .filter((e, i) => {\r\n                                if (parcelSearch) {\r\n                                  if (this.state.selectedLands.length) {\r\n                                    return !this.state.selectedLands.find(\r\n                                      (tt) =>\r\n                                        tt.attributes.PARCEL_SPATIAL_ID ==\r\n                                        e.attributes.PARCEL_SPATIAL_ID\r\n                                    );\r\n                                  } else {\r\n                                    return (\r\n                                      e.attributes.PARCEL_PLAN_NO &&\r\n                                      e.attributes.PARCEL_PLAN_NO.toLowerCase().indexOf(\r\n                                        parcelSearch.toLowerCase()\r\n                                      ) >= 0\r\n                                    );\r\n                                  }\r\n                                } else {\r\n                                  if (selectedLands.length) {\r\n                                    return (\r\n                                      !selectedLands.find(\r\n                                        (tt) =>\r\n                                          tt.attributes.PARCEL_PLAN_NO ==\r\n                                          e.attributes.PARCEL_PLAN_NO\r\n                                      ) && e.attributes.PARCEL_PLAN_NO\r\n                                    );\r\n                                  } else {\r\n                                    return e.attributes.PARCEL_PLAN_NO;\r\n                                  }\r\n                                }\r\n                              })\r\n                              .slice(0, 100)\r\n                              .map((e, i) => {\r\n                                return (\r\n                                  <Option\r\n                                    onMouseEnter={this.LandHoverOn.bind(\r\n                                      this,\r\n                                      e\r\n                                    )}\r\n                                    onMouseLeave={this.LandHoverOff.bind(\r\n                                      this,\r\n                                      e\r\n                                    )}\r\n                                    key={e.attributes.PARCEL_SPATIAL_ID}\r\n                                    value={e.i}>\r\n                                    {localizeNumber(\r\n                                      e.attributes.PARCEL_PLAN_NO\r\n                                    )}\r\n                                  </Option>\r\n                                );\r\n                              })}\r\n                        </Select>\r\n\r\n                        <Button\r\n                          className=\"add-gis\"\r\n                          disabled={!this.state.parcelId || parcelBtnDisabled}\r\n                          onClick={this.OnParcelSelect}>\r\n                          إضافة الأرض\r\n                        </Button>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <FilterComponentInvest\r\n                          map={this.map}\r\n                          setSelectMapLayer={this.setSelectMapLayer}\r\n                          searchLayer={\r\n                            mainObject.investType.invest_type.SelectedLayer\r\n                          }\r\n                          addFeature={this.addFeature}\r\n                        />\r\n                      </>\r\n                    )}\r\n                  </Tab>\r\n                  <Tab\r\n                    eventKey=\"coords\"\r\n                    title=\"بحث بالإحداثيات\"\r\n                    style={{ marginTop: \"30px\" }}>\r\n                    <Tabs defaultActiveKey=\"decimal\" className=\"\">\r\n                      <Tab eventKey=\"deg\" title=\"درجات-دقائق-ثواني\">\r\n                        <Form\r\n                          onFinish={this.onPublicUserDegreesSubmit}\r\n                          className=\"coordinateForm\"\r\n                          layout=\"vertical\"\r\n                          name=\"validate_other\">\r\n                          <Container fluid>\r\n                            <h5 className=\"mt-4 mr-1\">دوائر العرض</h5>\r\n                            <Row>\r\n                              <Col span={7} className=\"mr-1 ml-2\">\r\n                                <Form.Item\r\n                                  rules={[\r\n                                    {\r\n                                      message: \"اختر الدرجة\",\r\n                                      required: true,\r\n                                    },\r\n                                  ]}\r\n                                  name=\"latitudeDeg\"\r\n\r\n                                // help=\"Should be combination of numbers & alphabets\"\r\n                                >\r\n                                  <Input\r\n                                    // type=\"number\"\r\n                                    name=\"latitudeDeg\"\r\n                                    onChange={this.handleChange}\r\n                                    value={formValues.latitudeDeg}\r\n                                    placeholder=\"درجات\"\r\n                                  />\r\n                                </Form.Item>\r\n                              </Col>\r\n                              <Col span={7} className=\"mr-1\">\r\n                                <Form.Item\r\n                                  rules={[\r\n                                    {\r\n                                      message: \"اختر الدقيقة\",\r\n                                      required: true,\r\n                                    },\r\n                                  ]}\r\n                                  name=\"latitudeMinutes\"\r\n\r\n                                // help=\"Should be combination of numbers & alphabets\"\r\n                                >\r\n                                  <Input\r\n                                    // type=\"number\"\r\n                                    name=\"latitudeMinutes\"\r\n                                    onChange={this.handleChange}\r\n                                    value={formValues.latitudeMinutes}\r\n                                    placeholder=\"دقائق\"\r\n                                  />\r\n                                </Form.Item>\r\n                              </Col>\r\n                              <Col span={8}>\r\n                                <Form.Item\r\n                                  name=\"latitudeSeconds\"\r\n                                  rules={[\r\n                                    {\r\n                                      message: \"إختر الثانية\",\r\n                                      required: true,\r\n                                    },\r\n                                  ]}\r\n                                // help=\"Should be combination of numbers & alphabets\"\r\n                                >\r\n                                  <Input\r\n                                    // type=\"number\"\r\n                                    name=\"latitudeSeconds\"\r\n                                    onChange={this.handleChange}\r\n                                    value={formValues.latitudeSeconds}\r\n                                    placeholder=\"ثواني\"\r\n                                  />\r\n                                </Form.Item>\r\n                              </Col>\r\n                            </Row>\r\n\r\n                            <h5 className=\"mt-4 mr-1\">خط الطول</h5>\r\n                            <Row>\r\n                              <Col span={7} className=\"mr-1 ml-2\">\r\n                                <Form.Item\r\n                                  name=\"longitudeDeg\"\r\n                                  rules={[\r\n                                    {\r\n                                      message: \"اختر الدرجة\",\r\n                                      required: true,\r\n                                    },\r\n                                  ]}>\r\n                                  <Input\r\n                                    // type=\"number\"\r\n                                    name=\"longitudeDeg\"\r\n                                    onChange={this.handleChange}\r\n                                    value={formValues.longitudeDeg}\r\n                                    placeholder=\"درجات\"\r\n                                  />\r\n                                </Form.Item>\r\n                              </Col>\r\n                              <Col span={7} className=\"mr-1\">\r\n                                <Form.Item\r\n                                  name=\"longitudeMinutes\"\r\n                                  rules={[\r\n                                    {\r\n                                      message: \"اختر الدقيقة\",\r\n                                      required: true,\r\n                                    },\r\n                                  ]}\r\n                                // help=\"Should be combination of numbers & alphabets\"\r\n                                >\r\n                                  <Input\r\n                                    // type=\"number\"\r\n                                    name=\"longitudeMinutes\"\r\n                                    onChange={this.handleChange}\r\n                                    value={formValues.longitudeMinutes}\r\n                                    placeholder=\"دقائق\"\r\n                                  />\r\n                                </Form.Item>\r\n                              </Col>\r\n\r\n                              <Col span={8}>\r\n                                <Form.Item\r\n                                  name=\"longitudeSeconds\"\r\n                                  rules={[\r\n                                    {\r\n                                      message: \"اختر الثواني\",\r\n                                      required: true,\r\n                                    },\r\n                                  ]}\r\n\r\n                                // help=\"Should be combination of numbers & alphabets\"\r\n                                >\r\n                                  <Input\r\n                                    // type=\"number\"\r\n                                    name=\"longitudeSeconds\"\r\n                                    onChange={this.handleChange}\r\n                                    value={formValues.longitudeSeconds}\r\n                                    placeholder=\"ثواني\"\r\n                                  />\r\n                                </Form.Item>\r\n                              </Col>\r\n                            </Row>\r\n                            <div style={{ textAlign: \"center\" }}>\r\n                              <Button\r\n                                style={{ float: \"inherit\", width: \"60%\" }}\r\n                                className=\"add-gis\"\r\n                                size=\"large\"\r\n                                htmlType=\"submit\"\r\n                                onClick={this.degSearch}>\r\n                                بحث\r\n                              </Button>\r\n                            </div>\r\n                          </Container>\r\n                        </Form>\r\n                      </Tab>\r\n                      <Tab eventKey=\"decimal\" title=\"إحداثيات عشرية\">\r\n                        <Form\r\n                          onFinish={this.onPublicUserDecimalSubmit}\r\n                          className=\"coordinateForm\"\r\n                          layout=\"vertical\"\r\n                          name=\"validate_other\">\r\n                          <Container>\r\n                            <Row>\r\n                              <Col span={24} className=\"\">\r\n                                <h5 className=\"mt-4 \">دوائر العرض</h5>\r\n                                <Form.Item\r\n                                  name=\"latitude\"\r\n                                  rules={[\r\n                                    {\r\n                                      message: \"اختر دوائر العرض\",\r\n                                      required: true,\r\n                                    },\r\n                                  ]}>\r\n                                  <Input\r\n                                    // type=\"number\"\r\n                                    name=\"latitude\"\r\n                                    onChange={this.handleChange}\r\n                                    value={formValues.latitude}\r\n                                    placeholder=\"ex: 26.xxxxxx\"\r\n                                  />\r\n                                </Form.Item>\r\n                              </Col>\r\n                              <Col span={24} className=\"\">\r\n                                <h5 className=\"mt-2\">خط الطول</h5>\r\n                                <Form.Item\r\n                                  rules={[\r\n                                    {\r\n                                      message: \"اختر خط الطول\",\r\n                                      required: true,\r\n                                    },\r\n                                  ]}\r\n                                  name=\"longitude\">\r\n                                  <Input\r\n                                    // type=\"number\"\r\n                                    name=\"longitude\"\r\n                                    onChange={this.handleChange}\r\n                                    value={formValues.longitude}\r\n                                    placeholder=\"ex: 50.xxxxxx\"\r\n                                  />\r\n                                </Form.Item>\r\n                              </Col>\r\n                            </Row>\r\n                            <div style={{ textAlign: \"center\" }}>\r\n                              <Button\r\n                                style={{ float: \"inherit\", width: \"60%\" }}\r\n                                onClick={this.CoordinateSearch}\r\n                                className=\"add-gis\"\r\n                                size=\"large\"\r\n                                htmlType=\"submit\">\r\n                                بحث\r\n                              </Button>\r\n                            </div>\r\n                          </Container>\r\n                        </Form>\r\n                      </Tab>\r\n                    </Tabs>\r\n                  </Tab>\r\n                </Tabs>\r\n              </div>\r\n            )) || (\r\n                <div\r\n                  style={{\r\n                    direction: \"ltr\",\r\n                  }}>\r\n                  <Button className=\"add-gis\" onClick={this.exportCad}>\r\n                    استخراج ملف كاد\r\n                  </Button>\r\n                </div>\r\n              )}\r\n          </div>\r\n          <div>\r\n            {/* <div className=\"btn-fixed\">\r\n              <MapBtnsComponent {...this.props}></MapBtnsComponent>\r\n            </div> */}\r\n            <StickyContainer style={{ direction: \"ltr\" }}>\r\n              <Sticky bottomOffset={80}>\r\n                {({ style }) => (\r\n                  <MapBtnsComponent\r\n                    style={style}\r\n                    {...this.props}></MapBtnsComponent>\r\n                )}\r\n              </Sticky>\r\n            </StickyContainer>\r\n            <div>\r\n              <MapComponent\r\n                mapload={this.mapLoaded.bind(this)}\r\n                {...this.props}></MapComponent>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {mapLoaded && (\r\n          <div style={{ gridColumn: \"1/3\" }}>\r\n            <div style={{ textAlign: \"end\", marginTop: \"10px\" }}>\r\n              {selectedFeaturesOnMap && selectedFeaturesOnMap.length ? (\r\n                <Button\r\n                  onClick={this.addSelectedFeaturesFromMap.bind(this)}\r\n                  className=\"add_mktab toolsBtnStyle addFromMapbtn\"\r\n                  type=\"primary\"\r\n                  icon=\"plus\">\r\n                  إضافة الأراضي المحددة\r\n                </Button>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n            </div>\r\n            {selectedLands && selectedLands.length > 0 && (\r\n              <div>\r\n                <h1 className=\"titleSelectedParcel\">الأراضي المختارة</h1>\r\n\r\n                <table\r\n                  className=\"table table-bordered\"\r\n                  style={{ marginTop: \"1%\" }}>\r\n                  <thead>\r\n                    <tr>\r\n                      {this.parcel_fields_headers.map((field_header, k) => {\r\n                        return <th>{field_header}</th>;\r\n                      })}\r\n                      <th> خيارات</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {selectedLands.map((e, i) => {\r\n                      return (\r\n                        <tr key={i}>\r\n                          {this.parcel_fields.map((field, k) => {\r\n                            return (\r\n                              <td key={k}>\r\n                                <div>\r\n                                  {field.editable ? (\r\n                                    !this.state[field.name + \"_isEdit_\" + i] ? (\r\n                                      <span>\r\n                                        <span>\r\n                                          {localizeNumber(\r\n                                            e.attributes[field.name] || \"\"\r\n                                          )}\r\n                                        </span>\r\n                                        {this.showEditBtn(\r\n                                          field.name,\r\n                                          e.attributes[field.name]\r\n                                        ) && (\r\n                                            <span>\r\n                                              <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                  marginRight: e.attributes[\r\n                                                    field.name\r\n                                                  ]\r\n                                                    ? \"20px\"\r\n                                                    : \"0px\",\r\n                                                }}\r\n                                                onClick={this.enableEdit.bind(\r\n                                                  this,\r\n                                                  field.name,\r\n                                                  i\r\n                                                )}>\r\n                                                <i className=\"fas fa-edit\"></i>\r\n                                              </button>\r\n                                            </span>\r\n                                          )}\r\n                                      </span>\r\n                                    ) : (\r\n                                      <span\r\n                                        style={{\r\n                                          display: \"grid\",\r\n                                          gridTemplateColumns: \"1fr auto\",\r\n                                        }}>\r\n                                        {field.type != \"select\" &&\r\n                                          field.type != \"button\" && (\r\n                                            <input\r\n                                              key={i}\r\n                                              className=\"form-control\"\r\n                                              type={field.type}\r\n                                              step=\"any\"\r\n                                              value={e.attributes[field.name]}\r\n                                              onChange={this.myChangeHandler.bind(\r\n                                                this,\r\n                                                field.name,\r\n                                                i,\r\n                                                e\r\n                                              )}\r\n                                            />\r\n                                          )}\r\n                                        {field.type == \"select\" && (\r\n                                          <Select\r\n                                            getPopupContainer={(trigger) =>\r\n                                              trigger.parentNode\r\n                                            }\r\n                                            autoFocus\r\n                                            value={e.attributes[field.name]}\r\n                                            onChange={this.selectOnchange.bind(\r\n                                              this,\r\n                                              field.name,\r\n                                              i,\r\n                                              e\r\n                                            )}\r\n                                            placeholder=\"النشاط المقترح\"\r\n                                            optionFilterProp=\"children\"\r\n                                            filterOption={(input, option) =>\r\n                                              convertToEnglish(\r\n                                                option.props.children\r\n                                              )\r\n                                                ?.toLowerCase()\r\n                                                ?.indexOf(\r\n                                                  input.toLowerCase()\r\n                                                ) >= 0\r\n                                            }\r\n                                          >\r\n                                            {field.options.map((e, i) => (\r\n                                              <Option key={i} value={e.name}>\r\n                                                {convertToArabic(e.name)}\r\n                                              </Option>\r\n                                            ))}\r\n                                          </Select>\r\n                                        )}\r\n                                        <button\r\n                                          className=\"btn\"\r\n                                          style={{ marginRight: \"20px\" }}\r\n                                          onClick={this.saveEdit.bind(\r\n                                            this,\r\n                                            mainObject.investType.invest_type\r\n                                              .SelectedLayer ==\r\n                                              \"Invest_Site_Polygon\"\r\n                                              ? e.attributes.SITE_GEOSPATIAL_ID\r\n                                              : e.attributes.PARCEL_SPATIAL_ID,\r\n                                            field.name,\r\n                                            i\r\n                                          )}>\r\n                                          <i className=\"fa fa-floppy-o\"></i>\r\n                                        </button>\r\n                                      </span>\r\n                                    )\r\n                                  ) : (\r\n                                    <span>\r\n                                      {field.type == \"button\" ? (\r\n                                        <button\r\n                                          className=\"btn btn-primary\"\r\n                                          style={{ marginRight: \"20px\" }}\r\n                                          onClick={this.showGoogleLink.bind(\r\n                                            this,\r\n                                            e.attributes.googleLink\r\n                                          )}>\r\n                                          عرض\r\n                                        </button>\r\n                                      ) : (\r\n                                        <span>\r\n                                          {localizeNumber(\r\n                                            e.attributes[field.name] || \"\"\r\n                                          )}\r\n                                        </span>\r\n                                      )}\r\n                                    </span>\r\n                                  )}\r\n                                </div>\r\n                              </td>\r\n                            );\r\n                          })}\r\n\r\n                          {!this.props.isView ? (\r\n                            <td>\r\n                              <div>\r\n                                <button\r\n                                  className=\"btn btn-danger\"\r\n                                  onClick={this.remove.bind(this, e)}>\r\n                                  حذف\r\n                                </button>\r\n\r\n                                <Button\r\n                                  className=\"toolsBtnStyle\"\r\n                                  style={{ margin: \"auto 1px\" }}\r\n                                  size=\"large\"\r\n                                  onClick={this.zoomToFeature.bind(this, e)}>\r\n                                  <FontAwesomeIcon\r\n                                    icon={faSearchPlus}\r\n                                    className=\"\"\r\n                                  />\r\n                                </Button>\r\n                              </div>\r\n                            </td>\r\n                          ) : (\r\n                            <td>\r\n                              <Button\r\n                                className=\"toolsBtnStyle\"\r\n                                style={{ margin: \"auto 1px\" }}\r\n                                size=\"large\"\r\n                                onClick={this.zoomToFeature.bind(this, e)}>\r\n                                <FontAwesomeIcon\r\n                                  icon={faSearchPlus}\r\n                                  className=\"\"\r\n                                />\r\n                              </Button>\r\n                            </td>\r\n                          )}\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  appMapDispatchToProps\r\n)(withTranslation(\"labels\")(InvestIdentifyComponnent));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAWA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA+BA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAIA;AAEA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAGA;AAGA;AAEA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AAQA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAKA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AApXA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AA2VA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAQA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AAKA;AAKA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAUA;AACA;AACA;;;;;;;;;;;;AChgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AAmBA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AA4PA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA6HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAQA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAQA;AAEA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAOA;AAQA;AACA;AACA;AAAA;AAOA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAGA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAkBA;AACA;AACA;AACA;AACA;AAOA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAYA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAGA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAkBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAyzDA;AACA;AACA;AACA;AACA;AACA;AAEA;AAgBA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AAGA;AAKA;AAKA;AAKA;AAKA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAwGA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AA0kBA;AACA;AACA;AAufA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA+BA;AAAA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AA8LA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAQA;AACA;AAEA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAIA;AAIA;AACA;AAAA;AAMA;AAIA;AACA;AACA;AAAA;AAOA;AACA;AACA;AAGA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAMA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAOA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAOA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AASA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAMA;AACA;AAAA;AAEA;AACA;AAAA;AAgBA;AACA;AACA;AAKA;AACA;AAIA;AACA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAGA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAOA;AACA;AAGA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AACA;AASA;AACA;AAAA;AAQA;AACA;AAAA;AAAA;AACA;AAGA;AAeA;AAMA;AACA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAOA;AASA;AACA;AACA;;;;A","sourceRoot":""}
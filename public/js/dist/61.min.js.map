{"version":3,"file":"61.min.js","sources":["webpack:///./src/app/components/inputs/fields/checkbox/single.js","webpack:///./src/app/components/inputs/mapping.js"],"sourcesContent":["import React from \"react\";\r\nimport { Checkbox } from \"antd\";\r\nimport mainInput from \"app/helpers/main/input\";\r\nimport {withTranslation} from \"react-i18next\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"../../mapping\";\r\nimport { connect } from \"react-redux\";\r\nimport { isFunction, isEqual } from \"lodash\";\r\n\r\nclass booleanComp extends mainInput {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      input: { value, onChange },\r\n      init_data,\r\n    } = props;\r\n    value ? onChange(1) : onChange(0);\r\n    \r\n    if (init_data) {\r\n      init_data(props);\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return (\r\n      !isEqual(nextProps.data, this.props.data) ||\r\n      !isEqual(nextProps.input.value, this.props.input.value) ||\r\n      !isEqual(nextProps.lang, this.props.lang) ||\r\n      !isEqual(nextProps.forceUpdate, this.props.forceUpdate) ||\r\n      true\r\n    );\r\n  }\r\n\r\n  handleChange(value, options) {\r\n    const {\r\n      wizardSettings: { steps },\r\n      input: { onChange },\r\n      change,\r\n      resetFields,\r\n      values,\r\n      mainObject,\r\n      onChangeValidate\r\n    } = this.props;\r\n    if (resetFields && change) {\r\n      resetFields.map((f) => change(f, false));\r\n    }\r\n\r\n    onChange(value);\r\n    if (onChangeValidate) onChangeValidate(value, this.props);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      t,\r\n      className,\r\n      disabled = false,\r\n      input: { value, onChange, ...input },\r\n      type,\r\n      label,\r\n      hide_sublabel,\r\n      values,\r\n      checked = false,\r\n      onChangeValidate,\r\n    } = this.props;\r\n    return (\r\n      <Checkbox\r\n        {...{ className }}\r\n        disabled={isFunction(disabled) ? disabled(this.props) : disabled}\r\n        onChange={\r\n          this.handleChange.bind(this)\r\n        }\r\n        {...input}\r\n        checked={\r\n          (checked != undefined && isFunction(checked) && checked(this.props)) ||\r\n          value\r\n            ? true\r\n            : false\r\n        }\r\n      >\r\n        {\" \"}\r\n        {!hide_sublabel && t(label)}{\" \"}\r\n      </Checkbox>\r\n    );\r\n  }\r\n}\r\n\r\n//export default withTranslation('labels')(booleanComp)\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\nexport default connector(withTranslation(\"messages\", \"labels\")(booleanComp));\r\n","import { get } from \"lodash\";\r\nimport { formValueSelector } from \"redux-form\";\r\nimport { copyUser } from \"./fields/identify/Component/common/common_func\";\r\nexport const mapStateToProps = (\r\n  {\r\n    wizard: {\r\n      currentStep,\r\n      wizardSettings,\r\n      steps,\r\n      mainObject,\r\n      comments,\r\n      currentModule,\r\n    },\r\n    selectors = {},\r\n    mainApp,\r\n    user,\r\n    mapViewer,\r\n    ...state\r\n  },\r\n  { moduleName, path, value_key, ...props }\r\n) => {\r\n  return {\r\n    data: props.data || get(state, path),\r\n    lang: mainApp.language,\r\n    selectors,\r\n    apps: mainApp.apps,\r\n    info: get(mapViewer, \"info.info\", {}),\r\n    ...(selectors[moduleName] || {}),\r\n    value_key: get(selectors[moduleName], \"value_key\", value_key),\r\n    currentStep,\r\n    steps,\r\n    mainObject,\r\n    currentModule,\r\n    user: get(user, \"user\", {}),\r\n    comments,\r\n    wizardSettings,\r\n    //allNotes,\r\n    mainApp,\r\n    record: get(currentModule, \"record\") || [],\r\n  };\r\n};\r\n\r\nexport const mapDispatchToProps = (dispatch, { moduleName }) => {\r\n  return {\r\n    getValues(name = \"stepForm\") {\r\n      return formValueSelector(\"name\");\r\n    },\r\n    setSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}`,\r\n        data,\r\n      });\r\n    },\r\n    setValueLabelKeys: (label_key, value_key) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.label_key`,\r\n        data: label_key,\r\n      });\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.value_key`,\r\n        data: value_key,\r\n      });\r\n    },\r\n    setData: (data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.data`,\r\n        data,\r\n      });\r\n    },\r\n    addToData: (data, index, operation) => {\r\n      dispatch({\r\n        type: \"insertInArraySelectors\",\r\n        path: `${moduleName}.data`,\r\n        operation,\r\n        index,\r\n        data,\r\n      });\r\n    },\r\n    setNextUrl: (nextUrl) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: `${moduleName}.links.nextLink`,\r\n        data: nextUrl,\r\n      });\r\n    },\r\n    addNewSelector: (moduleName, data) => {\r\n      dispatch({\r\n        type: \"setSelectors\",\r\n        path: moduleName,\r\n        data,\r\n      });\r\n    },\r\n    removeSelector: (moduleName) => {\r\n      dispatch({\r\n        type: \"removeSelectors\",\r\n        path: moduleName,\r\n      });\r\n    },\r\n    setCurrentModule: (data) => {\r\n      dispatch({\r\n        type: \"setWizard\",\r\n        path: \"currentModule\",\r\n        data,\r\n      });\r\n    },\r\n    removeMainObject: () => {\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"mainObject\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"currentStep\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"comments\",\r\n      });\r\n      dispatch({\r\n        type: \"removeWizard\",\r\n        path: \"allNotes\",\r\n      });\r\n    },\r\n    setMainObject: (data, step, user) => {\r\n      dispatch({\r\n        type: \"setWizard\",\r\n        path: `mainObject.${step}`,\r\n        data,\r\n      });\r\n\r\n      if (user) {\r\n        // user = { ...user, currentDate: moment().format(\"iYYYY/iM/iD\") };\r\n\r\n        dispatch({\r\n          type: \"setWizard\",\r\n          path: `mainObject.${step}.user`,\r\n          data: copyUser({ user }),\r\n        });\r\n      }\r\n    },\r\n  };\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAKA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACtsourceRoot":""}